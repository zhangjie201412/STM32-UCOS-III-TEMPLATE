cscope 16 $HOME\Desktop\ucos\UCOS-III-Template"               0001307862
	@BSP/bsp.c

1 
	~"°m32f10x.h
"

2 
	~"b•.h
"

3 
	~"°dio.h
"

6 #¥agm®
imp‹t
(
__u£_no_£miho°ög
)

8 
	s__FILE


10 
	mh™dÀ
;

16 
FILE
 
	g__°dout
;

17 
	$_sys_exô
(
x
)

19 
x
 = x;

20 
	}
}

22 
	$Âutc
(
ch
, 
FILE
 *
f
)

25 (
PC_USART
->
SR
 & 0x40) == 0);

26 
PC_USART
->
DR
 = (
u8
)
ch
;

27  
ch
;

28 
	}
}

40 
	$RCC_C⁄figuøti⁄
()

42 
	`Sy°emInô
();

43 
	}
}

46 
	$U«bÀJTAG
()

49 
RCC
->
APB2ENR
 |
RCC_APB2ENR_AFIOEN
;

50 
AFIO
->
MAPR
 &= ~(7UL<<24);

51 
AFIO
->
MAPR
 |= (4UL<<24);

52 
	}
}

54 
	$BSP_Inô
()

57 
	`RCC_C⁄figuøti⁄
();

59 
	`GPIO_C⁄figuøti⁄
();

60 
	`USART_C⁄fig
(115200);

62 
	`NVIC_C⁄figuøti⁄
();

64 
	}
}

75 
	$GPIO_C⁄figuøti⁄
()

78 
	}
}

88 
	$NVIC_C⁄figuøti⁄
()

90 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

92 
	`NVIC_Pri‹ôyGroupC⁄fig
(
NVIC_Pri‹ôyGroup_3
);

94 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART3_IRQn
;

95 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

96 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

97 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

98 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

100 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART1_IRQn
;

101 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

102 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

103 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

104 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

106 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
UART4_IRQn
;

107 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

108 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

109 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

110 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

112 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART2_IRQn
;

113 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

114 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

115 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

116 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

117 
	}
}

119 
	$USART_C⁄fig
(
u32
 
baud
)

121 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

122 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

123 i‡(
PC_USARTAPB
 =
APB1
)

125 
	`RCC_APB2PîùhClockCmd
(
RCC_APBxPîùh_PC_USART_IO
 | 
RCC_APB2Pîùh_AFIO
,
ENABLE
);

126 
	`RCC_APB1PîùhClockCmd
(
RCC_APBxPîùh_PC_USART
,
ENABLE
);

130 
	`RCC_APB2PîùhClockCmd
(
RCC_APBxPîùh_PC_USART_IO
 | 
RCC_APBxPîùh_PC_USART
 | 
RCC_APB2Pîùh_AFIO
,
ENABLE
);

132 i‡(
PC_PöRem≠
 =
ENABLE
)

134 
	`GPIO_PöRem≠C⁄fig
(
GPIO_Rem≠_USART2
,
ENABLE
);

136 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
PC_USART_TXD
;

137 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

138 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

139 
	`GPIO_Inô
(
PC_USART_IO
,&
GPIO_InôSåu˘uª
);

141 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
PC_USART_RXD
;

142 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

143 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

144 
	`GPIO_Inô
(
PC_USART_IO
,&
GPIO_InôSåu˘uª
);

146 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
baud
;

147 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

148 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

149 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

150 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ;

151 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
|
USART_Mode_Tx
;

152 
	`USART_Inô
(
PC_USART
,&
USART_InôSåu˘uª
);

156 
	`NVIC_C⁄figuøti⁄
();

157 
	`USART_ITC⁄fig
(
PC_USART
, 
USART_IT_RXNE
, 
ENABLE
);

159 
	`USART_Cmd
(
PC_USART
,
ENABLE
);

160 
	}
}

162 #ifde‡ 
DEBUG


172 
	$as£π_Áûed
(
u8
* 
fûe
, 
u32
 
löe
)

181 
	}
}

	@BSP/bsp.h

1 #i‚de‡
__BSP_H__


2 
	#__BSP_H__


	)

4 
	~"°m32f10x.h
"

7 
	mAPB1
 = 0,

8 
	mAPB2


9 } 
	tAPBTy≥
;

11 
	#RCC_APBxPîùh_PC_USART_IO
 
RCC_APB2Pîùh_GPIOA


	)

12 
	#RCC_APBxPîùh_PC_USART
 
RCC_APB1Pîùh_USART2


	)

13 
	#PC_USART_TXD
 
GPIO_Pö_2


	)

14 
	#PC_USART_RXD
 
GPIO_Pö_3


	)

15 
	#PC_USART_IO
 
GPIOA


	)

16 
	#PC_USART
 
USART2


	)

17 
	#PC_PöRem≠
 
DISABLE


	)

18 
	#PC_USARTAPB
 
APB1


	)

20 
RCC_C⁄figuøti⁄
();

21 
GPIO_C⁄figuøti⁄
();

22 
NVIC_C⁄figuøti⁄
();

23 
BSP_Inô
();

24 
USART_C⁄fig
(
u32
 
baud
);

	@CORE/core_cm3.c

24 
	~<°döt.h
>

27 #i‡
deföed
 ( 
__CC_ARM
 )

28 
	#__ASM
 
__asm


	)

29 
	#__INLINE
 
__ölöe


	)

31 #ñi‡
deföed
 ( 
__ICCARM__
 )

32 
	#__ASM
 
__asm


	)

33 
	#__INLINE
 
ölöe


	)

35 #ñi‡
deföed
 ( 
__GNUC__
 )

36 
	#__ASM
 
__asm


	)

37 
	#__INLINE
 
ölöe


	)

39 #ñi‡
deföed
 ( 
__TASKING__
 )

40 
	#__ASM
 
__asm


	)

41 
	#__INLINE
 
ölöe


	)

48 #i‡
deföed
 ( 
__CC_ARM
 )

58 
__ASM
 
uöt32_t
 
	$__gë_PSP
()

60 
mrs
 
r0
, 
p•


61 
bx
 
Ã


62 
	}
}

72 
__ASM
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

74 
m§
 
p•
, 
r0


75 
bx
 
Ã


76 
	}
}

86 
__ASM
 
uöt32_t
 
	$__gë_MSP
()

88 
mrs
 
r0
, 
m•


89 
bx
 
Ã


90 
	}
}

100 
__ASM
 
	$__£t_MSP
(
uöt32_t
 
maöSèckPoöãr
)

102 
m§
 
m•
, 
r0


103 
bx
 
Ã


104 
	}
}

114 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__ASM
 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡(
__ARMCC_VERSION
 < 400000)

142 
__ASM
 
	$__CLREX
()

144 
˛ªx


145 
	}
}

154 
__ASM
 
uöt32_t
 
	$__gë_BASEPRI
()

156 
mrs
 
r0
, 
ba£¥i


157 
bx
 
Ã


158 
	}
}

167 
__ASM
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

169 
m§
 
ba£¥i
, 
r0


170 
bx
 
Ã


171 
	}
}

180 
__ASM
 
uöt32_t
 
	$__gë_PRIMASK
()

182 
mrs
 
r0
, 
¥imask


183 
bx
 
Ã


184 
	}
}

193 
__ASM
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

195 
m§
 
¥imask
, 
r0


196 
bx
 
Ã


197 
	}
}

206 
__ASM
 
uöt32_t
 
	$__gë_FAULTMASK
()

208 
mrs
 
r0
, 
Áu…mask


209 
bx
 
Ã


210 
	}
}

219 
__ASM
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

221 
m§
 
Áu…mask
, 
r0


222 
bx
 
Ã


223 
	}
}

232 
__ASM
 
uöt32_t
 
	$__gë_CONTROL
()

234 
mrs
 
r0
, 
c⁄åﬁ


235 
bx
 
Ã


236 
	}
}

245 
__ASM
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

247 
m§
 
c⁄åﬁ
, 
r0


248 
bx
 
Ã


249 
	}
}

255 #ñi‡(
deföed
 (
__ICCARM__
))

257 #¥agm®
düg_suµªss
=
Pe940


266 
uöt32_t
 
	$__gë_PSP
()

268 
	`__ASM
("mrsÑ0,Ösp");

269 
	`__ASM
("bxÜr");

270 
	}
}

280 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

282 
	`__ASM
("msrÖsp,Ñ0");

283 
	`__ASM
("bxÜr");

284 
	}
}

294 
uöt32_t
 
	$__gë_MSP
()

296 
	`__ASM
("mrsÑ0, msp");

297 
	`__ASM
("bxÜr");

298 
	}
}

308 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

310 
	`__ASM
("msr msp,Ñ0");

311 
	`__ASM
("bxÜr");

312 
	}
}

322 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

324 
	`__ASM
("rev16Ñ0,Ñ0");

325 
	`__ASM
("bxÜr");

326 
	}
}

336 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

338 
	`__ASM
("rbitÑ0,Ñ0");

339 
	`__ASM
("bxÜr");

340 
	}
}

350 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

352 
	`__ASM
("ldrexbÑ0, [r0]");

353 
	`__ASM
("bxÜr");

354 
	}
}

364 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

366 
	`__ASM
("ldrexhÑ0, [r0]");

367 
	`__ASM
("bxÜr");

368 
	}
}

378 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

380 
	`__ASM
("ldrexÑ0, [r0]");

381 
	`__ASM
("bxÜr");

382 
	}
}

393 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

395 
	`__ASM
("strexbÑ0,Ñ0, [r1]");

396 
	`__ASM
("bxÜr");

397 
	}
}

408 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

410 
	`__ASM
("strexhÑ0,Ñ0, [r1]");

411 
	`__ASM
("bxÜr");

412 
	}
}

423 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

425 
	`__ASM
("strexÑ0,Ñ0, [r1]");

426 
	`__ASM
("bxÜr");

427 
	}
}

429 #¥agm®
düg_deÁu…
=
Pe940


432 #ñi‡(
deföed
 (
__GNUC__
))

442 
uöt32_t
 
	$__gë_PSP
(Ë
	`__©åibuã__
––
«ked
 ) );

443 
uöt32_t
 
	$__gë_PSP
()

445 
uöt32_t
 
ªsu…
=0;

447 
__ASM
 volatile ("MRS %0,Ösp\n\t"

449 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

450 (
ªsu…
);

451 
	}
}

461 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
Ë
	`__©åibuã__
––
«ked
 ) );

462 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

464 
__ASM
 volatile ("MSRÖsp, %0\n\t"

465 "BXÜ∏ \n\t" : : "r" (
t›OfProcSèck
) );

466 
	}
}

476 
uöt32_t
 
	$__gë_MSP
(Ë
	`__©åibuã__
––
«ked
 ) );

477 
uöt32_t
 
	$__gë_MSP
()

479 
uöt32_t
 
ªsu…
=0;

481 
__ASM
 volatile ("MRS %0, msp\n\t"

483 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

484 (
ªsu…
);

485 
	}
}

495 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
Ë
	`__©åibuã__
––
«ked
 ) );

496 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

498 
__ASM
 volatile ("MSR msp, %0\n\t"

499 "BXÜ∏ \n\t" : : "r" (
t›OfMaöSèck
) );

500 
	}
}

509 
uöt32_t
 
	$__gë_BASEPRI
()

511 
uöt32_t
 
ªsu…
=0;

513 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

514 (
ªsu…
);

515 
	}
}

524 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

526 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

527 
	}
}

536 
uöt32_t
 
	$__gë_PRIMASK
()

538 
uöt32_t
 
ªsu…
=0;

540 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

541 (
ªsu…
);

542 
	}
}

551 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

553 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

554 
	}
}

563 
uöt32_t
 
	$__gë_FAULTMASK
()

565 
uöt32_t
 
ªsu…
=0;

567 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

568 (
ªsu…
);

569 
	}
}

578 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

580 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

581 
	}
}

590 
uöt32_t
 
	$__gë_CONTROL
()

592 
uöt32_t
 
ªsu…
=0;

594 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

595 (
ªsu…
);

596 
	}
}

605 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

607 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

608 
	}
}

619 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

621 
uöt32_t
 
ªsu…
=0;

623 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

624 (
ªsu…
);

625 
	}
}

635 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

637 
uöt32_t
 
ªsu…
=0;

639 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

640 (
ªsu…
);

641 
	}
}

651 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

653 
uöt32_t
 
ªsu…
=0;

655 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

656 (
ªsu…
);

657 
	}
}

667 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

669 
uöt32_t
 
ªsu…
=0;

671 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

672 (
ªsu…
);

673 
	}
}

683 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

685 
uöt8_t
 
ªsu…
=0;

687 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

688 (
ªsu…
);

689 
	}
}

699 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

701 
uöt16_t
 
ªsu…
=0;

703 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

704 (
ªsu…
);

705 
	}
}

715 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

717 
uöt32_t
 
ªsu…
=0;

719 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

720 (
ªsu…
);

721 
	}
}

732 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

734 
uöt32_t
 
ªsu…
=0;

736 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

737 (
ªsu…
);

738 
	}
}

749 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

751 
uöt32_t
 
ªsu…
=0;

753 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

754 (
ªsu…
);

755 
	}
}

766 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

768 
uöt32_t
 
ªsu…
=0;

770 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

771 (
ªsu…
);

772 
	}
}

775 #ñi‡(
deföed
 (
__TASKING__
))

	@CORE/core_cm3.h

24 #i‚de‡
__CM3_CORE_H__


25 
	#__CM3_CORE_H__


	)

80 #ifde‡
__˝lu•lus


84 
	#__CM3_CMSIS_VERSION_MAIN
 (0x01Ë

	)

85 
	#__CM3_CMSIS_VERSION_SUB
 (0x30Ë

	)

86 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM3_CMSIS_VERSION_SUB
Ë

	)

88 
	#__CORTEX_M
 (0x03Ë

	)

90 
	~<°döt.h
>

92 #i‡
deföed
 (
__ICCARM__
)

93 
	~<öåösics.h
>

97 #i‚de‡
__NVIC_PRIO_BITS


98 
	#__NVIC_PRIO_BITS
 4

	)

110 #ifde‡
__˝lu•lus


111 
	#__I
 vﬁ©ûê

	)

113 
	#__I
 vﬁ©ûêc⁄°

	)

115 
	#__O
 vﬁ©ûê

	)

116 
	#__IO
 vﬁ©ûê

	)

134 
__IO
 
uöt32_t
 
ISER
[8];

135 
uöt32_t
 
RESERVED0
[24];

136 
__IO
 
uöt32_t
 
ICER
[8];

137 
uöt32_t
 
RSERVED1
[24];

138 
__IO
 
uöt32_t
 
ISPR
[8];

139 
uöt32_t
 
RESERVED2
[24];

140 
__IO
 
uöt32_t
 
ICPR
[8];

141 
uöt32_t
 
RESERVED3
[24];

142 
__IO
 
uöt32_t
 
IABR
[8];

143 
uöt32_t
 
RESERVED4
[56];

144 
__IO
 
uöt8_t
 
IP
[240];

145 
uöt32_t
 
RESERVED5
[644];

146 
__O
 
uöt32_t
 
STIR
;

147 } 
	tNVIC_Ty≥
;

157 
__I
 
uöt32_t
 
CPUID
;

158 
__IO
 
uöt32_t
 
ICSR
;

159 
__IO
 
uöt32_t
 
VTOR
;

160 
__IO
 
uöt32_t
 
AIRCR
;

161 
__IO
 
uöt32_t
 
SCR
;

162 
__IO
 
uöt32_t
 
CCR
;

163 
__IO
 
uöt8_t
 
SHP
[12];

164 
__IO
 
uöt32_t
 
SHCSR
;

165 
__IO
 
uöt32_t
 
CFSR
;

166 
__IO
 
uöt32_t
 
HFSR
;

167 
__IO
 
uöt32_t
 
DFSR
;

168 
__IO
 
uöt32_t
 
MMFAR
;

169 
__IO
 
uöt32_t
 
BFAR
;

170 
__IO
 
uöt32_t
 
AFSR
;

171 
__I
 
uöt32_t
 
PFR
[2];

172 
__I
 
uöt32_t
 
DFR
;

173 
__I
 
uöt32_t
 
ADR
;

174 
__I
 
uöt32_t
 
MMFR
[4];

175 
__I
 
uöt32_t
 
ISAR
[5];

176 } 
	tSCB_Ty≥
;

179 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

180 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFu»<< 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

182 
	#SCB_CPUID_VARIANT_Pos
 20

	)

183 
	#SCB_CPUID_VARIANT_Msk
 (0xFu»<< 
SCB_CPUID_VARIANT_Pos
Ë

	)

185 
	#SCB_CPUID_PARTNO_Pos
 4

	)

186 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFu»<< 
SCB_CPUID_PARTNO_Pos
Ë

	)

188 
	#SCB_CPUID_REVISION_Pos
 0

	)

189 
	#SCB_CPUID_REVISION_Msk
 (0xFu»<< 
SCB_CPUID_REVISION_Pos
Ë

	)

192 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

193 
	#SCB_ICSR_NMIPENDSET_Msk
 (1u»<< 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

195 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

196 
	#SCB_ICSR_PENDSVSET_Msk
 (1u»<< 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

198 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

199 
	#SCB_ICSR_PENDSVCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

201 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

202 
	#SCB_ICSR_PENDSTSET_Msk
 (1u»<< 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

204 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

205 
	#SCB_ICSR_PENDSTCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

207 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

208 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1u»<< 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

210 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

211 
	#SCB_ICSR_ISRPENDING_Msk
 (1u»<< 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

213 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

214 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

216 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

217 
	#SCB_ICSR_RETTOBASE_Msk
 (1u»<< 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

219 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

220 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

223 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

224 
	#SCB_VTOR_TBLBASE_Msk
 (0x1FFu»<< 
SCB_VTOR_TBLBASE_Pos
Ë

	)

226 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

227 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFu»<< 
SCB_VTOR_TBLOFF_Pos
Ë

	)

230 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

231 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

233 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

234 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

236 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

237 
	#SCB_AIRCR_ENDIANESS_Msk
 (1u»<< 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

239 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

240 
	#SCB_AIRCR_PRIGROUP_Msk
 (7u»<< 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

242 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

243 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1u»<< 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

245 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

246 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1u»<< 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

248 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

249 
	#SCB_AIRCR_VECTRESET_Msk
 (1u»<< 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

252 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

253 
	#SCB_SCR_SEVONPEND_Msk
 (1u»<< 
SCB_SCR_SEVONPEND_Pos
Ë

	)

255 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

256 
	#SCB_SCR_SLEEPDEEP_Msk
 (1u»<< 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

258 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

259 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1u»<< 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

262 
	#SCB_CCR_STKALIGN_Pos
 9

	)

263 
	#SCB_CCR_STKALIGN_Msk
 (1u»<< 
SCB_CCR_STKALIGN_Pos
Ë

	)

265 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

266 
	#SCB_CCR_BFHFNMIGN_Msk
 (1u»<< 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

268 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

269 
	#SCB_CCR_DIV_0_TRP_Msk
 (1u»<< 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

271 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

272 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1u»<< 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

274 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

275 
	#SCB_CCR_USERSETMPEND_Msk
 (1u»<< 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

277 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

278 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1u»<< 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

281 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

282 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

284 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

285 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

287 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

288 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

290 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

291 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1u»<< 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

293 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

294 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

296 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

297 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

299 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

300 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

302 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

303 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1u»<< 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

305 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

306 
	#SCB_SHCSR_PENDSVACT_Msk
 (1u»<< 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

308 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

309 
	#SCB_SHCSR_MONITORACT_Msk
 (1u»<< 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

311 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

312 
	#SCB_SHCSR_SVCALLACT_Msk
 (1u»<< 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

314 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

315 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

317 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

318 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

320 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

321 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

324 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

325 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFu»<< 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

327 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

328 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

330 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

331 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

334 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

335 
	#SCB_HFSR_DEBUGEVT_Msk
 (1u»<< 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

337 
	#SCB_HFSR_FORCED_Pos
 30

	)

338 
	#SCB_HFSR_FORCED_Msk
 (1u»<< 
SCB_HFSR_FORCED_Pos
Ë

	)

340 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

341 
	#SCB_HFSR_VECTTBL_Msk
 (1u»<< 
SCB_HFSR_VECTTBL_Pos
Ë

	)

344 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

345 
	#SCB_DFSR_EXTERNAL_Msk
 (1u»<< 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

347 
	#SCB_DFSR_VCATCH_Pos
 3

	)

348 
	#SCB_DFSR_VCATCH_Msk
 (1u»<< 
SCB_DFSR_VCATCH_Pos
Ë

	)

350 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

351 
	#SCB_DFSR_DWTTRAP_Msk
 (1u»<< 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

353 
	#SCB_DFSR_BKPT_Pos
 1

	)

354 
	#SCB_DFSR_BKPT_Msk
 (1u»<< 
SCB_DFSR_BKPT_Pos
Ë

	)

356 
	#SCB_DFSR_HALTED_Pos
 0

	)

357 
	#SCB_DFSR_HALTED_Msk
 (1u»<< 
SCB_DFSR_HALTED_Pos
Ë

	)

367 
__IO
 
uöt32_t
 
CTRL
;

368 
__IO
 
uöt32_t
 
LOAD
;

369 
__IO
 
uöt32_t
 
VAL
;

370 
__I
 
uöt32_t
 
CALIB
;

371 } 
	tSysTick_Ty≥
;

374 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

375 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1u»<< 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

377 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

378 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1u»<< 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

380 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

381 
	#SysTick_CTRL_TICKINT_Msk
 (1u»<< 
SysTick_CTRL_TICKINT_Pos
Ë

	)

383 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

384 
	#SysTick_CTRL_ENABLE_Msk
 (1u»<< 
SysTick_CTRL_ENABLE_Pos
Ë

	)

387 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

388 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFu»<< 
SysTick_LOAD_RELOAD_Pos
Ë

	)

391 
	#SysTick_VAL_CURRENT_Pos
 0

	)

392 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

395 
	#SysTick_CALIB_NOREF_Pos
 31

	)

396 
	#SysTick_CALIB_NOREF_Msk
 (1u»<< 
SysTick_CALIB_NOREF_Pos
Ë

	)

398 
	#SysTick_CALIB_SKEW_Pos
 30

	)

399 
	#SysTick_CALIB_SKEW_Msk
 (1u»<< 
SysTick_CALIB_SKEW_Pos
Ë

	)

401 
	#SysTick_CALIB_TENMS_Pos
 0

	)

402 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

412 
__O
 union

414 
__O
 
uöt8_t
 
u8
;

415 
__O
 
uöt16_t
 
u16
;

416 
__O
 
uöt32_t
 
u32
;

417 } 
PORT
 [32];

418 
uöt32_t
 
RESERVED0
[864];

419 
__IO
 
uöt32_t
 
TER
;

420 
uöt32_t
 
RESERVED1
[15];

421 
__IO
 
uöt32_t
 
TPR
;

422 
uöt32_t
 
RESERVED2
[15];

423 
__IO
 
uöt32_t
 
TCR
;

424 
uöt32_t
 
RESERVED3
[29];

425 
__IO
 
uöt32_t
 
IWR
;

426 
__IO
 
uöt32_t
 
IRR
;

427 
__IO
 
uöt32_t
 
IMCR
;

428 
uöt32_t
 
RESERVED4
[43];

429 
__IO
 
uöt32_t
 
LAR
;

430 
__IO
 
uöt32_t
 
LSR
;

431 
uöt32_t
 
RESERVED5
[6];

432 
__I
 
uöt32_t
 
PID4
;

433 
__I
 
uöt32_t
 
PID5
;

434 
__I
 
uöt32_t
 
PID6
;

435 
__I
 
uöt32_t
 
PID7
;

436 
__I
 
uöt32_t
 
PID0
;

437 
__I
 
uöt32_t
 
PID1
;

438 
__I
 
uöt32_t
 
PID2
;

439 
__I
 
uöt32_t
 
PID3
;

440 
__I
 
uöt32_t
 
CID0
;

441 
__I
 
uöt32_t
 
CID1
;

442 
__I
 
uöt32_t
 
CID2
;

443 
__I
 
uöt32_t
 
CID3
;

444 } 
	tITM_Ty≥
;

447 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

448 
	#ITM_TPR_PRIVMASK_Msk
 (0xFu»<< 
ITM_TPR_PRIVMASK_Pos
Ë

	)

451 
	#ITM_TCR_BUSY_Pos
 23

	)

452 
	#ITM_TCR_BUSY_Msk
 (1u»<< 
ITM_TCR_BUSY_Pos
Ë

	)

454 
	#ITM_TCR_ATBID_Pos
 16

	)

455 
	#ITM_TCR_ATBID_Msk
 (0x7Fu»<< 
ITM_TCR_ATBID_Pos
Ë

	)

457 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

458 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3u»<< 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

460 
	#ITM_TCR_SWOENA_Pos
 4

	)

461 
	#ITM_TCR_SWOENA_Msk
 (1u»<< 
ITM_TCR_SWOENA_Pos
Ë

	)

463 
	#ITM_TCR_DWTENA_Pos
 3

	)

464 
	#ITM_TCR_DWTENA_Msk
 (1u»<< 
ITM_TCR_DWTENA_Pos
Ë

	)

466 
	#ITM_TCR_SYNCENA_Pos
 2

	)

467 
	#ITM_TCR_SYNCENA_Msk
 (1u»<< 
ITM_TCR_SYNCENA_Pos
Ë

	)

469 
	#ITM_TCR_TSENA_Pos
 1

	)

470 
	#ITM_TCR_TSENA_Msk
 (1u»<< 
ITM_TCR_TSENA_Pos
Ë

	)

472 
	#ITM_TCR_ITMENA_Pos
 0

	)

473 
	#ITM_TCR_ITMENA_Msk
 (1u»<< 
ITM_TCR_ITMENA_Pos
Ë

	)

476 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

477 
	#ITM_IWR_ATVALIDM_Msk
 (1u»<< 
ITM_IWR_ATVALIDM_Pos
Ë

	)

480 
	#ITM_IRR_ATREADYM_Pos
 0

	)

481 
	#ITM_IRR_ATREADYM_Msk
 (1u»<< 
ITM_IRR_ATREADYM_Pos
Ë

	)

484 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

485 
	#ITM_IMCR_INTEGRATION_Msk
 (1u»<< 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

488 
	#ITM_LSR_ByãAcc_Pos
 2

	)

489 
	#ITM_LSR_ByãAcc_Msk
 (1u»<< 
ITM_LSR_ByãAcc_Pos
Ë

	)

491 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

492 
	#ITM_LSR_Ac˚ss_Msk
 (1u»<< 
ITM_LSR_Ac˚ss_Pos
Ë

	)

494 
	#ITM_LSR_Pª£¡_Pos
 0

	)

495 
	#ITM_LSR_Pª£¡_Msk
 (1u»<< 
ITM_LSR_Pª£¡_Pos
Ë

	)

505 
uöt32_t
 
RESERVED0
;

506 
__I
 
uöt32_t
 
ICTR
;

507 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

508 
__IO
 
uöt32_t
 
ACTLR
;

510 
uöt32_t
 
RESERVED1
;

512 } 
	tI¡îru±Ty≥_Ty≥
;

515 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
 0

	)

516 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Msk
 (0x1Fu»<< 
I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
Ë

	)

519 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Pos
 2

	)

520 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISFOLD_Pos
Ë

	)

522 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
 1

	)

523 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
Ë

	)

525 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
 0

	)

526 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
Ë

	)

530 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

537 
__I
 
uöt32_t
 
TYPE
;

538 
__IO
 
uöt32_t
 
CTRL
;

539 
__IO
 
uöt32_t
 
RNR
;

540 
__IO
 
uöt32_t
 
RBAR
;

541 
__IO
 
uöt32_t
 
RASR
;

542 
__IO
 
uöt32_t
 
RBAR_A1
;

543 
__IO
 
uöt32_t
 
RASR_A1
;

544 
__IO
 
uöt32_t
 
RBAR_A2
;

545 
__IO
 
uöt32_t
 
RASR_A2
;

546 
__IO
 
uöt32_t
 
RBAR_A3
;

547 
__IO
 
uöt32_t
 
RASR_A3
;

548 } 
	tMPU_Ty≥
;

551 
	#MPU_TYPE_IREGION_Pos
 16

	)

552 
	#MPU_TYPE_IREGION_Msk
 (0xFFu»<< 
MPU_TYPE_IREGION_Pos
Ë

	)

554 
	#MPU_TYPE_DREGION_Pos
 8

	)

555 
	#MPU_TYPE_DREGION_Msk
 (0xFFu»<< 
MPU_TYPE_DREGION_Pos
Ë

	)

557 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

558 
	#MPU_TYPE_SEPARATE_Msk
 (1u»<< 
MPU_TYPE_SEPARATE_Pos
Ë

	)

561 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

562 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1u»<< 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

564 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

565 
	#MPU_CTRL_HFNMIENA_Msk
 (1u»<< 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

567 
	#MPU_CTRL_ENABLE_Pos
 0

	)

568 
	#MPU_CTRL_ENABLE_Msk
 (1u»<< 
MPU_CTRL_ENABLE_Pos
Ë

	)

571 
	#MPU_RNR_REGION_Pos
 0

	)

572 
	#MPU_RNR_REGION_Msk
 (0xFFu»<< 
MPU_RNR_REGION_Pos
Ë

	)

575 
	#MPU_RBAR_ADDR_Pos
 5

	)

576 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFu»<< 
MPU_RBAR_ADDR_Pos
Ë

	)

578 
	#MPU_RBAR_VALID_Pos
 4

	)

579 
	#MPU_RBAR_VALID_Msk
 (1u»<< 
MPU_RBAR_VALID_Pos
Ë

	)

581 
	#MPU_RBAR_REGION_Pos
 0

	)

582 
	#MPU_RBAR_REGION_Msk
 (0xFu»<< 
MPU_RBAR_REGION_Pos
Ë

	)

585 
	#MPU_RASR_XN_Pos
 28

	)

586 
	#MPU_RASR_XN_Msk
 (1u»<< 
MPU_RASR_XN_Pos
Ë

	)

588 
	#MPU_RASR_AP_Pos
 24

	)

589 
	#MPU_RASR_AP_Msk
 (7u»<< 
MPU_RASR_AP_Pos
Ë

	)

591 
	#MPU_RASR_TEX_Pos
 19

	)

592 
	#MPU_RASR_TEX_Msk
 (7u»<< 
MPU_RASR_TEX_Pos
Ë

	)

594 
	#MPU_RASR_S_Pos
 18

	)

595 
	#MPU_RASR_S_Msk
 (1u»<< 
MPU_RASR_S_Pos
Ë

	)

597 
	#MPU_RASR_C_Pos
 17

	)

598 
	#MPU_RASR_C_Msk
 (1u»<< 
MPU_RASR_C_Pos
Ë

	)

600 
	#MPU_RASR_B_Pos
 16

	)

601 
	#MPU_RASR_B_Msk
 (1u»<< 
MPU_RASR_B_Pos
Ë

	)

603 
	#MPU_RASR_SRD_Pos
 8

	)

604 
	#MPU_RASR_SRD_Msk
 (0xFFu»<< 
MPU_RASR_SRD_Pos
Ë

	)

606 
	#MPU_RASR_SIZE_Pos
 1

	)

607 
	#MPU_RASR_SIZE_Msk
 (0x1Fu»<< 
MPU_RASR_SIZE_Pos
Ë

	)

609 
	#MPU_RASR_ENA_Pos
 0

	)

610 
	#MPU_RASR_ENA_Msk
 (0x1Fu»<< 
MPU_RASR_ENA_Pos
Ë

	)

622 
__IO
 
uöt32_t
 
DHCSR
;

623 
__O
 
uöt32_t
 
DCRSR
;

624 
__IO
 
uöt32_t
 
DCRDR
;

625 
__IO
 
uöt32_t
 
DEMCR
;

626 } 
	tC‹eDebug_Ty≥
;

629 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

630 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFu»<< 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

632 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

633 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

635 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

636 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

638 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

639 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

641 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

642 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

644 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

645 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

647 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

648 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

650 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

651 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

653 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

654 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

656 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

657 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

659 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

660 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

662 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

663 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

666 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

667 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1u»<< 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

669 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

670 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1Fu»<< 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

673 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

674 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1u»<< 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

676 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

677 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

679 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

680 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

682 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

683 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

685 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

686 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

688 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

689 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

691 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

692 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

694 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

695 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

697 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

698 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

700 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

701 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

703 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

704 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

706 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

707 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

709 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

710 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

715 
	#SCS_BASE
 (0xE000E000Ë

	)

716 
	#ITM_BASE
 (0xE0000000Ë

	)

717 
	#C‹eDebug_BASE
 (0xE000EDF0Ë

	)

718 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010Ë

	)

719 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100Ë

	)

720 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00Ë

	)

722 
	#I¡îru±Ty≥
 ((
I¡îru±Ty≥_Ty≥
 *Ë
SCS_BASE
Ë

	)

723 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
Ë

	)

724 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
Ë

	)

725 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
Ë

	)

726 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
Ë

	)

727 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

729 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

730 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90Ë

	)

731 
	#MPU
 ((
MPU_Ty≥
*Ë
MPU_BASE
Ë

	)

741 #i‡
deföed
 ( 
__CC_ARM
 )

742 
	#__ASM
 
__asm


	)

743 
	#__INLINE
 
__ölöe


	)

745 #ñi‡
deföed
 ( 
__ICCARM__
 )

746 
	#__ASM
 
__asm


	)

747 
	#__INLINE
 
ölöe


	)

749 #ñi‡
deföed
 ( 
__GNUC__
 )

750 
	#__ASM
 
__asm


	)

751 
	#__INLINE
 
ölöe


	)

753 #ñi‡
deföed
 ( 
__TASKING__
 )

754 
	#__ASM
 
__asm


	)

755 
	#__INLINE
 
ölöe


	)

762 #i‡
deföed
 ( 
__CC_ARM
 )

765 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

766 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

768 
	#__NOP
 
__n›


	)

769 
	#__WFI
 
__wfi


	)

770 
	#__WFE
 
__w„


	)

771 
	#__SEV
 
__£v


	)

772 
	#__ISB
(Ë
	`__isb
(0)

	)

773 
	#__DSB
(Ë
	`__dsb
(0)

	)

774 
	#__DMB
(Ë
	`__dmb
(0)

	)

775 
	#__REV
 
__ªv


	)

776 
	#__RBIT
 
__rbô


	)

777 
	#__LDREXB
(
±r
Ë((Ë
	`__ldªx
’å))

	)

778 
	#__LDREXH
(
±r
Ë((Ë
	`__ldªx
’å))

	)

779 
	#__LDREXW
(
±r
Ë((Ë
	`__ldªx
’å))

	)

780 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

781 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

782 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

798 
uöt32_t
 
__gë_PSP
();

808 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

818 
uöt32_t
 
__gë_MSP
();

828 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

838 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

848 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

851 #i‡(
__ARMCC_VERSION
 < 400000)

858 
__CLREX
();

867 
uöt32_t
 
__gë_BASEPRI
();

876 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

885 
uöt32_t
 
__gë_PRIMASK
();

894 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

903 
uöt32_t
 
__gë_FAULTMASK
();

912 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

921 
uöt32_t
 
__gë_CONTROL
();

930 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

939 
	#__CLREX
 
__˛ªx


	)

948 
__INLINE
 
uöt32_t
 
__gë_BASEPRI
()

950 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

951 (
	g__ªgBa£Pri
);

961 
__INLINE
 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

963 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

964 
	g__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

974 
__INLINE
 
uöt32_t
 
__gë_PRIMASK
()

976 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

977 (
	g__ªgPriMask
);

987 
__INLINE
 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

989 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

990 
	g__ªgPriMask
 = (
¥iMask
);

1000 
__INLINE
 
uöt32_t
 
__gë_FAULTMASK
()

1002 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1003 (
	g__ªgFau…Mask
);

1013 
__INLINE
 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

1015 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1016 
	g__ªgFau…Mask
 = (
Áu…Mask
 & 1);

1026 
__INLINE
 
uöt32_t
 
__gë_CONTROL
()

1028 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1029 (
	g__ªgC⁄åﬁ
);

1039 
__INLINE
 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

1041 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1042 
	g__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

1049 #ñi‡(
deföed
 (
__ICCARM__
))

1052 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

1053 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

1055 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsie f"); }

1056 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsid f"); }

1058 
	#__NOP
 
__no_›î©i⁄


	)

1059 
__INLINE
 
__WFI
(Ë{ 
__ASM
 ("wfi"); }

1060 
__INLINE
 
__WFE
(Ë{ 
__ASM
 ("wfe"); }

1061 
__INLINE
 
__SEV
(Ë{ 
__ASM
 ("sev"); }

1062 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 ("clrex"); }

1084 
uöt32_t
 
__gë_PSP
();

1094 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1104 
uöt32_t
 
__gë_MSP
();

1114 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1124 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1134 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1144 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1154 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1164 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1175 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1186 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1197 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1201 #ñi‡(
deföed
 (
__GNUC__
))

1204 
__INLINE
 
__íabÀ_úq
(Ë{ 
__ASM
 volatile ("cpsie i"); }

1205 
__INLINE
 
__dißbÀ_úq
(Ë{ 
__ASM
 volatile ("cpsid i"); }

1207 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsie f"); }

1208 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsid f"); }

1210 
__INLINE
 
__NOP
(Ë{ 
__ASM
 volatile ("nop"); }

1211 
__INLINE
 
__WFI
(Ë{ 
__ASM
 volatile ("wfi"); }

1212 
__INLINE
 
__WFE
(Ë{ 
__ASM
 volatile ("wfe"); }

1213 
__INLINE
 
__SEV
(Ë{ 
__ASM
 volatile ("sev"); }

1214 
__INLINE
 
__ISB
(Ë{ 
__ASM
 volatile ("isb"); }

1215 
__INLINE
 
__DSB
(Ë{ 
__ASM
 volatile ("dsb"); }

1216 
__INLINE
 
__DMB
(Ë{ 
__ASM
 volatile ("dmb"); }

1217 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 volatile ("clrex"); }

1227 
uöt32_t
 
__gë_PSP
();

1237 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1247 
uöt32_t
 
__gë_MSP
();

1257 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1266 
uöt32_t
 
__gë_BASEPRI
();

1275 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

1284 
uöt32_t
 
__gë_PRIMASK
();

1293 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

1302 
uöt32_t
 
__gë_FAULTMASK
();

1311 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

1320 
uöt32_t
 
__gë_CONTROL
();

1329 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

1339 
uöt32_t
 
__REV
(uöt32_à
vÆue
);

1349 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1359 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

1369 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1379 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1389 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1399 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1410 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1421 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1432 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1435 #ñi‡(
deföed
 (
__TASKING__
))

1468 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1470 
uöt32_t
 
	gªg_vÆue
;

1471 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1473 
	gªg_vÆue
 = 
SCB
->
AIRCR
;

1474 
	gªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1475 
	gªg_vÆue
 = (
ªg_vÆue
 |

1476 (0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1477 (
Pri‹ôyGroupTmp
 << 8));

1478 
	gSCB
->
	gAIRCR
 = 
ªg_vÆue
;

1489 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1491  ((
	gSCB
->
	gAIRCR
 & 
	gSCB_AIRCR_PRIGROUP_Msk
Ë>> 
	gSCB_AIRCR_PRIGROUP_Pos
);

1502 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1504 
	gNVIC
->
	gISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1515 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1517 
	gNVIC
->
	gICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1529 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1531 ((
	guöt32_t
Ë((
	gNVIC
->
	gISPR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1542 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1544 
	gNVIC
->
	gISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1555 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1557 
	gNVIC
->
	gICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1569 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1571 ((
	guöt32_t
)((
	gNVIC
->
	gIABR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1586 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1588 if(
	gIRQn
 < 0) {

1589 
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1591 
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1609 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1612 if(
	gIRQn
 < 0) {

1613 ((
	guöt32_t
)(
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1615 ((
	guöt32_t
)(
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1634 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1636 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1637 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1638 
uöt32_t
 
	gSubPri‹ôyBôs
;

1640 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1641 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1644 ((
	gPªem±Pri‹ôy
 & ((1 << (
	gPªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
	gSubPri‹ôyBôs
) |

1645 ((
	gSubPri‹ôy
 & ((1 << (
	gSubPri‹ôyBôs
 )) - 1)))

1665 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1667 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1668 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1669 
uöt32_t
 
	gSubPri‹ôyBôs
;

1671 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1672 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1674 *
	gpPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1675 *
	gpSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1682 #i‡(!
deföed
 (
__Víd‹_SysTickC⁄fig
)) || (__Vendor_SysTickConfig == 0)

1694 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1696 i‡(
	gticks
 > 
	gSysTick_LOAD_RELOAD_Msk
)  (1);

1698 
	gSysTick
->
	gLOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1699 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1700 
	gSysTick
->
	gVAL
 = 0;

1701 
	gSysTick
->
	gCTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1702 
SysTick_CTRL_TICKINT_Msk
 |

1703 
SysTick_CTRL_ENABLE_Msk
;

1719 
__INLINE
 
NVIC_Sy°emRe£t
()

1721 
	gSCB
->
	gAIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1722 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1723 
SCB_AIRCR_SYSRESETREQ_Msk
);

1724 
__DSB
();

1742 vﬁ©ûê
ITM_RxBuf„r
;

1743 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1756 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1758 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1759 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1760 (
	gITM
->
	gTER
 & (1ul << 0) ) )

1762 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1763 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1765  (
	gch
);

1778 
__INLINE
 
ITM_Re˚iveCh¨
 () {

1779 
	gch
 = -1;

1781 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1782 
ch
 = 
ITM_RxBuf„r
;

1783 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1786  (
	gch
);

1798 
__INLINE
 
ITM_CheckCh¨
 () {

1800 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1810 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/misc.h

24 #i‚de‡
__MISC_H


25 
	#__MISC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt8_t
 
NVIC_IRQCh™√l
;

57 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

61 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

65 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

68 } 
	tNVIC_InôTy≥Def
;

115 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

116 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

117 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

118 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

127 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

128 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

129 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

130 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

131 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

132 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

141 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

143 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

145 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

147 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

149 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

152 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

155 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

156 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

158 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

160 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

162 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

172 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

173 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

174 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

175 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

196 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

197 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

198 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

199 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

200 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

202 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_adc.h

24 #i‚de‡
__STM32F10x_ADC_H


25 
	#__STM32F10x_ADC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
ADC_Mode
;

56 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

60 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

68 
uöt32_t
 
ADC_D©aAlign
;

71 
uöt8_t
 
ADC_NbrOfCh™√l
;

74 }
	tADC_InôTy≥Def
;

83 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

84 ((
PERIPH
Ë=
ADC2
) || \

85 ((
PERIPH
Ë=
ADC3
))

	)

87 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

88 ((
PERIPH
Ë=
ADC3
))

	)

94 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

95 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

96 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

97 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

98 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

99 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

100 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

101 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

102 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

103 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

105 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
) || \

106 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

107 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

108 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

109 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

110 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

111 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

112 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

113 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

114 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

	)

123 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000Ë

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000Ë

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000Ë

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000Ë

	)

128 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000Ë

	)

130 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000Ë

	)

133 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000Ë

	)

134 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000Ë

	)

135 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000Ë

	)

136 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

137 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000Ë

	)

138 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000Ë

	)

140 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

145 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

146 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

147 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

148 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

149 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

150 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

151 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

152 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

153 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

	)

162 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

163 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

164 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

165 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

174 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

175 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

176 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

177 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

178 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

179 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

180 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

181 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

182 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

183 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

184 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

185 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

186 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

187 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

188 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

189 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

190 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

191 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

193 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

194 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

196 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
) || \

197 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

198 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

199 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

200 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

201 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

202 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

203 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

204 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

	)

213 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

214 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

215 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

216 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

217 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

218 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

219 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

220 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

221 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
) || \

222 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

223 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

224 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

225 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

226 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

227 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

228 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

	)

237 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000Ë

	)

238 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000Ë

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000Ë

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

241 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000Ë

	)

243 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000Ë

	)

244 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000Ë

	)

245 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000Ë

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000Ë

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000Ë

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000Ë

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

251 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000Ë

	)

253 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

265 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

	)

274 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

275 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

276 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

277 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

278 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

281 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

290 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

291 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

292 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

293 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

294 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

295 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

296 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

298 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

304 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

313 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

314 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

315 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

317 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

319 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
) || \

320 ((
IT
Ë=
ADC_IT_JEOC
))

	)

329 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

330 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

331 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

332 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

333 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

334 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

335 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
) || \

336 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

337 ((
FLAG
Ë=
ADC_FLAG_STRT
))

	)

346 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

356 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

366 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

376 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

387 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

396 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

406 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

428 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

429 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

431 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

435 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

436 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

437 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

438 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

440 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

441 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

443 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

445 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

446 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

449 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

452 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

453 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

454 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

455 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

456 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

457 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

458 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

459 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

462 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

463 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

465 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_bkp.h

24 #i‚de‡
__STM32F10x_BKP_H


25 
	#__STM32F10x_BKP_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

59 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

60 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
) || \

61 ((
LEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

	)

70 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

71 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

72 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

73 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

74 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
) || \

75 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

76 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

77 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

	)

86 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

87 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

88 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

89 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

90 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

91 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

92 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

93 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

94 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

95 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

96 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

97 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

98 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

99 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

100 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

101 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

102 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

103 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

104 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

105 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

106 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

107 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

108 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

109 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

110 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

111 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

112 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

113 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

114 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

115 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

116 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

117 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

118 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

119 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

120 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

121 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

122 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

123 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

124 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

125 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

126 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

127 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

129 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
) || \

130 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

131 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

132 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

133 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

134 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

135 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

136 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

137 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

138 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

139 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

140 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

141 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

142 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

	)

144 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

165 
BKP_DeInô
();

166 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

167 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

169 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

170 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

171 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

172 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

173 
FœgSètus
 
BKP_GëFœgSètus
();

174 
BKP_CÀ¨Fœg
();

175 
ITSètus
 
BKP_GëITSètus
();

176 
BKP_CÀ¨ITPídögBô
();

178 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_can.h

24 #i‚de‡
__STM32F10x_CAN_H


25 
	#__STM32F10x_CAN_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
) || \

47 ((
PERIPH
Ë=
CAN2
))

	)

55 
uöt16_t
 
CAN_PªsˇÀr
;

58 
uöt8_t
 
CAN_Mode
;

62 
uöt8_t
 
CAN_SJW
;

68 
uöt8_t
 
CAN_BS1
;

72 
uöt8_t
 
CAN_BS2
;

77 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

81 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

85 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

89 
Fun˘i⁄ÆSèã
 
CAN_NART
;

93 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

97 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

100 } 
	tCAN_InôTy≥Def
;

108 
uöt16_t
 
CAN_FûãrIdHigh
;

112 
uöt16_t
 
CAN_FûãrIdLow
;

116 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

121 
uöt16_t
 
CAN_FûãrMaskIdLow
;

126 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

129 
uöt8_t
 
CAN_FûãrNumbî
;

131 
uöt8_t
 
CAN_FûãrMode
;

134 
uöt8_t
 
CAN_FûãrSˇÀ
;

137 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

139 } 
	tCAN_FûãrInôTy≥Def
;

147 
uöt32_t
 
StdId
;

150 
uöt32_t
 
ExtId
;

153 
uöt8_t
 
IDE
;

157 
uöt8_t
 
RTR
;

161 
uöt8_t
 
DLC
;

165 
uöt8_t
 
D©a
[8];

167 } 
	tC™TxMsg
;

175 
uöt32_t
 
StdId
;

178 
uöt32_t
 
ExtId
;

181 
uöt8_t
 
IDE
;

185 
uöt8_t
 
RTR
;

189 
uöt8_t
 
DLC
;

192 
uöt8_t
 
D©a
[8];

195 
uöt8_t
 
FMI
;

198 } 
	tC™RxMsg
;

212 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

213 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

223 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

224 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

225 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

226 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

228 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
) || \

229 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

230 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

231 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

	)

241 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

242 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

243 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

246 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
) ||\

247 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

248 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

	)

258 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

259 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

270 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

271 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

272 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

273 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

275 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

276 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

	)

285 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

286 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

287 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

288 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

289 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

290 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

291 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

292 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

293 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

294 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

295 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

296 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

297 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

298 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

299 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

300 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

302 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

311 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

312 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

313 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

314 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

315 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

316 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

317 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

318 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

320 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

330 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

339 #i‚de‡
STM32F10X_CL


340 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

342 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

352 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

353 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

355 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
) || \

356 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

	)

365 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

366 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

368 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
) || \

369 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

	)

379 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

380 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

381 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
) || \

382 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

	)

390 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

399 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

400 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

401 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

402 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

412 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

413 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

414 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
) || \

415 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

	)

424 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

425 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

426 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

436 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

437 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

438 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

439 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

449 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

450 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

452 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

462 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

463 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

473 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

474 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

485 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

486 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

487 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

488 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

489 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

490 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

491 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

492 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

507 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

508 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

509 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

512 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

513 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

514 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

515 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

516 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

517 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

520 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

521 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

526 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

527 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

528 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

529 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

531 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
) || \

532 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

533 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

534 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

535 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

536 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

537 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

538 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

	)

540 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

541 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

542 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

543 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

544 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

	)

556 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

559 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

560 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

561 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

562 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

563 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

564 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

567 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

568 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

571 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

572 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

573 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

574 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

575 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

578 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

579 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

580 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

583 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
) ||\

584 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

585 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

586 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

587 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

588 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

589 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

591 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
) ||\

592 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

593 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

594 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

595 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

596 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

605 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

606 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

607 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

608 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

609 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

610 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

611 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

612 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

613 
	#CANTXFAILE
 
CAN_TxSètus_Faûed


	)

614 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

615 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

616 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

617 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

618 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

619 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

620 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

642 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

645 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

646 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

647 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

648 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

649 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

650 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

653 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

654 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

655 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

658 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

659 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

660 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

664 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

665 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

666 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

669 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

670 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

671 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

674 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

675 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

676 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

677 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

678 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

680 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_cec.h

24 #i‚de‡
__STM32F10x_CEC_H


25 
	#__STM32F10x_CEC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
CEC_BôTimögMode
;

54 
uöt16_t
 
CEC_BôPîiodMode
;

56 }
	tCEC_InôTy≥Def
;

69 
	#CEC_BôTimögStdMode
 ((
uöt16_t
)0x00Ë

	)

70 
	#CEC_BôTimögEºFªeMode
 
CEC_CFGR_BTEM


	)

72 
	#IS_CEC_BIT_TIMING_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôTimögStdMode
) || \

73 ((
MODE
Ë=
CEC_BôTimögEºFªeMode
))

	)

81 
	#CEC_BôPîiodStdMode
 ((
uöt16_t
)0x00Ë

	)

82 
	#CEC_BôPîiodFÀxibÀMode
 
CEC_CFGR_BPEM


	)

84 
	#IS_CEC_BIT_PERIOD_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôPîiodStdMode
) || \

85 ((
MODE
Ë=
CEC_BôPîiodFÀxibÀMode
))

	)

94 
	#CEC_IT_TERR
 
CEC_CSR_TERR


	)

95 
	#CEC_IT_TBTRF
 
CEC_CSR_TBTRF


	)

96 
	#CEC_IT_RERR
 
CEC_CSR_RERR


	)

97 
	#CEC_IT_RBTF
 
CEC_CSR_RBTF


	)

98 
	#IS_CEC_GET_IT
(
IT
Ë(((ITË=
CEC_IT_TERR
Ë|| ((ITË=
CEC_IT_TBTRF
) || \

99 ((
IT
Ë=
CEC_IT_RERR
Ë|| ((ITË=
CEC_IT_RBTF
))

	)

108 
	#IS_CEC_ADDRESS
(
ADDRESS
Ë((ADDRESSË< 0x10)

	)

116 
	#IS_CEC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0x3FFF)

	)

129 
	#CEC_FLAG_BTE
 ((
uöt32_t
)0x10010000)

	)

130 
	#CEC_FLAG_BPE
 ((
uöt32_t
)0x10020000)

	)

131 
	#CEC_FLAG_RBTFE
 ((
uöt32_t
)0x10040000)

	)

132 
	#CEC_FLAG_SBE
 ((
uöt32_t
)0x10080000)

	)

133 
	#CEC_FLAG_ACKE
 ((
uöt32_t
)0x10100000)

	)

134 
	#CEC_FLAG_LINE
 ((
uöt32_t
)0x10200000)

	)

135 
	#CEC_FLAG_TBTFE
 ((
uöt32_t
)0x10400000)

	)

140 
	#CEC_FLAG_TEOM
 ((
uöt32_t
)0x00000002)

	)

141 
	#CEC_FLAG_TERR
 ((
uöt32_t
)0x00000004)

	)

142 
	#CEC_FLAG_TBTRF
 ((
uöt32_t
)0x00000008)

	)

143 
	#CEC_FLAG_RSOM
 ((
uöt32_t
)0x00000010)

	)

144 
	#CEC_FLAG_REOM
 ((
uöt32_t
)0x00000020)

	)

145 
	#CEC_FLAG_RERR
 ((
uöt32_t
)0x00000040)

	)

146 
	#CEC_FLAG_RBTF
 ((
uöt32_t
)0x00000080)

	)

148 
	#IS_CEC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF03Ë=0x00Ë&& ((FLAGË!0x00))

	)

150 
	#IS_CEC_GET_FLAG
(
FLAG
Ë(((FLAGË=
CEC_FLAG_BTE
Ë|| ((FLAGË=
CEC_FLAG_BPE
) || \

151 ((
FLAG
Ë=
CEC_FLAG_RBTFE
Ë|| ((FLAG)=
CEC_FLAG_SBE
) || \

152 ((
FLAG
Ë=
CEC_FLAG_ACKE
Ë|| ((FLAGË=
CEC_FLAG_LINE
) || \

153 ((
FLAG
Ë=
CEC_FLAG_TBTFE
Ë|| ((FLAGË=
CEC_FLAG_TEOM
) || \

154 ((
FLAG
Ë=
CEC_FLAG_TERR
Ë|| ((FLAGË=
CEC_FLAG_TBTRF
) || \

155 ((
FLAG
Ë=
CEC_FLAG_RSOM
Ë|| ((FLAGË=
CEC_FLAG_REOM
) || \

156 ((
FLAG
Ë=
CEC_FLAG_RERR
Ë|| ((FLAGË=
CEC_FLAG_RBTF
))

	)

177 
CEC_DeInô
();

178 
CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

179 
CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

180 
CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

181 
CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
);

182 
CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
);

183 
CEC_SídD©aByã
(
uöt8_t
 
D©a
);

184 
uöt8_t
 
CEC_Re˚iveD©aByã
();

185 
CEC_SèπOfMesßge
();

186 
CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

187 
FœgSètus
 
CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
);

188 
CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
);

189 
ITSètus
 
CEC_GëITSètus
(
uöt8_t
 
CEC_IT
);

190 
CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
);

192 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_crc.h

24 #i‚de‡
__STM32F10x_CRC_H


25 
	#__STM32F10x_CRC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

70 
CRC_Re£tDR
();

71 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

72 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

73 
uöt32_t
 
CRC_GëCRC
();

74 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

75 
uöt8_t
 
CRC_GëIDRegi°î
();

77 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_dac.h

24 #i‚de‡
__STM32F10x_DAC_H


25 
	#__STM32F10x_DAC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DAC_Triggî
;

55 
uöt32_t
 
DAC_WaveGíî©i⁄
;

59 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

63 
uöt32_t
 
DAC_OuçutBuf„r
;

65 }
	tDAC_InôTy≥Def
;

79 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

81 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

82 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

84 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

86 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

87 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

88 
	#DAC_Triggî_T15_TRGO
 ((
uöt32_t
)0x0000001CË

	)

90 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

91 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

92 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

93 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

95 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

102 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

103 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

	)

113 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

114 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

115 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

116 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
) || \

117 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

118 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

	)

127 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

128 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

129 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

130 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

131 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

132 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

133 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

134 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

135 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

136 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

137 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

138 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

149 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

150 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

152 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

162 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

163 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

174 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

175 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

	)

184 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

185 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

186 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
) || \

187 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

	)

196 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

197 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

198 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
) || \

199 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

	)

208 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

209 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

210 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

211 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
) || \

212 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

213 ((
ALIGN
Ë=
DAC_Align_8b_R
))

	)

222 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

223 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

224 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
) || \

225 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

	)

234 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

238 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

243 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

244 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

254 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

255 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

278 
DAC_DeInô
();

279 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

280 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

281 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

282 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

283 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

289 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

290 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

291 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

292 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

293 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

294 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

295 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

296 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

297 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

300 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_dbgmcu.h

24 #i‚de‡
__STM32F10x_DBGMCU_H


25 
	#__STM32F10x_DBGMCU_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

54 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

55 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

56 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

57 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

58 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

59 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

60 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

61 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

62 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

63 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

64 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

65 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

66 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

67 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

68 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

69 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

70 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x00200000)

	)

71 
	#DBGMCU_TIM15_STOP
 ((
uöt32_t
)0x00400000)

	)

72 
	#DBGMCU_TIM16_STOP
 ((
uöt32_t
)0x00800000)

	)

73 
	#DBGMCU_TIM17_STOP
 ((
uöt32_t
)0x01000000)

	)

74 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x02000000)

	)

75 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x04000000)

	)

76 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x08000000)

	)

77 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x10000000)

	)

78 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x20000000)

	)

79 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x40000000)

	)

81 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x800000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

98 
uöt32_t
 
DBGMCU_GëREVID
();

99 
uöt32_t
 
DBGMCU_GëDEVID
();

100 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

102 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_dma.h

24 #i‚de‡
__STM32F10x_DMA_H


25 
	#__STM32F10x_DMA_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

54 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

56 
uöt32_t
 
DMA_DIR
;

59 
uöt32_t
 
DMA_Buf„rSize
;

63 
uöt32_t
 
DMA_PîùhîÆInc
;

66 
uöt32_t
 
DMA_Mem‹yInc
;

69 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

72 
uöt32_t
 
DMA_Mem‹yD©aSize
;

75 
uöt32_t
 
DMA_Mode
;

80 
uöt32_t
 
DMA_Pri‹ôy
;

83 
uöt32_t
 
DMA_M2M
;

85 }
	tDMA_InôTy≥Def
;

95 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
) || \

96 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

97 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

101 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

102 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

106 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

	)

112 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

113 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

114 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
) || \

115 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

	)

124 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

125 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

126 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

127 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

136 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

137 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

138 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

139 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

148 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

149 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

150 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

151 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

152 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

153 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

162 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

163 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

164 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

165 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

166 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

167 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

	)

176 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

177 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

178 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

187 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

188 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

189 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

190 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

191 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
) || \

192 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

193 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

194 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

	)

203 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

204 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

205 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

215 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

216 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

217 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

218 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

220 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

221 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

222 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

223 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

224 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

225 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

226 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

227 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

228 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

229 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

230 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

231 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

232 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

233 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

234 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

235 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

236 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

237 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

238 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

239 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

240 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

241 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

242 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

243 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

244 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

245 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

246 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

247 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

249 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

250 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

251 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

252 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

253 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

254 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

255 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

256 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

257 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

258 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

259 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

260 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

261 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

262 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

263 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

264 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

265 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

266 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

267 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

268 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

270 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

272 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
) || \

273 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

274 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

275 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

276 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

277 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

278 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

279 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

280 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

281 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

282 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

283 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

284 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

285 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

286 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

287 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

288 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

289 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

290 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

291 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

292 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

293 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

294 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

295 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

	)

304 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

305 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

306 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

307 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

308 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

309 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

310 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

311 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

312 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

313 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

314 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

315 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

316 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

317 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

318 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

319 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

320 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

321 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

322 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

323 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

324 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

325 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

326 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

327 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

328 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

329 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

330 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

331 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

333 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

334 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

335 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

336 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

337 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

338 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

339 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

340 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

341 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

342 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

343 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

344 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

345 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

346 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

347 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

348 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

349 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

350 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

351 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

352 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

354 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

356 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

369 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

370 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

379 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

	)

388 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

410 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

411 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

412 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

413 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
);

416 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

417 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
);

418 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
);

419 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
);

420 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
);

422 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_exti.h

24 #i‚de‡
__STM32F10x_EXTI_H


25 
	#__STM32F10x_EXTI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
EXTI_Mode_I¡îru±
 = 0x00,

53 
EXTI_Mode_Evít
 = 0x04

54 }
	tEXTIMode_Ty≥Def
;

56 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

64 
EXTI_Triggî_Risög
 = 0x08,

65 
EXTI_Triggî_FÆlög
 = 0x0C,

66 
EXTI_Triggî_Risög_FÆlög
 = 0x10

67 }
	tEXTITriggî_Ty≥Def
;

69 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

70 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

71 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

78 
uöt32_t
 
EXTI_Löe
;

81 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

84 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

87 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

89 }
	tEXTI_InôTy≥Def
;

103 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

104 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

105 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

106 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

107 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

108 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

109 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

110 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

111 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

112 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

113 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

114 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

115 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

116 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

117 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

118 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

119 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

120 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

121 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

123 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF00000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

126 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

127 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

128 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

129 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

130 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

131 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

132 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

133 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

134 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

135 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
))

	)

158 
EXTI_DeInô
();

159 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

161 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

162 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

163 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

164 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

165 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

167 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_flash.h

24 #i‚de‡
__STM32F10x_FLASH_H


25 
	#__STM32F10x_FLASH_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
FLASH_BUSY
 = 1,

53 
FLASH_ERROR_PG
,

54 
FLASH_ERROR_WRP
,

55 
FLASH_COMPLETE
,

56 
FLASH_TIMEOUT


57 }
	tFLASH_Sètus
;

71 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

72 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

73 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

74 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

75 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

76 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

	)

85 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

86 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

87 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
) || \

88 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

	)

97 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

98 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

99 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
) || \

100 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

	)

110 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

111 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

112 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

113 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

114 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

115 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

116 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

117 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

120 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

121 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

122 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

123 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

124 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

125 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

126 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

127 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

128 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

129 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

130 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

132 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

133 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

134 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

135 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

136 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

138 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

139 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

140 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

142 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

143 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

146 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

148 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

150 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

152 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

154 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

156 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

158 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

160 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

162 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

164 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

166 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

168 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

170 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

172 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

174 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

176 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

178 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

180 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

182 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

184 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

186 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

188 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

190 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

192 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

194 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

196 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

198 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

200 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

202 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

204 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

206 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

208 
	#FLASH_WRPrŸ_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

209 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

210 
	#FLASH_WRPrŸ_Pages62to511
 ((
uöt32_t
)0x80000000Ë

	)

212 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

214 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

216 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x080FFFFF))

	)

218 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

228 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

229 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

230 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

240 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

241 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

242 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

252 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

253 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

254 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

256 #ifde‡
STM32F10X_XL


263 
	#FLASH_BOOT_B™k1
 ((
uöt16_t
)0x0000Ë

	)

265 
	#FLASH_BOOT_B™k2
 ((
uöt16_t
)0x0001Ë

	)

268 
	#IS_FLASH_BOOT
(
BOOT
Ë(((BOOTË=
FLASH_BOOT_B™k1
Ë|| ((BOOTË=
FLASH_BOOT_B™k2
))

	)

276 #ifde‡
STM32F10X_XL


277 
	#FLASH_IT_BANK2_ERROR
 ((
uöt32_t
)0x80000400Ë

	)

278 
	#FLASH_IT_BANK2_EOP
 ((
uöt32_t
)0x80001000Ë

	)

280 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

281 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

283 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

284 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

285 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0x7FFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

287 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

288 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

289 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

290 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

292 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

302 #ifde‡
STM32F10X_XL


303 
	#FLASH_FLAG_BANK2_BSY
 ((
uöt32_t
)0x80000001Ë

	)

304 
	#FLASH_FLAG_BANK2_EOP
 ((
uöt32_t
)0x80000020Ë

	)

305 
	#FLASH_FLAG_BANK2_PGERR
 ((
uöt32_t
)0x80000004Ë

	)

306 
	#FLASH_FLAG_BANK2_WRPRTERR
 ((
uöt32_t
)0x80000010Ë

	)

308 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

309 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

310 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

311 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

313 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

314 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

315 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

316 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

317 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

319 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0x7FFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

320 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
) || \

321 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

322 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
)|| \

323 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

324 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

325 ((
FLAG
Ë=
FLASH_FLAG_BANK2_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_EOP
) || \

326 ((
FLAG
Ë=
FLASH_FLAG_BANK2_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_WRPRTERR
))

	)

328 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

329 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

330 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

331 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

332 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

334 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

335 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

336 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

337 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

339 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

340 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
) || \

341 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

342 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

343 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

344 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

	)

368 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

369 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

370 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

371 
FLASH_U∆ock
();

372 
FLASH_Lock
();

373 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

374 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

375 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

376 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

377 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

378 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

379 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

380 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

382 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

383 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

384 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

385 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

386 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

388 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

389 
FLASH_Sètus
 
FLASH_GëSètus
();

390 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

393 
FLASH_U∆ockB™k1
();

394 
FLASH_LockB™k1
();

395 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Pages
();

396 
FLASH_Sètus
 
FLASH_GëB™k1Sètus
();

397 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
);

399 #ifde‡
STM32F10X_XL


401 
FLASH_U∆ockB™k2
();

402 
FLASH_LockB™k2
();

403 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Pages
();

404 
FLASH_Sètus
 
FLASH_GëB™k2Sètus
();

405 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
);

406 
FLASH_Sètus
 
FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
);

409 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_fsmc.h

24 #i‚de‡
__STM32F10x_FSMC_H


25 
	#__STM32F10x_FSMC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
FSMC_AddªssSëupTime
;

57 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

62 
uöt32_t
 
FSMC_D©aSëupTime
;

67 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

72 
uöt32_t
 
FSMC_CLKDivisi⁄
;

76 
uöt32_t
 
FSMC_D©aL©ícy
;

84 
uöt32_t
 
FSMC_Ac˚ssMode
;

86 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

94 
uöt32_t
 
FSMC_B™k
;

97 
uöt32_t
 
FSMC_D©aAddªssMux
;

101 
uöt32_t
 
FSMC_Mem‹yTy≥
;

105 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

108 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

112 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

116 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

120 
uöt32_t
 
FSMC_WøpMode
;

124 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

129 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

132 
uöt32_t
 
FSMC_WaôSig«l
;

136 
uöt32_t
 
FSMC_ExãndedMode
;

139 
uöt32_t
 
FSMC_WrôeBur°
;

142 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

144 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

145 }
	tFSMC_NORSRAMInôTy≥Def
;

153 
uöt32_t
 
FSMC_SëupTime
;

159 
uöt32_t
 
FSMC_WaôSëupTime
;

165 
uöt32_t
 
FSMC_HﬁdSëupTime
;

172 
uöt32_t
 
FSMC_HiZSëupTime
;

177 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

185 
uöt32_t
 
FSMC_B™k
;

188 
uöt32_t
 
FSMC_Waô„©uª
;

191 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

194 
uöt32_t
 
FSMC_ECC
;

197 
uöt32_t
 
FSMC_ECCPageSize
;

200 
uöt32_t
 
FSMC_TCLRSëupTime
;

204 
uöt32_t
 
FSMC_TARSëupTime
;

208 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

210 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

211 }
	tFSMC_NANDInôTy≥Def
;

219 
uöt32_t
 
FSMC_Waô„©uª
;

222 
uöt32_t
 
FSMC_TCLRSëupTime
;

226 
uöt32_t
 
FSMC_TARSëupTime
;

231 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

233 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

235 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

236 }
	tFSMC_PCCARDInôTy≥Def
;

249 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

250 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

251 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

252 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

260 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

261 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

269 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

274 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
) || \

275 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

276 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

277 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

	)

279 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

280 ((
BANK
Ë=
FSMC_B™k3_NAND
))

	)

282 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

283 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

284 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

286 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

287 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

288 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

298 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

299 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

300 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
) || \

301 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

	)

311 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

312 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

313 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

314 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
) || \

315 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

316 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

	)

326 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

327 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

328 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
) || \

329 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

	)

339 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

340 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

341 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
) || \

342 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

	)

350 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

351 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

352 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
) || \

353 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

	)

363 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

364 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

365 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
) || \

366 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

	)

376 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

377 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

378 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
) || \

379 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

	)

389 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

390 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

391 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
) || \

392 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

	)

402 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

403 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

404 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
) || \

405 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

	)

415 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

416 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

417 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
) || \

418 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

	)

427 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

428 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

430 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
) || \

431 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

	)

441 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

442 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

443 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
) || \

444 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

	)

453 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

463 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

473 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

483 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

493 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

503 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

513 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

514 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

515 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

516 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

517 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
) || \

518 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

519 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

520 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

	)

538 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

539 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

540 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
) || \

541 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

	)

552 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

553 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

554 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
) || \

555 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

	)

565 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

566 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

567 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

568 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

569 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

570 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

571 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
) || \

572 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

573 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

574 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

575 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

576 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

	)

586 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

596 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

606 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

616 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

626 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

636 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

646 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

647 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

648 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

649 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

650 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
) || \

651 ((
IT
Ë=
FSMC_IT_Levñ
) || \

652 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

	)

661 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

662 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

663 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

664 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

665 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
) || \

666 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

667 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

668 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

	)

670 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

696 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

697 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

698 
FSMC_PCCARDDeInô
();

699 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

700 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

701 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

702 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

703 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

704 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

705 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

706 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

707 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

708 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

709 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

710 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

711 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

712 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

713 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

714 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

716 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_gpio.h

24 #i‚de‡
__STM32F10x_GPIO_H


25 
	#__STM32F10x_GPIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

47 ((
PERIPH
Ë=
GPIOB
) || \

48 ((
PERIPH
Ë=
GPIOC
) || \

49 ((
PERIPH
Ë=
GPIOD
) || \

50 ((
PERIPH
Ë=
GPIOE
) || \

51 ((
PERIPH
Ë=
GPIOF
) || \

52 ((
PERIPH
Ë=
GPIOG
))

	)

60 
GPIO_S≥ed_10MHz
 = 1,

61 
GPIO_S≥ed_2MHz
,

62 
GPIO_S≥ed_50MHz


63 }
	tGPIOS≥ed_Ty≥Def
;

64 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
) || \

65 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
))

	)

72 { 
GPIO_Mode_AIN
 = 0x0,

73 
GPIO_Mode_IN_FLOATING
 = 0x04,

74 
GPIO_Mode_IPD
 = 0x28,

75 
GPIO_Mode_IPU
 = 0x48,

76 
GPIO_Mode_Out_OD
 = 0x14,

77 
GPIO_Mode_Out_PP
 = 0x10,

78 
GPIO_Mode_AF_OD
 = 0x1C,

79 
GPIO_Mode_AF_PP
 = 0x18

80 }
	tGPIOMode_Ty≥Def
;

82 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
) || \

83 ((
MODE
Ë=
GPIO_Mode_IPD
Ë|| ((MODEË=
GPIO_Mode_IPU
) || \

84 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

85 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

	)

93 
uöt16_t
 
GPIO_Pö
;

96 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

99 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

101 }
	tGPIO_InôTy≥Def
;

109 { 
Bô_RESET
 = 0,

110 
Bô_SET


111 }
	tBôA˘i⁄
;

113 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

127 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

128 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

129 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

130 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

131 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

132 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

133 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

134 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

135 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

136 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

137 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

138 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

139 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

140 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

141 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

142 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

143 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

145 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

147 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

148 ((
PIN
Ë=
GPIO_Pö_1
) || \

149 ((
PIN
Ë=
GPIO_Pö_2
) || \

150 ((
PIN
Ë=
GPIO_Pö_3
) || \

151 ((
PIN
Ë=
GPIO_Pö_4
) || \

152 ((
PIN
Ë=
GPIO_Pö_5
) || \

153 ((
PIN
Ë=
GPIO_Pö_6
) || \

154 ((
PIN
Ë=
GPIO_Pö_7
) || \

155 ((
PIN
Ë=
GPIO_Pö_8
) || \

156 ((
PIN
Ë=
GPIO_Pö_9
) || \

157 ((
PIN
Ë=
GPIO_Pö_10
) || \

158 ((
PIN
Ë=
GPIO_Pö_11
) || \

159 ((
PIN
Ë=
GPIO_Pö_12
) || \

160 ((
PIN
Ë=
GPIO_Pö_13
) || \

161 ((
PIN
Ë=
GPIO_Pö_14
) || \

162 ((
PIN
Ë=
GPIO_Pö_15
))

	)

172 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

173 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

174 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

175 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

176 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

177 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

178 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

179 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

180 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

181 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

182 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

183 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

184 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

185 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

186 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

187 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

188 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

189 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

190 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

191 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

192 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

193 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

194 
	#GPIO_Rem≠_ETH
 ((
uöt32_t
)0x00200020Ë

	)

195 
	#GPIO_Rem≠_CAN2
 ((
uöt32_t
)0x00200040Ë

	)

196 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

197 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

198 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

199 
	#GPIO_Rem≠_SPI3
 ((
uöt32_t
)0x00201100Ë

	)

200 
	#GPIO_Rem≠_TIM2ITR1_PTP_SOF
 ((
uöt32_t
)0x00202000Ë

	)

203 
	#GPIO_Rem≠_PTP_PPS
 ((
uöt32_t
)0x00204000Ë

	)

205 
	#GPIO_Rem≠_TIM15
 ((
uöt32_t
)0x80000001Ë

	)

206 
	#GPIO_Rem≠_TIM16
 ((
uöt32_t
)0x80000002Ë

	)

207 
	#GPIO_Rem≠_TIM17
 ((
uöt32_t
)0x80000004Ë

	)

208 
	#GPIO_Rem≠_CEC
 ((
uöt32_t
)0x80000008Ë

	)

209 
	#GPIO_Rem≠_TIM1_DMA
 ((
uöt32_t
)0x80000010Ë

	)

211 
	#GPIO_Rem≠_TIM9
 ((
uöt32_t
)0x80000020Ë

	)

212 
	#GPIO_Rem≠_TIM10
 ((
uöt32_t
)0x80000040Ë

	)

213 
	#GPIO_Rem≠_TIM11
 ((
uöt32_t
)0x80000080Ë

	)

214 
	#GPIO_Rem≠_TIM13
 ((
uöt32_t
)0x80000100Ë

	)

215 
	#GPIO_Rem≠_TIM14
 ((
uöt32_t
)0x80000200Ë

	)

216 
	#GPIO_Rem≠_FSMC_NADV
 ((
uöt32_t
)0x80000400Ë

	)

218 
	#GPIO_Rem≠_TIM67_DAC_DMA
 ((
uöt32_t
)0x80000800Ë

	)

219 
	#GPIO_Rem≠_TIM12
 ((
uöt32_t
)0x80001000Ë

	)

220 
	#GPIO_Rem≠_MISC
 ((
uöt32_t
)0x80002000Ë

	)

223 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
) || \

224 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

225 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

226 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

227 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

228 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

229 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

230 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

231 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

232 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

233 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

234 ((
REMAP
Ë=
GPIO_Rem≠_ETH
Ë||((REMAPË=
GPIO_Rem≠_CAN2
) || \

235 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
) || \

236 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
)|| ((REMAPË=
GPIO_Rem≠_SPI3
) || \

237 ((
REMAP
Ë=
GPIO_Rem≠_TIM2ITR1_PTP_SOF
Ë|| ((REMAPË=
GPIO_Rem≠_PTP_PPS
) || \

238 ((
REMAP
Ë=
GPIO_Rem≠_TIM15
Ë|| ((REMAPË=
GPIO_Rem≠_TIM16
) || \

239 ((
REMAP
Ë=
GPIO_Rem≠_TIM17
Ë|| ((REMAPË=
GPIO_Rem≠_CEC
) || \

240 ((
REMAP
Ë=
GPIO_Rem≠_TIM1_DMA
Ë|| ((REMAPË=
GPIO_Rem≠_TIM9
) || \

241 ((
REMAP
Ë=
GPIO_Rem≠_TIM10
Ë|| ((REMAPË=
GPIO_Rem≠_TIM11
) || \

242 ((
REMAP
Ë=
GPIO_Rem≠_TIM13
Ë|| ((REMAPË=
GPIO_Rem≠_TIM14
) || \

243 ((
REMAP
Ë=
GPIO_Rem≠_FSMC_NADV
Ë|| ((REMAPË=
GPIO_Rem≠_TIM67_DAC_DMA
) || \

244 ((
REMAP
Ë=
GPIO_Rem≠_TIM12
Ë|| ((REMAPË=
GPIO_Rem≠_MISC
))

	)

254 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

255 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

256 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

257 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

258 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

259 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

260 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

261 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
) || \

262 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

263 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

264 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

265 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

	)

267 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
) || \

268 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

269 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

270 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

271 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

272 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

273 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

	)

283 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

284 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

285 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

286 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

287 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

288 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

289 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

290 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

291 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

292 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

293 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

294 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

295 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

296 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

297 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

298 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

300 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

301 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

302 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

303 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

304 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

305 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

306 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

307 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

308 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

309 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

310 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

311 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

312 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

313 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

314 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

315 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

324 
	#GPIO_ETH_MedüI¡îÁ˚_MII
 ((
u32
)0x00000000)

	)

325 
	#GPIO_ETH_MedüI¡îÁ˚_RMII
 ((
u32
)0x00000001)

	)

327 
	#IS_GPIO_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
GPIO_ETH_MedüI¡îÁ˚_MII
) || \

328 ((
INTERFACE
Ë=
GPIO_ETH_MedüI¡îÁ˚_RMII
))

	)

349 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

350 
GPIO_AFIODeInô
();

351 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

352 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

353 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

354 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

355 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

356 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

357 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

358 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

359 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

360 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

361 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

362 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

363 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

364 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

365 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

366 
GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
);

368 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_i2c.h

24 #i‚de‡
__STM32F10x_I2C_H


25 
	#__STM32F10x_I2C_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
I2C_ClockS≥ed
;

55 
uöt16_t
 
I2C_Mode
;

58 
uöt16_t
 
I2C_DutyCy˛e
;

61 
uöt16_t
 
I2C_OwnAddªss1
;

64 
uöt16_t
 
I2C_Ack
;

67 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

69 }
	tI2C_InôTy≥Def
;

80 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
) || \

81 ((
PERIPH
Ë=
I2C2
))

	)

86 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

87 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

88 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

89 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
) || \

90 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

91 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

	)

100 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

101 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

102 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
) || \

103 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

	)

112 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

113 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

114 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
) || \

115 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

	)

124 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

125 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

126 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
) || \

127 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

	)

136 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

137 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

138 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
) || \

139 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

	)

148 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

149 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

150 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

151 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

152 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

153 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

154 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

155 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

156 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

157 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
) || \

158 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

165 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

	)

174 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

175 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

176 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
) || \

177 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

	)

186 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

187 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

188 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
) || \

189 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

	)

198 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

199 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

200 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
) || \

201 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

	)

210 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

211 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

212 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

213 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

222 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

223 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

224 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

225 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

226 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

227 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

228 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

229 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

230 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

231 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

232 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

233 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

234 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

235 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

237 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

239 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

240 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

241 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

242 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

243 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

244 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

245 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

	)

258 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

259 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

260 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

261 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

262 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

263 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

264 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

270 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

271 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

272 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

273 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

274 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

275 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

276 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

277 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

278 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

279 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

280 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

281 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

282 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

283 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

285 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

287 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
) || \

288 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

289 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

290 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

291 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

292 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

293 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

294 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

295 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

296 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

297 ((
FLAG
Ë=
I2C_FLAG_SB
))

	)

319 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

347 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

348 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

350 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

383 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

387 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

389 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

424 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

425 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

428 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

429 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

432 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

463 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

465 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

469 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

470 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

472 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

476 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
) || \

477 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

478 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

479 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

480 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

481 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

482 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

483 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

484 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

485 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

486 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

487 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

488 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

489 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

490 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

491 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

492 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

493 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

494 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

495 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

	)

504 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

513 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

534 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

535 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

536 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

537 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

538 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

540 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

542 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

544 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

547 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

548 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

549 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

550 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

551 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

552 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

553 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

554 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

555 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

556 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

558 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

559 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

560 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

645 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

651 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

657 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

663 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

664 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

665 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

667 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_iwdg.h

24 #i‚de‡
__STM32F10x_IWDG_H


25 
	#__STM32F10x_IWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

59 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

60 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
) || \

61 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

	)

70 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

71 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

72 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

73 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

74 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

75 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

76 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

77 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

83 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

	)

92 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

93 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

94 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

95 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

116 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

117 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

118 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

119 
IWDG_RñﬂdCou¡î
();

120 
IWDG_E«bÀ
();

121 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

123 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_pwr.h

24 #i‚de‡
__STM32F10x_PWR_H


25 
	#__STM32F10x_PWR_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

59 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

60 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

61 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

62 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

63 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

64 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

65 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

66 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

67 ((
LEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((LEVELË=
PWR_PVDLevñ_2V5
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

	)

78 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

79 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

80 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
) || \

81 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

	)

90 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

91 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

92 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

102 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

103 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

104 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

105 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

106 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

	)

108 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

129 
PWR_DeInô
();

130 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

131 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

132 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

133 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

134 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

135 
PWR_E¡îSTANDBYMode
();

136 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

137 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

139 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_rcc.h

24 #i‚de‡
__STM32F10x_RCC_H


25 
	#__STM32F10x_RCC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SYSCLK_Fªquícy
;

49 
uöt32_t
 
HCLK_Fªquícy
;

50 
uöt32_t
 
PCLK1_Fªquícy
;

51 
uöt32_t
 
PCLK2_Fªquícy
;

52 
uöt32_t
 
ADCCLK_Fªquícy
;

53 }
	tRCC_ClocksTy≥Def
;

67 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

68 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

69 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

70 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

71 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

81 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

83 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_CL
)

84 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

85 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

86 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
) || \

87 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

88 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

	)

90 
	#RCC_PLLSour˚_PREDIV1
 ((
uöt32_t
)0x00010000)

	)

91 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
) || \

92 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

	)

102 #i‚de‡
STM32F10X_CL


103 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

104 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

105 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

106 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

107 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

108 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

109 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

110 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

111 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

112 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

113 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

114 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

115 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

116 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

117 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

118 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
) || \

119 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

120 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

121 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

122 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

123 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

124 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

125 ((
MUL
Ë=
RCC_PLLMul_16
))

	)

128 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

129 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

130 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

131 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

132 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

133 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

134 
	#RCC_PLLMul_6_5
 ((
uöt32_t
)0x00340000)

	)

136 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

137 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

138 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

139 ((
MUL
Ë=
RCC_PLLMul_6_5
))

	)

148 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

149 
	#RCC_PREDIV1_Div1
 ((
uöt32_t
)0x00000000)

	)

150 
	#RCC_PREDIV1_Div2
 ((
uöt32_t
)0x00000001)

	)

151 
	#RCC_PREDIV1_Div3
 ((
uöt32_t
)0x00000002)

	)

152 
	#RCC_PREDIV1_Div4
 ((
uöt32_t
)0x00000003)

	)

153 
	#RCC_PREDIV1_Div5
 ((
uöt32_t
)0x00000004)

	)

154 
	#RCC_PREDIV1_Div6
 ((
uöt32_t
)0x00000005)

	)

155 
	#RCC_PREDIV1_Div7
 ((
uöt32_t
)0x00000006)

	)

156 
	#RCC_PREDIV1_Div8
 ((
uöt32_t
)0x00000007)

	)

157 
	#RCC_PREDIV1_Div9
 ((
uöt32_t
)0x00000008)

	)

158 
	#RCC_PREDIV1_Div10
 ((
uöt32_t
)0x00000009)

	)

159 
	#RCC_PREDIV1_Div11
 ((
uöt32_t
)0x0000000A)

	)

160 
	#RCC_PREDIV1_Div12
 ((
uöt32_t
)0x0000000B)

	)

161 
	#RCC_PREDIV1_Div13
 ((
uöt32_t
)0x0000000C)

	)

162 
	#RCC_PREDIV1_Div14
 ((
uöt32_t
)0x0000000D)

	)

163 
	#RCC_PREDIV1_Div15
 ((
uöt32_t
)0x0000000E)

	)

164 
	#RCC_PREDIV1_Div16
 ((
uöt32_t
)0x0000000F)

	)

166 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
) || \

167 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

168 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

169 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

170 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

171 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

172 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

173 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

	)

183 #ifde‡
STM32F10X_CL


185 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

186 
	#RCC_PREDIV1_Sour˚_PLL2
 ((
uöt32_t
)0x00010000)

	)

188 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
) || \

189 ((
SOURCE
Ë=
RCC_PREDIV1_Sour˚_PLL2
))

	)

190 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

192 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

194 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
))

	)

200 #ifde‡
STM32F10X_CL


205 
	#RCC_PREDIV2_Div1
 ((
uöt32_t
)0x00000000)

	)

206 
	#RCC_PREDIV2_Div2
 ((
uöt32_t
)0x00000010)

	)

207 
	#RCC_PREDIV2_Div3
 ((
uöt32_t
)0x00000020)

	)

208 
	#RCC_PREDIV2_Div4
 ((
uöt32_t
)0x00000030)

	)

209 
	#RCC_PREDIV2_Div5
 ((
uöt32_t
)0x00000040)

	)

210 
	#RCC_PREDIV2_Div6
 ((
uöt32_t
)0x00000050)

	)

211 
	#RCC_PREDIV2_Div7
 ((
uöt32_t
)0x00000060)

	)

212 
	#RCC_PREDIV2_Div8
 ((
uöt32_t
)0x00000070)

	)

213 
	#RCC_PREDIV2_Div9
 ((
uöt32_t
)0x00000080)

	)

214 
	#RCC_PREDIV2_Div10
 ((
uöt32_t
)0x00000090)

	)

215 
	#RCC_PREDIV2_Div11
 ((
uöt32_t
)0x000000A0)

	)

216 
	#RCC_PREDIV2_Div12
 ((
uöt32_t
)0x000000B0)

	)

217 
	#RCC_PREDIV2_Div13
 ((
uöt32_t
)0x000000C0)

	)

218 
	#RCC_PREDIV2_Div14
 ((
uöt32_t
)0x000000D0)

	)

219 
	#RCC_PREDIV2_Div15
 ((
uöt32_t
)0x000000E0)

	)

220 
	#RCC_PREDIV2_Div16
 ((
uöt32_t
)0x000000F0)

	)

222 
	#IS_RCC_PREDIV2
(
PREDIV2
Ë(((PREDIV2Ë=
RCC_PREDIV2_Div1
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div2
) || \

223 ((
PREDIV2
Ë=
RCC_PREDIV2_Div3
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div4
) || \

224 ((
PREDIV2
Ë=
RCC_PREDIV2_Div5
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div6
) || \

225 ((
PREDIV2
Ë=
RCC_PREDIV2_Div7
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div8
) || \

226 ((
PREDIV2
Ë=
RCC_PREDIV2_Div9
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div10
) || \

227 ((
PREDIV2
Ë=
RCC_PREDIV2_Div11
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div12
) || \

228 ((
PREDIV2
Ë=
RCC_PREDIV2_Div13
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div14
) || \

229 ((
PREDIV2
Ë=
RCC_PREDIV2_Div15
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div16
))

	)

239 
	#RCC_PLL2Mul_8
 ((
uöt32_t
)0x00000600)

	)

240 
	#RCC_PLL2Mul_9
 ((
uöt32_t
)0x00000700)

	)

241 
	#RCC_PLL2Mul_10
 ((
uöt32_t
)0x00000800)

	)

242 
	#RCC_PLL2Mul_11
 ((
uöt32_t
)0x00000900)

	)

243 
	#RCC_PLL2Mul_12
 ((
uöt32_t
)0x00000A00)

	)

244 
	#RCC_PLL2Mul_13
 ((
uöt32_t
)0x00000B00)

	)

245 
	#RCC_PLL2Mul_14
 ((
uöt32_t
)0x00000C00)

	)

246 
	#RCC_PLL2Mul_16
 ((
uöt32_t
)0x00000E00)

	)

247 
	#RCC_PLL2Mul_20
 ((
uöt32_t
)0x00000F00)

	)

249 
	#IS_RCC_PLL2_MUL
(
MUL
Ë(((MULË=
RCC_PLL2Mul_8
Ë|| ((MULË=
RCC_PLL2Mul_9
) || \

250 ((
MUL
Ë=
RCC_PLL2Mul_10
Ë|| ((MULË=
RCC_PLL2Mul_11
) || \

251 ((
MUL
Ë=
RCC_PLL2Mul_12
Ë|| ((MULË=
RCC_PLL2Mul_13
) || \

252 ((
MUL
Ë=
RCC_PLL2Mul_14
Ë|| ((MULË=
RCC_PLL2Mul_16
) || \

253 ((
MUL
Ë=
RCC_PLL2Mul_20
))

	)

263 
	#RCC_PLL3Mul_8
 ((
uöt32_t
)0x00006000)

	)

264 
	#RCC_PLL3Mul_9
 ((
uöt32_t
)0x00007000)

	)

265 
	#RCC_PLL3Mul_10
 ((
uöt32_t
)0x00008000)

	)

266 
	#RCC_PLL3Mul_11
 ((
uöt32_t
)0x00009000)

	)

267 
	#RCC_PLL3Mul_12
 ((
uöt32_t
)0x0000A000)

	)

268 
	#RCC_PLL3Mul_13
 ((
uöt32_t
)0x0000B000)

	)

269 
	#RCC_PLL3Mul_14
 ((
uöt32_t
)0x0000C000)

	)

270 
	#RCC_PLL3Mul_16
 ((
uöt32_t
)0x0000E000)

	)

271 
	#RCC_PLL3Mul_20
 ((
uöt32_t
)0x0000F000)

	)

273 
	#IS_RCC_PLL3_MUL
(
MUL
Ë(((MULË=
RCC_PLL3Mul_8
Ë|| ((MULË=
RCC_PLL3Mul_9
) || \

274 ((
MUL
Ë=
RCC_PLL3Mul_10
Ë|| ((MULË=
RCC_PLL3Mul_11
) || \

275 ((
MUL
Ë=
RCC_PLL3Mul_12
Ë|| ((MULË=
RCC_PLL3Mul_13
) || \

276 ((
MUL
Ë=
RCC_PLL3Mul_14
Ë|| ((MULË=
RCC_PLL3Mul_16
) || \

277 ((
MUL
Ë=
RCC_PLL3Mul_20
))

	)

289 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

290 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

291 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

292 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

293 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

294 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

303 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

304 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

305 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

306 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

307 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

308 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

309 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

310 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

311 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

312 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

313 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

314 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

315 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

316 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

325 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

326 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

327 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

328 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

329 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

330 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

331 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

332 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

341 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

342 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

343 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

344 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

345 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

346 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

348 #i‚de‡
STM32F10X_CL


349 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

350 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

351 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

352 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

	)

353 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

355 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)0x20)

	)

356 
	#RCC_IT_PLL3RDY
 ((
uöt8_t
)0x40)

	)

357 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

358 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

359 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

360 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

361 ((
IT
Ë=
RCC_IT_PLL2RDY
Ë|| ((ITË=
RCC_IT_PLL3RDY
))

	)

362 
	#IS_RCC_CLEAR_IT
(
IT
Ë((ITË!0x00)

	)

370 #i‚de‡
STM32F10X_CL


375 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

376 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

378 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
) || \

379 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

	)

387 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div3
 ((
uöt8_t
)0x00)

	)

388 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div2
 ((
uöt8_t
)0x01)

	)

390 
	#IS_RCC_OTGFSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_OTGFSCLKSour˚_PLLVCO_Div3
) || \

391 ((
SOURCE
Ë=
RCC_OTGFSCLKSour˚_PLLVCO_Div2
))

	)

398 #ifde‡
STM32F10X_CL


402 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

403 
	#RCC_I2S2CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

405 
	#IS_RCC_I2S2CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
) || \

406 ((
SOURCE
Ë=
RCC_I2S2CLKSour˚_PLL3_VCO
))

	)

414 
	#RCC_I2S3CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

415 
	#RCC_I2S3CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

417 
	#IS_RCC_I2S3CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S3CLKSour˚_SYSCLK
) || \

418 ((
SOURCE
Ë=
RCC_I2S3CLKSour˚_PLL3_VCO
))

	)

429 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

430 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

431 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

432 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

433 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
) || \

434 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

	)

443 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

444 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

445 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

446 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

447 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

456 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

457 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

458 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

459 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

460 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

461 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

	)

470 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

471 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

472 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

473 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

474 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

476 #i‚de‡
STM32F10X_CL


477 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

478 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

479 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

481 
	#RCC_AHBPîùh_OTG_FS
 ((
uöt32_t
)0x00001000)

	)

482 
	#RCC_AHBPîùh_ETH_MAC
 ((
uöt32_t
)0x00004000)

	)

483 
	#RCC_AHBPîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x00008000)

	)

484 
	#RCC_AHBPîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x00010000)

	)

486 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFE2FA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

487 
	#IS_RCC_AHB_PERIPH_RESET
(
PERIPH
Ë((((PERIPHË& 0xFFFFAFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

497 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

498 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

499 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

500 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

501 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

502 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

503 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

504 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

505 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

506 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

507 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

508 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

509 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

510 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

511 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

512 
	#RCC_APB2Pîùh_TIM15
 ((
uöt32_t
)0x00010000)

	)

513 
	#RCC_APB2Pîùh_TIM16
 ((
uöt32_t
)0x00020000)

	)

514 
	#RCC_APB2Pîùh_TIM17
 ((
uöt32_t
)0x00040000)

	)

515 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00080000)

	)

516 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00100000)

	)

517 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00200000)

	)

519 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFC00002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

528 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

529 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

530 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

531 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

532 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

533 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

534 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

535 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

536 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

537 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

538 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

539 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

540 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

541 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

542 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

543 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

544 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

545 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

546 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

547 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

548 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

549 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

550 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

551 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

552 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x40000000)

	)

554 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

564 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

565 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

566 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

567 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

568 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

570 #i‚de‡
STM32F10X_CL


571 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
) || \

572 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

573 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

	)

575 
	#RCC_MCO_PLL2CLK
 ((
uöt8_t
)0x08)

	)

576 
	#RCC_MCO_PLL3CLK_Div2
 ((
uöt8_t
)0x09)

	)

577 
	#RCC_MCO_XT1
 ((
uöt8_t
)0x0A)

	)

578 
	#RCC_MCO_PLL3CLK
 ((
uöt8_t
)0x0B)

	)

580 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
) || \

581 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

582 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
Ë|| ((MCOË=
RCC_MCO_PLL2CLK
) || \

583 ((
MCO
Ë=
RCC_MCO_PLL3CLK_Div2
Ë|| ((MCOË=
RCC_MCO_XT1
) || \

584 ((
MCO
Ë=
RCC_MCO_PLL3CLK
))

	)

595 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

596 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

597 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

598 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

599 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

600 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

601 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

602 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

603 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

604 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

605 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

607 #i‚de‡
STM32F10X_CL


608 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

609 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

610 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

611 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

612 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

613 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

	)

615 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)0x3B)

	)

616 
	#RCC_FLAG_PLL3RDY
 ((
uöt8_t
)0x3D)

	)

617 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

618 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

619 ((
FLAG
Ë=
RCC_FLAG_PLL2RDY
Ë|| ((FLAGË=
RCC_FLAG_PLL3RDY
) || \

620 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

621 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

622 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

623 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

	)

626 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

647 
RCC_DeInô
();

648 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

649 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

650 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

651 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

652 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

653 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

655 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

656 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
);

659 #ifde‡ 
STM32F10X_CL


660 
RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
);

661 
RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
);

662 
RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

663 
RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
);

664 
RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

667 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

668 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

669 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

670 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

671 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

672 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

674 #i‚de‡
STM32F10X_CL


675 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

677 
RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
);

680 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

682 #ifde‡
STM32F10X_CL


683 
RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
);

684 
RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
);

687 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

688 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

689 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

690 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

691 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

692 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

694 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

696 #ifde‡
STM32F10X_CL


697 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

700 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

701 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

702 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

703 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

704 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

705 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

706 
RCC_CÀ¨Fœg
();

707 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

708 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

710 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_rtc.h

24 #i‚de‡
__STM32F10x_RTC_H


25 
	#__STM32F10x_RTC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

59 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

60 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

61 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

62 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
) || \

63 ((
IT
Ë=
RTC_IT_SEC
))

	)

72 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

73 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

74 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

75 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

76 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

77 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

78 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
) || \

79 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

80 ((
FLAG
Ë=
RTC_FLAG_SEC
))

	)

81 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

103 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

104 
RTC_E¡îC⁄figMode
();

105 
RTC_ExôC⁄figMode
();

106 
uöt32_t
 
RTC_GëCou¡î
();

107 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

108 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

109 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

110 
uöt32_t
 
RTC_GëDividî
();

111 
RTC_WaôF‹La°Task
();

112 
RTC_WaôF‹Synchro
();

113 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

114 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

115 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

116 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

118 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_sdio.h

24 #i‚de‡
__STM32F10x_SDIO_H


25 
	#__STM32F10x_SDIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SDIO_ClockEdge
;

51 
uöt32_t
 
SDIO_ClockBy∑ss
;

55 
uöt32_t
 
SDIO_ClockPowîSave
;

59 
uöt32_t
 
SDIO_BusWide
;

62 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

65 
uöt8_t
 
SDIO_ClockDiv
;

68 } 
	tSDIO_InôTy≥Def
;

72 
uöt32_t
 
SDIO_Argumít
;

77 
uöt32_t
 
SDIO_CmdIndex
;

79 
uöt32_t
 
SDIO_Re•⁄£
;

82 
uöt32_t
 
SDIO_Waô
;

85 
uöt32_t
 
SDIO_CPSM
;

88 } 
	tSDIO_CmdInôTy≥Def
;

92 
uöt32_t
 
SDIO_D©aTimeOut
;

94 
uöt32_t
 
SDIO_D©aLígth
;

96 
uöt32_t
 
SDIO_D©aBlockSize
;

99 
uöt32_t
 
SDIO_Tøns„rDú
;

103 
uöt32_t
 
SDIO_Tøns„rMode
;

106 
uöt32_t
 
SDIO_DPSM
;

109 } 
	tSDIO_D©aInôTy≥Def
;

123 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

124 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

125 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
) || \

126 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

	)

135 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

136 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

137 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
) || \

138 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

	)

147 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

148 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

149 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
) || \

150 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

	)

159 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

160 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

161 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

162 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
) || \

163 ((
WIDE
Ë=
SDIO_BusWide_8b
))

	)

173 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

174 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

175 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
) || \

176 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

	)

185 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

186 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

187 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

197 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

198 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

199 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

200 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

201 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

202 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

203 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

204 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

205 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

206 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

207 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

208 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

209 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

210 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

211 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

212 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

213 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

214 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

215 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

216 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

217 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

218 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

219 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

220 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

221 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

230 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

239 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

240 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

241 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

242 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
) || \

243 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

244 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

	)

253 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

254 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

255 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

256 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
) || \

257 ((
WAIT
Ë=
SDIO_Waô_Píd
))

	)

266 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

267 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

268 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

277 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

278 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

279 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

280 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

281 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
) || \

282 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

	)

291 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

300 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

301 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

302 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

303 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

304 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

305 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

306 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

307 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

308 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

309 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

310 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

311 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

312 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

313 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

314 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

315 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
) || \

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

	)

338 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

339 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

340 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
) || \

341 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

	)

350 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

351 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

352 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
) || \

353 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

	)

362 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

363 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

364 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

373 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

374 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

375 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

376 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

377 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

378 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

379 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

380 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

381 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

382 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

383 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

384 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

385 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

386 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

387 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

388 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

389 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

390 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

391 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

392 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

393 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

394 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

395 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

396 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

397 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
) || \

398 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

	)

422 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

424 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
) || \

425 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

426 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

427 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

428 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

429 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

430 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

431 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

432 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

433 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

434 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

435 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

436 ((
IT
Ë=
SDIO_IT_TXACT
) || \

437 ((
IT
Ë=
SDIO_IT_RXACT
) || \

438 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

439 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

440 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

441 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

442 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

443 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

444 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

445 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

446 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

447 ((
IT
Ë=
SDIO_IT_CEATAEND
))

	)

449 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

459 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

460 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

461 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
) || \

462 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

	)

483 
SDIO_DeInô
();

484 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

485 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

486 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

487 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

488 
uöt32_t
 
SDIO_GëPowîSèã
();

489 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

491 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

492 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

493 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

494 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

495 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

497 
uöt32_t
 
SDIO_GëD©aCou¡î
();

498 
uöt32_t
 
SDIO_RódD©a
();

499 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

500 
uöt32_t
 
SDIO_GëFIFOCou¡
();

501 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

504 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

510 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

511 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

512 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

514 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_spi.h

24 #i‚de‡
__STM32F10x_SPI_H


25 
	#__STM32F10x_SPI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
SPI_Dúe˘i⁄
;

55 
uöt16_t
 
SPI_Mode
;

58 
uöt16_t
 
SPI_D©aSize
;

61 
uöt16_t
 
SPI_CPOL
;

64 
uöt16_t
 
SPI_CPHA
;

67 
uöt16_t
 
SPI_NSS
;

71 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

77 
uöt16_t
 
SPI_Fú°Bô
;

80 
uöt16_t
 
SPI_CRCPﬁynomül
;

81 }
	tSPI_InôTy≥Def
;

90 
uöt16_t
 
I2S_Mode
;

93 
uöt16_t
 
I2S_Sènd¨d
;

96 
uöt16_t
 
I2S_D©aF‹m©
;

99 
uöt16_t
 
I2S_MCLKOuçut
;

102 
uöt32_t
 
I2S_AudioFªq
;

105 
uöt16_t
 
I2S_CPOL
;

107 }
	tI2S_InôTy≥Def
;

117 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

118 ((
PERIPH
Ë=
SPI2
) || \

119 ((
PERIPH
Ë=
SPI3
))

	)

121 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

122 ((
PERIPH
Ë=
SPI3
))

	)

128 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

129 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

130 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

131 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

132 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

133 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

135 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

144 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

145 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

146 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

147 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

156 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

157 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

158 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

159 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

168 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

169 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

170 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

171 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

180 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

181 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

182 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

183 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

192 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

193 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

194 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

195 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

204 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

205 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

206 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

207 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

208 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

209 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

210 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

211 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

212 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

213 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

219 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

228 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

229 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

230 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

231 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

240 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

241 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

242 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

243 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

244 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

245 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

246 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

247 ((
MODE
Ë=
I2S_Mode_Ma°îRx
Ë)

	)

256 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

257 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

258 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

259 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

260 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

261 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

262 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

263 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

265 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

274 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

275 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

276 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

277 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

278 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

279 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

280 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

281 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

290 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

291 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

292 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

293 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

302 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

303 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

304 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

305 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

306 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

307 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

308 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

309 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

310 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

311 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

313 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
) && \

314 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

315 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

324 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

325 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

326 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

327 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

336 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

337 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

338 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

347 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

348 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

349 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

350 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

359 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

360 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

361 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

370 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

371 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

372 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

373 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

382 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

383 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

384 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

385 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

386 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

387 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

388 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

389 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

390 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

391 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

392 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

393 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
) || \

394 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

395 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

	)

404 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

405 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

406 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

407 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

408 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

409 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

410 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

411 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

412 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

413 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

414 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

415 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

416 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

	)

425 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

446 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

447 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

448 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

449 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

450 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

451 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

452 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

456 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

457 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

458 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

460 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

461 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

463 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

464 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

465 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

466 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

467 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

468 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

470 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_tim.h

24 #i‚de‡
__STM32F10x_TIM_H


25 
	#__STM32F10x_TIM_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

53 
uöt16_t
 
TIM_PªsˇÀr
;

56 
uöt16_t
 
TIM_Cou¡îMode
;

59 
uöt16_t
 
TIM_Pîiod
;

63 
uöt16_t
 
TIM_ClockDivisi⁄
;

66 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

74 } 
	tTIM_TimeBa£InôTy≥Def
;

82 
uöt16_t
 
TIM_OCMode
;

85 
uöt16_t
 
TIM_OuçutSèã
;

88 
uöt16_t
 
TIM_OuçutNSèã
;

92 
uöt16_t
 
TIM_Pul£
;

95 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

98 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCIdÀSèã
;

106 
uöt16_t
 
TIM_OCNIdÀSèã
;

109 } 
	tTIM_OCInôTy≥Def
;

118 
uöt16_t
 
TIM_Ch™√l
;

121 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

124 
uöt16_t
 
TIM_ICSñe˘i⁄
;

127 
uöt16_t
 
TIM_ICPªsˇÀr
;

130 
uöt16_t
 
TIM_ICFûãr
;

132 } 
	tTIM_ICInôTy≥Def
;

142 
uöt16_t
 
TIM_OSSRSèã
;

145 
uöt16_t
 
TIM_OSSISèã
;

148 
uöt16_t
 
TIM_LOCKLevñ
;

151 
uöt16_t
 
TIM_DódTime
;

155 
uöt16_t
 
TIM_Bªak
;

158 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

161 
uöt16_t
 
TIM_Autom©icOuçut
;

163 } 
	tTIM_BDTRInôTy≥Def
;

169 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

170 ((
PERIPH
Ë=
TIM2
) || \

171 ((
PERIPH
Ë=
TIM3
) || \

172 ((
PERIPH
Ë=
TIM4
) || \

173 ((
PERIPH
Ë=
TIM5
) || \

174 ((
PERIPH
Ë=
TIM6
) || \

175 ((
PERIPH
Ë=
TIM7
) || \

176 ((
PERIPH
Ë=
TIM8
) || \

177 ((
PERIPH
Ë=
TIM9
) || \

178 ((
PERIPH
Ë=
TIM10
)|| \

179 ((
PERIPH
Ë=
TIM11
)|| \

180 ((
PERIPH
Ë=
TIM12
)|| \

181 ((
PERIPH
Ë=
TIM13
)|| \

182 ((
PERIPH
Ë=
TIM14
)|| \

183 ((
PERIPH
Ë=
TIM15
)|| \

184 ((
PERIPH
Ë=
TIM16
)|| \

185 ((
PERIPH
Ë=
TIM17
))

	)

188 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

189 ((
PERIPH
Ë=
TIM8
))

	)

192 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

193 ((
PERIPH
Ë=
TIM8
) || \

194 ((
PERIPH
Ë=
TIM15
)|| \

195 ((
PERIPH
Ë=
TIM16
)|| \

196 ((
PERIPH
Ë=
TIM17
))

	)

199 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

200 ((
PERIPH
Ë=
TIM2
) || \

201 ((
PERIPH
Ë=
TIM3
) || \

202 ((
PERIPH
Ë=
TIM4
) || \

203 ((
PERIPH
Ë=
TIM5
) || \

204 ((
PERIPH
Ë=
TIM8
))

	)

207 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

208 ((
PERIPH
Ë=
TIM2
) || \

209 ((
PERIPH
Ë=
TIM3
) || \

210 ((
PERIPH
Ë=
TIM4
) || \

211 ((
PERIPH
Ë=
TIM5
) || \

212 ((
PERIPH
Ë=
TIM8
) || \

213 ((
PERIPH
Ë=
TIM15
)|| \

214 ((
PERIPH
Ë=
TIM16
)|| \

215 ((
PERIPH
Ë=
TIM17
))

	)

218 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

219 ((
PERIPH
Ë=
TIM2
) || \

220 ((
PERIPH
Ë=
TIM3
) || \

221 ((
PERIPH
Ë=
TIM4
) || \

222 ((
PERIPH
Ë=
TIM5
) || \

223 ((
PERIPH
Ë=
TIM8
) || \

224 ((
PERIPH
Ë=
TIM15
))

	)

227 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

228 ((
PERIPH
Ë=
TIM2
) || \

229 ((
PERIPH
Ë=
TIM3
) || \

230 ((
PERIPH
Ë=
TIM4
) || \

231 ((
PERIPH
Ë=
TIM5
) || \

232 ((
PERIPH
Ë=
TIM8
) || \

233 ((
PERIPH
Ë=
TIM9
) || \

234 ((
PERIPH
Ë=
TIM12
)|| \

235 ((
PERIPH
Ë=
TIM15
))

	)

238 
	#IS_TIM_LIST7_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

239 ((
PERIPH
Ë=
TIM2
) || \

240 ((
PERIPH
Ë=
TIM3
) || \

241 ((
PERIPH
Ë=
TIM4
) || \

242 ((
PERIPH
Ë=
TIM5
) || \

243 ((
PERIPH
Ë=
TIM6
) || \

244 ((
PERIPH
Ë=
TIM7
) || \

245 ((
PERIPH
Ë=
TIM8
) || \

246 ((
PERIPH
Ë=
TIM9
) || \

247 ((
PERIPH
Ë=
TIM12
)|| \

248 ((
PERIPH
Ë=
TIM15
))

	)

251 
	#IS_TIM_LIST8_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

252 ((
PERIPH
Ë=
TIM2
) || \

253 ((
PERIPH
Ë=
TIM3
) || \

254 ((
PERIPH
Ë=
TIM4
) || \

255 ((
PERIPH
Ë=
TIM5
) || \

256 ((
PERIPH
Ë=
TIM8
) || \

257 ((
PERIPH
Ë=
TIM9
) || \

258 ((
PERIPH
Ë=
TIM10
)|| \

259 ((
PERIPH
Ë=
TIM11
)|| \

260 ((
PERIPH
Ë=
TIM12
)|| \

261 ((
PERIPH
Ë=
TIM13
)|| \

262 ((
PERIPH
Ë=
TIM14
)|| \

263 ((
PERIPH
Ë=
TIM15
)|| \

264 ((
PERIPH
Ë=
TIM16
)|| \

265 ((
PERIPH
Ë=
TIM17
))

	)

268 
	#IS_TIM_LIST9_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

269 ((
PERIPH
Ë=
TIM2
) || \

270 ((
PERIPH
Ë=
TIM3
) || \

271 ((
PERIPH
Ë=
TIM4
) || \

272 ((
PERIPH
Ë=
TIM5
) || \

273 ((
PERIPH
Ë=
TIM6
) || \

274 ((
PERIPH
Ë=
TIM7
) || \

275 ((
PERIPH
Ë=
TIM8
) || \

276 ((
PERIPH
Ë=
TIM15
)|| \

277 ((
PERIPH
Ë=
TIM16
)|| \

278 ((
PERIPH
Ë=
TIM17
))

	)

288 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

289 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

290 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

291 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

292 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

293 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

294 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

295 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

296 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

297 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

298 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

299 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

300 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

301 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

302 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

303 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

304 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

305 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

306 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

307 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

316 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

317 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

318 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

319 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

328 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

329 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

330 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

331 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

332 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

333 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

334 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

335 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

336 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

337 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

338 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

339 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

340 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

	)

349 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

350 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

351 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

352 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

353 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

354 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

363 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

364 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

365 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

366 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

367 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

368 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

369 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

370 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

371 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

372 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

381 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

382 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

383 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

384 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

393 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

394 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

395 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
) || \

396 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

	)

405 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

406 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

407 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

408 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

417 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

418 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

419 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
) || \

420 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

	)

429 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

430 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

431 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

432 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

441 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

442 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

443 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
) || \

444 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

	)

453 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

454 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

455 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
) || \

456 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

	)

465 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

466 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

467 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
) || \

468 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

	)

477 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

478 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

479 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
) || \

480 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

	)

489 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

490 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

491 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

492 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

493 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
) || \

494 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

495 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

496 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

	)

505 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

506 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

507 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
) || \

508 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

	)

517 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

518 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

519 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
) || \

520 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

	)

529 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

530 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

531 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
) || \

532 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

	)

541 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

542 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

543 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
) || \

544 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

	)

553 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

554 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

556 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

557 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

	)

558 
	#IS_TIM_IC_POLARITY_LITE
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

559 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

560 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

	)

569 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

571 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

573 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

574 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

575 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

576 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

585 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

586 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

587 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

588 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

589 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

590 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

591 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

592 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

601 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

602 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

603 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

604 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

605 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

606 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

607 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

608 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

609 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

611 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

612 ((
IT
Ë=
TIM_IT_CC1
) || \

613 ((
IT
Ë=
TIM_IT_CC2
) || \

614 ((
IT
Ë=
TIM_IT_CC3
) || \

615 ((
IT
Ë=
TIM_IT_CC4
) || \

616 ((
IT
Ë=
TIM_IT_COM
) || \

617 ((
IT
Ë=
TIM_IT_Triggî
) || \

618 ((
IT
Ë=
TIM_IT_Bªak
))

	)

627 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

629 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

630 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

631 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

632 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

633 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

634 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

635 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

636 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

637 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

638 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

639 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

640 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

641 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

642 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

643 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

644 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

645 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

646 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

647 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

648 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

649 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

650 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

651 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

652 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

653 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

654 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

655 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

656 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

657 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

658 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

659 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

660 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

661 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

662 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

663 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

664 ((
BASE
Ë=
TIM_DMABa£_DCR
))

	)

673 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

674 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

675 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

676 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

677 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

678 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

679 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

680 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

681 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

682 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

683 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

684 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

685 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

686 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

687 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

688 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

689 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

691 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
) || \

692 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

693 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

694 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

695 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

696 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

697 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

698 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

699 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

700 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

701 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

702 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

703 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

704 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

705 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

706 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

707 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

708 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

	)

717 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

718 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

719 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

720 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

721 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

722 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

723 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

724 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

734 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

735 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

736 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

737 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

738 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

739 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

740 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

741 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

750 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

751 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

752 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

753 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

754 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

755 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

756 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

757 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

758 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

759 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

760 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

761 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

762 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

763 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

764 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

765 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

766 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

767 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

768 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

769 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

778 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

779 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

780 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

781 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
) || \

782 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

783 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

	)

791 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

792 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

793 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

794 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

803 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

804 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

805 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

806 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

815 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

816 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

817 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

818 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

827 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

828 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

829 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

830 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

831 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

832 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

842 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

843 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

844 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

845 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

846 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

847 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

848 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

849 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

850 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

860 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

863 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

864 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

865 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

874 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

875 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

876 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

877 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

886 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

887 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

888 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

889 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

899 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

900 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

901 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

902 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

911 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

912 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

913 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

914 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

915 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

916 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

917 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

918 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

919 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

920 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

921 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

922 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

923 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

924 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

925 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

926 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

935 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

936 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

937 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

938 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

939 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

940 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

941 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

942 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

951 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

952 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

953 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

954 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

963 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

964 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

965 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

966 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

967 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

968 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

969 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

970 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

971 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

972 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

973 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

974 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

975 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

976 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

977 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

978 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

979 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

980 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

981 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

982 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

983 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

984 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

985 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

986 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

989 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE100Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

998 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1007 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

1016 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

1017 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

1018 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

1019 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1020 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1021 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1022 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1023 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1024 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1025 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1026 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1027 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1028 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1029 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1030 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1031 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1032 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1033 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1054 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1055 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1056 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1057 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1058 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1059 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1060 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1061 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1062 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1063 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1064 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1065 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1066 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1067 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1068 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1069 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1070 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1071 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1072 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1073 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1074 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1075 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1076 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1077 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1078 
uöt16_t
 
ExtTRGFûãr
);

1079 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1080 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1081 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1082 
uöt16_t
 
ExtTRGFûãr
);

1083 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1084 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1085 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1086 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1087 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1088 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1089 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1090 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1091 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1092 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1093 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1094 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1095 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1097 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1098 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1099 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1100 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1101 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1102 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1103 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1104 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1105 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1106 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1107 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1108 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1109 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1110 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1111 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1112 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1113 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1114 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1115 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1116 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1117 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1118 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1119 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1120 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1121 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1126 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1127 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1128 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1129 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1130 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1131 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1132 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1133 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1134 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1135 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1136 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1137 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1138 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1139 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1140 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1141 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1142 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1143 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1144 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1145 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1147 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_usart.h

24 #i‚de‡
__STM32F10x_USART_H


25 
	#__STM32F10x_USART_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
USART_BaudR©e
;

57 
uöt16_t
 
USART_W‹dLígth
;

60 
uöt16_t
 
USART_St›Bôs
;

63 
uöt16_t
 
USART_P¨ôy
;

70 
uöt16_t
 
USART_Mode
;

73 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

76 } 
	tUSART_InôTy≥Def
;

85 
uöt16_t
 
USART_Clock
;

88 
uöt16_t
 
USART_CPOL
;

91 
uöt16_t
 
USART_CPHA
;

94 
uöt16_t
 
USART_La°Bô
;

97 } 
	tUSART_ClockInôTy≥Def
;

107 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

108 ((
PERIPH
Ë=
USART2
) || \

109 ((
PERIPH
Ë=
USART3
) || \

110 ((
PERIPH
Ë=
UART4
) || \

111 ((
PERIPH
Ë=
UART5
))

	)

113 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

114 ((
PERIPH
Ë=
USART2
) || \

115 ((
PERIPH
Ë=
USART3
))

	)

117 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

118 ((
PERIPH
Ë=
USART2
) || \

119 ((
PERIPH
Ë=
USART3
) || \

120 ((
PERIPH
Ë=
UART4
))

	)

125 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

126 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

128 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

129 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

138 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

139 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

140 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

141 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

142 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

143 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

145 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

154 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

155 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

156 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

157 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

158 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

159 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

168 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

169 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

170 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

181 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

182 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

183 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

186 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

194 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

195 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

196 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

197 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

206 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

207 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

208 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

218 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

219 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

220 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

230 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

231 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

232 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

233 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

242 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

243 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

244 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

245 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

246 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

247 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

248 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

249 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

250 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

251 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

252 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

253 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

254 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

255 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

256 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

257 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

258 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

259 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

260 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

261 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

	)

262 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

263 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

272 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

273 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

274 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

284 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

285 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

286 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

287 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

296 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

297 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

298 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

299 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

300 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

309 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

310 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

311 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

312 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

321 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

322 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

323 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

324 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

325 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

326 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

327 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

328 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

329 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

330 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

331 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

332 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

333 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

334 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

335 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

337 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

338 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
) &&\

339 ((*(
uöt32_t
*)&(
PERIPH
)Ë!
UART5_BASE
)) \

340 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

	)

341 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

342 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

343 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

365 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

366 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

367 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

368 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

369 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

370 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

373 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

374 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

375 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

376 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

377 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

378 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

379 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

380 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

381 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

382 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

383 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

388 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

389 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

390 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

391 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

392 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

393 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

395 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/inc/stm32f10x_wwdg.h

24 #i‚de‡
__STM32F10x_WWDG_H


25 
	#__STM32F10x_WWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

59 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

60 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

61 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

62 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
) || \

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

	)

66 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

67 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

88 
WWDG_DeInô
();

89 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

90 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

91 
WWDG_E«bÀIT
();

92 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

93 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

94 
FœgSètus
 
WWDG_GëFœgSètus
();

95 
WWDG_CÀ¨Fœg
();

97 #ifde‡
__˝lu•lus


	@STM32F10x_FWLib/src/misc.c

24 
	~"misc.h
"

47 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

96 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

99 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

102 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

103 
	}
}

112 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

114 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

117 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

118 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

119 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

121 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

124 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

125 
tmµª
 = (0x4 - 
tmµri‹ôy
);

126 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

128 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

129 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

130 
tmµri‹ôy
 =Åmppriority << 0x04;

132 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

135 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

136 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

141 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

142 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

144 
	}
}

156 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

159 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

160 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

162 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

163 
	}
}

175 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

178 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

181 i‡(
NewSèã
 !
DISABLE
)

183 
SCB
->
SCR
 |
LowPowîMode
;

187 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

189 
	}
}

199 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

202 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

203 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

205 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

209 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

211 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_adc.c

23 
	~"°m32f10x_adc.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#CR1_DISCNUM_Re£t
 ((
uöt32_t
)0xFFFF1FFF)

	)

51 
	#CR1_DISCEN_Së
 ((
uöt32_t
)0x00000800)

	)

52 
	#CR1_DISCEN_Re£t
 ((
uöt32_t
)0xFFFFF7FF)

	)

55 
	#CR1_JAUTO_Së
 ((
uöt32_t
)0x00000400)

	)

56 
	#CR1_JAUTO_Re£t
 ((
uöt32_t
)0xFFFFFBFF)

	)

59 
	#CR1_JDISCEN_Së
 ((
uöt32_t
)0x00001000)

	)

60 
	#CR1_JDISCEN_Re£t
 ((
uöt32_t
)0xFFFFEFFF)

	)

63 
	#CR1_AWDCH_Re£t
 ((
uöt32_t
)0xFFFFFFE0)

	)

66 
	#CR1_AWDMode_Re£t
 ((
uöt32_t
)0xFF3FFDFF)

	)

69 
	#CR1_CLEAR_Mask
 ((
uöt32_t
)0xFFF0FEFF)

	)

72 
	#CR2_ADON_Së
 ((
uöt32_t
)0x00000001)

	)

73 
	#CR2_ADON_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

76 
	#CR2_DMA_Së
 ((
uöt32_t
)0x00000100)

	)

77 
	#CR2_DMA_Re£t
 ((
uöt32_t
)0xFFFFFEFF)

	)

80 
	#CR2_RSTCAL_Së
 ((
uöt32_t
)0x00000008)

	)

83 
	#CR2_CAL_Së
 ((
uöt32_t
)0x00000004)

	)

86 
	#CR2_SWSTART_Së
 ((
uöt32_t
)0x00400000)

	)

89 
	#CR2_EXTTRIG_Së
 ((
uöt32_t
)0x00100000)

	)

90 
	#CR2_EXTTRIG_Re£t
 ((
uöt32_t
)0xFFEFFFFF)

	)

93 
	#CR2_EXTTRIG_SWSTART_Së
 ((
uöt32_t
)0x00500000)

	)

94 
	#CR2_EXTTRIG_SWSTART_Re£t
 ((
uöt32_t
)0xFFAFFFFF)

	)

97 
	#CR2_JEXTSEL_Re£t
 ((
uöt32_t
)0xFFFF8FFF)

	)

100 
	#CR2_JEXTTRIG_Së
 ((
uöt32_t
)0x00008000)

	)

101 
	#CR2_JEXTTRIG_Re£t
 ((
uöt32_t
)0xFFFF7FFF)

	)

104 
	#CR2_JSWSTART_Së
 ((
uöt32_t
)0x00200000)

	)

107 
	#CR2_JEXTTRIG_JSWSTART_Së
 ((
uöt32_t
)0x00208000)

	)

108 
	#CR2_JEXTTRIG_JSWSTART_Re£t
 ((
uöt32_t
)0xFFDF7FFF)

	)

111 
	#CR2_TSVREFE_Së
 ((
uöt32_t
)0x00800000)

	)

112 
	#CR2_TSVREFE_Re£t
 ((
uöt32_t
)0xFF7FFFFF)

	)

115 
	#CR2_CLEAR_Mask
 ((
uöt32_t
)0xFFF1F7FD)

	)

118 
	#SQR3_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

119 
	#SQR2_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

120 
	#SQR1_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

123 
	#SQR1_CLEAR_Mask
 ((
uöt32_t
)0xFF0FFFFF)

	)

126 
	#JSQR_JSQ_Së
 ((
uöt32_t
)0x0000001F)

	)

129 
	#JSQR_JL_Së
 ((
uöt32_t
)0x00300000)

	)

130 
	#JSQR_JL_Re£t
 ((
uöt32_t
)0xFFCFFFFF)

	)

133 
	#SMPR1_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

134 
	#SMPR2_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

137 
	#JDR_Off£t
 ((
uöt8_t
)0x28)

	)

140 
	#DR_ADDRESS
 ((
uöt32_t
)0x4001244C)

	)

179 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

182 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

184 i‡(
ADCx
 =
ADC1
)

187 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

189 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

191 i‡(
ADCx
 =
ADC2
)

194 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
ENABLE
);

196 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
DISABLE
);

200 i‡(
ADCx
 =
ADC3
)

203 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
ENABLE
);

205 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
DISABLE
);

208 
	}
}

218 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

220 
uöt32_t
 
tm¥eg1
 = 0;

221 
uöt8_t
 
tm¥eg2
 = 0;

223 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

224 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_InôSåu˘
->
ADC_Mode
));

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

227 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

228 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

229 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
));

233 
tm¥eg1
 = 
ADCx
->
CR1
;

235 
tm¥eg1
 &
CR1_CLEAR_Mask
;

239 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_Mode
 | ((uöt32_t)ADC_InôSåu˘->
ADC_SˇnC⁄vMode
 << 8));

241 
ADCx
->
CR1
 = 
tm¥eg1
;

245 
tm¥eg1
 = 
ADCx
->
CR2
;

247 
tm¥eg1
 &
CR2_CLEAR_Mask
;

252 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

253 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

255 
ADCx
->
CR2
 = 
tm¥eg1
;

259 
tm¥eg1
 = 
ADCx
->
SQR1
;

261 
tm¥eg1
 &
SQR1_CLEAR_Mask
;

264 
tm¥eg2
 |(
uöt8_t
Ë(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 - (uint8_t)1);

265 
tm¥eg1
 |(
uöt32_t
)
tm¥eg2
 << 20;

267 
ADCx
->
SQR1
 = 
tm¥eg1
;

268 
	}
}

275 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

279 
ADC_InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

281 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

283 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

285 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

287 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

289 
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 = 1;

290 
	}
}

299 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

302 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

303 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

304 i‡(
NewSèã
 !
DISABLE
)

307 
ADCx
->
CR2
 |
CR2_ADON_Së
;

312 
ADCx
->
CR2
 &
CR2_ADON_Re£t
;

314 
	}
}

324 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

327 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

328 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

329 i‡(
NewSèã
 !
DISABLE
)

332 
ADCx
->
CR2
 |
CR2_DMA_Së
;

337 
ADCx
->
CR2
 &
CR2_DMA_Re£t
;

339 
	}
}

353 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

355 
uöt8_t
 
ômask
 = 0;

357 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

358 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

359 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

361 
ômask
 = (
uöt8_t
)
ADC_IT
;

362 i‡(
NewSèã
 !
DISABLE
)

365 
ADCx
->
CR1
 |
ômask
;

370 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

372 
	}
}

379 
	$ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

382 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

384 
ADCx
->
CR2
 |
CR2_RSTCAL_Së
;

385 
	}
}

392 
FœgSètus
 
	$ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

394 
FœgSètus
 
bô°©us
 = 
RESET
;

396 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

398 i‡((
ADCx
->
CR2
 & 
CR2_RSTCAL_Së
Ë!(
uöt32_t
)
RESET
)

401 
bô°©us
 = 
SET
;

406 
bô°©us
 = 
RESET
;

409  
bô°©us
;

410 
	}
}

417 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

420 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

422 
ADCx
->
CR2
 |
CR2_CAL_Së
;

423 
	}
}

430 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

432 
FœgSètus
 
bô°©us
 = 
RESET
;

434 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

436 i‡((
ADCx
->
CR2
 & 
CR2_CAL_Së
Ë!(
uöt32_t
)
RESET
)

439 
bô°©us
 = 
SET
;

444 
bô°©us
 = 
RESET
;

447  
bô°©us
;

448 
	}
}

457 
	$ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

460 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

461 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

462 i‡(
NewSèã
 !
DISABLE
)

466 
ADCx
->
CR2
 |
CR2_EXTTRIG_SWSTART_Së
;

472 
ADCx
->
CR2
 &
CR2_EXTTRIG_SWSTART_Re£t
;

474 
	}
}

481 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

483 
FœgSètus
 
bô°©us
 = 
RESET
;

485 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

487 i‡((
ADCx
->
CR2
 & 
CR2_SWSTART_Së
Ë!(
uöt32_t
)
RESET
)

490 
bô°©us
 = 
SET
;

495 
bô°©us
 = 
RESET
;

498  
bô°©us
;

499 
	}
}

509 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

511 
uöt32_t
 
tm¥eg1
 = 0;

512 
uöt32_t
 
tm¥eg2
 = 0;

514 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

515 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

517 
tm¥eg1
 = 
ADCx
->
CR1
;

519 
tm¥eg1
 &
CR1_DISCNUM_Re£t
;

521 
tm¥eg2
 = 
Numbî
 - 1;

522 
tm¥eg1
 |
tm¥eg2
 << 13;

524 
ADCx
->
CR1
 = 
tm¥eg1
;

525 
	}
}

536 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

539 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

541 i‡(
NewSèã
 !
DISABLE
)

544 
ADCx
->
CR1
 |
CR1_DISCEN_Së
;

549 
ADCx
->
CR1
 &
CR1_DISCEN_Re£t
;

551 
	}
}

590 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

592 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

594 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

595 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

596 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

597 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

599 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

602 
tm¥eg1
 = 
ADCx
->
SMPR1
;

604 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3 * (
ADC_Ch™√l
 - 10));

606 
tm¥eg1
 &~
tm¥eg2
;

608 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

610 
tm¥eg1
 |
tm¥eg2
;

612 
ADCx
->
SMPR1
 = 
tm¥eg1
;

617 
tm¥eg1
 = 
ADCx
->
SMPR2
;

619 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

621 
tm¥eg1
 &~
tm¥eg2
;

623 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

625 
tm¥eg1
 |
tm¥eg2
;

627 
ADCx
->
SMPR2
 = 
tm¥eg1
;

630 i‡(
R™k
 < 7)

633 
tm¥eg1
 = 
ADCx
->
SQR3
;

635 
tm¥eg2
 = 
SQR3_SQ_Së
 << (5 * (
R™k
 - 1));

637 
tm¥eg1
 &~
tm¥eg2
;

639 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

641 
tm¥eg1
 |
tm¥eg2
;

643 
ADCx
->
SQR3
 = 
tm¥eg1
;

646 i‡(
R™k
 < 13)

649 
tm¥eg1
 = 
ADCx
->
SQR2
;

651 
tm¥eg2
 = 
SQR2_SQ_Së
 << (5 * (
R™k
 - 7));

653 
tm¥eg1
 &~
tm¥eg2
;

655 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

657 
tm¥eg1
 |
tm¥eg2
;

659 
ADCx
->
SQR2
 = 
tm¥eg1
;

665 
tm¥eg1
 = 
ADCx
->
SQR1
;

667 
tm¥eg2
 = 
SQR1_SQ_Së
 << (5 * (
R™k
 - 13));

669 
tm¥eg1
 &~
tm¥eg2
;

671 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

673 
tm¥eg1
 |
tm¥eg2
;

675 
ADCx
->
SQR1
 = 
tm¥eg1
;

677 
	}
}

686 
	$ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

689 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

690 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

691 i‡(
NewSèã
 !
DISABLE
)

694 
ADCx
->
CR2
 |
CR2_EXTTRIG_Së
;

699 
ADCx
->
CR2
 &
CR2_EXTTRIG_Re£t
;

701 
	}
}

708 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

711 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

713  (
uöt16_t
Ë
ADCx
->
DR
;

714 
	}
}

720 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
()

723  (*(
__IO
 
uöt32_t
 *Ë
DR_ADDRESS
);

724 
	}
}

734 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

737 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

738 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

739 i‡(
NewSèã
 !
DISABLE
)

742 
ADCx
->
CR1
 |
CR1_JAUTO_Së
;

747 
ADCx
->
CR1
 &
CR1_JAUTO_Re£t
;

749 
	}
}

760 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

763 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

764 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

765 i‡(
NewSèã
 !
DISABLE
)

768 
ADCx
->
CR1
 |
CR1_JDISCEN_Së
;

773 
ADCx
->
CR1
 &
CR1_JDISCEN_Re£t
;

775 
	}
}

799 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

801 
uöt32_t
 
tm¥eg
 = 0;

803 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

804 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

806 
tm¥eg
 = 
ADCx
->
CR2
;

808 
tm¥eg
 &
CR2_JEXTSEL_Re£t
;

810 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

812 
ADCx
->
CR2
 = 
tm¥eg
;

813 
	}
}

824 
	$ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

827 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

828 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

829 i‡(
NewSèã
 !
DISABLE
)

832 
ADCx
->
CR2
 |
CR2_JEXTTRIG_Së
;

837 
ADCx
->
CR2
 &
CR2_JEXTTRIG_Re£t
;

839 
	}
}

849 
	$ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

852 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

853 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

854 i‡(
NewSèã
 !
DISABLE
)

858 
ADCx
->
CR2
 |
CR2_JEXTTRIG_JSWSTART_Së
;

864 
ADCx
->
CR2
 &
CR2_JEXTTRIG_JSWSTART_Re£t
;

866 
	}
}

873 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

875 
FœgSètus
 
bô°©us
 = 
RESET
;

877 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

879 i‡((
ADCx
->
CR2
 & 
CR2_JSWSTART_Së
Ë!(
uöt32_t
)
RESET
)

882 
bô°©us
 = 
SET
;

887 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

930 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

932 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

934 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

935 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

936 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

937 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

939 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

942 
tm¥eg1
 = 
ADCx
->
SMPR1
;

944 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3*(
ADC_Ch™√l
 - 10));

946 
tm¥eg1
 &~
tm¥eg2
;

948 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

950 
tm¥eg1
 |
tm¥eg2
;

952 
ADCx
->
SMPR1
 = 
tm¥eg1
;

957 
tm¥eg1
 = 
ADCx
->
SMPR2
;

959 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

961 
tm¥eg1
 &~
tm¥eg2
;

963 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

965 
tm¥eg1
 |
tm¥eg2
;

967 
ADCx
->
SMPR2
 = 
tm¥eg1
;

971 
tm¥eg1
 = 
ADCx
->
JSQR
;

973 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_Së
)>> 20;

975 
tm¥eg2
 = 
JSQR_JSQ_Së
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

977 
tm¥eg1
 &~
tm¥eg2
;

979 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

981 
tm¥eg1
 |
tm¥eg2
;

983 
ADCx
->
JSQR
 = 
tm¥eg1
;

984 
	}
}

993 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

995 
uöt32_t
 
tm¥eg1
 = 0;

996 
uöt32_t
 
tm¥eg2
 = 0;

998 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

999 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1002 
tm¥eg1
 = 
ADCx
->
JSQR
;

1004 
tm¥eg1
 &
JSQR_JL_Re£t
;

1006 
tm¥eg2
 = 
Lígth
 - 1;

1007 
tm¥eg1
 |
tm¥eg2
 << 20;

1009 
ADCx
->
JSQR
 = 
tm¥eg1
;

1010 
	}
}

1025 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1027 
__IO
 
uöt32_t
 
tmp
 = 0;

1030 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1031 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1032 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1034 
tmp
 = (
uöt32_t
)
ADCx
;

1035 
tmp
 +
ADC_Inje˘edCh™√l
;

1038 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1039 
	}
}

1052 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1054 
__IO
 
uöt32_t
 
tmp
 = 0;

1057 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1058 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1060 
tmp
 = (
uöt32_t
)
ADCx
;

1061 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
;

1064  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1065 
	}
}

1082 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

1084 
uöt32_t
 
tm¥eg
 = 0;

1086 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1087 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

1089 
tm¥eg
 = 
ADCx
->
CR1
;

1091 
tm¥eg
 &
CR1_AWDMode_Re£t
;

1093 
tm¥eg
 |
ADC_A«logW©chdog
;

1095 
ADCx
->
CR1
 = 
tm¥eg
;

1096 
	}
}

1107 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

1108 
uöt16_t
 
LowThªshﬁd
)

1111 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1112 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

1113 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

1115 
ADCx
->
HTR
 = 
HighThªshﬁd
;

1117 
ADCx
->
LTR
 = 
LowThªshﬁd
;

1118 
	}
}

1145 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

1147 
uöt32_t
 
tm¥eg
 = 0;

1149 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1150 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1152 
tm¥eg
 = 
ADCx
->
CR1
;

1154 
tm¥eg
 &
CR1_AWDCH_Re£t
;

1156 
tm¥eg
 |
ADC_Ch™√l
;

1158 
ADCx
->
CR1
 = 
tm¥eg
;

1159 
	}
}

1167 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1170 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1171 i‡(
NewSèã
 !
DISABLE
)

1174 
ADC1
->
CR2
 |
CR2_TSVREFE_Së
;

1179 
ADC1
->
CR2
 &
CR2_TSVREFE_Re£t
;

1181 
	}
}

1195 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1197 
FœgSètus
 
bô°©us
 = 
RESET
;

1199 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1200 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1202 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1205 
bô°©us
 = 
SET
;

1210 
bô°©us
 = 
RESET
;

1213  
bô°©us
;

1214 
	}
}

1228 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1231 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1232 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1234 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1235 
	}
}

1247 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1249 
ITSètus
 
bô°©us
 = 
RESET
;

1250 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1252 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1253 
	`as£π_∑øm
(
	`IS_ADC_GET_IT
(
ADC_IT
));

1255 
ômask
 = 
ADC_IT
 >> 8;

1257 
íabÀ°©us
 = (
ADCx
->
CR1
 & (
uöt8_t
)
ADC_IT
) ;

1259 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1262 
bô°©us
 = 
SET
;

1267 
bô°©us
 = 
RESET
;

1270  
bô°©us
;

1271 
	}
}

1283 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1285 
uöt8_t
 
ômask
 = 0;

1287 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1288 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1290 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1292 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1293 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_bkp.c

23 
	~"°m32f10x_bkp.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#BKP_OFFSET
 (
BKP_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CR_OFFSET
 (
BKP_OFFSET
 + 0x30)

	)

54 
	#TPAL_BôNumbî
 0x01

	)

55 
	#CR_TPAL_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPAL_BôNumbî
 * 4))

	)

58 
	#TPE_BôNumbî
 0x00

	)

59 
	#CR_TPE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
BKP_OFFSET
 + 0x34)

	)

65 
	#TPIE_BôNumbî
 0x02

	)

66 
	#CSR_TPIE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TPIE_BôNumbî
 * 4))

	)

69 
	#TIF_BôNumbî
 0x09

	)

70 
	#CSR_TIF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TIF_BôNumbî
 * 4))

	)

73 
	#TEF_BôNumbî
 0x08

	)

74 
	#CSR_TEF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEF_BôNumbî
 * 4))

	)

79 
	#RTCCR_CAL_MASK
 ((
uöt16_t
)0xFF80)

	)

80 
	#RTCCR_MASK
 ((
uöt16_t
)0xFC7F)

	)

120 
	$BKP_DeInô
()

122 
	`RCC_BackupRe£tCmd
(
ENABLE
);

123 
	`RCC_BackupRe£tCmd
(
DISABLE
);

124 
	}
}

134 
	$BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
)

137 
	`as£π_∑øm
(
	`IS_BKP_TAMPER_PIN_LEVEL
(
BKP_Tam≥rPöLevñ
));

138 *(
__IO
 
uöt32_t
 *Ë
CR_TPAL_BB
 = 
BKP_Tam≥rPöLevñ
;

139 
	}
}

147 
	$BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

150 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

151 *(
__IO
 
uöt32_t
 *Ë
CR_TPE_BB
 = (uöt32_t)
NewSèã
;

152 
	}
}

160 
	$BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

163 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

164 *(
__IO
 
uöt32_t
 *Ë
CSR_TPIE_BB
 = (uöt32_t)
NewSèã
;

165 
	}
}

180 
	$BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
)

182 
uöt16_t
 
tm¥eg
 = 0;

184 
	`as£π_∑øm
(
	`IS_BKP_RTC_OUTPUT_SOURCE
(
BKP_RTCOuçutSour˚
));

185 
tm¥eg
 = 
BKP
->
RTCCR
;

187 
tm¥eg
 &
RTCCR_MASK
;

190 
tm¥eg
 |
BKP_RTCOuçutSour˚
;

192 
BKP
->
RTCCR
 = 
tm¥eg
;

193 
	}
}

201 
	$BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
)

203 
uöt16_t
 
tm¥eg
 = 0;

205 
	`as£π_∑øm
(
	`IS_BKP_CALIBRATION_VALUE
(
CÆibøti⁄VÆue
));

206 
tm¥eg
 = 
BKP
->
RTCCR
;

208 
tm¥eg
 &
RTCCR_CAL_MASK
;

210 
tm¥eg
 |
CÆibøti⁄VÆue
;

212 
BKP
->
RTCCR
 = 
tm¥eg
;

213 
	}
}

222 
	$BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
)

224 
__IO
 
uöt32_t
 
tmp
 = 0;

227 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

229 
tmp
 = (
uöt32_t
)
BKP_BASE
;

230 
tmp
 +
BKP_DR
;

232 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

233 
	}
}

241 
uöt16_t
 
	$BKP_RódBackupRegi°î
(
uöt16_t
 
BKP_DR
)

243 
__IO
 
uöt32_t
 
tmp
 = 0;

246 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

248 
tmp
 = (
uöt32_t
)
BKP_BASE
;

249 
tmp
 +
BKP_DR
;

251  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

252 
	}
}

259 
FœgSètus
 
	$BKP_GëFœgSètus
()

261  (
FœgSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TEF_BB
);

262 
	}
}

269 
	$BKP_CÀ¨Fœg
()

272 
BKP
->
CSR
 |
BKP_CSR_CTE
;

273 
	}
}

280 
ITSètus
 
	$BKP_GëITSètus
()

282  (
ITSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TIF_BB
);

283 
	}
}

290 
	$BKP_CÀ¨ITPídögBô
()

293 
BKP
->
CSR
 |
BKP_CSR_CTI
;

294 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_can.c

23 
	~"°m32f10x_ˇn.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

52 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

55 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

58 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

60 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

65 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

67 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

69 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

71 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

73 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

76 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

77 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

78 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

82 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

107 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

122 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

125 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

127 i‡(
CANx
 =
CAN1
)

130 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

132 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

137 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

141 
	}
}

154 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

156 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

157 
uöt32_t
 
waô_ack
 = 0x00000000;

159 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

160 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

161 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

162 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

163 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

164 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

165 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

166 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

167 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

168 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

169 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

170 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

173 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

176 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

179 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

181 
waô_ack
++;

185 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

187 
InôSètus
 = 
CAN_InôSètus_Faûed
;

192 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

194 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

198 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

202 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

204 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

208 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

212 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

214 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

218 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

222 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

224 
CANx
->
MCR
 |
CAN_MCR_NART
;

228 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

232 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

234 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

238 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

242 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

244 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

248 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

252 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

253 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

254 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

255 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

256 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

259 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

262 
waô_ack
 = 0;

264 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

266 
waô_ack
++;

270 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

272 
InôSètus
 = 
CAN_InôSètus_Faûed
;

276 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

281  
InôSètus
;

282 
	}
}

292 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

294 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

296 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

297 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

298 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

299 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

300 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

302 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

305 
CAN1
->
FMR
 |
FMR_FINIT
;

308 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

311 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

314 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

318 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

319 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

320 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

324 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

325 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

326 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

329 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

332 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

334 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

335 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

336 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

338 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

339 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

340 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

344 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

347 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

352 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

356 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

359 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

362 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

365 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

369 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

371 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

375 
CAN1
->
FMR
 &~
FMR_FINIT
;

376 
	}
}

384 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

389 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

392 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

395 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

398 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

401 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

404 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

407 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

410 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

413 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

416 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

419 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

420 
	}
}

428 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

431 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

434 
CAN1
->
FMR
 |
FMR_FINIT
;

437 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

438 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

441 
CAN1
->
FMR
 &~
FMR_FINIT
;

442 
	}
}

451 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

454 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

455 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

457 i‡(
NewSèã
 !
DISABLE
)

460 
CANx
->
MCR
 |
MCR_DBF
;

465 
CANx
->
MCR
 &~
MCR_DBF
;

467 
	}
}

481 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

486 i‡(
NewSèã
 !
DISABLE
)

489 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

492 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

493 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

494 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

499 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

502 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

503 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

504 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

506 
	}
}

515 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

517 
uöt8_t
 
å™smô_maûbox
 = 0;

519 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

520 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

521 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

522 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

525 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

527 
å™smô_maûbox
 = 0;

529 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

531 
å™smô_maûbox
 = 1;

533 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

535 
å™smô_maûbox
 = 2;

539 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

542 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

545 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

546 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

548 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

549 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

550 
TxMesßge
->
RTR
);

554 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

555 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

556 
TxMesßge
->
IDE
 | \

557 
TxMesßge
->
RTR
);

561 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

562 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

563 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

566 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

567 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

568 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

569 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

570 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

571 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

572 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

573 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

575 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

577  
å™smô_maûbox
;

578 
	}
}

589 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

591 
uöt32_t
 
°©e
 = 0;

594 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

595 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

597 
TønsmôMaûbox
)

599 (
CAN_TXMAILBOX_0
):

600 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

602 (
CAN_TXMAILBOX_1
):

603 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

605 (
CAN_TXMAILBOX_2
):

606 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

609 
°©e
 = 
CAN_TxSètus_Faûed
;

612 
°©e
)

615 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

618 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

620 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

622 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

625 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

627 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

629 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

631 : 
°©e
 = 
CAN_TxSètus_Faûed
;

634  (
uöt8_t
Ë
°©e
;

635 
	}
}

643 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

646 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

647 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

649 
Maûbox
)

651 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

653 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

655 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

660 
	}
}

671 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

674 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

675 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

677 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

678 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

680 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

684 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

687 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

689 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

691 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

693 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

694 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

695 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

696 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

697 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

698 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

699 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

700 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

703 i‡(
FIFONumbî
 =
CAN_FIFO0
)

705 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

710 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

712 
	}
}

720 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

723 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

724 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

726 i‡(
FIFONumbî
 =
CAN_FIFO0
)

728 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

733 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

735 
	}
}

743 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

745 
uöt8_t
 
mesßge_≥ndög
=0;

747 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

748 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

749 i‡(
FIFONumbî
 =
CAN_FIFO0
)

751 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

753 i‡(
FIFONumbî
 =
CAN_FIFO1
)

755 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

759 
mesßge_≥ndög
 = 0;

761  
mesßge_≥ndög
;

762 
	}
}

774 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

776 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

779 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

782 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

783 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

785 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

788 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

791 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

793 
timeout
--;

795 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

797 
°©us
 = 
CAN_ModeSètus_Faûed
;

801 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

804 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

807 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

810 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

812 
timeout
--;

814 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

816 
°©us
 = 
CAN_ModeSètus_Faûed
;

820 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

823 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

826 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

829 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

831 
timeout
--;

833 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

835 
°©us
 = 
CAN_ModeSètus_Faûed
;

839 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

844 
°©us
 = 
CAN_ModeSètus_Faûed
;

847  (
uöt8_t
Ë
°©us
;

848 
	}
}

856 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

858 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

861 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

864 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

867 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

870 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

873  (
uöt8_t
)
¶ìp°©us
;

874 
	}
}

882 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

884 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

885 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

888 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

891 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

894 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

896 
waô_¶ak
--;

898 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

901 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

904  (
uöt8_t
)
wakeup°©us
;

905 
	}
}

922 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

924 
uöt8_t
 
îr‹code
=0;

927 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

930 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

933  
îr‹code
;

934 
	}
}

946 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

948 
uöt8_t
 
cou¡î
=0;

951 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

954 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

957  
cou¡î
;

958 
	}
}

966 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

968 
uöt8_t
 
cou¡î
=0;

971 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

974 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

977  
cou¡î
;

978 
	}
}

1003 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1006 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1007 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1008 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1010 i‡(
NewSèã
 !
DISABLE
)

1013 
CANx
->
IER
 |
CAN_IT
;

1018 
CANx
->
IER
 &~
CAN_IT
;

1020 
	}
}

1043 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1045 
FœgSètus
 
bô°©us
 = 
RESET
;

1048 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1049 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1052 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1055 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1058 
bô°©us
 = 
SET
;

1063 
bô°©us
 = 
RESET
;

1066 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1069 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1072 
bô°©us
 = 
SET
;

1077 
bô°©us
 = 
RESET
;

1080 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1083 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1086 
bô°©us
 = 
SET
;

1091 
bô°©us
 = 
RESET
;

1094 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1097 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1100 
bô°©us
 = 
SET
;

1105 
bô°©us
 = 
RESET
;

1111 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1114 
bô°©us
 = 
SET
;

1119 
bô°©us
 = 
RESET
;

1123  
bô°©us
;

1124 
	}
}

1143 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1145 
uöt32_t
 
Êagtmp
=0;

1147 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1148 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1150 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1153 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1157 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1159 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1162 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1164 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1167 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1169 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1172 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1177 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1180 
	}
}

1203 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1205 
ITSètus
 
ô°©us
 = 
RESET
;

1207 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1208 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1211 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1214 
CAN_IT
)

1216 
CAN_IT_TME
:

1218 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1220 
CAN_IT_FMP0
:

1222 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1224 
CAN_IT_FF0
:

1226 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1228 
CAN_IT_FOV0
:

1230 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1232 
CAN_IT_FMP1
:

1234 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1236 
CAN_IT_FF1
:

1238 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1240 
CAN_IT_FOV1
:

1242 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1244 
CAN_IT_WKU
:

1246 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1248 
CAN_IT_SLK
:

1250 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1252 
CAN_IT_EWG
:

1254 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1256 
CAN_IT_EPV
:

1258 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1260 
CAN_IT_BOF
:

1262 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1264 
CAN_IT_LEC
:

1266 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1268 
CAN_IT_ERR
:

1270 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1274 
ô°©us
 = 
RESET
;

1281 
ô°©us
 = 
RESET
;

1285  
ô°©us
;

1286 
	}
}

1306 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1309 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1310 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1312 
CAN_IT
)

1314 
CAN_IT_TME
:

1316 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1318 
CAN_IT_FF0
:

1320 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1322 
CAN_IT_FOV0
:

1324 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1326 
CAN_IT_FF1
:

1328 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1330 
CAN_IT_FOV1
:

1332 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1334 
CAN_IT_WKU
:

1336 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1338 
CAN_IT_SLK
:

1340 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1342 
CAN_IT_EWG
:

1344 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1348 
CAN_IT_EPV
:

1350 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1354 
CAN_IT_BOF
:

1356 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1360 
CAN_IT_LEC
:

1362 
CANx
->
ESR
 = 
RESET
;

1364 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1366 
CAN_IT_ERR
:

1368 
CANx
->
ESR
 = 
RESET
;

1370 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1377 
	}
}

1385 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1387 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1389 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1392 
≥ndögbô°©us
 = 
SET
;

1397 
≥ndögbô°©us
 = 
RESET
;

1399  
≥ndögbô°©us
;

1400 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_cec.c

23 
	~"°m32f10x_˚c.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CEC_OFFSET
 (
CEC_BASE
 - 
PERIPH_BASE
)

	)

54 
	#CFGR_OFFSET
 (
CEC_OFFSET
 + 0x00)

	)

55 
	#PE_BôNumbî
 0x00

	)

56 
	#CFGR_PE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
PE_BôNumbî
 * 4))

	)

59 
	#IE_BôNumbî
 0x01

	)

60 
	#CFGR_IE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
IE_BôNumbî
 * 4))

	)

65 
	#CSR_OFFSET
 (
CEC_OFFSET
 + 0x10)

	)

66 
	#TSOM_BôNumbî
 0x00

	)

67 
	#CSR_TSOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TSOM_BôNumbî
 * 4))

	)

70 
	#TEOM_BôNumbî
 0x01

	)

71 
	#CSR_TEOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEOM_BôNumbî
 * 4))

	)

73 
	#CFGR_CLEAR_Mask
 (
uöt8_t
)(0xF3Ë

	)

74 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFFË

	)

118 
	$CEC_DeInô
()

121 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
ENABLE
);

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
DISABLE
);

124 
	}
}

135 
	$CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
)

137 
uöt16_t
 
tm¥eg
 = 0;

140 
	`as£π_∑øm
(
	`IS_CEC_BIT_TIMING_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôTimögMode
));

141 
	`as£π_∑øm
(
	`IS_CEC_BIT_PERIOD_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôPîiodMode
));

145 
tm¥eg
 = 
CEC
->
CFGR
;

148 
tm¥eg
 &
CFGR_CLEAR_Mask
;

151 
tm¥eg
 |(
uöt16_t
)(
CEC_InôSåu˘
->
CEC_BôTimögMode
 | CEC_InôSåu˘->
CEC_BôPîiodMode
);

154 
CEC
->
CFGR
 = 
tm¥eg
;

156 
	}
}

164 
	$CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

167 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

169 *(
__IO
 
uöt32_t
 *Ë
CFGR_PE_BB
 = (uöt32_t)
NewSèã
;

171 if(
NewSèã
 =
DISABLE
)

174 (
CEC
->
CFGR
 & 
CEC_CFGR_PE
Ë!(
uöt32_t
)
RESET
)

178 
	}
}

186 
	$CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

189 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

191 *(
__IO
 
uöt32_t
 *Ë
CFGR_IE_BB
 = (uöt32_t)
NewSèã
;

192 
	}
}

199 
	$CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
)

202 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
CEC_OwnAddªss
));

205 
CEC
->
OAR
 = 
CEC_OwnAddªss
;

206 
	}
}

213 
	$CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
)

216 
	`as£π_∑øm
(
	`IS_CEC_PRESCALER
(
CEC_PªsˇÀr
));

219 
CEC
->
PRES
 = 
CEC_PªsˇÀr
;

220 
	}
}

227 
	$CEC_SídD©aByã
(
uöt8_t
 
D©a
)

230 
CEC
->
TXD
 = 
D©a
 ;

231 
	}
}

239 
uöt8_t
 
	$CEC_Re˚iveD©aByã
()

242  (
uöt8_t
)(
CEC
->
RXD
);

243 
	}
}

250 
	$CEC_SèπOfMesßge
()

253 *(
__IO
 
uöt32_t
 *Ë
CSR_TSOM_BB
 = (uint32_t)0x1;

254 
	}
}

262 
	$CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

268 *(
__IO
 
uöt32_t
 *Ë
CSR_TEOM_BB
 = (uöt32_t)
NewSèã
;

269 
	}
}

291 
FœgSètus
 
	$CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
)

293 
FœgSètus
 
bô°©us
 = 
RESET
;

294 
uöt32_t
 
˚¸eg
 = 0, 
˚cba£
 = 0;

297 
	`as£π_∑øm
(
	`IS_CEC_GET_FLAG
(
CEC_FLAG
));

300 
˚cba£
 = (
uöt32_t
)(
CEC_BASE
);

303 
˚¸eg
 = 
CEC_FLAG
 >> 28;

306 
CEC_FLAG
 &
FLAG_Mask
;

308 if(
˚¸eg
 != 0)

311 
CEC_FLAG
 = (
uöt32_t
)(CEC_FLAG >> 16);

314 
˚cba£
 += 0xC;

319 
˚cba£
 += 0x10;

322 if(((*(
__IO
 
uöt32_t
 *)
˚cba£
Ë& 
CEC_FLAG
Ë!(uöt32_t)
RESET
)

325 
bô°©us
 = 
SET
;

330 
bô°©us
 = 
RESET
;

334  
bô°©us
;

335 
	}
}

349 
	$CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
)

351 
uöt32_t
 
tmp
 = 0x0;

354 
	`as£π_∑øm
(
	`IS_CEC_CLEAR_FLAG
(
CEC_FLAG
));

356 
tmp
 = 
CEC
->
CSR
 & 0x2;

359 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_FLAG
Ë& 0xFFFFFFFCË| 
tmp
);

360 
	}
}

372 
ITSètus
 
	$CEC_GëITSètus
(
uöt8_t
 
CEC_IT
)

374 
ITSètus
 
bô°©us
 = 
RESET
;

375 
uöt32_t
 
íabÀ°©us
 = 0;

378 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

381 
íabÀ°©us
 = (
CEC
->
CFGR
 & (
uöt8_t
)
CEC_CFGR_IE
) ;

384 i‡(((
CEC
->
CSR
 & 
CEC_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

387 
bô°©us
 = 
SET
;

392 
bô°©us
 = 
RESET
;

395  
bô°©us
;

396 
	}
}

408 
	$CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
)

410 
uöt32_t
 
tmp
 = 0x0;

413 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

415 
tmp
 = 
CEC
->
CSR
 & 0x2;

418 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_IT
Ë& 0xFFFFFFFCË| 
tmp
);

419 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_crc.c

23 
	~"°m32f10x_¸c.h
"

83 
	$CRC_Re£tDR
()

86 
CRC
->
CR
 = 
CRC_CR_RESET
;

87 
	}
}

94 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

96 
CRC
->
DR
 = 
D©a
;

98  (
CRC
->
DR
);

99 
	}
}

107 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

109 
uöt32_t
 
ödex
 = 0;

111 
ödex
 = 0; index < 
Buf„rLígth
; index++)

113 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

115  (
CRC
->
DR
);

116 
	}
}

123 
uöt32_t
 
	$CRC_GëCRC
()

125  (
CRC
->
DR
);

126 
	}
}

133 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

135 
CRC
->
IDR
 = 
IDVÆue
;

136 
	}
}

143 
uöt8_t
 
	$CRC_GëIDRegi°î
()

145  (
CRC
->
IDR
);

146 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_dac.c

23 
	~"°m32f10x_dac.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

51 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

52 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

55 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

56 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

57 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

60 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

98 
	$DAC_DeInô
()

101 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

103 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

104 
	}
}

117 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

119 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

121 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

122 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

123 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

124 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

127 
tm¥eg1
 = 
DAC
->
CR
;

129 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

136 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

137 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

139 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

141 
DAC
->
CR
 = 
tm¥eg1
;

142 
	}
}

150 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

154 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

156 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

158 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

160 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

161 
	}
}

173 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

176 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

177 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

178 i‡(
NewSèã
 !
DISABLE
)

181 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

186 
DAC
->
CR
 &~(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

188 
	}
}

189 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

203 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

206 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

207 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

208 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

210 i‡(
NewSèã
 !
DISABLE
)

213 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

218 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

220 
	}
}

233 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

236 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

237 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

238 i‡(
NewSèã
 !
DISABLE
)

241 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

246 
DAC
->
CR
 &~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

248 
	}
}

260 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

263 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

265 i‡(
NewSèã
 !
DISABLE
)

268 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

273 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

275 
	}
}

284 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

287 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

288 i‡(
NewSèã
 !
DISABLE
)

291 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
 ;

296 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

298 
	}
}

314 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

318 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

319 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

320 i‡(
NewSèã
 !
DISABLE
)

323 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

328 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

330 
	}
}

342 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

344 
__IO
 
uöt32_t
 
tmp
 = 0;

347 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

348 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

350 
tmp
 = (
uöt32_t
)
DAC_BASE
;

351 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

354 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

355 
	}
}

367 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

369 
__IO
 
uöt32_t
 
tmp
 = 0;

372 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

373 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

375 
tmp
 = (
uöt32_t
)
DAC_BASE
;

376 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

379 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

380 
	}
}

396 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

398 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

401 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

402 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

403 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

406 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

408 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

412 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

415 
tmp
 = (
uöt32_t
)
DAC_BASE
;

416 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

419 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

420 
	}
}

430 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

432 
__IO
 
uöt32_t
 
tmp
 = 0;

435 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

437 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

438 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

441  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

442 
	}
}

444 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

456 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

458 
FœgSètus
 
bô°©us
 = 
RESET
;

460 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

461 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

464 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

467 
bô°©us
 = 
SET
;

472 
bô°©us
 = 
RESET
;

475  
bô°©us
;

476 
	}
}

489 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

492 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

493 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

496 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

497 
	}
}

510 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

512 
ITSètus
 
bô°©us
 = 
RESET
;

513 
uöt32_t
 
íabÀ°©us
 = 0;

516 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

517 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

520 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

523 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

526 
bô°©us
 = 
SET
;

531 
bô°©us
 = 
RESET
;

534  
bô°©us
;

535 
	}
}

548 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

551 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

552 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

555 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

556 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_dbgmcu.c

23 
	~"°m32f10x_dbgmcu.h
"

46 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

84 
uöt32_t
 
	$DBGMCU_GëREVID
()

86 (
DBGMCU
->
IDCODE
 >> 16);

87 
	}
}

94 
uöt32_t
 
	$DBGMCU_GëDEVID
()

96 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

97 
	}
}

134 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

137 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

140 i‡(
NewSèã
 !
DISABLE
)

142 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

146 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

148 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_dma.c

23 
	~"°m32f10x_dma.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#DMA1_Ch™√l1_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

49 
	#DMA1_Ch™√l2_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

50 
	#DMA1_Ch™√l3_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

51 
	#DMA1_Ch™√l4_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

52 
	#DMA1_Ch™√l5_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

53 
	#DMA1_Ch™√l6_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF6
 | 
DMA_ISR_TCIF6
 | 
DMA_ISR_HTIF6
 | 
DMA_ISR_TEIF6
))

	)

54 
	#DMA1_Ch™√l7_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF7
 | 
DMA_ISR_TCIF7
 | 
DMA_ISR_HTIF7
 | 
DMA_ISR_TEIF7
))

	)

57 
	#DMA2_Ch™√l1_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

58 
	#DMA2_Ch™√l2_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

59 
	#DMA2_Ch™√l3_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

60 
	#DMA2_Ch™√l4_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

61 
	#DMA2_Ch™√l5_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

64 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000)

	)

67 
	#CCR_CLEAR_Mask
 ((
uöt32_t
)0xFFFF800F)

	)

108 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

111 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

114 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

117 
DMAy_Ch™√lx
->
CCR
 = 0;

120 
DMAy_Ch™√lx
->
CNDTR
 = 0;

123 
DMAy_Ch™√lx
->
CPAR
 = 0;

126 
DMAy_Ch™√lx
->
CMAR
 = 0;

128 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

131 
DMA1
->
IFCR
 |
DMA1_Ch™√l1_IT_Mask
;

133 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

136 
DMA1
->
IFCR
 |
DMA1_Ch™√l2_IT_Mask
;

138 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

141 
DMA1
->
IFCR
 |
DMA1_Ch™√l3_IT_Mask
;

143 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

146 
DMA1
->
IFCR
 |
DMA1_Ch™√l4_IT_Mask
;

148 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

151 
DMA1
->
IFCR
 |
DMA1_Ch™√l5_IT_Mask
;

153 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

156 
DMA1
->
IFCR
 |
DMA1_Ch™√l6_IT_Mask
;

158 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

161 
DMA1
->
IFCR
 |
DMA1_Ch™√l7_IT_Mask
;

163 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

166 
DMA2
->
IFCR
 |
DMA2_Ch™√l1_IT_Mask
;

168 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

171 
DMA2
->
IFCR
 |
DMA2_Ch™√l2_IT_Mask
;

173 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

176 
DMA2
->
IFCR
 |
DMA2_Ch™√l3_IT_Mask
;

178 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

181 
DMA2
->
IFCR
 |
DMA2_Ch™√l4_IT_Mask
;

185 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

188 
DMA2
->
IFCR
 |
DMA2_Ch™√l5_IT_Mask
;

191 
	}
}

202 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

204 
uöt32_t
 
tm¥eg
 = 0;

207 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

208 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

209 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

210 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

211 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

212 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

213 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

214 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

215 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

216 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

220 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

222 
tm¥eg
 &
CCR_CLEAR_Mask
;

232 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

233 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

234 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

235 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

238 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

242 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

246 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

250 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

251 
	}
}

259 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

263 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

265 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

267 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

269 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

271 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

273 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

275 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

277 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

279 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

281 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

283 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

284 
	}
}

294 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DMAy_Ch™√lx
->
CCR
 |
DMA_CCR1_EN
;

308 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

310 
	}
}

326 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

329 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

330 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 i‡(
NewSèã
 !
DISABLE
)

335 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

340 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

342 
	}
}

353 
	$DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
)

356 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

360 
DMAy_Ch™√lx
->
CNDTR
 = 
D©aNumbî
;

361 
	}
}

371 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

374 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

376  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

377 
	}
}

433 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
)

435 
FœgSètus
 
bô°©us
 = 
RESET
;

436 
uöt32_t
 
tm¥eg
 = 0;

439 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMAy_FLAG
));

442 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

445 
tm¥eg
 = 
DMA2
->
ISR
 ;

450 
tm¥eg
 = 
DMA1
->
ISR
 ;

454 i‡((
tm¥eg
 & 
DMAy_FLAG
Ë!(
uöt32_t
)
RESET
)

457 
bô°©us
 = 
SET
;

462 
bô°©us
 = 
RESET
;

466  
bô°©us
;

467 
	}
}

523 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
)

526 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMAy_FLAG
));

529 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

532 
DMA2
->
IFCR
 = 
DMAy_FLAG
;

537 
DMA1
->
IFCR
 = 
DMAy_FLAG
;

539 
	}
}

595 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
)

597 
ITSètus
 
bô°©us
 = 
RESET
;

598 
uöt32_t
 
tm¥eg
 = 0;

601 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMAy_IT
));

604 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

607 
tm¥eg
 = 
DMA2
->
ISR
;

612 
tm¥eg
 = 
DMA1
->
ISR
;

616 i‡((
tm¥eg
 & 
DMAy_IT
Ë!(
uöt32_t
)
RESET
)

619 
bô°©us
 = 
SET
;

624 
bô°©us
 = 
RESET
;

627  
bô°©us
;

628 
	}
}

684 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
)

687 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMAy_IT
));

690 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

693 
DMA2
->
IFCR
 = 
DMAy_IT
;

698 
DMA1
->
IFCR
 = 
DMAy_IT
;

700 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_exti.c

23 
	~"°m32f10x_exti.h
"

46 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

85 
	$EXTI_DeInô
()

87 
EXTI
->
IMR
 = 0x00000000;

88 
EXTI
->
EMR
 = 0x00000000;

89 
EXTI
->
RTSR
 = 0x00000000;

90 
EXTI
->
FTSR
 = 0x00000000;

91 
EXTI
->
PR
 = 0x000FFFFF;

92 
	}
}

101 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

103 
uöt32_t
 
tmp
 = 0;

106 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

107 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

108 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

109 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

111 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

113 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

116 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

117 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

119 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

121 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

124 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

125 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

128 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

131 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

132 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

136 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

137 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

139 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

144 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

147 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

149 
	}
}

157 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

159 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

160 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

161 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

162 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

163 
	}
}

171 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

174 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

176 
EXTI
->
SWIER
 |
EXTI_Löe
;

177 
	}
}

186 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

188 
FœgSètus
 
bô°©us
 = 
RESET
;

190 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

192 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

194 
bô°©us
 = 
SET
;

198 
bô°©us
 = 
RESET
;

200  
bô°©us
;

201 
	}
}

209 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

212 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

214 
EXTI
->
PR
 = 
EXTI_Löe
;

215 
	}
}

224 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

226 
ITSètus
 
bô°©us
 = 
RESET
;

227 
uöt32_t
 
íabÀ°©us
 = 0;

229 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

231 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

232 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

234 
bô°©us
 = 
SET
;

238 
bô°©us
 = 
RESET
;

240  
bô°©us
;

241 
	}
}

249 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

252 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

254 
EXTI
->
PR
 = 
EXTI_Löe
;

255 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_flash.c

23 
	~"°m32f10x_Êash.h
"

47 
	#ACR_LATENCY_Mask
 ((
uöt32_t
)0x00000038)

	)

48 
	#ACR_HLFCYA_Mask
 ((
uöt32_t
)0xFFFFFFF7)

	)

49 
	#ACR_PRFTBE_Mask
 ((
uöt32_t
)0xFFFFFFEF)

	)

52 
	#ACR_PRFTBS_Mask
 ((
uöt32_t
)0x00000020)

	)

55 
	#CR_PG_Së
 ((
uöt32_t
)0x00000001)

	)

56 
	#CR_PG_Re£t
 ((
uöt32_t
)0x00001FFE)

	)

57 
	#CR_PER_Së
 ((
uöt32_t
)0x00000002)

	)

58 
	#CR_PER_Re£t
 ((
uöt32_t
)0x00001FFD)

	)

59 
	#CR_MER_Së
 ((
uöt32_t
)0x00000004)

	)

60 
	#CR_MER_Re£t
 ((
uöt32_t
)0x00001FFB)

	)

61 
	#CR_OPTPG_Së
 ((
uöt32_t
)0x00000010)

	)

62 
	#CR_OPTPG_Re£t
 ((
uöt32_t
)0x00001FEF)

	)

63 
	#CR_OPTER_Së
 ((
uöt32_t
)0x00000020)

	)

64 
	#CR_OPTER_Re£t
 ((
uöt32_t
)0x00001FDF)

	)

65 
	#CR_STRT_Së
 ((
uöt32_t
)0x00000040)

	)

66 
	#CR_LOCK_Së
 ((
uöt32_t
)0x00000080)

	)

69 
	#RDPRT_Mask
 ((
uöt32_t
)0x00000002)

	)

70 
	#WRP0_Mask
 ((
uöt32_t
)0x000000FF)

	)

71 
	#WRP1_Mask
 ((
uöt32_t
)0x0000FF00)

	)

72 
	#WRP2_Mask
 ((
uöt32_t
)0x00FF0000)

	)

73 
	#WRP3_Mask
 ((
uöt32_t
)0xFF000000)

	)

74 
	#OB_USER_BFB2
 ((
uöt16_t
)0x0008)

	)

77 
	#RDP_Key
 ((
uöt16_t
)0x00A5)

	)

78 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

79 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

82 
	#FLASH_BANK1_END_ADDRESS
 ((
uöt32_t
)0x807FFFF)

	)

85 
	#Eø£Timeout
 ((
uöt32_t
)0x000B0000)

	)

86 
	#ProgømTimeout
 ((
uöt32_t
)0x00002000)

	)

254 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

256 
uöt32_t
 
tm¥eg
 = 0;

259 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

262 
tm¥eg
 = 
FLASH
->
ACR
;

265 
tm¥eg
 &
ACR_LATENCY_Mask
;

266 
tm¥eg
 |
FLASH_L©ícy
;

269 
FLASH
->
ACR
 = 
tm¥eg
;

270 
	}
}

281 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
)

284 
	`as£π_∑øm
(
	`IS_FLASH_HALFCYCLEACCESS_STATE
(
FLASH_HÆfCy˛eAc˚ss
));

287 
FLASH
->
ACR
 &
ACR_HLFCYA_Mask
;

288 
FLASH
->
ACR
 |
FLASH_HÆfCy˛eAc˚ss
;

289 
	}
}

300 
	$FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
)

303 
	`as£π_∑øm
(
	`IS_FLASH_PREFETCHBUFFER_STATE
(
FLASH_Pª„tchBuf„r
));

306 
FLASH
->
ACR
 &
ACR_PRFTBE_Mask
;

307 
FLASH
->
ACR
 |
FLASH_Pª„tchBuf„r
;

308 
	}
}

319 
	$FLASH_U∆ock
()

322 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

323 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

325 #ifde‡
STM32F10X_XL


327 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

328 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

330 
	}
}

340 
	$FLASH_U∆ockB™k1
()

343 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

344 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

345 
	}
}

347 #ifde‡
STM32F10X_XL


354 
	$FLASH_U∆ockB™k2
()

357 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

358 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

360 
	}
}

372 
	$FLASH_Lock
()

375 
FLASH
->
CR
 |
CR_LOCK_Së
;

377 #ifde‡
STM32F10X_XL


379 
FLASH
->
CR2
 |
CR_LOCK_Së
;

381 
	}
}

392 
	$FLASH_LockB™k1
()

395 
FLASH
->
CR
 |
CR_LOCK_Së
;

396 
	}
}

398 #ifde‡
STM32F10X_XL


405 
	$FLASH_LockB™k2
()

408 
FLASH
->
CR2
 |
CR_LOCK_Së
;

409 
	}
}

419 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

421 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

423 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Page_Addªss
));

425 #ifde‡
STM32F10X_XL


426 if(
Page_Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

429 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

430 if(
°©us
 =
FLASH_COMPLETE
)

433 
FLASH
->
CR
|
CR_PER_Së
;

434 
FLASH
->
AR
 = 
Page_Addªss
;

435 
FLASH
->
CR
|
CR_STRT_Së
;

438 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

441 
FLASH
->
CR
 &
CR_PER_Re£t
;

447 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

448 if(
°©us
 =
FLASH_COMPLETE
)

451 
FLASH
->
CR2
|
CR_PER_Së
;

452 
FLASH
->
AR2
 = 
Page_Addªss
;

453 
FLASH
->
CR2
|
CR_STRT_Së
;

456 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

459 
FLASH
->
CR2
 &
CR_PER_Re£t
;

464 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

466 if(
°©us
 =
FLASH_COMPLETE
)

469 
FLASH
->
CR
|
CR_PER_Së
;

470 
FLASH
->
AR
 = 
Page_Addªss
;

471 
FLASH
->
CR
|
CR_STRT_Së
;

474 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

477 
FLASH
->
CR
 &
CR_PER_Re£t
;

482  
°©us
;

483 
	}
}

492 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

494 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

496 #ifde‡
STM32F10X_XL


498 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

500 if(
°©us
 =
FLASH_COMPLETE
)

503 
FLASH
->
CR
 |
CR_MER_Së
;

504 
FLASH
->
CR
 |
CR_STRT_Së
;

507 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

510 
FLASH
->
CR
 &
CR_MER_Re£t
;

512 if(
°©us
 =
FLASH_COMPLETE
)

515 
FLASH
->
CR2
 |
CR_MER_Së
;

516 
FLASH
->
CR2
 |
CR_STRT_Së
;

519 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

522 
FLASH
->
CR2
 &
CR_MER_Re£t
;

526 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

527 if(
°©us
 =
FLASH_COMPLETE
)

530 
FLASH
->
CR
 |
CR_MER_Së
;

531 
FLASH
->
CR
 |
CR_STRT_Së
;

534 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

537 
FLASH
->
CR
 &
CR_MER_Re£t
;

542  
°©us
;

543 
	}
}

555 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Pages
()

557 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

559 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

561 if(
°©us
 =
FLASH_COMPLETE
)

564 
FLASH
->
CR
 |
CR_MER_Së
;

565 
FLASH
->
CR
 |
CR_STRT_Së
;

568 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

571 
FLASH
->
CR
 &
CR_MER_Re£t
;

574  
°©us
;

575 
	}
}

577 #ifde‡
STM32F10X_XL


585 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Pages
()

587 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

589 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

591 if(
°©us
 =
FLASH_COMPLETE
)

594 
FLASH
->
CR2
 |
CR_MER_Së
;

595 
FLASH
->
CR2
 |
CR_STRT_Së
;

598 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

601 
FLASH
->
CR2
 &
CR_MER_Re£t
;

604  
°©us
;

605 
	}
}

616 
FLASH_Sètus
 
	$FLASH_Eø£O±i⁄Byãs
()

618 
uöt16_t
 
rd±mp
 = 
RDP_Key
;

620 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

623 if(
	`FLASH_GëRódOutPrŸe˘i⁄Sètus
(Ë!
RESET
)

625 
rd±mp
 = 0x00;

629 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

630 if(
°©us
 =
FLASH_COMPLETE
)

633 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

634 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

637 
FLASH
->
CR
 |
CR_OPTER_Së
;

638 
FLASH
->
CR
 |
CR_STRT_Së
;

640 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

642 if(
°©us
 =
FLASH_COMPLETE
)

645 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

648 
FLASH
->
CR
 |
CR_OPTPG_Së
;

650 
OB
->
RDP
 = (
uöt16_t
)
rd±mp
;

652 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

654 if(
°©us
 !
FLASH_TIMEOUT
)

657 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

662 i‡(
°©us
 !
FLASH_TIMEOUT
)

665 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

670  
°©us
;

671 
	}
}

681 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

683 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

684 
__IO
 
uöt32_t
 
tmp
 = 0;

687 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

689 #ifde‡
STM32F10X_XL


690 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
 - 2)

693 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

694 if(
°©us
 =
FLASH_COMPLETE
)

698 
FLASH
->
CR
 |
CR_PG_Së
;

700 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

702 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

704 if(
°©us
 =
FLASH_COMPLETE
)

708 
tmp
 = 
Addªss
 + 2;

710 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

713 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

716 
FLASH
->
CR
 &
CR_PG_Re£t
;

721 
FLASH
->
CR
 &
CR_PG_Re£t
;

725 if(
Addªss
 =(
FLASH_BANK1_END_ADDRESS
 - 1))

728 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

730 if(
°©us
 =
FLASH_COMPLETE
)

734 
FLASH
->
CR
 |
CR_PG_Së
;

736 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

739 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

742 
FLASH
->
CR
 &
CR_PG_Re£t
;

747 
FLASH
->
CR
 &
CR_PG_Re£t
;

751 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

753 if(
°©us
 =
FLASH_COMPLETE
)

757 
FLASH
->
CR2
 |
CR_PG_Së
;

758 
tmp
 = 
Addªss
 + 2;

760 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

763 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

766 
FLASH
->
CR2
 &
CR_PG_Re£t
;

771 
FLASH
->
CR2
 &
CR_PG_Re£t
;

777 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

779 if(
°©us
 =
FLASH_COMPLETE
)

783 
FLASH
->
CR2
 |
CR_PG_Së
;

785 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

787 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

789 if(
°©us
 =
FLASH_COMPLETE
)

793 
tmp
 = 
Addªss
 + 2;

795 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

798 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

801 
FLASH
->
CR2
 &
CR_PG_Re£t
;

806 
FLASH
->
CR2
 &
CR_PG_Re£t
;

812 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

814 if(
°©us
 =
FLASH_COMPLETE
)

818 
FLASH
->
CR
 |
CR_PG_Së
;

820 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

822 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

824 if(
°©us
 =
FLASH_COMPLETE
)

828 
tmp
 = 
Addªss
 + 2;

830 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

833 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

836 
FLASH
->
CR
 &
CR_PG_Re£t
;

841 
FLASH
->
CR
 &
CR_PG_Re£t
;

847  
°©us
;

848 
	}
}

858 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

860 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

862 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

864 #ifde‡
STM32F10X_XL


866 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

868 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

870 if(
°©us
 =
FLASH_COMPLETE
)

873 
FLASH
->
CR
 |
CR_PG_Së
;

875 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

877 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

880 
FLASH
->
CR
 &
CR_PG_Re£t
;

885 if(
°©us
 =
FLASH_COMPLETE
)

888 
FLASH
->
CR2
 |
CR_PG_Së
;

890 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

892 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

895 
FLASH
->
CR2
 &
CR_PG_Re£t
;

900 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

902 if(
°©us
 =
FLASH_COMPLETE
)

905 
FLASH
->
CR
 |
CR_PG_Së
;

907 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

909 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

912 
FLASH
->
CR
 &
CR_PG_Re£t
;

917  
°©us
;

918 
	}
}

929 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

931 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

933 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

934 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

936 if(
°©us
 =
FLASH_COMPLETE
)

939 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

940 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

942 
FLASH
->
CR
 |
CR_OPTPG_Së
;

943 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

946 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

947 if(
°©us
 !
FLASH_TIMEOUT
)

950 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

954  
°©us
;

955 
	}
}

975 
FLASH_Sètus
 
	$FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
)

977 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF, 
WRP2_D©a
 = 0xFFFF, 
WRP3_D©a
 = 0xFFFF;

979 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

982 
	`as£π_∑øm
(
	`IS_FLASH_WRPROT_PAGE
(
FLASH_Pages
));

984 
FLASH_Pages
 = (
uöt32_t
)(~FLASH_Pages);

985 
WRP0_D©a
 = (
uöt16_t
)(
FLASH_Pages
 & 
WRP0_Mask
);

986 
WRP1_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP1_Mask
) >> 8);

987 
WRP2_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP2_Mask
) >> 16);

988 
WRP3_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP3_Mask
) >> 24);

991 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

993 if(
°©us
 =
FLASH_COMPLETE
)

996 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

997 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

998 
FLASH
->
CR
 |
CR_OPTPG_Së
;

999 if(
WRP0_D©a
 != 0xFF)

1001 
OB
->
WRP0
 = 
WRP0_D©a
;

1004 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1006 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

1008 
OB
->
WRP1
 = 
WRP1_D©a
;

1011 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1013 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP2_D©a
 != 0xFF))

1015 
OB
->
WRP2
 = 
WRP2_D©a
;

1018 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1021 if((
°©us
 =
FLASH_COMPLETE
)&& (
WRP3_D©a
 != 0xFF))

1023 
OB
->
WRP3
 = 
WRP3_D©a
;

1026 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1029 if(
°©us
 !
FLASH_TIMEOUT
)

1032 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1036  
°©us
;

1037 
	}
}

1049 
FLASH_Sètus
 
	$FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1051 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1053 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1054 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1055 if(
°©us
 =
FLASH_COMPLETE
)

1058 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1059 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1060 
FLASH
->
CR
 |
CR_OPTER_Së
;

1061 
FLASH
->
CR
 |
CR_STRT_Së
;

1063 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1064 if(
°©us
 =
FLASH_COMPLETE
)

1067 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1069 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1070 if(
NewSèã
 !
DISABLE
)

1072 
OB
->
RDP
 = 0x00;

1076 
OB
->
RDP
 = 
RDP_Key
;

1079 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1081 if(
°©us
 !
FLASH_TIMEOUT
)

1084 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1089 if(
°©us
 !
FLASH_TIMEOUT
)

1092 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1097  
°©us
;

1098 
	}
}

1118 
FLASH_Sètus
 
	$FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
)

1120 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1123 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1124 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1125 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1128 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1129 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1132 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1134 if(
°©us
 =
FLASH_COMPLETE
)

1137 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1139 
OB
->
USER
 = 
OB_IWDG
 | (
uöt16_t
)(
OB_STOP
 | (uöt16_t)(
OB_STDBY
 | ((uint16_t)0xF8)));

1142 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1143 if(
°©us
 !
FLASH_TIMEOUT
)

1146 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1150  
°©us
;

1151 
	}
}

1153 #ifde‡
STM32F10X_XL


1172 
FLASH_Sètus
 
	$FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
)

1174 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1175 
	`as£π_∑øm
(
	`IS_FLASH_BOOT
(
FLASH_BOOT
));

1177 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1178 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1181 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1183 if(
°©us
 =
FLASH_COMPLETE
)

1186 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1188 if(
FLASH_BOOT
 =
FLASH_BOOT_B™k1
)

1190 
OB
->
USER
 |
OB_USER_BFB2
;

1194 
OB
->
USER
 &(
uöt16_t
)(~(uöt16_t)(
OB_USER_BFB2
));

1197 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1198 if(
°©us
 !
FLASH_TIMEOUT
)

1201 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1205  
°©us
;

1206 
	}
}

1216 
uöt32_t
 
	$FLASH_GëU£rO±i⁄Byã
()

1219  (
uöt32_t
)(
FLASH
->
OBR
 >> 2);

1220 
	}
}

1228 
uöt32_t
 
	$FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
()

1231  (
uöt32_t
)(
FLASH
->
WRPR
);

1232 
	}
}

1240 
FœgSètus
 
	$FLASH_GëRódOutPrŸe˘i⁄Sètus
()

1242 
FœgSètus
 
ªadout°©us
 = 
RESET
;

1243 i‡((
FLASH
->
OBR
 & 
RDPRT_Mask
Ë!(
uöt32_t
)
RESET
)

1245 
ªadout°©us
 = 
SET
;

1249 
ªadout°©us
 = 
RESET
;

1251  
ªadout°©us
;

1252 
	}
}

1260 
FœgSètus
 
	$FLASH_GëPª„tchBuf„rSètus
()

1262 
FœgSètus
 
bô°©us
 = 
RESET
;

1264 i‡((
FLASH
->
ACR
 & 
ACR_PRFTBS_Mask
Ë!(
uöt32_t
)
RESET
)

1266 
bô°©us
 = 
SET
;

1270 
bô°©us
 = 
RESET
;

1273  
bô°©us
;

1274 
	}
}

1290 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1292 #ifde‡
STM32F10X_XL


1294 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1297 if((
FLASH_IT
 & 0x80000000) != 0x0)

1299 if(
NewSèã
 !
DISABLE
)

1302 
FLASH
->
CR2
 |(
FLASH_IT
 & 0x7FFFFFFF);

1307 
FLASH
->
CR2
 &~(
uöt32_t
)(
FLASH_IT
 & 0x7FFFFFFF);

1312 if(
NewSèã
 !
DISABLE
)

1315 
FLASH
->
CR
 |
FLASH_IT
;

1320 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1325 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1326 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1328 if(
NewSèã
 !
DISABLE
)

1331 
FLASH
->
CR
 |
FLASH_IT
;

1336 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1339 
	}
}

1357 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1359 
FœgSètus
 
bô°©us
 = 
RESET
;

1361 #ifde‡
STM32F10X_XL


1363 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1364 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1366 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1368 
bô°©us
 = 
SET
;

1372 
bô°©us
 = 
RESET
;

1377 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1379 if((
FLASH
->
SR2
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1381 
bô°©us
 = 
SET
;

1385 
bô°©us
 = 
RESET
;

1390 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1392 
bô°©us
 = 
SET
;

1396 
bô°©us
 = 
RESET
;

1402 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1403 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1405 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1407 
bô°©us
 = 
SET
;

1411 
bô°©us
 = 
RESET
;

1416 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1418 
bô°©us
 = 
SET
;

1422 
bô°©us
 = 
RESET
;

1428  
bô°©us
;

1429 
	}
}

1443 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1445 #ifde‡
STM32F10X_XL


1447 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1449 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1452 
FLASH
->
SR2
 = 
FLASH_FLAG
;

1457 
FLASH
->
SR
 = 
FLASH_FLAG
;

1462 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1465 
FLASH
->
SR
 = 
FLASH_FLAG
;

1467 
	}
}

1477 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1479 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1481 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1483 
Êash°©us
 = 
FLASH_BUSY
;

1487 if((
FLASH
->
SR
 & 
FLASH_FLAG_PGERR
) != 0)

1489 
Êash°©us
 = 
FLASH_ERROR_PG
;

1493 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPRTERR
) != 0 )

1495 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1499 
Êash°©us
 = 
FLASH_COMPLETE
;

1504  
Êash°©us
;

1505 
	}
}

1515 
FLASH_Sètus
 
	$FLASH_GëB™k1Sètus
()

1517 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1519 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_BSY
Ë=
FLASH_FLAG_BSY
)

1521 
Êash°©us
 = 
FLASH_BUSY
;

1525 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_PGERR
) != 0)

1527 
Êash°©us
 = 
FLASH_ERROR_PG
;

1531 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_WRPRTERR
) != 0 )

1533 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1537 
Êash°©us
 = 
FLASH_COMPLETE
;

1542  
Êash°©us
;

1543 
	}
}

1545 #ifde‡
STM32F10X_XL


1553 
FLASH_Sètus
 
	$FLASH_GëB™k2Sètus
()

1555 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1557 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF))

1559 
Êash°©us
 = 
FLASH_BUSY
;

1563 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_PGERR
 & 0x7FFFFFFF)) != 0)

1565 
Êash°©us
 = 
FLASH_ERROR_PG
;

1569 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_WRPRTERR
 & 0x7FFFFFFF)) != 0 )

1571 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1575 
Êash°©us
 = 
FLASH_COMPLETE
;

1580  
Êash°©us
;

1581 
	}
}

1595 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

1597 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1600 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1602 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

1604 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1605 
Timeout
--;

1607 if(
Timeout
 == 0x00 )

1609 
°©us
 = 
FLASH_TIMEOUT
;

1612  
°©us
;

1613 
	}
}

1623 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
)

1625 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1628 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1630 (
°©us
 =
FLASH_FLAG_BANK1_BSY
Ë&& (
Timeout
 != 0x00))

1632 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1633 
Timeout
--;

1635 if(
Timeout
 == 0x00 )

1637 
°©us
 = 
FLASH_TIMEOUT
;

1640  
°©us
;

1641 
	}
}

1643 #ifde‡
STM32F10X_XL


1651 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
)

1653 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1656 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1658 (
°©us
 =(
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)Ë&& (
Timeout
 != 0x00))

1660 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1661 
Timeout
--;

1663 if(
Timeout
 == 0x00 )

1665 
°©us
 = 
FLASH_TIMEOUT
;

1668  
°©us
;

1669 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_fsmc.c

23 
	~"°m32f10x_fsmc.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#BCR_MBKEN_Së
 ((
uöt32_t
)0x00000001)

	)

50 
	#BCR_MBKEN_Re£t
 ((
uöt32_t
)0x000FFFFE)

	)

51 
	#BCR_FACCEN_Së
 ((
uöt32_t
)0x00000040)

	)

54 
	#PCR_PBKEN_Së
 ((
uöt32_t
)0x00000004)

	)

55 
	#PCR_PBKEN_Re£t
 ((
uöt32_t
)0x000FFFFB)

	)

56 
	#PCR_ECCEN_Së
 ((
uöt32_t
)0x00000040)

	)

57 
	#PCR_ECCEN_Re£t
 ((
uöt32_t
)0x000FFFBF)

	)

58 
	#PCR_Mem‹yTy≥_NAND
 ((
uöt32_t
)0x00000008)

	)

102 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

105 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

108 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

110 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

115 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

117 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

118 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

119 
	}
}

129 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

132 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

134 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

137 
FSMC_B™k2
->
PCR2
 = 0x00000018;

138 
FSMC_B™k2
->
SR2
 = 0x00000040;

139 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

140 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

146 
FSMC_B™k3
->
PCR3
 = 0x00000018;

147 
FSMC_B™k3
->
SR3
 = 0x00000040;

148 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

149 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

151 
	}
}

158 
	$FSMC_PCCARDDeInô
()

161 
FSMC_B™k4
->
PCR4
 = 0x00000018;

162 
FSMC_B™k4
->
SR4
 = 0x00000000;

163 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

164 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

165 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

166 
	}
}

176 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

179 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

180 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

181 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

182 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

183 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

184 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
));

185 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

186 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

187 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

188 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

189 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

190 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

191 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

192 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

193 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

194 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

195 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

196 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

197 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

198 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

201 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

202 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 |

207 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

208 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

209 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

210 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

211 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

212 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

213 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

215 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

217 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_Së
;

221 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

222 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

223 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

224 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

225 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

226 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

227 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

228 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

232 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

234 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

235 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

236 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

237 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

238 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

239 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

240 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

241 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

242 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

243 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

244 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

245 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

246 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

250 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

252 
	}
}

262 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

264 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

267 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

268 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

269 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

270 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

271 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

272 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

273 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

274 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

275 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

276 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

277 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

278 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

279 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

280 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

281 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

284 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

285 
PCR_Mem‹yTy≥_NAND
 |

286 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

287 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

288 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

289 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

290 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

293 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

294 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

295 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

296 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

299 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

300 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

301 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

302 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

304 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

307 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

308 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

309 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

314 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

315 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

316 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

318 
	}
}

328 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

331 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

332 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

333 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

335 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

336 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

337 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

338 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

340 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

341 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

342 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

343 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

344 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

345 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

346 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

347 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

350 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

351 
FSMC_Mem‹yD©aWidth_16b
 |

352 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

353 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

356 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

357 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

358 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

359 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

362 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

363 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

364 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

365 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

368 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

369 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

370 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

371 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

372 
	}
}

380 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

383 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

384 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

385 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

386 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

387 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

388 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 = 
FSMC_Asynchr⁄ousWaô_DißbÀ
;

389 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

390 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

391 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

392 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

393 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

394 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

395 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

396 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

397 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

398 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

399 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

400 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

401 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

402 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

403 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

404 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

405 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

406 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

407 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

408 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

409 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

410 
	}
}

418 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

421 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

422 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

423 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

424 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

425 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

426 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

427 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

428 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

429 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

430 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

431 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

432 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

433 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

434 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

435 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

436 
	}
}

444 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

447 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

448 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

449 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

450 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

451 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

452 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

453 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

454 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

455 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

456 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

457 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

458 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

459 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

460 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

461 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

462 
	}
}

475 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

477 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

480 i‡(
NewSèã
 !
DISABLE
)

483 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_Së
;

488 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_Re£t
;

490 
	}
}

501 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

503 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

504 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 i‡(
NewSèã
 !
DISABLE
)

509 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

511 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_Së
;

515 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_Së
;

521 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

523 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_Re£t
;

527 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_Re£t
;

530 
	}
}

538 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

542 i‡(
NewSèã
 !
DISABLE
)

545 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_Së
;

550 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_Re£t
;

552 
	}
}

564 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

566 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

567 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

569 i‡(
NewSèã
 !
DISABLE
)

572 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

574 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_Së
;

578 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_Së
;

584 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

586 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_Re£t
;

590 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_Re£t
;

593 
	}
}

603 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

605 
uöt32_t
 
eccvÆ
 = 0x00000000;

607 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

610 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

615 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

618 (
eccvÆ
);

619 
	}
}

637 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

639 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

640 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

641 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

643 i‡(
NewSèã
 !
DISABLE
)

646 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

648 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

651 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

653 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

658 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

664 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

667 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

670 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

672 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

677 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

680 
	}
}

697 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

699 
FœgSètus
 
bô°©us
 = 
RESET
;

700 
uöt32_t
 
tmp§
 = 0x00000000;

703 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

704 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

706 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

708 
tmp§
 = 
FSMC_B™k2
->
SR2
;

710 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

712 
tmp§
 = 
FSMC_B™k3
->
SR3
;

717 
tmp§
 = 
FSMC_B™k4
->
SR4
;

721 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

723 
bô°©us
 = 
SET
;

727 
bô°©us
 = 
RESET
;

730  
bô°©us
;

731 
	}
}

747 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

750 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

751 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

753 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

755 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

757 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

759 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

764 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

766 
	}
}

782 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

784 
ITSètus
 
bô°©us
 = 
RESET
;

785 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

788 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

789 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

791 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

793 
tmp§
 = 
FSMC_B™k2
->
SR2
;

795 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

797 
tmp§
 = 
FSMC_B™k3
->
SR3
;

802 
tmp§
 = 
FSMC_B™k4
->
SR4
;

805 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

807 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

808 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

810 
bô°©us
 = 
SET
;

814 
bô°©us
 = 
RESET
;

816  
bô°©us
;

817 
	}
}

833 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

836 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

837 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

839 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

841 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

843 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

845 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

850 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

852 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_gpio.c

23 
	~"°m32f10x_gpio.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#AFIO_OFFSET
 (
AFIO_BASE
 - 
PERIPH_BASE
)

	)

53 
	#EVCR_OFFSET
 (
AFIO_OFFSET
 + 0x00)

	)

54 
	#EVOE_BôNumbî
 ((
uöt8_t
)0x07)

	)

55 
	#EVCR_EVOE_BB
 (
PERIPH_BB_BASE
 + (
EVCR_OFFSET
 * 32Ë+ (
EVOE_BôNumbî
 * 4))

	)

60 
	#MAPR_OFFSET
 (
AFIO_OFFSET
 + 0x04)

	)

61 
	#MII_RMII_SEL_BôNumbî
 ((
u8
)0x17)

	)

62 
	#MAPR_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
MAPR_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

65 
	#EVCR_PORTPINCONFIG_MASK
 ((
uöt16_t
)0xFF80)

	)

66 
	#LSB_MASK
 ((
uöt16_t
)0xFFFF)

	)

67 
	#DBGAFR_POSITION_MASK
 ((
uöt32_t
)0x000F0000)

	)

68 
	#DBGAFR_SWJCFG_MASK
 ((
uöt32_t
)0xF0FFFFFF)

	)

69 
	#DBGAFR_LOCATION_MASK
 ((
uöt32_t
)0x00200000)

	)

70 
	#DBGAFR_NUMBITS_MASK
 ((
uöt32_t
)0x00100000)

	)

108 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

111 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

113 i‡(
GPIOx
 =
GPIOA
)

115 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

116 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
DISABLE
);

118 i‡(
GPIOx
 =
GPIOB
)

120 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

121 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
DISABLE
);

123 i‡(
GPIOx
 =
GPIOC
)

125 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

126 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
DISABLE
);

128 i‡(
GPIOx
 =
GPIOD
)

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

131 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
DISABLE
);

133 i‡(
GPIOx
 =
GPIOE
)

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
ENABLE
);

136 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
DISABLE
);

138 i‡(
GPIOx
 =
GPIOF
)

140 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

141 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
DISABLE
);

145 i‡(
GPIOx
 =
GPIOG
)

147 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
ENABLE
);

148 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
DISABLE
);

151 
	}
}

159 
	$GPIO_AFIODeInô
()

161 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

162 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
DISABLE
);

163 
	}
}

173 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

175 
uöt32_t
 
cuºítmode
 = 0x00, 
cuºíçö
 = 0x00, 
pöpos
 = 0x00, 
pos
 = 0x00;

176 
uöt32_t
 
tm¥eg
 = 0x00, 
pömask
 = 0x00;

178 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

179 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

180 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

183 
cuºítmode
 = ((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x0F);

184 i‡((((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x10)) != 0x00)

187 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

189 
cuºítmode
 |(
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_S≥ed
;

193 i‡(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Pö
 & ((uint32_t)0x00FF)) != 0x00)

195 
tm¥eg
 = 
GPIOx
->
CRL
;

196 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

198 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

200 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

201 i‡(
cuºíçö
 =
pos
)

203 
pos
 = 
pöpos
 << 2;

205 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

206 
tm¥eg
 &~
pömask
;

208 
tm¥eg
 |(
cuºítmode
 << 
pos
);

210 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

212 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

217 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

219 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

224 
GPIOx
->
CRL
 = 
tm¥eg
;

228 i‡(
GPIO_InôSåu˘
->
GPIO_Pö
 > 0x00FF)

230 
tm¥eg
 = 
GPIOx
->
CRH
;

231 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

233 
pos
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

235 
cuºíçö
 = ((
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
);

236 i‡(
cuºíçö
 =
pos
)

238 
pos
 = 
pöpos
 << 2;

240 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

241 
tm¥eg
 &~
pömask
;

243 
tm¥eg
 |(
cuºítmode
 << 
pos
);

245 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

247 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

250 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

252 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

256 
GPIOx
->
CRH
 = 
tm¥eg
;

258 
	}
}

266 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

269 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

270 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

271 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

272 
	}
}

281 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

283 
uöt8_t
 
bô°©us
 = 0x00;

286 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

287 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

289 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

291 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

295 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

297  
bô°©us
;

298 
	}
}

305 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

308 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

310  ((
uöt16_t
)
GPIOx
->
IDR
);

311 
	}
}

320 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

322 
uöt8_t
 
bô°©us
 = 0x00;

324 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

325 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

327 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

329 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

333 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

335  
bô°©us
;

336 
	}
}

343 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

346 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

348  ((
uöt16_t
)
GPIOx
->
ODR
);

349 
	}
}

358 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

361 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

362 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

364 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

365 
	}
}

374 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

377 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

378 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

380 
GPIOx
->
BRR
 = 
GPIO_Pö
;

381 
	}
}

394 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

397 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

398 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

399 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

401 i‡(
BôVÆ
 !
Bô_RESET
)

403 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

407 
GPIOx
->
BRR
 = 
GPIO_Pö
;

409 
	}
}

417 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

420 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

422 
GPIOx
->
ODR
 = 
P‹tVÆ
;

423 
	}
}

432 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

434 
uöt32_t
 
tmp
 = 0x00010000;

437 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

438 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

440 
tmp
 |
GPIO_Pö
;

442 
GPIOx
->
LCKR
 = 
tmp
;

444 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

446 
GPIOx
->
LCKR
 = 
tmp
;

448 
tmp
 = 
GPIOx
->
LCKR
;

450 
tmp
 = 
GPIOx
->
LCKR
;

451 
	}
}

462 
	$GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

464 
uöt32_t
 
tm¥eg
 = 0x00;

466 
	`as£π_∑øm
(
	`IS_GPIO_EVENTOUT_PORT_SOURCE
(
GPIO_P‹tSour˚
));

467 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

469 
tm¥eg
 = 
AFIO
->
EVCR
;

471 
tm¥eg
 &
EVCR_PORTPINCONFIG_MASK
;

472 
tm¥eg
 |(
uöt32_t
)
GPIO_P‹tSour˚
 << 0x04;

473 
tm¥eg
 |
GPIO_PöSour˚
;

474 
AFIO
->
EVCR
 = 
tm¥eg
;

475 
	}
}

483 
	$GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

488 *(
__IO
 
uöt32_t
 *Ë
EVCR_EVOE_BB
 = (uöt32_t)
NewSèã
;

489 
	}
}

549 
	$GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

551 
uöt32_t
 
tmp
 = 0x00, 
tmp1
 = 0x00, 
tm¥eg
 = 0x00, 
tmpmask
 = 0x00;

554 
	`as£π_∑øm
(
	`IS_GPIO_REMAP
(
GPIO_Rem≠
));

555 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

557 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

559 
tm¥eg
 = 
AFIO
->
MAPR2
;

563 
tm¥eg
 = 
AFIO
->
MAPR
;

566 
tmpmask
 = (
GPIO_Rem≠
 & 
DBGAFR_POSITION_MASK
) >> 0x10;

567 
tmp
 = 
GPIO_Rem≠
 & 
LSB_MASK
;

569 i‡((
GPIO_Rem≠
 & (
DBGAFR_LOCATION_MASK
 | 
DBGAFR_NUMBITS_MASK
)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))

571 
tm¥eg
 &
DBGAFR_SWJCFG_MASK
;

572 
AFIO
->
MAPR
 &
DBGAFR_SWJCFG_MASK
;

574 i‡((
GPIO_Rem≠
 & 
DBGAFR_NUMBITS_MASK
) == DBGAFR_NUMBITS_MASK)

576 
tmp1
 = ((
uöt32_t
)0x03Ë<< 
tmpmask
;

577 
tm¥eg
 &~
tmp1
;

578 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

582 
tm¥eg
 &~(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

583 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

586 i‡(
NewSèã
 !
DISABLE
)

588 
tm¥eg
 |(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

591 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

593 
AFIO
->
MAPR2
 = 
tm¥eg
;

597 
AFIO
->
MAPR
 = 
tm¥eg
;

599 
	}
}

609 
	$GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

611 
uöt32_t
 
tmp
 = 0x00;

613 
	`as£π_∑øm
(
	`IS_GPIO_EXTI_PORT_SOURCE
(
GPIO_P‹tSour˚
));

614 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

616 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
GPIO_PöSour˚
 & (
uöt8_t
)0x03));

617 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] &~
tmp
;

618 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] |(((
uöt32_t
)
GPIO_P‹tSour˚
Ë<< (0x04 * (GPIO_PöSour˚ & (
uöt8_t
)0x03)));

619 
	}
}

630 
	$GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
)

632 
	`as£π_∑øm
(
	`IS_GPIO_ETH_MEDIA_INTERFACE
(
GPIO_ETH_MedüI¡îÁ˚
));

635 *(
__IO
 
uöt32_t
 *Ë
MAPR_MII_RMII_SEL_BB
 = 
GPIO_ETH_MedüI¡îÁ˚
;

636 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_i2c.c

23 
	~"°m32f10x_i2c.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CR1_PE_Së
 ((
uöt16_t
)0x0001)

	)

50 
	#CR1_PE_Re£t
 ((
uöt16_t
)0xFFFE)

	)

53 
	#CR1_START_Së
 ((
uöt16_t
)0x0100)

	)

54 
	#CR1_START_Re£t
 ((
uöt16_t
)0xFEFF)

	)

57 
	#CR1_STOP_Së
 ((
uöt16_t
)0x0200)

	)

58 
	#CR1_STOP_Re£t
 ((
uöt16_t
)0xFDFF)

	)

61 
	#CR1_ACK_Së
 ((
uöt16_t
)0x0400)

	)

62 
	#CR1_ACK_Re£t
 ((
uöt16_t
)0xFBFF)

	)

65 
	#CR1_ENGC_Së
 ((
uöt16_t
)0x0040)

	)

66 
	#CR1_ENGC_Re£t
 ((
uöt16_t
)0xFFBF)

	)

69 
	#CR1_SWRST_Së
 ((
uöt16_t
)0x8000)

	)

70 
	#CR1_SWRST_Re£t
 ((
uöt16_t
)0x7FFF)

	)

73 
	#CR1_PEC_Së
 ((
uöt16_t
)0x1000)

	)

74 
	#CR1_PEC_Re£t
 ((
uöt16_t
)0xEFFF)

	)

77 
	#CR1_ENPEC_Së
 ((
uöt16_t
)0x0020)

	)

78 
	#CR1_ENPEC_Re£t
 ((
uöt16_t
)0xFFDF)

	)

81 
	#CR1_ENARP_Së
 ((
uöt16_t
)0x0010)

	)

82 
	#CR1_ENARP_Re£t
 ((
uöt16_t
)0xFFEF)

	)

85 
	#CR1_NOSTRETCH_Së
 ((
uöt16_t
)0x0080)

	)

86 
	#CR1_NOSTRETCH_Re£t
 ((
uöt16_t
)0xFF7F)

	)

89 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xFBF5)

	)

92 
	#CR2_DMAEN_Së
 ((
uöt16_t
)0x0800)

	)

93 
	#CR2_DMAEN_Re£t
 ((
uöt16_t
)0xF7FF)

	)

96 
	#CR2_LAST_Së
 ((
uöt16_t
)0x1000)

	)

97 
	#CR2_LAST_Re£t
 ((
uöt16_t
)0xEFFF)

	)

100 
	#CR2_FREQ_Re£t
 ((
uöt16_t
)0xFFC0)

	)

103 
	#OAR1_ADD0_Së
 ((
uöt16_t
)0x0001)

	)

104 
	#OAR1_ADD0_Re£t
 ((
uöt16_t
)0xFFFE)

	)

107 
	#OAR2_ENDUAL_Së
 ((
uöt16_t
)0x0001)

	)

108 
	#OAR2_ENDUAL_Re£t
 ((
uöt16_t
)0xFFFE)

	)

111 
	#OAR2_ADD2_Re£t
 ((
uöt16_t
)0xFF01)

	)

114 
	#CCR_FS_Së
 ((
uöt16_t
)0x8000)

	)

117 
	#CCR_CCR_Së
 ((
uöt16_t
)0x0FFF)

	)

120 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFF)

	)

123 
	#ITEN_Mask
 ((
uöt32_t
)0x07000000)

	)

162 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

165 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

167 i‡(
I2Cx
 =
I2C1
)

170 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

172 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

177 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

179 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

181 
	}
}

191 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

193 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

194 
uöt16_t
 
ªsu…
 = 0x04;

195 
uöt32_t
 
p˛k1
 = 8000000;

196 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

198 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

199 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

200 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

201 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

202 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

203 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

204 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

208 
tm¥eg
 = 
I2Cx
->
CR2
;

210 
tm¥eg
 &
CR2_FREQ_Re£t
;

212 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

213 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

215 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

216 
tm¥eg
 |
‰eqønge
;

218 
I2Cx
->
CR2
 = 
tm¥eg
;

222 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

225 
tm¥eg
 = 0;

228 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

231 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

233 i‡(
ªsu…
 < 0x04)

236 
ªsu…
 = 0x04;

239 
tm¥eg
 |
ªsu…
;

241 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

246 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

249 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

254 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

256 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

260 i‡((
ªsu…
 & 
CCR_CCR_Së
) == 0)

263 
ªsu…
 |(
uöt16_t
)0x0001;

266 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
CCR_FS_Së
);

268 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

272 
I2Cx
->
CCR
 = 
tm¥eg
;

274 
I2Cx
->
CR1
 |
CR1_PE_Së
;

278 
tm¥eg
 = 
I2Cx
->
CR1
;

280 
tm¥eg
 &
CR1_CLEAR_Mask
;

284 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

286 
I2Cx
->
CR1
 = 
tm¥eg
;

290 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

291 
	}
}

298 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

302 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

304 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

306 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

308 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

310 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

312 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

313 
	}
}

322 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

326 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

327 i‡(
NewSèã
 !
DISABLE
)

330 
I2Cx
->
CR1
 |
CR1_PE_Së
;

335 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

337 
	}
}

346 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

349 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

350 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

351 i‡(
NewSèã
 !
DISABLE
)

354 
I2Cx
->
CR2
 |
CR2_DMAEN_Së
;

359 
I2Cx
->
CR2
 &
CR2_DMAEN_Re£t
;

361 
	}
}

370 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

373 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

374 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

375 i‡(
NewSèã
 !
DISABLE
)

378 
I2Cx
->
CR2
 |
CR2_LAST_Së
;

383 
I2Cx
->
CR2
 &
CR2_LAST_Re£t
;

385 
	}
}

394 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

397 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

398 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

399 i‡(
NewSèã
 !
DISABLE
)

402 
I2Cx
->
CR1
 |
CR1_START_Së
;

407 
I2Cx
->
CR1
 &
CR1_START_Re£t
;

409 
	}
}

418 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

421 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

422 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

423 i‡(
NewSèã
 !
DISABLE
)

426 
I2Cx
->
CR1
 |
CR1_STOP_Së
;

431 
I2Cx
->
CR1
 &
CR1_STOP_Re£t
;

433 
	}
}

442 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

445 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

446 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

447 i‡(
NewSèã
 !
DISABLE
)

450 
I2Cx
->
CR1
 |
CR1_ACK_Së
;

455 
I2Cx
->
CR1
 &
CR1_ACK_Re£t
;

457 
	}
}

465 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

467 
uöt16_t
 
tm¥eg
 = 0;

470 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

473 
tm¥eg
 = 
I2Cx
->
OAR2
;

476 
tm¥eg
 &
OAR2_ADD2_Re£t
;

479 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

482 
I2Cx
->
OAR2
 = 
tm¥eg
;

483 
	}
}

492 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

497 i‡(
NewSèã
 !
DISABLE
)

500 
I2Cx
->
OAR2
 |
OAR2_ENDUAL_Së
;

505 
I2Cx
->
OAR2
 &
OAR2_ENDUAL_Re£t
;

507 
	}
}

516 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

519 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

520 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

521 i‡(
NewSèã
 !
DISABLE
)

524 
I2Cx
->
CR1
 |
CR1_ENGC_Së
;

529 
I2Cx
->
CR1
 &
CR1_ENGC_Re£t
;

531 
	}
}

545 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

548 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

549 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

550 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

552 i‡(
NewSèã
 !
DISABLE
)

555 
I2Cx
->
CR2
 |
I2C_IT
;

560 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

562 
	}
}

570 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

573 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

575 
I2Cx
->
DR
 = 
D©a
;

576 
	}
}

583 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

586 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

588  (
uöt8_t
)
I2Cx
->
DR
;

589 
	}
}

601 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

604 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

605 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

607 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

610 
Addªss
 |
OAR1_ADD0_Së
;

615 
Addªss
 &
OAR1_ADD0_Re£t
;

618 
I2Cx
->
DR
 = 
Addªss
;

619 
	}
}

636 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

638 
__IO
 
uöt32_t
 
tmp
 = 0;

641 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

642 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

644 
tmp
 = (
uöt32_t
Ë
I2Cx
;

645 
tmp
 +
I2C_Regi°î
;

648  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

649 
	}
}

658 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

661 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

662 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

663 i‡(
NewSèã
 !
DISABLE
)

666 
I2Cx
->
CR1
 |
CR1_SWRST_Së
;

671 
I2Cx
->
CR1
 &
CR1_SWRST_Re£t
;

673 
	}
}

696 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

699 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

700 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

703 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

706 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

711 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

713 
	}
}

724 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

727 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

728 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

729 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

732 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

737 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

739 
	}
}

748 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

751 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

752 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

753 i‡(
NewSèã
 !
DISABLE
)

756 
I2Cx
->
CR1
 |
CR1_PEC_Së
;

761 
I2Cx
->
CR1
 &
CR1_PEC_Re£t
;

763 
	}
}

779 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

782 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

783 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

784 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

787 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

792 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

794 
	}
}

803 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

806 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

807 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

808 i‡(
NewSèã
 !
DISABLE
)

811 
I2Cx
->
CR1
 |
CR1_ENPEC_Së
;

816 
I2Cx
->
CR1
 &
CR1_ENPEC_Re£t
;

818 
	}
}

825 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

828 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

830  ((
I2Cx
->
SR2
) >> 8);

831 
	}
}

840 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

843 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

844 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

845 i‡(
NewSèã
 !
DISABLE
)

848 
I2Cx
->
CR1
 |
CR1_ENARP_Së
;

853 
I2Cx
->
CR1
 &
CR1_ENARP_Re£t
;

855 
	}
}

864 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

867 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

868 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

869 i‡(
NewSèã
 =
DISABLE
)

872 
I2Cx
->
CR1
 |
CR1_NOSTRETCH_Së
;

877 
I2Cx
->
CR1
 &
CR1_NOSTRETCH_Re£t
;

879 
	}
}

890 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

893 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

894 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

895 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

898 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

903 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

905 
	}
}

1030 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1032 
uöt32_t
 
œ°evít
 = 0;

1033 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1034 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1037 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1038 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1041 
Êag1
 = 
I2Cx
->
SR1
;

1042 
Êag2
 = 
I2Cx
->
SR2
;

1043 
Êag2
 = flag2 << 16;

1046 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1049 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1052 
°©us
 = 
SUCCESS
;

1057 
°©us
 = 
ERROR
;

1060  
°©us
;

1061 
	}
}

1078 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1080 
uöt32_t
 
œ°evít
 = 0;

1081 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1084 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1087 
Êag1
 = 
I2Cx
->
SR1
;

1088 
Êag2
 = 
I2Cx
->
SR2
;

1089 
Êag2
 = flag2 << 16;

1092 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1095  
œ°evít
;

1096 
	}
}

1133 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1135 
FœgSètus
 
bô°©us
 = 
RESET
;

1136 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1139 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1140 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1143 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1146 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1149 
I2C_FLAG
 &
FLAG_Mask
;

1151 if(
i2¸eg
 != 0)

1154 
i2cxba£
 += 0x14;

1159 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1161 
i2cxba£
 += 0x18;

1164 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1167 
bô°©us
 = 
SET
;

1172 
bô°©us
 = 
RESET
;

1176  
bô°©us
;

1177 
	}
}

1212 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1214 
uöt32_t
 
Êagpos
 = 0;

1216 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1217 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1219 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_Mask
;

1221 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1222 
	}
}

1246 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1248 
ITSètus
 
bô°©us
 = 
RESET
;

1249 
uöt32_t
 
íabÀ°©us
 = 0;

1252 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1253 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1256 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_Mask
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1259 
I2C_IT
 &
FLAG_Mask
;

1262 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1265 
bô°©us
 = 
SET
;

1270 
bô°©us
 = 
RESET
;

1273  
bô°©us
;

1274 
	}
}

1307 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1309 
uöt32_t
 
Êagpos
 = 0;

1311 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1312 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1314 
Êagpos
 = 
I2C_IT
 & 
FLAG_Mask
;

1316 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1317 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_iwdg.c

23 
	~"°m32f10x_iwdg.h
"

49 
	#KR_KEY_Rñﬂd
 ((
uöt16_t
)0xAAAA)

	)

50 
	#KR_KEY_E«bÀ
 ((
uöt16_t
)0xCCCC)

	)

92 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

95 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

96 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

97 
	}
}

112 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

115 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

116 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

117 
	}
}

125 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

128 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

129 
IWDG
->
RLR
 = 
Rñﬂd
;

130 
	}
}

138 
	$IWDG_RñﬂdCou¡î
()

140 
IWDG
->
KR
 = 
KR_KEY_Rñﬂd
;

141 
	}
}

148 
	$IWDG_E«bÀ
()

150 
IWDG
->
KR
 = 
KR_KEY_E«bÀ
;

151 
	}
}

161 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

163 
FœgSètus
 
bô°©us
 = 
RESET
;

165 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

166 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

168 
bô°©us
 = 
SET
;

172 
bô°©us
 = 
RESET
;

175  
bô°©us
;

176 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_pwr.c

23 
	~"°m32f10x_pwr.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

54 
	#DBP_BôNumbî
 0x08

	)

55 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

58 
	#PVDE_BôNumbî
 0x04

	)

59 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

65 
	#EWUP_BôNumbî
 0x08

	)

66 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

71 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

72 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

112 
	$PWR_DeInô
()

114 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

115 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

116 
	}
}

124 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

127 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

128 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

129 
	}
}

137 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

140 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

141 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

142 
	}
}

158 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

160 
uöt32_t
 
tm¥eg
 = 0;

162 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

163 
tm¥eg
 = 
PWR
->
CR
;

165 
tm¥eg
 &
CR_PLS_MASK
;

167 
tm¥eg
 |
PWR_PVDLevñ
;

169 
PWR
->
CR
 = 
tm¥eg
;

170 
	}
}

178 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

182 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

183 
	}
}

197 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

199 
uöt32_t
 
tm¥eg
 = 0;

201 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

202 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

205 
tm¥eg
 = 
PWR
->
CR
;

207 
tm¥eg
 &
CR_DS_MASK
;

209 
tm¥eg
 |
PWR_Reguœt‹
;

211 
PWR
->
CR
 = 
tm¥eg
;

213 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

216 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

219 
	`__WFI
();

224 
	`__WFE
();

228 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP
);

229 
	}
}

236 
	$PWR_E¡îSTANDBYMode
()

239 
PWR
->
CR
 |
PWR_CR_CWUF
;

241 
PWR
->
CR
 |
PWR_CR_PDDS
;

243 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

245 #i‡
	`deföed
 ( 
__CC_ARM
 )

246 
	`__f‹˚_°‹es
();

249 
	`__WFI
();

250 
	}
}

261 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

263 
FœgSètus
 
bô°©us
 = 
RESET
;

265 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

267 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

269 
bô°©us
 = 
SET
;

273 
bô°©us
 = 
RESET
;

276  
bô°©us
;

277 
	}
}

287 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

290 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

292 
PWR
->
CR
 |
PWR_FLAG
 << 2;

293 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_rcc.c

23 
	~"°m32f10x_rcc.h
"

47 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

53 
	#HSION_BôNumbî
 0x00

	)

54 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

57 
	#PLLON_BôNumbî
 0x18

	)

58 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

60 #ifde‡
STM32F10X_CL


62 
	#PLL2ON_BôNumbî
 0x1A

	)

63 
	#CR_PLL2ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL2ON_BôNumbî
 * 4))

	)

66 
	#PLL3ON_BôNumbî
 0x1C

	)

67 
	#CR_PLL3ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL3ON_BôNumbî
 * 4))

	)

71 
	#CSSON_BôNumbî
 0x13

	)

72 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

77 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

79 #i‚de‡
STM32F10X_CL


80 
	#USBPRE_BôNumbî
 0x16

	)

81 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

83 
	#OTGFSPRE_BôNumbî
 0x16

	)

84 
	#CFGR_OTGFSPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
OTGFSPRE_BôNumbî
 * 4))

	)

90 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

91 
	#RTCEN_BôNumbî
 0x0F

	)

92 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

95 
	#BDRST_BôNumbî
 0x10

	)

96 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

101 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

102 
	#LSION_BôNumbî
 0x00

	)

103 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

105 #ifde‡
STM32F10X_CL


109 
	#CFGR2_OFFSET
 (
RCC_OFFSET
 + 0x2C)

	)

110 
	#I2S2SRC_BôNumbî
 0x11

	)

111 
	#CFGR2_I2S2SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S2SRC_BôNumbî
 * 4))

	)

114 
	#I2S3SRC_BôNumbî
 0x12

	)

115 
	#CFGR2_I2S3SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S3SRC_BôNumbî
 * 4))

	)

121 
	#CR_HSEBYP_Re£t
 ((
uöt32_t
)0xFFFBFFFF)

	)

122 
	#CR_HSEBYP_Së
 ((
uöt32_t
)0x00040000)

	)

123 
	#CR_HSEON_Re£t
 ((
uöt32_t
)0xFFFEFFFF)

	)

124 
	#CR_HSEON_Së
 ((
uöt32_t
)0x00010000)

	)

125 
	#CR_HSITRIM_Mask
 ((
uöt32_t
)0xFFFFFF07)

	)

128 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

129 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC2FFFF)

	)

131 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC0FFFF)

	)

134 
	#CFGR_PLLMuŒ_Mask
 ((
uöt32_t
)0x003C0000)

	)

135 
	#CFGR_PLLSRC_Mask
 ((
uöt32_t
)0x00010000)

	)

136 
	#CFGR_PLLXTPRE_Mask
 ((
uöt32_t
)0x00020000)

	)

137 
	#CFGR_SWS_Mask
 ((
uöt32_t
)0x0000000C)

	)

138 
	#CFGR_SW_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

139 
	#CFGR_HPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFFFF0F)

	)

140 
	#CFGR_HPRE_Së_Mask
 ((
uöt32_t
)0x000000F0)

	)

141 
	#CFGR_PPRE1_Re£t_Mask
 ((
uöt32_t
)0xFFFFF8FF)

	)

142 
	#CFGR_PPRE1_Së_Mask
 ((
uöt32_t
)0x00000700)

	)

143 
	#CFGR_PPRE2_Re£t_Mask
 ((
uöt32_t
)0xFFFFC7FF)

	)

144 
	#CFGR_PPRE2_Së_Mask
 ((
uöt32_t
)0x00003800)

	)

145 
	#CFGR_ADCPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFF3FFF)

	)

146 
	#CFGR_ADCPRE_Së_Mask
 ((
uöt32_t
)0x0000C000)

	)

149 
	#CSR_RMVF_Së
 ((
uöt32_t
)0x01000000)

	)

151 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

153 
	#CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000)

	)

154 
	#CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000F)

	)

156 #ifde‡
STM32F10X_CL


157 
	#CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0)

	)

158 
	#CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00)

	)

159 
	#CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000)

	)

163 
	#FLAG_Mask
 ((
uöt8_t
)0x1F)

	)

166 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

169 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

172 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

175 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

193 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

194 
__I
 
uöt8_t
 
	gADCPªscTabÀ
[4] = {2, 4, 6, 8};

217 
	$RCC_DeInô
()

220 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

223 #i‚de‡
STM32F10X_CL


224 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

226 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

230 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

233 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

236 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

238 #ifde‡
STM32F10X_CL


240 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

243 
RCC
->
CIR
 = 0x00FF0000;

246 
RCC
->
CFGR2
 = 0x00000000;

247 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

249 
RCC
->
CIR
 = 0x009F0000;

252 
RCC
->
CFGR2
 = 0x00000000;

255 
RCC
->
CIR
 = 0x009F0000;

258 
	}
}

270 
	$RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
)

273 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

276 
RCC
->
CR
 &
CR_HSEON_Re£t
;

278 
RCC
->
CR
 &
CR_HSEBYP_Re£t
;

280 
RCC_HSE
)

282 
RCC_HSE_ON
:

284 
RCC
->
CR
 |
CR_HSEON_Së
;

287 
RCC_HSE_By∑ss
:

289 
RCC
->
CR
 |
CR_HSEBYP_Së
 | 
CR_HSEON_Së
;

295 
	}
}

304 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

306 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

307 
Eº‹Sètus
 
°©us
 = 
ERROR
;

308 
FœgSètus
 
HSESètus
 = 
RESET
;

313 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

314 
SèπUpCou¡î
++;

315 } (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
HSESètus
 =
RESET
));

317 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

319 
°©us
 = 
SUCCESS
;

323 
°©us
 = 
ERROR
;

325  (
°©us
);

326 
	}
}

334 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

336 
uöt32_t
 
tm¥eg
 = 0;

338 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

339 
tm¥eg
 = 
RCC
->
CR
;

341 
tm¥eg
 &
CR_HSITRIM_Mask
;

343 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

345 
RCC
->
CR
 = 
tm¥eg
;

346 
	}
}

354 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

358 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

359 
	}
}

378 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

380 
uöt32_t
 
tm¥eg
 = 0;

383 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

384 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

386 
tm¥eg
 = 
RCC
->
CFGR
;

388 
tm¥eg
 &
CFGR_PLL_Mask
;

390 
tm¥eg
 |
RCC_PLLSour˚
 | 
RCC_PLLMul
;

392 
RCC
->
CFGR
 = 
tm¥eg
;

393 
	}
}

401 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

404 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

406 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

407 
	}
}

409 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

426 
	$RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
)

428 
uöt32_t
 
tm¥eg
 = 0;

431 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_PREDIV1_Sour˚
));

432 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1
(
RCC_PREDIV1_Div
));

434 
tm¥eg
 = 
RCC
->
CFGR2
;

436 
tm¥eg
 &~(
CFGR2_PREDIV1
 | 
CFGR2_PREDIV1SRC
);

438 
tm¥eg
 |
RCC_PREDIV1_Sour˚
 | 
RCC_PREDIV1_Div
 ;

440 
RCC
->
CFGR2
 = 
tm¥eg
;

441 
	}
}

444 #ifde‡
STM32F10X_CL


454 
	$RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
)

456 
uöt32_t
 
tm¥eg
 = 0;

459 
	`as£π_∑øm
(
	`IS_RCC_PREDIV2
(
RCC_PREDIV2_Div
));

461 
tm¥eg
 = 
RCC
->
CFGR2
;

463 
tm¥eg
 &~
CFGR2_PREDIV2
;

465 
tm¥eg
 |
RCC_PREDIV2_Div
;

467 
RCC
->
CFGR2
 = 
tm¥eg
;

468 
	}
}

479 
	$RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
)

481 
uöt32_t
 
tm¥eg
 = 0;

484 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_PLL2Mul
));

486 
tm¥eg
 = 
RCC
->
CFGR2
;

488 
tm¥eg
 &~
CFGR2_PLL2MUL
;

490 
tm¥eg
 |
RCC_PLL2Mul
;

492 
RCC
->
CFGR2
 = 
tm¥eg
;

493 
	}
}

505 
	$RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

508 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

510 *(
__IO
 
uöt32_t
 *Ë
CR_PLL2ON_BB
 = (uöt32_t)
NewSèã
;

511 
	}
}

523 
	$RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
)

525 
uöt32_t
 
tm¥eg
 = 0;

528 
	`as£π_∑øm
(
	`IS_RCC_PLL3_MUL
(
RCC_PLL3Mul
));

530 
tm¥eg
 = 
RCC
->
CFGR2
;

532 
tm¥eg
 &~
CFGR2_PLL3MUL
;

534 
tm¥eg
 |
RCC_PLL3Mul
;

536 
RCC
->
CFGR2
 = 
tm¥eg
;

537 
	}
}

546 
	$RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

550 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

551 *(
__IO
 
uöt32_t
 *Ë
CR_PLL3ON_BB
 = (uöt32_t)
NewSèã
;

552 
	}
}

564 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

566 
uöt32_t
 
tm¥eg
 = 0;

568 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

569 
tm¥eg
 = 
RCC
->
CFGR
;

571 
tm¥eg
 &
CFGR_SW_Mask
;

573 
tm¥eg
 |
RCC_SYSCLKSour˚
;

575 
RCC
->
CFGR
 = 
tm¥eg
;

576 
	}
}

587 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

589  ((
uöt8_t
)(
RCC
->
CFGR
 & 
CFGR_SWS_Mask
));

590 
	}
}

608 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

610 
uöt32_t
 
tm¥eg
 = 0;

612 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

613 
tm¥eg
 = 
RCC
->
CFGR
;

615 
tm¥eg
 &
CFGR_HPRE_Re£t_Mask
;

617 
tm¥eg
 |
RCC_SYSCLK
;

619 
RCC
->
CFGR
 = 
tm¥eg
;

620 
	}
}

634 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

636 
uöt32_t
 
tm¥eg
 = 0;

638 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

639 
tm¥eg
 = 
RCC
->
CFGR
;

641 
tm¥eg
 &
CFGR_PPRE1_Re£t_Mask
;

643 
tm¥eg
 |
RCC_HCLK
;

645 
RCC
->
CFGR
 = 
tm¥eg
;

646 
	}
}

660 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

662 
uöt32_t
 
tm¥eg
 = 0;

664 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

665 
tm¥eg
 = 
RCC
->
CFGR
;

667 
tm¥eg
 &
CFGR_PPRE2_Re£t_Mask
;

669 
tm¥eg
 |
RCC_HCLK
 << 3;

671 
RCC
->
CFGR
 = 
tm¥eg
;

672 
	}
}

700 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

703 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

704 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

705 i‡(
NewSèã
 !
DISABLE
)

708 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

713 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

715 
	}
}

717 #i‚de‡
STM32F10X_CL


728 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

731 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

733 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

734 
	}
}

746 
	$RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
)

749 
	`as£π_∑øm
(
	`IS_RCC_OTGFSCLK_SOURCE
(
RCC_OTGFSCLKSour˚
));

751 *(
__IO
 
uöt32_t
 *Ë
CFGR_OTGFSPRE_BB
 = 
RCC_OTGFSCLKSour˚
;

752 
	}
}

766 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
)

768 
uöt32_t
 
tm¥eg
 = 0;

770 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PCLK2
));

771 
tm¥eg
 = 
RCC
->
CFGR
;

773 
tm¥eg
 &
CFGR_ADCPRE_Re£t_Mask
;

775 
tm¥eg
 |
RCC_PCLK2
;

777 
RCC
->
CFGR
 = 
tm¥eg
;

778 
	}
}

780 #ifde‡
STM32F10X_CL


792 
	$RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
)

795 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLK_SOURCE
(
RCC_I2S2CLKSour˚
));

797 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S2SRC_BB
 = 
RCC_I2S2CLKSour˚
;

798 
	}
}

811 
	$RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
)

814 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLK_SOURCE
(
RCC_I2S3CLKSour˚
));

816 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S3SRC_BB
 = 
RCC_I2S3CLKSour˚
;

817 
	}
}

829 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

832 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

835 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

837 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

839 
RCC_LSE
)

841 
RCC_LSE_ON
:

843 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

846 
RCC_LSE_By∑ss
:

848 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

854 
	}
}

862 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

865 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

866 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

867 
	}
}

879 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

882 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

884 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

885 
	}
}

893 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

896 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

897 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

898 
	}
}

908 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

910 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0;

912 #ifde‡ 
STM32F10X_CL


913 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

916 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

917 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

921 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_SWS_Mask
;

923 
tmp
)

926 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

929 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

934 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
CFGR_PLLMuŒ_Mask
;

935 
∂lsour˚
 = 
RCC
->
CFGR
 & 
CFGR_PLLSRC_Mask
;

937 #i‚de‡
STM32F10X_CL


938 
∂lmuŒ
 = (Öllmull >> 18) + 2;

940 i‡(
∂lsour˚
 == 0x00)

942 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

946 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

947 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

949 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

952 i‡((
RCC
->
CFGR
 & 
CFGR_PLLXTPRE_Mask
Ë!(
uöt32_t
)
RESET
)

954 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 >> 1Ë* 
∂lmuŒ
;

958 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
 * 
∂lmuŒ
;

963 
∂lmuŒ
 =Öllmull >> 18;

965 i‡(
∂lmuŒ
 != 0x0D)

967 
∂lmuŒ
 += 2;

971 
∂lmuŒ
 = 13 / 2;

974 i‡(
∂lsour˚
 == 0x00)

976 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

982 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
CFGR2_PREDIV1SRC
;

983 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

985 i‡(
¥ediv1sour˚
 == 0)

987 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

993 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
CFGR2_PREDIV2
) >> 4) + 1;

994 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
CFGR2_PLL2MUL
) >> 8 ) + 2;

995 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1002 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1008 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_HPRE_Së_Mask
;

1009 
tmp
 =Åmp >> 4;

1010 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1012 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1014 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE1_Së_Mask
;

1015 
tmp
 =Åmp >> 8;

1016 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1018 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1020 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE2_Së_Mask
;

1021 
tmp
 =Åmp >> 11;

1022 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1024 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1026 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_ADCPRE_Së_Mask
;

1027 
tmp
 =Åmp >> 14;

1028 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

1030 
RCC_Clocks
->
ADCCLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
 / 
¥esc
;

1031 
	}
}

1064 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1067 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1068 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1070 i‡(
NewSèã
 !
DISABLE
)

1072 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1076 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1078 
	}
}

1095 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1098 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1099 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1100 i‡(
NewSèã
 !
DISABLE
)

1102 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1106 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1108 
	}
}

1126 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1129 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1130 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1131 i‡(
NewSèã
 !
DISABLE
)

1133 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1137 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1139 
	}
}

1141 #ifde‡
STM32F10X_CL


1153 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1156 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH_RESET
(
RCC_AHBPîùh
));

1157 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1159 i‡(
NewSèã
 !
DISABLE
)

1161 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1165 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1167 
	}
}

1185 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1188 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1189 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1190 i‡(
NewSèã
 !
DISABLE
)

1192 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1196 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1198 
	}
}

1216 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1219 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1220 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1221 i‡(
NewSèã
 !
DISABLE
)

1223 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1227 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1229 
	}
}

1237 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1240 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1241 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1242 
	}
}

1250 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1253 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1254 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

1255 
	}
}

1282 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
)

1285 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCO
));

1288 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCO
;

1289 
	}
}

1326 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1328 
uöt32_t
 
tmp
 = 0;

1329 
uöt32_t
 
°©u§eg
 = 0;

1330 
FœgSètus
 
bô°©us
 = 
RESET
;

1332 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1335 
tmp
 = 
RCC_FLAG
 >> 5;

1336 i‡(
tmp
 == 1)

1338 
°©u§eg
 = 
RCC
->
CR
;

1340 i‡(
tmp
 == 2)

1342 
°©u§eg
 = 
RCC
->
BDCR
;

1346 
°©u§eg
 = 
RCC
->
CSR
;

1350 
tmp
 = 
RCC_FLAG
 & 
FLAG_Mask
;

1351 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1353 
bô°©us
 = 
SET
;

1357 
bô°©us
 = 
RESET
;

1361  
bô°©us
;

1362 
	}
}

1371 
	$RCC_CÀ¨Fœg
()

1374 
RCC
->
CSR
 |
CSR_RMVF_Së
;

1375 
	}
}

1402 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1404 
ITSètus
 
bô°©us
 = 
RESET
;

1406 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1409 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1411 
bô°©us
 = 
SET
;

1415 
bô°©us
 = 
RESET
;

1419  
bô°©us
;

1420 
	}
}

1448 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1451 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1455 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1456 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_rtc.c

23 
	~"°m32f10x_πc.h
"

44 
	#RTC_LSB_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

45 
	#PRLH_MSB_MASK
 ((
uöt32_t
)0x000F0000Ë

	)

90 
	$RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

93 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

94 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

96 i‡(
NewSèã
 !
DISABLE
)

98 
RTC
->
CRH
 |
RTC_IT
;

102 
RTC
->
CRH
 &(
uöt16_t
)~
RTC_IT
;

104 
	}
}

111 
	$RTC_E¡îC⁄figMode
()

114 
RTC
->
CRL
 |
RTC_CRL_CNF
;

115 
	}
}

122 
	$RTC_ExôC⁄figMode
()

125 
RTC
->
CRL
 &(
uöt16_t
)~((uöt16_t)
RTC_CRL_CNF
);

126 
	}
}

133 
uöt32_t
 
	$RTC_GëCou¡î
()

135 
uöt16_t
 
tmp
 = 0;

136 
tmp
 = 
RTC
->
CNTL
;

137  (((
uöt32_t
)
RTC
->
CNTH
 << 16 ) | 
tmp
) ;

138 
	}
}

145 
	$RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
)

147 
	`RTC_E¡îC⁄figMode
();

149 
RTC
->
CNTH
 = 
Cou¡îVÆue
 >> 16;

151 
RTC
->
CNTL
 = (
Cou¡îVÆue
 & 
RTC_LSB_MASK
);

152 
	`RTC_ExôC⁄figMode
();

153 
	}
}

160 
	$RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
)

163 
	`as£π_∑øm
(
	`IS_RTC_PRESCALER
(
PªsˇÀrVÆue
));

165 
	`RTC_E¡îC⁄figMode
();

167 
RTC
->
PRLH
 = (
PªsˇÀrVÆue
 & 
PRLH_MSB_MASK
) >> 16;

169 
RTC
->
PRLL
 = (
PªsˇÀrVÆue
 & 
RTC_LSB_MASK
);

170 
	`RTC_ExôC⁄figMode
();

171 
	}
}

178 
	$RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
)

180 
	`RTC_E¡îC⁄figMode
();

182 
RTC
->
ALRH
 = 
AœrmVÆue
 >> 16;

184 
RTC
->
ALRL
 = (
AœrmVÆue
 & 
RTC_LSB_MASK
);

185 
	`RTC_ExôC⁄figMode
();

186 
	}
}

193 
uöt32_t
 
	$RTC_GëDividî
()

195 
uöt32_t
 
tmp
 = 0x00;

196 
tmp
 = ((
uöt32_t
)
RTC
->
DIVH
 & (uint32_t)0x000F) << 16;

197 
tmp
 |
RTC
->
DIVL
;

198  
tmp
;

199 
	}
}

207 
	$RTC_WaôF‹La°Task
()

210 (
RTC
->
CRL
 & 
RTC_FLAG_RTOFF
Ë=(
uöt16_t
)
RESET
)

213 
	}
}

223 
	$RTC_WaôF‹Synchro
()

226 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG_RSF
;

228 (
RTC
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt16_t
)
RESET
)

231 
	}
}

244 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
)

246 
FœgSètus
 
bô°©us
 = 
RESET
;

249 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

251 i‡((
RTC
->
CRL
 & 
RTC_FLAG
Ë!(
uöt16_t
)
RESET
)

253 
bô°©us
 = 
SET
;

257 
bô°©us
 = 
RESET
;

259  
bô°©us
;

260 
	}
}

273 
	$RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
)

276 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

279 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG
;

280 
	}
}

291 
ITSètus
 
	$RTC_GëITSètus
(
uöt16_t
 
RTC_IT
)

293 
ITSètus
 
bô°©us
 = 
RESET
;

295 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

297 
bô°©us
 = (
ITSètus
)(
RTC
->
CRL
 & 
RTC_IT
);

298 i‡(((
RTC
->
CRH
 & 
RTC_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 != (uint16_t)RESET))

300 
bô°©us
 = 
SET
;

304 
bô°©us
 = 
RESET
;

306  
bô°©us
;

307 
	}
}

318 
	$RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
)

321 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

324 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_IT
;

325 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_sdio.c

23 
	~"°m32f10x_sdio.h
"

24 
	~"°m32f10x_rcc.h
"

40 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

45 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

46 
	#CLKEN_BôNumbî
 0x08

	)

47 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

52 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

53 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

54 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

57 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

58 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

61 
	#NIEN_BôNumbî
 0x0D

	)

62 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

65 
	#ATACMD_BôNumbî
 0x0E

	)

66 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

71 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

72 
	#DMAEN_BôNumbî
 0x03

	)

73 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

76 
	#RWSTART_BôNumbî
 0x08

	)

77 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

80 
	#RWSTOP_BôNumbî
 0x09

	)

81 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

84 
	#RWMOD_BôNumbî
 0x0A

	)

85 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

88 
	#SDIOEN_BôNumbî
 0x0B

	)

89 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

96 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

101 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

106 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

111 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

114 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

161 
	$SDIO_DeInô
()

163 
SDIO
->
POWER
 = 0x00000000;

164 
SDIO
->
CLKCR
 = 0x00000000;

165 
SDIO
->
ARG
 = 0x00000000;

166 
SDIO
->
CMD
 = 0x00000000;

167 
SDIO
->
DTIMER
 = 0x00000000;

168 
SDIO
->
DLEN
 = 0x00000000;

169 
SDIO
->
DCTRL
 = 0x00000000;

170 
SDIO
->
ICR
 = 0x00C007FF;

171 
SDIO
->
MASK
 = 0x00000000;

172 
	}
}

181 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

183 
uöt32_t
 
tm¥eg
 = 0;

186 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

187 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

188 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

189 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

190 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

194 
tm¥eg
 = 
SDIO
->
CLKCR
;

197 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

205 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

206 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

207 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

210 
SDIO
->
CLKCR
 = 
tm¥eg
;

211 
	}
}

219 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

222 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

223 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

224 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

225 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

226 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

227 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

228 
	}
}

235 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

240 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

241 
	}
}

251 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

254 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

256 
SDIO
->
POWER
 &
PWR_PWRCTRL_MASK
;

257 
SDIO
->
POWER
 |
SDIO_PowîSèã
;

258 
	}
}

269 
uöt32_t
 
	$SDIO_GëPowîSèã
()

271  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

272 
	}
}

307 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

310 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

311 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

313 i‡(
NewSèã
 !
DISABLE
)

316 
SDIO
->
MASK
 |
SDIO_IT
;

321 
SDIO
->
MASK
 &~
SDIO_IT
;

323 
	}
}

331 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

334 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

336 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

337 
	}
}

346 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

348 
uöt32_t
 
tm¥eg
 = 0;

351 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

352 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

353 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

354 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

358 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

362 
tm¥eg
 = 
SDIO
->
CMD
;

364 
tm¥eg
 &
CMD_CLEAR_MASK
;

369 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


370 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

373 
SDIO
->
CMD
 = 
tm¥eg
;

374 
	}
}

382 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

385 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

386 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

387 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

388 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

389 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

390 
	}
}

397 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

399  (
uöt8_t
)(
SDIO
->
RESPCMD
);

400 
	}
}

412 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

414 
__IO
 
uöt32_t
 
tmp
 = 0;

417 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

419 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

421  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

422 
	}
}

431 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

433 
uöt32_t
 
tm¥eg
 = 0;

436 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

437 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

438 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

439 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

440 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

444 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

448 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

452 
tm¥eg
 = 
SDIO
->
DCTRL
;

454 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

459 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


460 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

463 
SDIO
->
DCTRL
 = 
tm¥eg
;

464 
	}
}

472 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

475 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

476 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

477 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

478 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

479 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

480 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

481 
	}
}

488 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

490  
SDIO
->
DCOUNT
;

491 
	}
}

498 
uöt32_t
 
	$SDIO_RódD©a
()

500  
SDIO
->
FIFO
;

501 
	}
}

508 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

510 
SDIO
->
FIFO
 = 
D©a
;

511 
	}
}

518 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

520  
SDIO
->
FIFOCNT
;

521 
	}
}

529 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

534 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

535 
	}
}

543 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

546 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

548 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

549 
	}
}

559 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

562 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

564 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

565 
	}
}

573 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

576 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

578 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

579 
	}
}

587 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

592 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

593 
	}
}

601 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

604 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

606 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

607 
	}
}

614 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

617 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

620 
	}
}

627 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

630 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

632 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

633 
	}
}

666 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

668 
FœgSètus
 
bô°©us
 = 
RESET
;

671 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

673 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

675 
bô°©us
 = 
SET
;

679 
bô°©us
 = 
RESET
;

681  
bô°©us
;

682 
	}
}

704 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

707 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

709 
SDIO
->
ICR
 = 
SDIO_FLAG
;

710 
	}
}

743 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

745 
ITSètus
 
bô°©us
 = 
RESET
;

748 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

749 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

751 
bô°©us
 = 
SET
;

755 
bô°©us
 = 
RESET
;

757  
bô°©us
;

758 
	}
}

779 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

782 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

784 
SDIO
->
ICR
 = 
SDIO_IT
;

785 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_spi.c

23 
	~"°m32f10x_•i.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CR1_SPE_Së
 ((
uöt16_t
)0x0040)

	)

50 
	#CR1_SPE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

53 
	#I2SCFGR_I2SE_Së
 ((
uöt16_t
)0x0400)

	)

54 
	#I2SCFGR_I2SE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

57 
	#CR1_CRCNext_Së
 ((
uöt16_t
)0x1000)

	)

60 
	#CR1_CRCEN_Së
 ((
uöt16_t
)0x2000)

	)

61 
	#CR1_CRCEN_Re£t
 ((
uöt16_t
)0xDFFF)

	)

64 
	#CR2_SSOE_Së
 ((
uöt16_t
)0x0004)

	)

65 
	#CR2_SSOE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

68 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0x3040)

	)

69 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

72 
	#SPI_Mode_Sñe˘
 ((
uöt16_t
)0xF7FF)

	)

73 
	#I2S_Mode_Sñe˘
 ((
uöt16_t
)0x0800)

	)

76 
	#I2S2_CLOCK_SRC
 ((
uöt32_t
)(0x00020000))

	)

77 
	#I2S3_CLOCK_SRC
 ((
uöt32_t
)(0x00040000))

	)

78 
	#I2S_MUL_MASK
 ((
uöt32_t
)(0x0000F000))

	)

79 
	#I2S_DIV_MASK
 ((
uöt32_t
)(0x000000F0))

	)

119 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

122 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

124 i‡(
SPIx
 =
SPI1
)

127 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

131 i‡(
SPIx
 =
SPI2
)

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

136 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

140 i‡(
SPIx
 =
SPI3
)

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

148 
	}
}

158 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

160 
uöt16_t
 
tm¥eg
 = 0;

163 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

166 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

167 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

168 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

169 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

170 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

171 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

172 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

173 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

174 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

178 
tm¥eg
 = 
SPIx
->
CR1
;

180 
tm¥eg
 &
CR1_CLEAR_Mask
;

189 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

190 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

191 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

192 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

194 
SPIx
->
CR1
 = 
tm¥eg
;

197 
SPIx
->
I2SCFGR
 &
SPI_Mode_Sñe˘
;

201 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

202 
	}
}

219 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

221 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

222 
uöt32_t
 
tmp
 = 0;

223 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

224 
uöt32_t
 
sour˚˛ock
 = 0;

227 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

228 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

229 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

230 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

231 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

232 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

233 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

237 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

238 
SPIx
->
I2SPR
 = 0x0002;

241 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

244 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

246 
i2sodd
 = (
uöt16_t
)0;

247 
i2sdiv
 = (
uöt16_t
)2;

253 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

256 
∑ckëÀngth
 = 1;

261 
∑ckëÀngth
 = 2;

265 if(((
uöt32_t
)
SPIx
Ë=
SPI2_BASE
)

268 
tmp
 = 
I2S2_CLOCK_SRC
;

273 
tmp
 = 
I2S3_CLOCK_SRC
;

278 #ifde‡
STM32F10X_CL


279 if((
RCC
->
CFGR2
 & 
tmp
) != 0)

282 
tmp
 = (
uöt32_t
)((
RCC
->
CFGR2
 & 
I2S_MUL_MASK
) >> 12);

285 if((
tmp
 > 5) && (tmp < 15))

288 
tmp
 += 2;

292 i‡(
tmp
 == 15)

295 
tmp
 = 20;

299 
sour˚˛ock
 = (
uöt32_t
)(((
RCC
->
CFGR2
 & 
I2S_DIV_MASK
) >> 4) + 1);

302 
sour˚˛ock
 = (
uöt32_t
Ë((
HSE_VÆue
 / sour˚˛ockË* 
tmp
 * 2);

307 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

310 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

314 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

317 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

321 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

324 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

329 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

333 
tmp
 =Åmp / 10;

336 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

339 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

342 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

346 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

349 
i2sdiv
 = 2;

350 
i2sodd
 = 0;

354 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

357 
tm¥eg
 |(
uöt16_t
)(
I2S_Mode_Sñe˘
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

358 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

359 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

362 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

363 
	}
}

370 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

374 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

376 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

378 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

380 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

382 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

384 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

386 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

388 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

390 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

391 
	}
}

398 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

402 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

405 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

408 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

411 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

414 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

417 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

418 
	}
}

427 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

430 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

431 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

432 i‡(
NewSèã
 !
DISABLE
)

435 
SPIx
->
CR1
 |
CR1_SPE_Së
;

440 
SPIx
->
CR1
 &
CR1_SPE_Re£t
;

442 
	}
}

451 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

454 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

455 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

456 i‡(
NewSèã
 !
DISABLE
)

459 
SPIx
->
I2SCFGR
 |
I2SCFGR_I2SE_Së
;

464 
SPIx
->
I2SCFGR
 &
I2SCFGR_I2SE_Re£t
;

466 
	}
}

482 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

486 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

488 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

491 
ôpos
 = 
SPI_I2S_IT
 >> 4;

494 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

496 i‡(
NewSèã
 !
DISABLE
)

499 
SPIx
->
CR2
 |
ômask
;

504 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

506 
	}
}

521 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

524 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

525 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

526 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

527 i‡(
NewSèã
 !
DISABLE
)

530 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

535 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

537 
	}
}

547 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

550 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

553 
SPIx
->
DR
 = 
D©a
;

554 
	}
}

563 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

566 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

569  
SPIx
->
DR
;

570 
	}
}

581 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

584 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

585 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

586 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

589 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

594 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

596 
	}
}

605 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

608 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

609 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

610 i‡(
NewSèã
 !
DISABLE
)

613 
SPIx
->
CR2
 |
CR2_SSOE_Së
;

618 
SPIx
->
CR2
 &
CR2_SSOE_Re£t
;

620 
	}
}

631 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

634 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

635 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

637 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

639 
SPIx
->
CR1
 |
SPI_D©aSize
;

640 
	}
}

647 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

650 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

653 
SPIx
->
CR1
 |
CR1_CRCNext_Së
;

654 
	}
}

663 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

666 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

668 i‡(
NewSèã
 !
DISABLE
)

671 
SPIx
->
CR1
 |
CR1_CRCEN_Së
;

676 
SPIx
->
CR1
 &
CR1_CRCEN_Re£t
;

678 
	}
}

689 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

691 
uöt16_t
 
¸¸eg
 = 0;

693 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

694 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

695 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

698 
¸¸eg
 = 
SPIx
->
TXCRCR
;

703 
¸¸eg
 = 
SPIx
->
RXCRCR
;

706  
¸¸eg
;

707 
	}
}

714 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

717 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

720  
SPIx
->
CRCPR
;

721 
	}
}

732 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

735 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

736 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

737 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

740 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

745 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

747 
	}
}

766 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

768 
FœgSètus
 
bô°©us
 = 
RESET
;

770 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

771 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

773 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

776 
bô°©us
 = 
SET
;

781 
bô°©us
 = 
RESET
;

784  
bô°©us
;

785 
	}
}

804 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

807 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

808 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

811 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

812 
	}
}

829 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

831 
ITSètus
 
bô°©us
 = 
RESET
;

832 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

835 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

836 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

839 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

842 
ômask
 = 
SPI_I2S_IT
 >> 4;

845 
ômask
 = 0x01 << itmask;

848 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

851 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

854 
bô°©us
 = 
SET
;

859 
bô°©us
 = 
RESET
;

862  
bô°©us
;

863 
	}
}

883 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

885 
uöt16_t
 
ôpos
 = 0;

887 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

888 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

891 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

894 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

895 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_tim.c

23 
	~"°m32f10x_tim.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#SMCR_ETR_Mask
 ((
uöt16_t
)0x00FF)

	)

49 
	#CCMR_Off£t
 ((
uöt16_t
)0x0018)

	)

50 
	#CCER_CCE_Së
 ((
uöt16_t
)0x0001)

	)

51 
	#CCER_CCNE_Së
 ((
uöt16_t
)0x0004)

	)

77 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

78 
uöt16_t
 
TIM_ICFûãr
);

79 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

80 
uöt16_t
 
TIM_ICFûãr
);

81 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

82 
uöt16_t
 
TIM_ICFûãr
);

83 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

84 
uöt16_t
 
TIM_ICFûãr
);

122 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

125 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

127 i‡(
TIMx
 =
TIM1
)

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

132 i‡(
TIMx
 =
TIM2
)

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

135 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

137 i‡(
TIMx
 =
TIM3
)

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

142 i‡(
TIMx
 =
TIM4
)

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

147 i‡(
TIMx
 =
TIM5
)

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

150 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

152 i‡(
TIMx
 =
TIM6
)

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

155 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

157 i‡(
TIMx
 =
TIM7
)

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

162 i‡(
TIMx
 =
TIM8
)

164 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

165 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

167 i‡(
TIMx
 =
TIM9
)

169 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

170 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

172 i‡(
TIMx
 =
TIM10
)

174 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

175 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

177 i‡(
TIMx
 =
TIM11
)

179 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

180 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

182 i‡(
TIMx
 =
TIM12
)

184 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

185 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

187 i‡(
TIMx
 =
TIM13
)

189 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

192 i‡(
TIMx
 =
TIM14
)

194 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

195 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

197 i‡(
TIMx
 =
TIM15
)

199 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
ENABLE
);

200 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
DISABLE
);

202 i‡(
TIMx
 =
TIM16
)

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
ENABLE
);

205 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
DISABLE
);

209 i‡(
TIMx
 =
TIM17
)

211 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
ENABLE
);

212 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
DISABLE
);

215 
	}
}

226 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

228 
uöt16_t
 
tmp¸1
 = 0;

231 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

232 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

233 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

235 
tmp¸1
 = 
TIMx
->
CR1
;

237 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
)||

238 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

241 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

242 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

245 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

248 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CKD
));

249 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

252 
TIMx
->
CR1
 = 
tmp¸1
;

255 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

258 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

260 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)|| (TIMx =
TIM16
Ë|| (TIMx =
TIM17
))

263 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

268 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

269 
	}
}

279 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

281 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

284 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

285 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

286 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

287 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

289 
TIMx
->
CCER
 &(
uöt16_t
)(~(uöt16_t)
TIM_CCER_CC1E
);

291 
tmpc˚r
 = 
TIMx
->
CCER
;

293 
tmp¸2
 = 
TIMx
->
CR2
;

296 
tmpccmrx
 = 
TIMx
->
CCMR1
;

299 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC1M
));

300 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC1S
));

303 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

306 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1P
));

308 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

311 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

313 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)||

314 (
TIMx
 =
TIM16
)|| (TIMx =
TIM17
))

316 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

317 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

318 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

319 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

322 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NP
));

324 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

327 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NE
));

329 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

332 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1
));

333 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1N
));

336 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

338 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

341 
TIMx
->
CR2
 = 
tmp¸2
;

344 
TIMx
->
CCMR1
 = 
tmpccmrx
;

347 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

350 
TIMx
->
CCER
 = 
tmpc˚r
;

351 
	}
}

362 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

364 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

367 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

368 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

369 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

370 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

372 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2E
));

375 
tmpc˚r
 = 
TIMx
->
CCER
;

377 
tmp¸2
 = 
TIMx
->
CR2
;

380 
tmpccmrx
 = 
TIMx
->
CCMR1
;

383 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC2M
));

384 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC2S
));

387 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

390 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2P
));

392 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

395 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

397 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

399 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

400 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

401 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

402 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

405 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NP
));

407 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

410 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NE
));

412 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

415 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2
));

416 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2N
));

419 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

421 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

424 
TIMx
->
CR2
 = 
tmp¸2
;

427 
TIMx
->
CCMR1
 = 
tmpccmrx
;

430 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

433 
TIMx
->
CCER
 = 
tmpc˚r
;

434 
	}
}

444 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

446 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

449 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

450 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

451 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

452 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

454 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3E
));

457 
tmpc˚r
 = 
TIMx
->
CCER
;

459 
tmp¸2
 = 
TIMx
->
CR2
;

462 
tmpccmrx
 = 
TIMx
->
CCMR2
;

465 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC3M
));

466 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC3S
));

468 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

471 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3P
));

473 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

476 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

478 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

480 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

481 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

482 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

483 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

486 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NP
));

488 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

490 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NE
));

493 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

495 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3
));

496 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3N
));

498 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

500 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

503 
TIMx
->
CR2
 = 
tmp¸2
;

506 
TIMx
->
CCMR2
 = 
tmpccmrx
;

509 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

512 
TIMx
->
CCER
 = 
tmpc˚r
;

513 
	}
}

523 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

525 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

528 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

529 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

530 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

531 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

533 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4E
));

536 
tmpc˚r
 = 
TIMx
->
CCER
;

538 
tmp¸2
 = 
TIMx
->
CR2
;

541 
tmpccmrx
 = 
TIMx
->
CCMR2
;

544 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC4M
));

545 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC4S
));

548 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

551 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4P
));

553 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

556 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

558 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

560 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

562 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS4
));

564 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

567 
TIMx
->
CR2
 = 
tmp¸2
;

570 
TIMx
->
CCMR2
 = 
tmpccmrx
;

573 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

576 
TIMx
->
CCER
 = 
tmpc˚r
;

577 
	}
}

587 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

590 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_ICInôSåu˘
->
TIM_Ch™√l
));

591 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

592 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

593 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

595 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

596 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

598 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

602 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY_LITE
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

604 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

606 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

608 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

609 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

610 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

612 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

614 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

616 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

618 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

619 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

620 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

622 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

624 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

626 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

628 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

629 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

630 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

632 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

636 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

638 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

639 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

640 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

642 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

644 
	}
}

654 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

656 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

657 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

659 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

661 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

663 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

667 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

670 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

672 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

676 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

678 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

681 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

682 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

684 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

686 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

688 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

693 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

694 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

696 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

698 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

700 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

702 
	}
}

712 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

715 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

716 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

717 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

718 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

719 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

720 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

721 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

724 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

725 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

726 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

727 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

728 
	}
}

736 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

739 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFF;

740 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

741 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

742 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

743 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

744 
	}
}

752 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

755 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

756 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

757 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

758 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

759 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

760 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

761 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

762 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

763 
	}
}

771 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

774 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

775 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

776 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

777 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

778 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

779 
	}
}

787 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

790 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

791 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

792 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

793 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

794 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

795 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

796 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

797 
	}
}

806 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

809 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

810 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

812 i‡(
NewSèã
 !
DISABLE
)

815 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

820 
TIMx
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
));

822 
	}
}

831 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

834 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

835 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

836 i‡(
NewSèã
 !
DISABLE
)

839 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

844 
TIMx
->
BDTR
 &(
uöt16_t
)(~((uöt16_t)
TIM_BDTR_MOE
));

846 
	}
}

872 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

875 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

876 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

877 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

879 i‡(
NewSèã
 !
DISABLE
)

882 
TIMx
->
DIER
 |
TIM_IT
;

887 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

889 
	}
}

909 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

912 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

913 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

916 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

917 
	}
}

937 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

940 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

941 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

942 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

944 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

945 
	}
}

964 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

967 
	`as£π_∑øm
(
	`IS_TIM_LIST9_PERIPH
(
TIMx
));

968 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

969 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

971 i‡(
NewSèã
 !
DISABLE
)

974 
TIMx
->
DIER
 |
TIM_DMASour˚
;

979 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

981 
	}
}

989 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

992 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

994 
TIMx
->
SMCR
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

995 
	}
}

1008 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1011 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1012 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1014 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

1016 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1017 
	}
}

1035 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1036 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

1039 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1040 
	`as£π_∑øm
(
	`IS_TIM_TIXCLK_SOURCE
(
TIM_TIxExã∫ÆCLKSour˚
));

1041 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

1042 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

1044 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

1046 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1050 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1053 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

1055 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1056 
	}
}

1075 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1076 
uöt16_t
 
ExtTRGFûãr
)

1078 
uöt16_t
 
tmpsm¸
 = 0;

1080 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1081 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1082 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1083 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1085 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1088 
tmpsm¸
 = 
TIMx
->
SMCR
;

1090 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1092 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

1094 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1095 
tmpsm¸
 |
TIM_TS_ETRF
;

1097 
TIMx
->
SMCR
 = 
tmpsm¸
;

1098 
	}
}

1117 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1118 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

1121 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1122 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1123 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1124 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1126 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1128 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

1129 
	}
}

1148 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1149 
uöt16_t
 
ExtTRGFûãr
)

1151 
uöt16_t
 
tmpsm¸
 = 0;

1153 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1154 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1155 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1156 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1157 
tmpsm¸
 = 
TIMx
->
SMCR
;

1159 
tmpsm¸
 &
SMCR_ETR_Mask
;

1161 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

1163 
TIMx
->
SMCR
 = 
tmpsm¸
;

1164 
	}
}

1176 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

1179 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1180 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

1182 
TIMx
->
PSC
 = 
PªsˇÀr
;

1184 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

1185 
	}
}

1199 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

1201 
uöt16_t
 
tmp¸1
 = 0;

1203 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1204 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

1205 
tmp¸1
 = 
TIMx
->
CR1
;

1207 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

1209 
tmp¸1
 |
TIM_Cou¡îMode
;

1211 
TIMx
->
CR1
 = 
tmp¸1
;

1212 
	}
}

1229 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1231 
uöt16_t
 
tmpsm¸
 = 0;

1233 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1234 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1236 
tmpsm¸
 = 
TIMx
->
SMCR
;

1238 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1240 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

1242 
TIMx
->
SMCR
 = 
tmpsm¸
;

1243 
	}
}

1264 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1265 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

1267 
uöt16_t
 
tmpsm¸
 = 0;

1268 
uöt16_t
 
tmpccmr1
 = 0;

1269 
uöt16_t
 
tmpc˚r
 = 0;

1272 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1273 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

1274 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

1275 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

1278 
tmpsm¸
 = 
TIMx
->
SMCR
;

1281 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1284 
tmpc˚r
 = 
TIMx
->
CCER
;

1287 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1288 
tmpsm¸
 |
TIM_EncodîMode
;

1291 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& (uöt16_t)(~((uöt16_t)
TIM_CCMR1_CC2S
)));

1292 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

1295 
tmpc˚r
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCER_CC1P
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCER_CC2P
)));

1296 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

1299 
TIMx
->
SMCR
 = 
tmpsm¸
;

1301 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1303 
TIMx
->
CCER
 = 
tmpc˚r
;

1304 
	}
}

1315 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1317 
uöt16_t
 
tmpccmr1
 = 0;

1319 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1320 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1321 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1323 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1M
);

1325 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1327 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1328 
	}
}

1339 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1341 
uöt16_t
 
tmpccmr1
 = 0;

1343 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1344 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1345 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1347 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2M
);

1349 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1351 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1352 
	}
}

1363 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1365 
uöt16_t
 
tmpccmr2
 = 0;

1367 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1368 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1369 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1371 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3M
);

1373 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1375 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1376 
	}
}

1387 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1389 
uöt16_t
 
tmpccmr2
 = 0;

1391 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1392 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1393 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1395 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4M
);

1397 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1399 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1400 
	}
}

1409 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1412 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1413 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1414 i‡(
NewSèã
 !
DISABLE
)

1417 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

1422 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_ARPE
);

1424 
	}
}

1433 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1436 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1437 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1438 i‡(
NewSèã
 !
DISABLE
)

1441 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

1446 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCUS
);

1448 
	}
}

1458 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1461 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1462 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1463 i‡(
NewSèã
 !
DISABLE
)

1466 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

1471 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCDS
);

1473 
	}
}

1483 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1486 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1488 i‡(
NewSèã
 !
DISABLE
)

1491 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

1496 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCPC
);

1498 
	}
}

1509 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1511 
uöt16_t
 
tmpccmr1
 = 0;

1513 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1514 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1515 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1517 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1PE
);

1519 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1521 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1522 
	}
}

1534 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1536 
uöt16_t
 
tmpccmr1
 = 0;

1538 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1539 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1540 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1542 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2PE
);

1544 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1546 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1547 
	}
}

1558 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1560 
uöt16_t
 
tmpccmr2
 = 0;

1562 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1563 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1564 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1566 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3PE
);

1568 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1570 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1571 
	}
}

1582 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1584 
uöt16_t
 
tmpccmr2
 = 0;

1586 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1587 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1588 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1590 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4PE
);

1592 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1594 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1595 
	}
}

1606 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1608 
uöt16_t
 
tmpccmr1
 = 0;

1610 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1611 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1613 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1615 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1FE
);

1617 
tmpccmr1
 |
TIM_OCFa°
;

1619 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1620 
	}
}

1632 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1634 
uöt16_t
 
tmpccmr1
 = 0;

1636 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1637 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1639 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1641 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2FE
);

1643 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1645 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1646 
	}
}

1657 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1659 
uöt16_t
 
tmpccmr2
 = 0;

1661 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1662 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1664 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1666 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3FE
);

1668 
tmpccmr2
 |
TIM_OCFa°
;

1670 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1671 
	}
}

1682 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1684 
uöt16_t
 
tmpccmr2
 = 0;

1686 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1687 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1689 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1691 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4FE
);

1693 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1695 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1696 
	}
}

1707 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1709 
uöt16_t
 
tmpccmr1
 = 0;

1711 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1712 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1714 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1717 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1CE
);

1719 
tmpccmr1
 |
TIM_OCCÀ¨
;

1721 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1722 
	}
}

1733 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1735 
uöt16_t
 
tmpccmr1
 = 0;

1737 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1738 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1739 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1741 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2CE
);

1743 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1745 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1746 
	}
}

1757 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1759 
uöt16_t
 
tmpccmr2
 = 0;

1761 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1762 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1763 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1765 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3CE
);

1767 
tmpccmr2
 |
TIM_OCCÀ¨
;

1769 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1770 
	}
}

1781 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1783 
uöt16_t
 
tmpccmr2
 = 0;

1785 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1786 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1787 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1789 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4CE
);

1791 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1793 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1794 
	}
}

1805 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1807 
uöt16_t
 
tmpc˚r
 = 0;

1809 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1810 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1811 
tmpc˚r
 = 
TIMx
->
CCER
;

1813 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1P
);

1814 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1816 
TIMx
->
CCER
 = 
tmpc˚r
;

1817 
	}
}

1828 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1830 
uöt16_t
 
tmpc˚r
 = 0;

1832 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1833 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1835 
tmpc˚r
 = 
TIMx
->
CCER
;

1837 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1NP
);

1838 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1840 
TIMx
->
CCER
 = 
tmpc˚r
;

1841 
	}
}

1852 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1854 
uöt16_t
 
tmpc˚r
 = 0;

1856 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1857 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1858 
tmpc˚r
 = 
TIMx
->
CCER
;

1860 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2P
);

1861 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1863 
TIMx
->
CCER
 = 
tmpc˚r
;

1864 
	}
}

1875 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1877 
uöt16_t
 
tmpc˚r
 = 0;

1879 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1880 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1882 
tmpc˚r
 = 
TIMx
->
CCER
;

1884 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2NP
);

1885 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1887 
TIMx
->
CCER
 = 
tmpc˚r
;

1888 
	}
}

1899 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1901 
uöt16_t
 
tmpc˚r
 = 0;

1903 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1904 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1905 
tmpc˚r
 = 
TIMx
->
CCER
;

1907 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3P
);

1908 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1910 
TIMx
->
CCER
 = 
tmpc˚r
;

1911 
	}
}

1922 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1924 
uöt16_t
 
tmpc˚r
 = 0;

1927 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1928 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1930 
tmpc˚r
 = 
TIMx
->
CCER
;

1932 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3NP
);

1933 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1935 
TIMx
->
CCER
 = 
tmpc˚r
;

1936 
	}
}

1947 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1949 
uöt16_t
 
tmpc˚r
 = 0;

1951 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1952 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1953 
tmpc˚r
 = 
TIMx
->
CCER
;

1955 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4P
);

1956 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1958 
TIMx
->
CCER
 = 
tmpc˚r
;

1959 
	}
}

1974 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1976 
uöt16_t
 
tmp
 = 0;

1979 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1980 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1981 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1983 
tmp
 = 
CCER_CCE_Së
 << 
TIM_Ch™√l
;

1986 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1989 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1990 
	}
}

2004 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

2006 
uöt16_t
 
tmp
 = 0;

2009 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2010 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

2011 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

2013 
tmp
 = 
CCER_CCNE_Së
 << 
TIM_Ch™√l
;

2016 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

2019 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

2020 
	}
}

2045 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

2047 
uöt32_t
 
tmp
 = 0;

2048 
uöt16_t
 
tmp1
 = 0;

2051 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2052 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2053 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

2055 
tmp
 = (
uöt32_t
Ë
TIMx
;

2056 
tmp
 +
CCMR_Off£t
;

2058 
tmp1
 = 
CCER_CCE_Së
 << (
uöt16_t
)
TIM_Ch™√l
;

2061 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

2063 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

2065 
tmp
 +(
TIM_Ch™√l
>>1);

2068 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC1M
);

2071 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

2075 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

2078 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC2M
);

2081 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

2083 
	}
}

2092 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2095 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2096 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2097 i‡(
NewSèã
 !
DISABLE
)

2100 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

2105 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_UDIS
);

2107 
	}
}

2120 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

2123 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2124 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

2125 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

2128 
TIMx
->
CR1
 |
TIM_CR1_URS
;

2133 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_URS
);

2135 
	}
}

2144 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2147 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2148 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2149 i‡(
NewSèã
 !
DISABLE
)

2152 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

2157 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_TI1S
);

2159 
	}
}

2170 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

2173 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2174 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

2176 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_OPM
);

2178 
TIMx
->
CR1
 |
TIM_OPMode
;

2179 
	}
}

2202 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2205 
	`as£π_∑øm
(
	`IS_TIM_LIST7_PERIPH
(
TIMx
));

2206 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2208 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_MMS
);

2210 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2211 
	}
}

2225 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2228 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2229 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2231 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_SMS
);

2233 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2234 
	}
}

2246 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2249 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2250 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2252 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_MSM
);

2255 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2256 
	}
}

2264 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
)

2267 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2269 
TIMx
->
CNT
 = 
Cou¡î
;

2270 
	}
}

2278 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
)

2281 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2283 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

2284 
	}
}

2292 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
)

2295 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2297 
TIMx
->
CCR1
 = 
Com∑ª1
;

2298 
	}
}

2306 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
)

2309 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2311 
TIMx
->
CCR2
 = 
Com∑ª2
;

2312 
	}
}

2320 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
)

2323 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2325 
TIMx
->
CCR3
 = 
Com∑ª3
;

2326 
	}
}

2334 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
)

2337 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2339 
TIMx
->
CCR4
 = 
Com∑ª4
;

2340 
	}
}

2353 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2356 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2357 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2359 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC1PSC
);

2361 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2362 
	}
}

2375 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2378 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2379 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2381 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC2PSC
);

2383 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2384 
	}
}

2397 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2400 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2401 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2403 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC3PSC
);

2405 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2406 
	}
}

2419 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2422 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2423 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2425 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC4PSC
);

2427 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2428 
	}
}

2441 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

2444 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2445 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

2447 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_CKD
);

2449 
TIMx
->
CR1
 |
TIM_CKD
;

2450 
	}
}

2457 
uöt16_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2460 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2462  
TIMx
->
CCR1
;

2463 
	}
}

2470 
uöt16_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2473 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2475  
TIMx
->
CCR2
;

2476 
	}
}

2483 
uöt16_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2486 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2488  
TIMx
->
CCR3
;

2489 
	}
}

2496 
uöt16_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2499 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2501  
TIMx
->
CCR4
;

2502 
	}
}

2509 
uöt16_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

2512 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2514  
TIMx
->
CNT
;

2515 
	}
}

2522 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

2525 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2527  
TIMx
->
PSC
;

2528 
	}
}

2556 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2558 
ITSètus
 
bô°©us
 = 
RESET
;

2560 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2561 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2563 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2565 
bô°©us
 = 
SET
;

2569 
bô°©us
 = 
RESET
;

2571  
bô°©us
;

2572 
	}
}

2600 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2603 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2604 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIM_FLAG
));

2607 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2608 
	}
}

2632 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2634 
ITSètus
 
bô°©us
 = 
RESET
;

2635 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2637 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2638 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2640 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2642 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2643 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2645 
bô°©us
 = 
SET
;

2649 
bô°©us
 = 
RESET
;

2651  
bô°©us
;

2652 
	}
}

2676 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2679 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2680 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2682 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2683 
	}
}

2701 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2702 
uöt16_t
 
TIM_ICFûãr
)

2704 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2706 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1E
);

2707 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2708 
tmpc˚r
 = 
TIMx
->
CCER
;

2710 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC1F
)));

2711 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2713 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2714 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2717 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
));

2718 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2723 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
));

2724 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2728 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2729 
TIMx
->
CCER
 = 
tmpc˚r
;

2730 
	}
}

2748 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2749 
uöt16_t
 
TIM_ICFûãr
)

2751 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2753 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2E
);

2754 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2755 
tmpc˚r
 = 
TIMx
->
CCER
;

2756 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2758 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC2S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC2F
)));

2759 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2760 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2762 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2763 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2766 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
));

2767 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

2772 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
));

2773 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC2E
);

2777 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2778 
TIMx
->
CCER
 = 
tmpc˚r
;

2779 
	}
}

2797 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2798 
uöt16_t
 
TIM_ICFûãr
)

2800 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2802 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3E
);

2803 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2804 
tmpc˚r
 = 
TIMx
->
CCER
;

2805 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2807 
tmpccmr2
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR2_CC3S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC3F
)));

2808 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2810 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2811 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2814 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
));

2815 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

2820 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
));

2821 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC3E
);

2825 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2826 
TIMx
->
CCER
 = 
tmpc˚r
;

2827 
	}
}

2845 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2846 
uöt16_t
 
TIM_ICFûãr
)

2848 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2851 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4E
);

2852 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2853 
tmpc˚r
 = 
TIMx
->
CCER
;

2854 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2856 
tmpccmr2
 &(
uöt16_t
)((uöt16_t)(~(uöt16_t)
TIM_CCMR2_CC4S
Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC4F
)));

2857 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2858 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2860 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2861 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2864 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC4P
));

2865 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

2870 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
 | 
TIM_CCER_CC4NP
));

2871 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC4E
);

2874 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2875 
TIMx
->
CCER
 = 
tmpc˚r
;

2876 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_usart.c

23 
	~"°m32f10x_ußπ.h
"

24 
	~"°m32f10x_rcc.h
"

47 
	#CR1_UE_Së
 ((
uöt16_t
)0x2000Ë

	)

48 
	#CR1_UE_Re£t
 ((
uöt16_t
)0xDFFFË

	)

50 
	#CR1_WAKE_Mask
 ((
uöt16_t
)0xF7FFË

	)

52 
	#CR1_RWU_Së
 ((
uöt16_t
)0x0002Ë

	)

53 
	#CR1_RWU_Re£t
 ((
uöt16_t
)0xFFFDË

	)

54 
	#CR1_SBK_Së
 ((
uöt16_t
)0x0001Ë

	)

55 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xE9F3Ë

	)

56 
	#CR2_Addªss_Mask
 ((
uöt16_t
)0xFFF0Ë

	)

58 
	#CR2_LINEN_Së
 ((
uöt16_t
)0x4000Ë

	)

59 
	#CR2_LINEN_Re£t
 ((
uöt16_t
)0xBFFFË

	)

61 
	#CR2_LBDL_Mask
 ((
uöt16_t
)0xFFDFË

	)

62 
	#CR2_STOP_CLEAR_Mask
 ((
uöt16_t
)0xCFFFË

	)

63 
	#CR2_CLOCK_CLEAR_Mask
 ((
uöt16_t
)0xF0FFË

	)

65 
	#CR3_SCEN_Së
 ((
uöt16_t
)0x0020Ë

	)

66 
	#CR3_SCEN_Re£t
 ((
uöt16_t
)0xFFDFË

	)

68 
	#CR3_NACK_Së
 ((
uöt16_t
)0x0010Ë

	)

69 
	#CR3_NACK_Re£t
 ((
uöt16_t
)0xFFEFË

	)

71 
	#CR3_HDSEL_Së
 ((
uöt16_t
)0x0008Ë

	)

72 
	#CR3_HDSEL_Re£t
 ((
uöt16_t
)0xFFF7Ë

	)

74 
	#CR3_IRLP_Mask
 ((
uöt16_t
)0xFFFBË

	)

75 
	#CR3_CLEAR_Mask
 ((
uöt16_t
)0xFCFFË

	)

77 
	#CR3_IREN_Së
 ((
uöt16_t
)0x0002Ë

	)

78 
	#CR3_IREN_Re£t
 ((
uöt16_t
)0xFFFDË

	)

79 
	#GTPR_LSB_Mask
 ((
uöt16_t
)0x00FFË

	)

80 
	#GTPR_MSB_Mask
 ((
uöt16_t
)0xFF00Ë

	)

81 
	#IT_Mask
 ((
uöt16_t
)0x001FË

	)

84 
	#CR1_OVER8_Së
 ((
u16
)0x8000Ë

	)

85 
	#CR1_OVER8_Re£t
 ((
u16
)0x7FFFË

	)

88 
	#CR3_ONEBITE_Së
 ((
u16
)0x0800Ë

	)

89 
	#CR3_ONEBITE_Re£t
 ((
u16
)0xF7FFË

	)

130 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

133 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

135 i‡(
USARTx
 =
USART1
)

137 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

138 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

140 i‡(
USARTx
 =
USART2
)

142 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

145 i‡(
USARTx
 =
USART3
)

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

150 i‡(
USARTx
 =
UART4
)

152 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

157 i‡(
USARTx
 =
UART5
)

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

163 
	}
}

176 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

178 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

179 
uöt32_t
 
öãgîdividî
 = 0x00;

180 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

181 
uöt32_t
 
ußπxba£
 = 0;

182 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

184 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

185 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

186 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

187 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

188 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

189 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

190 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

192 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

194 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

197 
ußπxba£
 = (
uöt32_t
)
USARTx
;

200 
tm¥eg
 = 
USARTx
->
CR2
;

202 
tm¥eg
 &
CR2_STOP_CLEAR_Mask
;

205 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

208 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

211 
tm¥eg
 = 
USARTx
->
CR1
;

213 
tm¥eg
 &
CR1_CLEAR_Mask
;

218 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

219 
USART_InôSåu˘
->
USART_Mode
;

221 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

224 
tm¥eg
 = 
USARTx
->
CR3
;

226 
tm¥eg
 &
CR3_CLEAR_Mask
;

229 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

231 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

235 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

236 i‡(
ußπxba£
 =
USART1_BASE
)

238 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

242 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

246 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

249 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

254 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

256 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

259 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

262 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

264 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

268 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

272 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

273 
	}
}

281 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

284 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

285 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

286 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

287 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

288 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

289 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

290 
	}
}

302 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

304 
uöt32_t
 
tm¥eg
 = 0x00;

306 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

307 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

308 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

309 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

310 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

313 
tm¥eg
 = 
USARTx
->
CR2
;

315 
tm¥eg
 &
CR2_CLOCK_CLEAR_Mask
;

321 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

322 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

324 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

325 
	}
}

333 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

336 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

337 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

338 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

339 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

340 
	}
}

351 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

354 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

355 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

357 i‡(
NewSèã
 !
DISABLE
)

360 
USARTx
->
CR1
 |
CR1_UE_Së
;

365 
USARTx
->
CR1
 &
CR1_UE_Re£t
;

367 
	}
}

388 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

390 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

391 
uöt32_t
 
ußπxba£
 = 0x00;

393 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

394 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

395 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

397 i‡(
USART_IT
 =
USART_IT_CTS
)

399 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

402 
ußπxba£
 = (
uöt32_t
)
USARTx
;

405 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

408 
ôpos
 = 
USART_IT
 & 
IT_Mask
;

409 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

411 i‡(
ußπªg
 == 0x01)

413 
ußπxba£
 += 0x0C;

415 i‡(
ußπªg
 == 0x02)

417 
ußπxba£
 += 0x10;

421 
ußπxba£
 += 0x14;

423 i‡(
NewSèã
 !
DISABLE
)

425 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

429 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

431 
	}
}

448 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

451 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

452 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

454 i‡(
NewSèã
 !
DISABLE
)

458 
USARTx
->
CR3
 |
USART_DMAReq
;

464 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

466 
	}
}

476 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

479 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

480 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

483 
USARTx
->
CR2
 &
CR2_Addªss_Mask
;

485 
USARTx
->
CR2
 |
USART_Addªss
;

486 
	}
}

499 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

502 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

503 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

505 
USARTx
->
CR1
 &
CR1_WAKE_Mask
;

506 
USARTx
->
CR1
 |
USART_WakeUp
;

507 
	}
}

518 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

521 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

522 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

524 i‡(
NewSèã
 !
DISABLE
)

527 
USARTx
->
CR1
 |
CR1_RWU_Së
;

532 
USARTx
->
CR1
 &
CR1_RWU_Re£t
;

534 
	}
}

547 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

550 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

551 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

553 
USARTx
->
CR2
 &
CR2_LBDL_Mask
;

554 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

555 
	}
}

566 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

569 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

570 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

572 i‡(
NewSèã
 !
DISABLE
)

575 
USARTx
->
CR2
 |
CR2_LINEN_Së
;

580 
USARTx
->
CR2
 &
CR2_LINEN_Re£t
;

582 
	}
}

592 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

595 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

596 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

599 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

600 
	}
}

609 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

612 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

615  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

616 
	}
}

625 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

631 
USARTx
->
CR1
 |
CR1_SBK_Së
;

632 
	}
}

641 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

644 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

647 
USARTx
->
GTPR
 &
GTPR_LSB_Mask
;

649 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

650 
	}
}

661 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

664 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

667 
USARTx
->
GTPR
 &
GTPR_MSB_Mask
;

669 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

670 
	}
}

680 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

683 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

684 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

685 i‡(
NewSèã
 !
DISABLE
)

688 
USARTx
->
CR3
 |
CR3_SCEN_Së
;

693 
USARTx
->
CR3
 &
CR3_SCEN_Re£t
;

695 
	}
}

705 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

708 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

709 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

710 i‡(
NewSèã
 !
DISABLE
)

713 
USARTx
->
CR3
 |
CR3_NACK_Së
;

718 
USARTx
->
CR3
 &
CR3_NACK_Re£t
;

720 
	}
}

731 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

734 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

735 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

737 i‡(
NewSèã
 !
DISABLE
)

740 
USARTx
->
CR3
 |
CR3_HDSEL_Së
;

745 
USARTx
->
CR3
 &
CR3_HDSEL_Re£t
;

747 
	}
}

762 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

765 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

766 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

768 i‡(
NewSèã
 !
DISABLE
)

771 
USARTx
->
CR1
 |
CR1_OVER8_Së
;

776 
USARTx
->
CR1
 &
CR1_OVER8_Re£t
;

778 
	}
}

789 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

792 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

793 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

795 i‡(
NewSèã
 !
DISABLE
)

798 
USARTx
->
CR3
 |
CR3_ONEBITE_Së
;

803 
USARTx
->
CR3
 &
CR3_ONEBITE_Re£t
;

805 
	}
}

818 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

821 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

822 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

824 
USARTx
->
CR3
 &
CR3_IRLP_Mask
;

825 
USARTx
->
CR3
 |
USART_IrDAMode
;

826 
	}
}

837 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

840 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

841 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

843 i‡(
NewSèã
 !
DISABLE
)

846 
USARTx
->
CR3
 |
CR3_IREN_Së
;

851 
USARTx
->
CR3
 &
CR3_IREN_Re£t
;

853 
	}
}

874 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

876 
FœgSètus
 
bô°©us
 = 
RESET
;

878 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

879 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

881 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

883 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

886 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

888 
bô°©us
 = 
SET
;

892 
bô°©us
 = 
RESET
;

894  
bô°©us
;

895 
	}
}

923 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

926 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

927 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

929 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

931 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

934 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

935 
	}
}

956 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

958 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

959 
ITSètus
 
bô°©us
 = 
RESET
;

961 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

962 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

964 i‡(
USART_IT
 =
USART_IT_CTS
)

966 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

970 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

972 
ômask
 = 
USART_IT
 & 
IT_Mask
;

973 
ômask
 = (
uöt32_t
)0x01 << itmask;

975 i‡(
ußπªg
 == 0x01)

977 
ômask
 &
USARTx
->
CR1
;

979 i‡(
ußπªg
 == 0x02)

981 
ômask
 &
USARTx
->
CR2
;

985 
ômask
 &
USARTx
->
CR3
;

988 
bôpos
 = 
USART_IT
 >> 0x08;

989 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

990 
bôpos
 &
USARTx
->
SR
;

991 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

993 
bô°©us
 = 
SET
;

997 
bô°©us
 = 
RESET
;

1000  
bô°©us
;

1001 
	}
}

1030 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1032 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1034 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1035 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1037 i‡(
USART_IT
 =
USART_IT_CTS
)

1039 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1042 
bôpos
 = 
USART_IT
 >> 0x08;

1043 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1044 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1045 
	}
}

	@STM32F10x_FWLib/src/stm32f10x_wwdg.c

23 
	~"°m32f10x_wwdg.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

51 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

52 
	#EWI_BôNumbî
 0x09

	)

53 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

58 
	#CR_WDGA_Së
 ((
uöt32_t
)0x00000080)

	)

61 
	#CFR_WDGTB_Mask
 ((
uöt32_t
)0xFFFFFE7F)

	)

62 
	#CFR_W_Mask
 ((
uöt32_t
)0xFFFFFF80)

	)

63 
	#BIT_Mask
 ((
uöt8_t
)0x7F)

	)

102 
	$WWDG_DeInô
()

104 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

105 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

106 
	}
}

118 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

120 
uöt32_t
 
tm¥eg
 = 0;

122 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

124 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_Mask
;

126 
tm¥eg
 |
WWDG_PªsˇÀr
;

128 
WWDG
->
CFR
 = 
tm¥eg
;

129 
	}
}

137 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

139 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

142 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

145 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_Mask
;

148 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_Mask
;

151 
WWDG
->
CFR
 = 
tm¥eg
;

152 
	}
}

159 
	$WWDG_E«bÀIT
()

161 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

162 
	}
}

170 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

173 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

176 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_Mask
;

177 
	}
}

185 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

188 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

189 
WWDG
->
CR
 = 
CR_WDGA_Së
 | 
Cou¡î
;

190 
	}
}

197 
FœgSètus
 
	$WWDG_GëFœgSètus
()

199  (
FœgSètus
)(
WWDG
->
SR
);

200 
	}
}

207 
	$WWDG_CÀ¨Fœg
()

209 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

210 
	}
}

	@SYSTEM/delay/delay.c

1 
	~"dñay.h
"

4 #i‡
SYSTEM_SUPPORT_OS


5 
	~"ö˛udes.h
"

46 
u8
 
	gÁc_us
=0;

47 
u16
 
	gÁc_ms
=0;

50 #i‡
SYSTEM_SUPPORT_OS


63 #ifde‡ 
OS_CRITICAL_METHOD


64 
	#dñay_o§u¬ög
 
OSRu¬ög


65 
	#dñay_o°ick•î£c
 
OS_TICKS_PER_SEC


66 
	#dñay_osöäe°ög
 
OSI¡Ne°ög


68 

	)

70 #ifde‡ 
CPU_CFG_CRITICAL_METHOD


71 
	#dñay_o§u¬ög
 
OSRu¬ög


72 
	#dñay_o°ick•î£c
 
OSCfg_TickR©e_Hz


73 
	#dñay_osöäe°ög
 
OSI¡Ne°ögCå


75 

	)

78 
	$dñay_osschedlock
()

80 #ifde‡
CPU_CFG_CRITICAL_METHOD


81 
OS_ERR
 
îr
;

82 
	`OSSchedLock
(&
îr
);

84 
	`OSSchedLock
();

86 
	}
}

89 
	$dñay_osschedu∆ock
()

91 #ifde‡
CPU_CFG_CRITICAL_METHOD


92 
OS_ERR
 
îr
;

93 
	`OSSchedU∆ock
(&
îr
);

95 
	`OSSchedU∆ock
();

97 
	}
}

101 
	$dñay_o°imedly
(
u32
 
ticks
)

103 #ifde‡
CPU_CFG_CRITICAL_METHOD


104 
OS_ERR
 
îr
;

105 
	`OSTimeDly
(
ticks
,
OS_OPT_TIME_PERIODIC
,&
îr
);

107 
	`OSTimeDly
(
ticks
);

109 
	}
}

112 
	$SysTick_H™dÀr
()

114 if(
dñay_o§u¬ög
==1)

116 
	`OSI¡E¡î
();

117 
	`OSTimeTick
();

118 
	`OSI¡Exô
();

120 
	}
}

128 
	$dñay_öô
()

130 #i‡
SYSTEM_SUPPORT_OS


131 
u32
 
ªlﬂd
;

133 
	`SysTick_CLKSour˚C⁄fig
(
SysTick_CLKSour˚_HCLK_Div8
);

134 
Ác_us
=
Sy°emC‹eClock
/8000000;

135 #i‡
SYSTEM_SUPPORT_OS


136 
ªlﬂd
=
Sy°emC‹eClock
/8000000;

137 
ªlﬂd
*=1000000/
dñay_o°ick•î£c
;

139 
Ác_ms
=1000/
dñay_o°ick•î£c
;

141 
SysTick
->
CTRL
|=
SysTick_CTRL_TICKINT_Msk
;

142 
SysTick
->
LOAD
=
ªlﬂd
;

143 
SysTick
->
CTRL
|=
SysTick_CTRL_ENABLE_Msk
;

146 
Ác_ms
=(
u16
)
Ác_us
*1000;

148 
	}
}

150 #i‡
SYSTEM_SUPPORT_OS


153 
	$dñay_us
(
u32
 
nus
)

155 
u32
 
ticks
;

156 
u32
 
tﬁd
,
äow
,
t˙t
=0;

157 
u32
 
ªlﬂd
=
SysTick
->
LOAD
;

158 
ticks
=
nus
*
Ác_us
;

159 
t˙t
=0;

160 
	`dñay_osschedlock
();

161 
tﬁd
=
SysTick
->
VAL
;

164 
äow
=
SysTick
->
VAL
;

165 if(
äow
!=
tﬁd
)

167 if(
äow
<
tﬁd
)
t˙t
+=told-tnow;

168 
t˙t
+=
ªlﬂd
-
äow
+
tﬁd
;

169 
tﬁd
=
äow
;

170 if(
t˙t
>=
ticks
);

173 
	`dñay_osschedu∆ock
();

174 
	}
}

177 
	$dñay_ms
(
u16
 
nms
)

179 if(
dñay_o§u¬ög
&&
dñay_osöäe°ög
==0)

181 if(
nms
>=
Ác_ms
)

183 
	`dñay_o°imedly
(
nms
/
Ác_ms
);

185 
nms
%=
Ác_ms
;

187 
	`dñay_us
((
u32
)(
nms
*1000));

188 
	}
}

192 
	$dñay_us
(
u32
 
nus
)

194 
u32
 
ãmp
;

195 
SysTick
->
LOAD
=
nus
*
Ác_us
;

196 
SysTick
->
VAL
=0x00;

197 
SysTick
->
CTRL
|=
SysTick_CTRL_ENABLE_Msk
 ;

200 
ãmp
=
SysTick
->
CTRL
;

201 }(
ãmp
&0x01)&&!(temp&(1<<16)));

202 
SysTick
->
CTRL
&=~
SysTick_CTRL_ENABLE_Msk
;

203 
SysTick
->
VAL
 =0X00;

204 
	}
}

211 
	$dñay_ms
(
u16
 
nms
)

213 
u32
 
ãmp
;

214 
SysTick
->
LOAD
=(
u32
)
nms
*
Ác_ms
;

215 
SysTick
->
VAL
 =0x00;

216 
SysTick
->
CTRL
|=
SysTick_CTRL_ENABLE_Msk
 ;

219 
ãmp
=
SysTick
->
CTRL
;

220 }(
ãmp
&0x01)&&!(temp&(1<<16)));

221 
SysTick
->
CTRL
&=~
SysTick_CTRL_ENABLE_Msk
;

222 
SysTick
->
VAL
 =0X00;

223 
	}
}

	@SYSTEM/delay/delay.h

1 #i‚de‡
__DELAY_H


2 
	#__DELAY_H


	)

3 
	~"sys.h
"

43 
dñay_öô
();

44 
dñay_ms
(
u16
 
nms
);

45 
dñay_us
(
u32
 
nus
);

	@SYSTEM/sys/sys.c

1 
	~"sys.h
"

17 
	$WFI_SET
()

19 
__ASM
 volatile("wfi");

20 
	}
}

22 
	$INTX_DISABLE
()

24 
__ASM
 volatile("cpsid i");

25 
	}
}

27 
	$INTX_ENABLE
()

29 
__ASM
 volatile("cpsie i");

30 
	}
}

33 
__asm
 
	$MSR_MSP
(
u32
 
addr
)

35 
MSR
 
MSP
, 
r0


36 
BX
 
r14


37 
	}
}

	@SYSTEM/sys/sys.h

1 #i‚de‡
__SYS_H


2 
	#__SYS_H


	)

3 
	~"°m32f10x.h
"

18 
	#SYSTEM_SUPPORT_OS
 0

19 

	)

24 
	#BITBAND
(
addr
, 
bônum
Ë(◊dd∏& 0xF0000000)+0x2000000+(◊dd∏&0xFFFFF)<<5)+(bônum<<2))

	)

25 
	#MEM_ADDR
(
addr
Ë*((vﬁ©ûê*)◊ddr))

	)

26 
	#BIT_ADDR
(
addr
, 
bônum
Ë
	`MEM_ADDR
(
	`BITBAND
◊ddr, bônum))

	)

28 
	#GPIOA_ODR_Addr
 (
GPIOA_BASE
+12)

29 
	#GPIOB_ODR_Addr
 (
GPIOB_BASE
+12)

30 
	#GPIOC_ODR_Addr
 (
GPIOC_BASE
+12)

31 
	#GPIOD_ODR_Addr
 (
GPIOD_BASE
+12)

32 
	#GPIOE_ODR_Addr
 (
GPIOE_BASE
+12)

33 
	#GPIOF_ODR_Addr
 (
GPIOF_BASE
+12)

34 
	#GPIOG_ODR_Addr
 (
GPIOG_BASE
+12)

35 

	)

36 
	#GPIOA_IDR_Addr
 (
GPIOA_BASE
+8)

37 
	#GPIOB_IDR_Addr
 (
GPIOB_BASE
+8)

38 
	#GPIOC_IDR_Addr
 (
GPIOC_BASE
+8)

39 
	#GPIOD_IDR_Addr
 (
GPIOD_BASE
+8)

40 
	#GPIOE_IDR_Addr
 (
GPIOE_BASE
+8)

41 
	#GPIOF_IDR_Addr
 (
GPIOF_BASE
+8)

42 
	#GPIOG_IDR_Addr
 (
GPIOG_BASE
+8)

43 

	)

46 
	#PAout
(
n
Ë
	`BIT_ADDR
(
GPIOA_ODR_Addr
,n)

47 
	#PAö
(
n
Ë
	`BIT_ADDR
(
GPIOA_IDR_Addr
,n)

48 

	)

49 
	#PBout
(
n
Ë
	`BIT_ADDR
(
GPIOB_ODR_Addr
,n)

50 
	#PBö
(
n
Ë
	`BIT_ADDR
(
GPIOB_IDR_Addr
,n)

51 

	)

52 
	#PCout
(
n
Ë
	`BIT_ADDR
(
GPIOC_ODR_Addr
,n)

53 
	#PCö
(
n
Ë
	`BIT_ADDR
(
GPIOC_IDR_Addr
,n)

54 

	)

55 
	#PDout
(
n
Ë
	`BIT_ADDR
(
GPIOD_ODR_Addr
,n)

56 
	#PDö
(
n
Ë
	`BIT_ADDR
(
GPIOD_IDR_Addr
,n)

57 

	)

58 
	#PEout
(
n
Ë
	`BIT_ADDR
(
GPIOE_ODR_Addr
,n)

59 
	#PEö
(
n
Ë
	`BIT_ADDR
(
GPIOE_IDR_Addr
,n)

60 

	)

61 
	#PFout
(
n
Ë
	`BIT_ADDR
(
GPIOF_ODR_Addr
,n)

62 
	#PFö
(
n
Ë
	`BIT_ADDR
(
GPIOF_IDR_Addr
,n)

63 

	)

64 
	#PGout
(
n
Ë
	`BIT_ADDR
(
GPIOG_ODR_Addr
,n)

65 
	#PGö
(
n
Ë
	`BIT_ADDR
(
GPIOG_IDR_Addr
,n)

66 

	)

68 
WFI_SET
();

69 
INTX_DISABLE
();

70 
INTX_ENABLE
();

71 
MSR_MSP
(
u32
 
addr
);

	@SYSTEM/usart/usart.c

1 
	~"sys.h
"

2 
	~"ußπ.h
"

5 #i‡
SYSTEM_SUPPORT_OS


6 
	~"ö˛udes.h
"

38 #¥agm®
imp‹t
(
__u£_no_£miho°ög
)

40 
	s__FILE


42 
	mh™dÀ
;

46 
FILE
 
	g__°dout
;

48 
	$_sys_exô
(
x
)

50 
x
 = x;

51 
	}
}

53 
	$Âutc
(
ch
, 
FILE
 *
f
)

55 (
USART1
->
SR
&0X40)==0);

56 
USART1
->
DR
 = (
u8
Ë
ch
;

57  
ch
;

58 
	}
}

79 #i‡
EN_USART1_RX


82 
u8
 
	gUSART_RX_BUF
[
USART_REC_LEN
];

87 
u16
 
	gUSART_RX_STA
=0;

89 
	$u¨t_öô
(
u32
 
bound
){

91 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

92 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

93 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

95 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_USART1
|
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

98 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_9
;

99 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

100 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

101 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

104 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_10
;

105 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

106 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

109 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART1_IRQn
;

110 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
=3 ;

111 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 3;

112 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

113 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

117 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
bound
;

118 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

119 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

120 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

121 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

122 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

124 
	`USART_Inô
(
USART1
, &
USART_InôSåu˘uª
);

125 
	`USART_ITC⁄fig
(
USART1
, 
USART_IT_RXNE
, 
ENABLE
);

126 
	`USART_Cmd
(
USART1
, 
ENABLE
);

128 
	}
}

130 
	$USART1_IRQH™dÀr
()

132 
u8
 
Res
;

133 #i‡
SYSTEM_SUPPORT_OS


134 
	`OSI¡E¡î
();

136 if(
	`USART_GëITSètus
(
USART1
, 
USART_IT_RXNE
Ë!
RESET
)

138 
Res
 =
	`USART_Re˚iveD©a
(
USART1
);

140 if((
USART_RX_STA
&0x8000)==0)

142 if(
USART_RX_STA
&0x4000)

144 if(
Res
!=0x0a)
USART_RX_STA
=0;

145 
USART_RX_STA
|=0x8000;

149 if(
Res
==0x0d)
USART_RX_STA
|=0x4000;

152 
USART_RX_BUF
[
USART_RX_STA
&0X3FFF]=
Res
 ;

153 
USART_RX_STA
++;

154 if(
USART_RX_STA
>(
USART_REC_LEN
-1))USART_RX_STA=0;

159 #i‡
SYSTEM_SUPPORT_OS


160 
	`OSI¡Exô
();

162 
	}
}

	@SYSTEM/usart/usart.h

1 #i‚de‡
__USART_H


2 
	#__USART_H


	)

3 
	~"°dio.h
"

4 
	~"sys.h
"

29 
	#USART_REC_LEN
 200

30 
	#EN_USART1_RX
 1

31 

	)

32 
u8
 
USART_RX_BUF
[
USART_REC_LEN
];

33 
u16
 
USART_RX_STA
;

35 
u¨t_öô
(
u32
 
bound
);

	@UCOSIII-Task/led_task.c

1 
	~"Àd_èsk.h
"

4 
OS_TCB
 
	gLed0TaskTCB
;

6 
CPU_STK
 
	gLED0_TASK_STK
[
LED0_STK_SIZE
];

9 
	$Àd0_èsk
(*
p_¨g
)

11 
OS_ERR
 
îr
;

12 
p_¨g
 =Ö_arg;

13 
	`¥ötf
("%s\r\n", 
__func__
);

16 
	`OSTimeDlyHMSM
(0,0,0,800,
OS_OPT_TIME_HMSM_STRICT
,&
îr
);

17 
	`¥ötf
("î∏%d\r\n", 
îr
);

18 
	`OSTimeDlyHMSM
(0,0,0,800,
OS_OPT_TIME_HMSM_STRICT
,&
îr
);

19 
	`¥ötf
("led\r\n");

21 
	}
}

	@UCOSIII-Task/led_task.h

1 #i‚de‡
LED_TASK_H_


2 
	#LED_TASK_H_


	)

5 
	~"ö˛udes.h
"

8 
	#LED0_TASK_PRIO
 4u

	)

10 
	#LED0_STK_SIZE
 128u

	)

12 
OS_TCB
 
Led0TaskTCB
;

14 
CPU_STK
 
LED0_TASK_STK
[
LED0_STK_SIZE
];

16 
Àd0_èsk
(*
p_¨g
);

	@UCOSIII-Task/start_task.c

1 
	~"°¨t_èsk.h
"

2 
	~"Àd_èsk.h
"

5 
OS_TCB
 
	gSèπTaskTCB
;

7 
CPU_STK
 
	gSTART_TASK_STK
[
START_STK_SIZE
];

17 
	$°¨t_èsk
(*
p_¨g
)

19 
OS_ERR
 
îr
;

20 
	`CPU_SR_ALLOC
();

21 
p_¨g
 =Ö_arg;

23 
	`¥ötf
("1\r\n");

24 
	`CPU_Inô
();

25 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

29 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


30 
	`CPU_I¡DisMósMaxCurRe£t
();

33 
	`¥ötf
("3\r\n");

34 #if 
OS_CFG_SCHED_ROUND_ROBIN_EN


36 
	`OSSchedRoundRoböCfg
(
DEF_ENABLED
,1,&
îr
);

39 
	`¥ötf
("4\r\n");

40 
	`OS_CRITICAL_ENTER
();

41 
	`¥ötf
("5\r\n");

43 
	`OSTaskCª©e
((
OS_TCB
 * )&
Led0TaskTCB
,

44 (
CPU_CHAR
 * )"led0Åask",

45 (
OS_TASK_PTR
 )
Àd0_èsk
,

47 (
OS_PRIO
 )
LED0_TASK_PRIO
,

48 (
CPU_STK
 * )&
LED0_TASK_STK
[0],

49 (
CPU_STK_SIZE
)
LED0_STK_SIZE
/10,

50 (
CPU_STK_SIZE
)
LED0_STK_SIZE
,

51 (
OS_MSG_QTY
 )0,

52 (
OS_TICK
 )0,

54 (
OS_OPT
 )
OS_OPT_TASK_STK_CHK
|
OS_OPT_TASK_STK_CLR
,

55 (
OS_ERR
 * )&
îr
);

57 
	`¥ötf
("6\r\n");

58 
	`OS_TaskSu•íd
((
OS_TCB
*)&
SèπTaskTCB
,&
îr
);

59 
	`¥ötf
("7\r\n");

61 
	`OS_CRITICAL_EXIT
();

62 
	`¥ötf
("8\r\n");

63 
	}
}

	@UCOSIII-Task/start_task.h

1 #i‚de‡
__START_TASK_H__


2 
	#__START_TASK_H__


	)

4 
	~"ö˛udes.h
"

6 
	#START_TASK_PRIO
 3u

	)

7 
	#START_STK_SIZE
 512u

	)

8 
OS_TCB
 
SèπTaskTCB
;

9 
CPU_STK
 
START_TASK_STK
[
START_STK_SIZE
];

10 
°¨t_èsk
(*
∑rg
);

	@UCOSIII/UCOS_BSP/uc_bsp.c

1 
	#BSP_MODULE


	)

2 
	~<uc_b•.h
>

5 
	#BSP_REG_DEM_CR
 (*(
CPU_REG32
 *)0xE000EDFC)

6 
	#BSP_REG_DWT_CR
 (*(
CPU_REG32
 *)0xE0001000)

7 
	#BSP_REG_DWT_CYCCNT
 (*(
CPU_REG32
 *)0xE0001004)

8 
	#BSP_REG_DBGMCU_CR
 (*(
CPU_REG32
 *)0xE0042004)

	)

11 
	#BSP_BIT_DEM_CR_TRCENA
 
DEF_BIT_24


	)

14 
	#BSP_BIT_DWT_CR_CYCCNTENA
 
DEF_BIT_00


	)

27 
CPU_INT32U
 
	$BSP_CPU_ClkFªq
 ()

29 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

31 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

33  ((
CPU_INT32U
)
rcc_˛ocks
.
HCLK_Fªquícy
);

34 
	}
}

76 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

77 
	$CPU_TS_TmrInô
 ()

79 
CPU_INT32U
 
f˛k_‰eq
;

82 
f˛k_‰eq
 = 
	`BSP_CPU_ClkFªq
();

84 
BSP_REG_DEM_CR
 |(
CPU_INT32U
)
BSP_BIT_DEM_CR_TRCENA
;

85 
BSP_REG_DWT_CYCCNT
 = (
CPU_INT32U
)0u;

86 
BSP_REG_DWT_CR
 |(
CPU_INT32U
)
BSP_BIT_DWT_CR_CYCCNTENA
;

88 
	`CPU_TS_TmrFªqSë
((
CPU_TS_TMR_FREQ
)
f˛k_‰eq
);

89 
	}
}

158 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

159 
CPU_TS_TMR
 
	$CPU_TS_TmrRd
 ()

161 
CPU_TS_TMR
 
ts_tmr_˙ts
;

164 
ts_tmr_˙ts
 = (
CPU_TS_TMR
)
BSP_REG_DWT_CYCCNT
;

166  (
ts_tmr_˙ts
);

167 
	}
}

219 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

220 
CPU_INT64U
 
	$CPU_TS32_to_uSec
 (
CPU_TS32
 
ts_˙ts
)

222 
CPU_INT64U
 
ts_us
;

223 
CPU_INT64U
 
f˛k_‰eq
;

226 
f˛k_‰eq
 = 
	`BSP_CPU_ClkFªq
();

227 
ts_us
 = 
ts_˙ts
 / (
f˛k_‰eq
 / 
DEF_TIME_NBR_uS_PER_SEC
);

229  (
ts_us
);

230 
	}
}

234 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

235 
CPU_INT64U
 
	$CPU_TS64_to_uSec
 (
CPU_TS64
 
ts_˙ts
)

237 
CPU_INT64U
 
ts_us
;

238 
CPU_INT64U
 
f˛k_‰eq
;

241 
f˛k_‰eq
 = 
	`BSP_CPU_ClkFªq
();

242 
ts_us
 = 
ts_˙ts
 / (
f˛k_‰eq
 / 
DEF_TIME_NBR_uS_PER_SEC
);

244  (
ts_us
);

245 
	}
}

	@UCOSIII/UCOS_BSP/uc_bsp.h

1 #i‚de‡ 
BSP_PRESENT


2 
	#BSP_PRESENT


	)

5 #ifde‡ 
BSP_MODULE


6 
	#BSP_EXT


	)

8 
	#BSP_EXT
 

	)

12 
	~<°dio.h
>

13 
	~<°d¨g.h
>

14 
	~<˝u.h
>

15 
	~<˝u_c‹e.h
>

16 
	~<lib_def.h
>

17 
	~<lib_ascii.h
>

18 
	~<°m32f10x_c⁄f.h
>

	@UCOSIII/uC-CPU/ARM-Cortex-M3/GNU/cpu.h

47 #i‚de‡ 
CPU_MODULE_PRESENT


48 
	#CPU_MODULE_PRESENT


	)

84 
	~<˝u_def.h
>

85 
	~<˝u_cfg.h
>

117 
	tCPU_VOID
;

118 
	tCPU_CHAR
;

119 
	tCPU_BOOLEAN
;

120 
	tCPU_INT08U
;

121 sig√d 
	tCPU_INT08S
;

122 
	tCPU_INT16U
;

123 sig√d 
	tCPU_INT16S
;

124 
	tCPU_INT32U
;

125 sig√d 
	tCPU_INT32S
;

126 
	tCPU_INT64U
;

127 sig√d 
	tCPU_INT64S
;

129 
	tCPU_FP32
;

130 
	tCPU_FP64
;

133 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

134 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

135 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

136 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

139 (*
	tCPU_FNCT_VOID
)();

140 (*
	tCPU_FNCT_PTR
 )(*
	tp_obj
);

166 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

167 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

168 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

170 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

180 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

181 
CPU_INT32U
 
	tCPU_ADDR
;

182 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

183 
CPU_INT16U
 
	tCPU_ADDR
;

185 
CPU_INT08U
 
	tCPU_ADDR
;

189 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

190 
CPU_INT32U
 
	tCPU_DATA
;

191 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

192 
CPU_INT16U
 
	tCPU_DATA
;

194 
CPU_INT08U
 
	tCPU_DATA
;

198 
CPU_DATA
 
	tCPU_ALIGN
;

199 
CPU_ADDR
 
	tCPU_SIZE_T
;

215 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

217 
CPU_INT32U
 
	tCPU_STK
;

218 
CPU_ADDR
 
	tCPU_STK_SIZE
;

295 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

297 
CPU_INT32U
 
	tCPU_SR
;

300 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

301 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

303 
	#CPU_SR_ALLOC
()

	)

308 
	#CPU_INT_DIS
(Ëdÿ{ 
˝u_§
 = 
	`CPU_SR_Save
(); 
	}
} 0Ë

	)

309 
	#CPU_INT_EN
(Ëdÿ{ 
	`CPU_SR_Re°‹e
(
˝u_§
); } 0Ë

	)

312 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


315 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); \

316 
	`CPU_I¡DisMósSèπ
(); } 0)

	)

319 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_I¡DisMósSt›
(); \

320 
	`CPU_INT_EN
(); } 0)

	)

324 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

325 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

356 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

359 
	#CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


	)

369 
CPU_I¡Dis
 ();

370 
CPU_I¡En
 ();

372 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
);

373 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
);

374 
CPU_I¡SrcPídCÃ
(
CPU_INT08U
 
pos
);

375 
CPU_INT16S
 
CPU_I¡SrcPrioGë
(
CPU_INT08U
 
pos
);

376 
CPU_I¡SrcPrioSë
(
CPU_INT08U
 
pos
,

377 
CPU_INT08U
 
¥io
);

380 
CPU_SR
 
CPU_SR_Save
 ();

381 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

384 
CPU_WaôF‹I¡
 ();

385 
CPU_WaôF‹Ex˚±
();

388 
CPU_DATA
 
CPU_RevBôs
 (CPU_DATA 
vÆ
);

390 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

391 
CPU_INT08U
 
bô_nbr
);

392 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

393 
CPU_INT08U
 
bô_nbr
);

403 
	#CPU_INT_STK_PTR
 0u

	)

404 
	#CPU_INT_RESET
 1u

	)

405 
	#CPU_INT_NMI
 2u

	)

406 
	#CPU_INT_HFAULT
 3u

	)

407 
	#CPU_INT_MEM
 4u

	)

408 
	#CPU_INT_BUSFAULT
 5u

	)

409 
	#CPU_INT_USAGEFAULT
 6u

	)

410 
	#CPU_INT_RSVD_07
 7u

	)

411 
	#CPU_INT_RSVD_08
 8u

	)

412 
	#CPU_INT_RSVD_09
 9u

	)

413 
	#CPU_INT_RSVD_10
 10u

	)

414 
	#CPU_INT_SVCALL
 11u

	)

415 
	#CPU_INT_DBGMON
 12u

	)

416 
	#CPU_INT_RSVD_13
 13u

	)

417 
	#CPU_INT_PENDSV
 14u

	)

418 
	#CPU_INT_SYSTICK
 15u

	)

419 
	#CPU_INT_EXT0
 16u

	)

428 
	#CPU_REG_NVIC_NVIC
 (*((
CPU_REG32
 *)(0xE000E004))Ë

	)

429 
	#CPU_REG_NVIC_ST_CTRL
 (*((
CPU_REG32
 *)(0xE000E010))Ë

	)

430 
	#CPU_REG_NVIC_ST_RELOAD
 (*((
CPU_REG32
 *)(0xE000E014))Ë

	)

431 
	#CPU_REG_NVIC_ST_CURRENT
 (*((
CPU_REG32
 *)(0xE000E018))Ë

	)

432 
	#CPU_REG_NVIC_ST_CAL
 (*((
CPU_REG32
 *)(0xE000E01C))Ë

	)

434 
	#CPU_REG_NVIC_SETEN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E100 + (nË* 4u))Ë

	)

435 
	#CPU_REG_NVIC_CLREN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E180 + (nË* 4u))Ë

	)

436 
	#CPU_REG_NVIC_SETPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E200 + (nË* 4u))Ë

	)

437 
	#CPU_REG_NVIC_CLRPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E280 + (nË* 4u))Ë

	)

438 
	#CPU_REG_NVIC_ACTIVE
(
n
Ë(*((
CPU_REG32
 *)(0xE000E300 + (nË* 4u))Ë

	)

439 
	#CPU_REG_NVIC_PRIO
(
n
Ë(*((
CPU_REG32
 *)(0xE000E400 + (nË* 4u))Ë

	)

441 
	#CPU_REG_NVIC_CPUID
 (*((
CPU_REG32
 *)(0xE000ED00))Ë

	)

442 
	#CPU_REG_NVIC_ICSR
 (*((
CPU_REG32
 *)(0xE000ED04))Ë

	)

443 
	#CPU_REG_NVIC_VTOR
 (*((
CPU_REG32
 *)(0xE000ED08))Ë

	)

444 
	#CPU_REG_NVIC_AIRCR
 (*((
CPU_REG32
 *)(0xE000ED0C))Ë

	)

445 
	#CPU_REG_NVIC_SCR
 (*((
CPU_REG32
 *)(0xE000ED10))Ë

	)

446 
	#CPU_REG_NVIC_CCR
 (*((
CPU_REG32
 *)(0xE000ED14))Ë

	)

447 
	#CPU_REG_NVIC_SHPRI1
 (*((
CPU_REG32
 *)(0xE000ED18))Ë

	)

448 
	#CPU_REG_NVIC_SHPRI2
 (*((
CPU_REG32
 *)(0xE000ED1C))Ë

	)

449 
	#CPU_REG_NVIC_SHPRI3
 (*((
CPU_REG32
 *)(0xE000ED20))Ë

	)

450 
	#CPU_REG_NVIC_SHCSR
 (*((
CPU_REG32
 *)(0xE000ED24))Ë

	)

451 
	#CPU_REG_NVIC_CFSR
 (*((
CPU_REG32
 *)(0xE000ED28))Ë

	)

452 
	#CPU_REG_NVIC_HFSR
 (*((
CPU_REG32
 *)(0xE000ED2C))Ë

	)

453 
	#CPU_REG_NVIC_DFSR
 (*((
CPU_REG32
 *)(0xE000ED30))Ë

	)

454 
	#CPU_REG_NVIC_MMFAR
 (*((
CPU_REG32
 *)(0xE000ED34))Ë

	)

455 
	#CPU_REG_NVIC_BFAR
 (*((
CPU_REG32
 *)(0xE000ED38))Ë

	)

456 
	#CPU_REG_NVIC_AFSR
 (*((
CPU_REG32
 *)(0xE000ED3C))Ë

	)

458 
	#CPU_REG_NVIC_PFR0
 (*((
CPU_REG32
 *)(0xE000ED40))Ë

	)

459 
	#CPU_REG_NVIC_PFR1
 (*((
CPU_REG32
 *)(0xE000ED44))Ë

	)

460 
	#CPU_REG_NVIC_DFR0
 (*((
CPU_REG32
 *)(0xE000ED48))Ë

	)

461 
	#CPU_REG_NVIC_AFR0
 (*((
CPU_REG32
 *)(0xE000ED4C))Ë

	)

462 
	#CPU_REG_NVIC_MMFR0
 (*((
CPU_REG32
 *)(0xE000ED50))Ë

	)

463 
	#CPU_REG_NVIC_MMFR1
 (*((
CPU_REG32
 *)(0xE000ED54))Ë

	)

464 
	#CPU_REG_NVIC_MMFR2
 (*((
CPU_REG32
 *)(0xE000ED58))Ë

	)

465 
	#CPU_REG_NVIC_MMFR3
 (*((
CPU_REG32
 *)(0xE000ED5C))Ë

	)

466 
	#CPU_REG_NVIC_ISAFR0
 (*((
CPU_REG32
 *)(0xE000ED60))Ë

	)

467 
	#CPU_REG_NVIC_ISAFR1
 (*((
CPU_REG32
 *)(0xE000ED64))Ë

	)

468 
	#CPU_REG_NVIC_ISAFR2
 (*((
CPU_REG32
 *)(0xE000ED68))Ë

	)

469 
	#CPU_REG_NVIC_ISAFR3
 (*((
CPU_REG32
 *)(0xE000ED6C))Ë

	)

470 
	#CPU_REG_NVIC_ISAFR4
 (*((
CPU_REG32
 *)(0xE000ED70))Ë

	)

471 
	#CPU_REG_NVIC_SW_TRIG
 (*((
CPU_REG32
 *)(0xE000EF00))Ë

	)

473 
	#CPU_REG_MPU_TYPE
 (*((
CPU_REG32
 *)(0xE000ED90))Ë

	)

474 
	#CPU_REG_MPU_CTRL
 (*((
CPU_REG32
 *)(0xE000ED94))Ë

	)

475 
	#CPU_REG_MPU_REG_NBR
 (*((
CPU_REG32
 *)(0xE000ED98))Ë

	)

476 
	#CPU_REG_MPU_REG_BASE
 (*((
CPU_REG32
 *)(0xE000ED9C))Ë

	)

477 
	#CPU_REG_MPU_REG_ATTR
 (*((
CPU_REG32
 *)(0xE000EDA0))Ë

	)

479 
	#CPU_REG_DBG_CTRL
 (*((
CPU_REG32
 *)(0xE000EDF0))Ë

	)

480 
	#CPU_REG_DBG_SELECT
 (*((
CPU_REG32
 *)(0xE000EDF4))Ë

	)

481 
	#CPU_REG_DBG_DATA
 (*((
CPU_REG32
 *)(0xE000EDF8))Ë

	)

482 
	#CPU_REG_DBG_INT
 (*((
CPU_REG32
 *)(0xE000EDFC))Ë

	)

493 
	#CPU_REG_NVIC_ST_CTRL_COUNTFLAG
 0x00010000

	)

494 
	#CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 0x00000004

	)

495 
	#CPU_REG_NVIC_ST_CTRL_TICKINT
 0x00000002

	)

496 
	#CPU_REG_NVIC_ST_CTRL_ENABLE
 0x00000001

	)

500 
	#CPU_REG_NVIC_ST_CAL_NOREF
 0x80000000

	)

501 
	#CPU_REG_NVIC_ST_CAL_SKEW
 0x40000000

	)

504 
	#CPU_REG_NVIC_ICSR_NMIPENDSET
 0x80000000

	)

505 
	#CPU_REG_NVIC_ICSR_PENDSVSET
 0x10000000

	)

506 
	#CPU_REG_NVIC_ICSR_PENDSVCLR
 0x08000000

	)

507 
	#CPU_REG_NVIC_ICSR_PENDSTSET
 0x04000000

	)

508 
	#CPU_REG_NVIC_ICSR_PENDSTCLR
 0x02000000

	)

509 
	#CPU_REG_NVIC_ICSR_ISRPREEMPT
 0x00800000

	)

510 
	#CPU_REG_NVIC_ICSR_ISRPENDING
 0x00400000

	)

511 
	#CPU_REG_NVIC_ICSR_RETTOBASE
 0x00000800

	)

514 
	#CPU_REG_NVIC_VTOR_TBLBASE
 0x20000000

	)

517 
	#CPU_REG_NVIC_AIRCR_ENDIANNESS
 0x00008000

	)

518 
	#CPU_REG_NVIC_AIRCR_SYSRESETREQ
 0x00000004

	)

519 
	#CPU_REG_NVIC_AIRCR_VECTCLRACTIVE
 0x00000002

	)

520 
	#CPU_REG_NVIC_AIRCR_VECTRESET
 0x00000001

	)

523 
	#CPU_REG_NVIC_SCR_SEVONPEND
 0x00000010

	)

524 
	#CPU_REG_NVIC_SCR_SLEEPDEEP
 0x00000004

	)

525 
	#CPU_REG_NVIC_SCR_SLEEPONEXIT
 0x00000002

	)

528 
	#CPU_REG_NVIC_CCR_STKALIGN
 0x00000200

	)

529 
	#CPU_REG_NVIC_CCR_BFHFNMIGN
 0x00000100

	)

530 
	#CPU_REG_NVIC_CCR_DIV_0_TRP
 0x00000010

	)

531 
	#CPU_REG_NVIC_CCR_UNALIGN_TRP
 0x00000008

	)

532 
	#CPU_REG_NVIC_CCR_USERSETMPEND
 0x00000002

	)

533 
	#CPU_REG_NVIC_CCR_NONBASETHRDENA
 0x00000001

	)

536 
	#CPU_REG_NVIC_SHCSR_USGFAULTENA
 0x00040000

	)

537 
	#CPU_REG_NVIC_SHCSR_BUSFAULTENA
 0x00020000

	)

538 
	#CPU_REG_NVIC_SHCSR_MEMFAULTENA
 0x00010000

	)

539 
	#CPU_REG_NVIC_SHCSR_SVCALLPENDED
 0x00008000

	)

540 
	#CPU_REG_NVIC_SHCSR_BUSFAULTPENDED
 0x00004000

	)

541 
	#CPU_REG_NVIC_SHCSR_MEMFAULTPENDED
 0x00002000

	)

542 
	#CPU_REG_NVIC_SHCSR_USGFAULTPENDED
 0x00001000

	)

543 
	#CPU_REG_NVIC_SHCSR_SYSTICKACT
 0x00000800

	)

544 
	#CPU_REG_NVIC_SHCSR_PENDSVACT
 0x00000400

	)

545 
	#CPU_REG_NVIC_SHCSR_MONITORACT
 0x00000100

	)

546 
	#CPU_REG_NVIC_SHCSR_SVCALLACT
 0x00000080

	)

547 
	#CPU_REG_NVIC_SHCSR_USGFAULTACT
 0x00000008

	)

548 
	#CPU_REG_NVIC_SHCSR_BUSFAULTACT
 0x00000002

	)

549 
	#CPU_REG_NVIC_SHCSR_MEMFAULTACT
 0x00000001

	)

553 
	#CPU_REG_NVIC_CFSR_DIVBYZERO
 0x02000000

	)

554 
	#CPU_REG_NVIC_CFSR_UNALIGNED
 0x01000000

	)

555 
	#CPU_REG_NVIC_CFSR_NOCP
 0x00080000

	)

556 
	#CPU_REG_NVIC_CFSR_INVPC
 0x00040000

	)

557 
	#CPU_REG_NVIC_CFSR_INVSTATE
 0x00020000

	)

558 
	#CPU_REG_NVIC_CFSR_UNDEFINSTR
 0x00010000

	)

559 
	#CPU_REG_NVIC_CFSR_BFARVALID
 0x00008000

	)

560 
	#CPU_REG_NVIC_CFSR_STKERR
 0x00001000

	)

561 
	#CPU_REG_NVIC_CFSR_UNSTKERR
 0x00000800

	)

562 
	#CPU_REG_NVIC_CFSR_IMPRECISERR
 0x00000400

	)

563 
	#CPU_REG_NVIC_CFSR_PRECISERR
 0x00000200

	)

564 
	#CPU_REG_NVIC_CFSR_IBUSERR
 0x00000100

	)

565 
	#CPU_REG_NVIC_CFSR_MMARVALID
 0x00000080

	)

566 
	#CPU_REG_NVIC_CFSR_MSTKERR
 0x00000010

	)

567 
	#CPU_REG_NVIC_CFSR_MUNSTKERR
 0x00000008

	)

568 
	#CPU_REG_NVIC_CFSR_DACCVIOL
 0x00000002

	)

569 
	#CPU_REG_NVIC_CFSR_IACCVIOL
 0x00000001

	)

572 
	#CPU_REG_NVIC_HFSR_DEBUGEVT
 0x80000000

	)

573 
	#CPU_REG_NVIC_HFSR_FORCED
 0x40000000

	)

574 
	#CPU_REG_NVIC_HFSR_VECTTBL
 0x00000002

	)

577 
	#CPU_REG_NVIC_DFSR_EXTERNAL
 0x00000010

	)

578 
	#CPU_REG_NVIC_DFSR_VCATCH
 0x00000008

	)

579 
	#CPU_REG_NVIC_DFSR_DWTTRAP
 0x00000004

	)

580 
	#CPU_REG_NVIC_DFSR_BKPT
 0x00000002

	)

581 
	#CPU_REG_NVIC_DFSR_HALTED
 0x00000001

	)

590 
	#CPU_MSK_NVIC_ICSR_VECT_ACTIVE
 0x000001FF

	)

600 #i‚de‡ 
CPU_CFG_ADDR_SIZE


607 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

608 (
	gCPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

609 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

610 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

619 #i‚de‡ 
CPU_CFG_DATA_SIZE


626 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

627 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

628 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

629 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

638 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


645 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

646 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

647 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

648 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

658 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

667 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


672 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

673 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

682 #i‚de‡ 
CPU_CFG_STK_GROWTH


687 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

688 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

697 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


703 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

704 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

705 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

	@UCOSIII/uC-CPU/ARM-Cortex-M3/GNU/cpu_c.c

44 
	#MICRIUM_SOURCE


	)

45 
	~<˝u.h
>

46 
	~<˝u_c‹e.h
>

48 
	~<lib_def.h
>

58 
	#CPU_INT_SRC_POS_MAX
 ((((
CPU_REG_NVIC_NVIC
 + 1Ë& 0x1FË* 32Ë+ 16)

	)

60 
	#CPU_BIT_BAND_SRAM_REG_LO
 0x20000000

	)

61 
	#CPU_BIT_BAND_SRAM_REG_HI
 0x200FFFFF

	)

62 
	#CPU_BIT_BAND_SRAM_BASE
 0x22000000

	)

65 
	#CPU_BIT_BAND_PERIPH_REG_LO
 0x40000000

	)

66 
	#CPU_BIT_BAND_PERIPH_REG_HI
 0x400FFFFF

	)

67 
	#CPU_BIT_BAND_PERIPH_BASE
 0x42000000

	)

131 
	$CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

132 
CPU_INT08U
 
bô_nbr
)

134 
CPU_ADDR
 
bô_w‹d_off
;

135 
CPU_ADDR
 
bô_w‹d_addr
;

138 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

139 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

140 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

141 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

143 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

145 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

146 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

147 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

148 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

150 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

152 
	}
}

174 
	$CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

175 
CPU_INT08U
 
bô_nbr
)

177 
CPU_ADDR
 
bô_w‹d_off
;

178 
CPU_ADDR
 
bô_w‹d_addr
;

181 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

182 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

183 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

184 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

186 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

188 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

189 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

190 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

191 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

193 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

195 
	}
}

248 
	$CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
)

250 
CPU_INT08U
 
group
;

251 
CPU_INT08U
 
pos_max
;

252 
CPU_INT08U
 
nbr
;

253 
	`CPU_SR_ALLOC
();

256 
pos
) {

257 
CPU_INT_STK_PTR
:

258 
CPU_INT_RSVD_07
:

259 
CPU_INT_RSVD_08
:

260 
CPU_INT_RSVD_09
:

261 
CPU_INT_RSVD_10
:

262 
CPU_INT_RSVD_13
:

267 
CPU_INT_RESET
:

268 
CPU_INT_NMI
:

269 
CPU_INT_HFAULT
:

270 
CPU_INT_SVCALL
:

271 
CPU_INT_DBGMON
:

272 
CPU_INT_PENDSV
:

275 
CPU_INT_MEM
:

276 
	`CPU_CRITICAL_ENTER
();

277 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

278 
	`CPU_CRITICAL_EXIT
();

281 
CPU_INT_BUSFAULT
:

282 
	`CPU_CRITICAL_ENTER
();

283 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

284 
	`CPU_CRITICAL_EXIT
();

287 
CPU_INT_USAGEFAULT
:

288 
	`CPU_CRITICAL_ENTER
();

289 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

290 
	`CPU_CRITICAL_EXIT
();

293 
CPU_INT_SYSTICK
:

294 
	`CPU_CRITICAL_ENTER
();

295 
CPU_REG_NVIC_ST_CTRL
 &~
CPU_REG_NVIC_ST_CTRL_ENABLE
;

296 
	`CPU_CRITICAL_EXIT
();

302 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

303 i‡(
pos
 < 
pos_max
) {

304 
group
 = (
pos
 - 16) / 32;

305 
nbr
 = (
pos
 - 16) % 32;

307 
	`CPU_CRITICAL_ENTER
();

308 
	`CPU_REG_NVIC_CLREN
(
group
Ë
	`DEF_BIT
(
nbr
);

309 
	`CPU_CRITICAL_EXIT
();

313 
	}
}

337 
	$CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
)

339 
CPU_INT08U
 
group
;

340 
CPU_INT08U
 
nbr
;

341 
CPU_INT08U
 
pos_max
;

342 
	`CPU_SR_ALLOC
();

345 
pos
) {

346 
CPU_INT_STK_PTR
:

347 
CPU_INT_RSVD_07
:

348 
CPU_INT_RSVD_08
:

349 
CPU_INT_RSVD_09
:

350 
CPU_INT_RSVD_10
:

351 
CPU_INT_RSVD_13
:

356 
CPU_INT_RESET
:

357 
CPU_INT_NMI
:

358 
CPU_INT_HFAULT
:

359 
CPU_INT_SVCALL
:

360 
CPU_INT_DBGMON
:

361 
CPU_INT_PENDSV
:

364 
CPU_INT_MEM
:

365 
	`CPU_CRITICAL_ENTER
();

366 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

367 
	`CPU_CRITICAL_EXIT
();

370 
CPU_INT_BUSFAULT
:

371 
	`CPU_CRITICAL_ENTER
();

372 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

373 
	`CPU_CRITICAL_EXIT
();

376 
CPU_INT_USAGEFAULT
:

377 
	`CPU_CRITICAL_ENTER
();

378 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

379 
	`CPU_CRITICAL_EXIT
();

382 
CPU_INT_SYSTICK
:

383 
	`CPU_CRITICAL_ENTER
();

384 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_ENABLE
;

385 
	`CPU_CRITICAL_EXIT
();

391 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

392 i‡(
pos
 < 
pos_max
) {

393 
group
 = (
pos
 - 16) / 32;

394 
nbr
 = (
pos
 - 16) % 32;

396 
	`CPU_CRITICAL_ENTER
();

397 
	`CPU_REG_NVIC_SETEN
(
group
Ë
	`DEF_BIT
(
nbr
);

398 
	`CPU_CRITICAL_EXIT
();

402 
	}
}

436 
	$CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
)

439 
CPU_INT08U
 
group
;

440 
CPU_INT08U
 
nbr
;

441 
CPU_INT08U
 
pos_max
;

442 
	`CPU_SR_ALLOC
();

445 
pos
) {

446 
CPU_INT_STK_PTR
:

447 
CPU_INT_RSVD_07
:

448 
CPU_INT_RSVD_08
:

449 
CPU_INT_RSVD_09
:

450 
CPU_INT_RSVD_10
:

451 
CPU_INT_RSVD_13
:

454 
CPU_INT_RESET
:

455 
CPU_INT_NMI
:

456 
CPU_INT_HFAULT
:

457 
CPU_INT_MEM
:

458 
CPU_INT_SVCALL
:

459 
CPU_INT_DBGMON
:

460 
CPU_INT_PENDSV
:

461 
CPU_INT_BUSFAULT
:

462 
CPU_INT_USAGEFAULT
:

463 
CPU_INT_SYSTICK
:

467 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

468 i‡(
pos
 < 
pos_max
) {

469 
group
 = (
pos
 - 16) / 32;

470 
nbr
 = (
pos
 - 16) % 32;

472 
	`CPU_CRITICAL_ENTER
();

473 
	`CPU_REG_NVIC_CLRPEND
(
group
Ë
	`DEF_BIT
(
nbr
);

474 
	`CPU_CRITICAL_EXIT
();

478 
	}
}

508 
	$CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

509 
CPU_INT08U
 
¥io
)

511 
CPU_INT08U
 
group
;

512 
CPU_INT08U
 
nbr
;

513 
CPU_INT08U
 
pos_max
;

514 
CPU_INT32U
 
¥io_32
;

515 
CPU_INT32U
 
ãmp
;

516 
	`CPU_SR_ALLOC
();

519 
¥io_32
 = 
	`CPU_RevBôs
((
CPU_INT08U
)
¥io
);

520 
¥io
 = (
CPU_INT08U
)(
¥io_32
 >> (3 * 
DEF_OCTET_NBR_BITS
));

522 
pos
) {

523 
CPU_INT_STK_PTR
:

524 
CPU_INT_RSVD_07
:

525 
CPU_INT_RSVD_08
:

526 
CPU_INT_RSVD_09
:

527 
CPU_INT_RSVD_10
:

528 
CPU_INT_RSVD_13
:

533 
CPU_INT_RESET
:

534 
CPU_INT_NMI
:

535 
CPU_INT_HFAULT
:

538 
CPU_INT_MEM
:

539 
	`CPU_CRITICAL_ENTER
();

540 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

541 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

542 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

543 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

544 
	`CPU_CRITICAL_EXIT
();

547 
CPU_INT_BUSFAULT
:

548 
	`CPU_CRITICAL_ENTER
();

549 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

550 
ãmp
 &~(
DEF_OCTET_MASK
 << (1 * 
DEF_OCTET_NBR_BITS
));

551 
ãmp
 |(
¥io
 << (1 * 
DEF_OCTET_NBR_BITS
));

552 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

553 
	`CPU_CRITICAL_EXIT
();

556 
CPU_INT_USAGEFAULT
:

557 
	`CPU_CRITICAL_ENTER
();

558 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

559 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

560 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

561 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

562 
	`CPU_CRITICAL_EXIT
();

565 
CPU_INT_SVCALL
:

566 
	`CPU_CRITICAL_ENTER
();

567 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

568 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

569 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

570 
CPU_REG_NVIC_SHPRI2
 = 
ãmp
;

571 
	`CPU_CRITICAL_EXIT
();

574 
CPU_INT_DBGMON
:

575 
	`CPU_CRITICAL_ENTER
();

576 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

577 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

578 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

579 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

580 
	`CPU_CRITICAL_EXIT
();

583 
CPU_INT_PENDSV
:

584 
	`CPU_CRITICAL_ENTER
();

585 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

586 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

587 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

588 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

589 
	`CPU_CRITICAL_EXIT
();

592 
CPU_INT_SYSTICK
:

593 
	`CPU_CRITICAL_ENTER
();

594 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

595 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

596 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

597 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

598 
	`CPU_CRITICAL_EXIT
();

604 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

605 i‡(
pos
 < 
pos_max
) {

606 
group
 = (
pos
 - 16) / 4;

607 
nbr
 = (
pos
 - 16) % 4;

609 
	`CPU_CRITICAL_ENTER
();

610 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

611 
ãmp
 &~(
DEF_OCTET_MASK
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

612 
ãmp
 |(
¥io
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

613 
	`CPU_REG_NVIC_PRIO
(
group
Ë
ãmp
;

614 
	`CPU_CRITICAL_EXIT
();

618 
	}
}

643 
CPU_INT16S
 
	$CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
)

645 
CPU_INT08U
 
group
;

646 
CPU_INT08U
 
nbr
;

647 
CPU_INT08U
 
pos_max
;

648 
CPU_INT16S
 
¥io
;

649 
CPU_INT32U
 
¥io_32
;

650 
CPU_INT32U
 
ãmp
;

651 
	`CPU_SR_ALLOC
();

654 
pos
) {

655 
CPU_INT_STK_PTR
:

656 
CPU_INT_RSVD_07
:

657 
CPU_INT_RSVD_08
:

658 
CPU_INT_RSVD_09
:

659 
CPU_INT_RSVD_10
:

660 
CPU_INT_RSVD_13
:

661 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

666 
CPU_INT_RESET
:

667 
¥io
 = -3;

670 
CPU_INT_NMI
:

671 
¥io
 = -2;

674 
CPU_INT_HFAULT
:

675 
¥io
 = -1;

679 
CPU_INT_MEM
:

680 
	`CPU_CRITICAL_ENTER
();

681 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

682 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

683 
	`CPU_CRITICAL_EXIT
();

687 
CPU_INT_BUSFAULT
:

688 
	`CPU_CRITICAL_ENTER
();

689 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

690 
¥io
 = (
ãmp
 >> (1 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

691 
	`CPU_CRITICAL_EXIT
();

695 
CPU_INT_USAGEFAULT
:

696 
	`CPU_CRITICAL_ENTER
();

697 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

698 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

701 
CPU_INT_SVCALL
:

702 
	`CPU_CRITICAL_ENTER
();

703 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

704 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

705 
	`CPU_CRITICAL_EXIT
();

708 
CPU_INT_DBGMON
:

709 
	`CPU_CRITICAL_ENTER
();

710 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

711 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

712 
	`CPU_CRITICAL_EXIT
();

715 
CPU_INT_PENDSV
:

716 
	`CPU_CRITICAL_ENTER
();

717 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

718 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

719 
	`CPU_CRITICAL_EXIT
();

722 
CPU_INT_SYSTICK
:

723 
	`CPU_CRITICAL_ENTER
();

724 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

725 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

726 
	`CPU_CRITICAL_EXIT
();

732 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

733 i‡(
pos
 < 
pos_max
) {

734 
group
 = (
pos
 - 16) / 4;

735 
nbr
 = (
pos
 - 16) % 4;

737 
	`CPU_CRITICAL_ENTER
();

738 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

739 
	`CPU_CRITICAL_EXIT
();

741 
¥io
 = (
ãmp
 >> (
nbr
 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

743 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

748 i‡(
¥io
 >= 0) {

749 
¥io_32
 = 
	`CPU_RevBôs
((
CPU_INT32U
)
¥io
);

750 
¥io
 = (
CPU_INT16S
)(
¥io_32
 >> (3 * 
DEF_OCTET_NBR_BITS
));

753  (
¥io
);

754 
	}
}

	@UCOSIII/uC-CPU/ARM-Cortex-M3/IAR/cpu.h

47 #i‚de‡ 
CPU_MODULE_PRESENT


48 
	#CPU_MODULE_PRESENT


	)

84 
	~<˝u_def.h
>

85 
	~<˝u_cfg.h
>

117 
	tCPU_VOID
;

118 
	tCPU_CHAR
;

119 
	tCPU_BOOLEAN
;

120 
	tCPU_INT08U
;

121 sig√d 
	tCPU_INT08S
;

122 
	tCPU_INT16U
;

123 sig√d 
	tCPU_INT16S
;

124 
	tCPU_INT32U
;

125 sig√d 
	tCPU_INT32S
;

126 
	tCPU_INT64U
;

127 sig√d 
	tCPU_INT64S
;

129 
	tCPU_FP32
;

130 
	tCPU_FP64
;

133 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

134 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

135 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

136 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

139 (*
	tCPU_FNCT_VOID
)();

140 (*
	tCPU_FNCT_PTR
 )(*
	tp_obj
);

166 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

167 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

168 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

170 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

180 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

181 
CPU_INT32U
 
	tCPU_ADDR
;

182 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

183 
CPU_INT16U
 
	tCPU_ADDR
;

185 
CPU_INT08U
 
	tCPU_ADDR
;

189 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

190 
CPU_INT32U
 
	tCPU_DATA
;

191 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

192 
CPU_INT16U
 
	tCPU_DATA
;

194 
CPU_INT08U
 
	tCPU_DATA
;

198 
CPU_DATA
 
	tCPU_ALIGN
;

199 
CPU_ADDR
 
	tCPU_SIZE_T
;

215 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

217 
CPU_INT32U
 
	tCPU_STK
;

218 
CPU_ADDR
 
	tCPU_STK_SIZE
;

295 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

297 
CPU_INT32U
 
	tCPU_SR
;

300 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

301 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

303 
	#CPU_SR_ALLOC
()

	)

308 
	#CPU_INT_DIS
(Ëdÿ{ 
˝u_§
 = 
	`CPU_SR_Save
(); 
	}
} 0Ë

	)

309 
	#CPU_INT_EN
(Ëdÿ{ 
	`CPU_SR_Re°‹e
(
˝u_§
); } 0Ë

	)

312 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


315 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); \

316 
	`CPU_I¡DisMósSèπ
(); } 0)

	)

319 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_I¡DisMósSt›
(); \

320 
	`CPU_INT_EN
(); } 0)

	)

324 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

325 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

356 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

359 
	#CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


	)

369 
CPU_I¡Dis
 ();

370 
CPU_I¡En
 ();

372 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
);

373 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
);

374 
CPU_I¡SrcPídCÃ
(
CPU_INT08U
 
pos
);

375 
CPU_INT16S
 
CPU_I¡SrcPrioGë
(
CPU_INT08U
 
pos
);

376 
CPU_I¡SrcPrioSë
(
CPU_INT08U
 
pos
,

377 
CPU_INT08U
 
¥io
);

380 
CPU_SR
 
CPU_SR_Save
 ();

381 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

384 
CPU_WaôF‹I¡
 ();

385 
CPU_WaôF‹Ex˚±
();

388 
CPU_DATA
 
CPU_RevBôs
 (CPU_DATA 
vÆ
);

390 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

391 
CPU_INT08U
 
bô_nbr
);

392 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

393 
CPU_INT08U
 
bô_nbr
);

403 
	#CPU_INT_STK_PTR
 0u

	)

404 
	#CPU_INT_RESET
 1u

	)

405 
	#CPU_INT_NMI
 2u

	)

406 
	#CPU_INT_HFAULT
 3u

	)

407 
	#CPU_INT_MEM
 4u

	)

408 
	#CPU_INT_BUSFAULT
 5u

	)

409 
	#CPU_INT_USAGEFAULT
 6u

	)

410 
	#CPU_INT_RSVD_07
 7u

	)

411 
	#CPU_INT_RSVD_08
 8u

	)

412 
	#CPU_INT_RSVD_09
 9u

	)

413 
	#CPU_INT_RSVD_10
 10u

	)

414 
	#CPU_INT_SVCALL
 11u

	)

415 
	#CPU_INT_DBGMON
 12u

	)

416 
	#CPU_INT_RSVD_13
 13u

	)

417 
	#CPU_INT_PENDSV
 14u

	)

418 
	#CPU_INT_SYSTICK
 15u

	)

419 
	#CPU_INT_EXT0
 16u

	)

428 
	#CPU_REG_NVIC_NVIC
 (*((
CPU_REG32
 *)(0xE000E004))Ë

	)

429 
	#CPU_REG_NVIC_ST_CTRL
 (*((
CPU_REG32
 *)(0xE000E010))Ë

	)

430 
	#CPU_REG_NVIC_ST_RELOAD
 (*((
CPU_REG32
 *)(0xE000E014))Ë

	)

431 
	#CPU_REG_NVIC_ST_CURRENT
 (*((
CPU_REG32
 *)(0xE000E018))Ë

	)

432 
	#CPU_REG_NVIC_ST_CAL
 (*((
CPU_REG32
 *)(0xE000E01C))Ë

	)

434 
	#CPU_REG_NVIC_SETEN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E100 + (nË* 4u))Ë

	)

435 
	#CPU_REG_NVIC_CLREN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E180 + (nË* 4u))Ë

	)

436 
	#CPU_REG_NVIC_SETPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E200 + (nË* 4u))Ë

	)

437 
	#CPU_REG_NVIC_CLRPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E280 + (nË* 4u))Ë

	)

438 
	#CPU_REG_NVIC_ACTIVE
(
n
Ë(*((
CPU_REG32
 *)(0xE000E300 + (nË* 4u))Ë

	)

439 
	#CPU_REG_NVIC_PRIO
(
n
Ë(*((
CPU_REG32
 *)(0xE000E400 + (nË* 4u))Ë

	)

441 
	#CPU_REG_NVIC_CPUID
 (*((
CPU_REG32
 *)(0xE000ED00))Ë

	)

442 
	#CPU_REG_NVIC_ICSR
 (*((
CPU_REG32
 *)(0xE000ED04))Ë

	)

443 
	#CPU_REG_NVIC_VTOR
 (*((
CPU_REG32
 *)(0xE000ED08))Ë

	)

444 
	#CPU_REG_NVIC_AIRCR
 (*((
CPU_REG32
 *)(0xE000ED0C))Ë

	)

445 
	#CPU_REG_NVIC_SCR
 (*((
CPU_REG32
 *)(0xE000ED10))Ë

	)

446 
	#CPU_REG_NVIC_CCR
 (*((
CPU_REG32
 *)(0xE000ED14))Ë

	)

447 
	#CPU_REG_NVIC_SHPRI1
 (*((
CPU_REG32
 *)(0xE000ED18))Ë

	)

448 
	#CPU_REG_NVIC_SHPRI2
 (*((
CPU_REG32
 *)(0xE000ED1C))Ë

	)

449 
	#CPU_REG_NVIC_SHPRI3
 (*((
CPU_REG32
 *)(0xE000ED20))Ë

	)

450 
	#CPU_REG_NVIC_SHCSR
 (*((
CPU_REG32
 *)(0xE000ED24))Ë

	)

451 
	#CPU_REG_NVIC_CFSR
 (*((
CPU_REG32
 *)(0xE000ED28))Ë

	)

452 
	#CPU_REG_NVIC_HFSR
 (*((
CPU_REG32
 *)(0xE000ED2C))Ë

	)

453 
	#CPU_REG_NVIC_DFSR
 (*((
CPU_REG32
 *)(0xE000ED30))Ë

	)

454 
	#CPU_REG_NVIC_MMFAR
 (*((
CPU_REG32
 *)(0xE000ED34))Ë

	)

455 
	#CPU_REG_NVIC_BFAR
 (*((
CPU_REG32
 *)(0xE000ED38))Ë

	)

456 
	#CPU_REG_NVIC_AFSR
 (*((
CPU_REG32
 *)(0xE000ED3C))Ë

	)

458 
	#CPU_REG_NVIC_PFR0
 (*((
CPU_REG32
 *)(0xE000ED40))Ë

	)

459 
	#CPU_REG_NVIC_PFR1
 (*((
CPU_REG32
 *)(0xE000ED44))Ë

	)

460 
	#CPU_REG_NVIC_DFR0
 (*((
CPU_REG32
 *)(0xE000ED48))Ë

	)

461 
	#CPU_REG_NVIC_AFR0
 (*((
CPU_REG32
 *)(0xE000ED4C))Ë

	)

462 
	#CPU_REG_NVIC_MMFR0
 (*((
CPU_REG32
 *)(0xE000ED50))Ë

	)

463 
	#CPU_REG_NVIC_MMFR1
 (*((
CPU_REG32
 *)(0xE000ED54))Ë

	)

464 
	#CPU_REG_NVIC_MMFR2
 (*((
CPU_REG32
 *)(0xE000ED58))Ë

	)

465 
	#CPU_REG_NVIC_MMFR3
 (*((
CPU_REG32
 *)(0xE000ED5C))Ë

	)

466 
	#CPU_REG_NVIC_ISAFR0
 (*((
CPU_REG32
 *)(0xE000ED60))Ë

	)

467 
	#CPU_REG_NVIC_ISAFR1
 (*((
CPU_REG32
 *)(0xE000ED64))Ë

	)

468 
	#CPU_REG_NVIC_ISAFR2
 (*((
CPU_REG32
 *)(0xE000ED68))Ë

	)

469 
	#CPU_REG_NVIC_ISAFR3
 (*((
CPU_REG32
 *)(0xE000ED6C))Ë

	)

470 
	#CPU_REG_NVIC_ISAFR4
 (*((
CPU_REG32
 *)(0xE000ED70))Ë

	)

471 
	#CPU_REG_NVIC_SW_TRIG
 (*((
CPU_REG32
 *)(0xE000EF00))Ë

	)

473 
	#CPU_REG_MPU_TYPE
 (*((
CPU_REG32
 *)(0xE000ED90))Ë

	)

474 
	#CPU_REG_MPU_CTRL
 (*((
CPU_REG32
 *)(0xE000ED94))Ë

	)

475 
	#CPU_REG_MPU_REG_NBR
 (*((
CPU_REG32
 *)(0xE000ED98))Ë

	)

476 
	#CPU_REG_MPU_REG_BASE
 (*((
CPU_REG32
 *)(0xE000ED9C))Ë

	)

477 
	#CPU_REG_MPU_REG_ATTR
 (*((
CPU_REG32
 *)(0xE000EDA0))Ë

	)

479 
	#CPU_REG_DBG_CTRL
 (*((
CPU_REG32
 *)(0xE000EDF0))Ë

	)

480 
	#CPU_REG_DBG_SELECT
 (*((
CPU_REG32
 *)(0xE000EDF4))Ë

	)

481 
	#CPU_REG_DBG_DATA
 (*((
CPU_REG32
 *)(0xE000EDF8))Ë

	)

482 
	#CPU_REG_DBG_INT
 (*((
CPU_REG32
 *)(0xE000EDFC))Ë

	)

493 
	#CPU_REG_NVIC_ST_CTRL_COUNTFLAG
 0x00010000

	)

494 
	#CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 0x00000004

	)

495 
	#CPU_REG_NVIC_ST_CTRL_TICKINT
 0x00000002

	)

496 
	#CPU_REG_NVIC_ST_CTRL_ENABLE
 0x00000001

	)

500 
	#CPU_REG_NVIC_ST_CAL_NOREF
 0x80000000

	)

501 
	#CPU_REG_NVIC_ST_CAL_SKEW
 0x40000000

	)

504 
	#CPU_REG_NVIC_ICSR_NMIPENDSET
 0x80000000

	)

505 
	#CPU_REG_NVIC_ICSR_PENDSVSET
 0x10000000

	)

506 
	#CPU_REG_NVIC_ICSR_PENDSVCLR
 0x08000000

	)

507 
	#CPU_REG_NVIC_ICSR_PENDSTSET
 0x04000000

	)

508 
	#CPU_REG_NVIC_ICSR_PENDSTCLR
 0x02000000

	)

509 
	#CPU_REG_NVIC_ICSR_ISRPREEMPT
 0x00800000

	)

510 
	#CPU_REG_NVIC_ICSR_ISRPENDING
 0x00400000

	)

511 
	#CPU_REG_NVIC_ICSR_RETTOBASE
 0x00000800

	)

514 
	#CPU_REG_NVIC_VTOR_TBLBASE
 0x20000000

	)

517 
	#CPU_REG_NVIC_AIRCR_ENDIANNESS
 0x00008000

	)

518 
	#CPU_REG_NVIC_AIRCR_SYSRESETREQ
 0x00000004

	)

519 
	#CPU_REG_NVIC_AIRCR_VECTCLRACTIVE
 0x00000002

	)

520 
	#CPU_REG_NVIC_AIRCR_VECTRESET
 0x00000001

	)

523 
	#CPU_REG_NVIC_SCR_SEVONPEND
 0x00000010

	)

524 
	#CPU_REG_NVIC_SCR_SLEEPDEEP
 0x00000004

	)

525 
	#CPU_REG_NVIC_SCR_SLEEPONEXIT
 0x00000002

	)

528 
	#CPU_REG_NVIC_CCR_STKALIGN
 0x00000200

	)

529 
	#CPU_REG_NVIC_CCR_BFHFNMIGN
 0x00000100

	)

530 
	#CPU_REG_NVIC_CCR_DIV_0_TRP
 0x00000010

	)

531 
	#CPU_REG_NVIC_CCR_UNALIGN_TRP
 0x00000008

	)

532 
	#CPU_REG_NVIC_CCR_USERSETMPEND
 0x00000002

	)

533 
	#CPU_REG_NVIC_CCR_NONBASETHRDENA
 0x00000001

	)

536 
	#CPU_REG_NVIC_SHCSR_USGFAULTENA
 0x00040000

	)

537 
	#CPU_REG_NVIC_SHCSR_BUSFAULTENA
 0x00020000

	)

538 
	#CPU_REG_NVIC_SHCSR_MEMFAULTENA
 0x00010000

	)

539 
	#CPU_REG_NVIC_SHCSR_SVCALLPENDED
 0x00008000

	)

540 
	#CPU_REG_NVIC_SHCSR_BUSFAULTPENDED
 0x00004000

	)

541 
	#CPU_REG_NVIC_SHCSR_MEMFAULTPENDED
 0x00002000

	)

542 
	#CPU_REG_NVIC_SHCSR_USGFAULTPENDED
 0x00001000

	)

543 
	#CPU_REG_NVIC_SHCSR_SYSTICKACT
 0x00000800

	)

544 
	#CPU_REG_NVIC_SHCSR_PENDSVACT
 0x00000400

	)

545 
	#CPU_REG_NVIC_SHCSR_MONITORACT
 0x00000100

	)

546 
	#CPU_REG_NVIC_SHCSR_SVCALLACT
 0x00000080

	)

547 
	#CPU_REG_NVIC_SHCSR_USGFAULTACT
 0x00000008

	)

548 
	#CPU_REG_NVIC_SHCSR_BUSFAULTACT
 0x00000002

	)

549 
	#CPU_REG_NVIC_SHCSR_MEMFAULTACT
 0x00000001

	)

553 
	#CPU_REG_NVIC_CFSR_DIVBYZERO
 0x02000000

	)

554 
	#CPU_REG_NVIC_CFSR_UNALIGNED
 0x01000000

	)

555 
	#CPU_REG_NVIC_CFSR_NOCP
 0x00080000

	)

556 
	#CPU_REG_NVIC_CFSR_INVPC
 0x00040000

	)

557 
	#CPU_REG_NVIC_CFSR_INVSTATE
 0x00020000

	)

558 
	#CPU_REG_NVIC_CFSR_UNDEFINSTR
 0x00010000

	)

559 
	#CPU_REG_NVIC_CFSR_BFARVALID
 0x00008000

	)

560 
	#CPU_REG_NVIC_CFSR_STKERR
 0x00001000

	)

561 
	#CPU_REG_NVIC_CFSR_UNSTKERR
 0x00000800

	)

562 
	#CPU_REG_NVIC_CFSR_IMPRECISERR
 0x00000400

	)

563 
	#CPU_REG_NVIC_CFSR_PRECISERR
 0x00000200

	)

564 
	#CPU_REG_NVIC_CFSR_IBUSERR
 0x00000100

	)

565 
	#CPU_REG_NVIC_CFSR_MMARVALID
 0x00000080

	)

566 
	#CPU_REG_NVIC_CFSR_MSTKERR
 0x00000010

	)

567 
	#CPU_REG_NVIC_CFSR_MUNSTKERR
 0x00000008

	)

568 
	#CPU_REG_NVIC_CFSR_DACCVIOL
 0x00000002

	)

569 
	#CPU_REG_NVIC_CFSR_IACCVIOL
 0x00000001

	)

572 
	#CPU_REG_NVIC_HFSR_DEBUGEVT
 0x80000000

	)

573 
	#CPU_REG_NVIC_HFSR_FORCED
 0x40000000

	)

574 
	#CPU_REG_NVIC_HFSR_VECTTBL
 0x00000002

	)

577 
	#CPU_REG_NVIC_DFSR_EXTERNAL
 0x00000010

	)

578 
	#CPU_REG_NVIC_DFSR_VCATCH
 0x00000008

	)

579 
	#CPU_REG_NVIC_DFSR_DWTTRAP
 0x00000004

	)

580 
	#CPU_REG_NVIC_DFSR_BKPT
 0x00000002

	)

581 
	#CPU_REG_NVIC_DFSR_HALTED
 0x00000001

	)

590 
	#CPU_MSK_NVIC_ICSR_VECT_ACTIVE
 0x000001FF

	)

600 #i‚de‡ 
CPU_CFG_ADDR_SIZE


607 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

608 (
	gCPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

609 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

610 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

619 #i‚de‡ 
CPU_CFG_DATA_SIZE


626 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

627 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

628 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

629 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

638 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


645 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

646 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

647 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

648 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

658 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

667 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


672 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

673 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

682 #i‚de‡ 
CPU_CFG_STK_GROWTH


687 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

688 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

697 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


703 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

704 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

705 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

	@UCOSIII/uC-CPU/ARM-Cortex-M3/IAR/cpu_c.c

44 
	#MICRIUM_SOURCE


	)

45 
	~<˝u.h
>

46 
	~<˝u_c‹e.h
>

48 
	~<lib_def.h
>

58 
	#CPU_INT_SRC_POS_MAX
 ((((
CPU_REG_NVIC_NVIC
 + 1Ë& 0x1FË* 32Ë+ 16)

	)

60 
	#CPU_BIT_BAND_SRAM_REG_LO
 0x20000000

	)

61 
	#CPU_BIT_BAND_SRAM_REG_HI
 0x200FFFFF

	)

62 
	#CPU_BIT_BAND_SRAM_BASE
 0x22000000

	)

65 
	#CPU_BIT_BAND_PERIPH_REG_LO
 0x40000000

	)

66 
	#CPU_BIT_BAND_PERIPH_REG_HI
 0x400FFFFF

	)

67 
	#CPU_BIT_BAND_PERIPH_BASE
 0x42000000

	)

131 
	$CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

132 
CPU_INT08U
 
bô_nbr
)

134 
CPU_ADDR
 
bô_w‹d_off
;

135 
CPU_ADDR
 
bô_w‹d_addr
;

138 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

139 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

140 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

141 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

143 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

145 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

146 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

147 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

148 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

150 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

152 
	}
}

174 
	$CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

175 
CPU_INT08U
 
bô_nbr
)

177 
CPU_ADDR
 
bô_w‹d_off
;

178 
CPU_ADDR
 
bô_w‹d_addr
;

181 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

182 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

183 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

184 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

186 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

188 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

189 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

190 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

191 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

193 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

195 
	}
}

248 
	$CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
)

250 
CPU_INT08U
 
group
;

251 
CPU_INT08U
 
pos_max
;

252 
CPU_INT08U
 
nbr
;

253 
	`CPU_SR_ALLOC
();

256 
pos
) {

257 
CPU_INT_STK_PTR
:

258 
CPU_INT_RSVD_07
:

259 
CPU_INT_RSVD_08
:

260 
CPU_INT_RSVD_09
:

261 
CPU_INT_RSVD_10
:

262 
CPU_INT_RSVD_13
:

267 
CPU_INT_RESET
:

268 
CPU_INT_NMI
:

269 
CPU_INT_HFAULT
:

270 
CPU_INT_SVCALL
:

271 
CPU_INT_DBGMON
:

272 
CPU_INT_PENDSV
:

275 
CPU_INT_MEM
:

276 
	`CPU_CRITICAL_ENTER
();

277 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

278 
	`CPU_CRITICAL_EXIT
();

281 
CPU_INT_BUSFAULT
:

282 
	`CPU_CRITICAL_ENTER
();

283 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

284 
	`CPU_CRITICAL_EXIT
();

287 
CPU_INT_USAGEFAULT
:

288 
	`CPU_CRITICAL_ENTER
();

289 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

290 
	`CPU_CRITICAL_EXIT
();

293 
CPU_INT_SYSTICK
:

294 
	`CPU_CRITICAL_ENTER
();

295 
CPU_REG_NVIC_ST_CTRL
 &~
CPU_REG_NVIC_ST_CTRL_ENABLE
;

296 
	`CPU_CRITICAL_EXIT
();

302 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

303 i‡(
pos
 < 
pos_max
) {

304 
group
 = (
pos
 - 16) / 32;

305 
nbr
 = (
pos
 - 16) % 32;

307 
	`CPU_CRITICAL_ENTER
();

308 
	`CPU_REG_NVIC_CLREN
(
group
Ë
	`DEF_BIT
(
nbr
);

309 
	`CPU_CRITICAL_EXIT
();

313 
	}
}

337 
	$CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
)

339 
CPU_INT08U
 
group
;

340 
CPU_INT08U
 
nbr
;

341 
CPU_INT08U
 
pos_max
;

342 
	`CPU_SR_ALLOC
();

345 
pos
) {

346 
CPU_INT_STK_PTR
:

347 
CPU_INT_RSVD_07
:

348 
CPU_INT_RSVD_08
:

349 
CPU_INT_RSVD_09
:

350 
CPU_INT_RSVD_10
:

351 
CPU_INT_RSVD_13
:

356 
CPU_INT_RESET
:

357 
CPU_INT_NMI
:

358 
CPU_INT_HFAULT
:

359 
CPU_INT_SVCALL
:

360 
CPU_INT_DBGMON
:

361 
CPU_INT_PENDSV
:

364 
CPU_INT_MEM
:

365 
	`CPU_CRITICAL_ENTER
();

366 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

367 
	`CPU_CRITICAL_EXIT
();

370 
CPU_INT_BUSFAULT
:

371 
	`CPU_CRITICAL_ENTER
();

372 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

373 
	`CPU_CRITICAL_EXIT
();

376 
CPU_INT_USAGEFAULT
:

377 
	`CPU_CRITICAL_ENTER
();

378 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

379 
	`CPU_CRITICAL_EXIT
();

382 
CPU_INT_SYSTICK
:

383 
	`CPU_CRITICAL_ENTER
();

384 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_ENABLE
;

385 
	`CPU_CRITICAL_EXIT
();

391 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

392 i‡(
pos
 < 
pos_max
) {

393 
group
 = (
pos
 - 16) / 32;

394 
nbr
 = (
pos
 - 16) % 32;

396 
	`CPU_CRITICAL_ENTER
();

397 
	`CPU_REG_NVIC_SETEN
(
group
Ë
	`DEF_BIT
(
nbr
);

398 
	`CPU_CRITICAL_EXIT
();

402 
	}
}

436 
	$CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
)

439 
CPU_INT08U
 
group
;

440 
CPU_INT08U
 
nbr
;

441 
CPU_INT08U
 
pos_max
;

442 
	`CPU_SR_ALLOC
();

445 
pos
) {

446 
CPU_INT_STK_PTR
:

447 
CPU_INT_RSVD_07
:

448 
CPU_INT_RSVD_08
:

449 
CPU_INT_RSVD_09
:

450 
CPU_INT_RSVD_10
:

451 
CPU_INT_RSVD_13
:

454 
CPU_INT_RESET
:

455 
CPU_INT_NMI
:

456 
CPU_INT_HFAULT
:

457 
CPU_INT_MEM
:

458 
CPU_INT_SVCALL
:

459 
CPU_INT_DBGMON
:

460 
CPU_INT_PENDSV
:

461 
CPU_INT_BUSFAULT
:

462 
CPU_INT_USAGEFAULT
:

463 
CPU_INT_SYSTICK
:

467 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

468 i‡(
pos
 < 
pos_max
) {

469 
group
 = (
pos
 - 16) / 32;

470 
nbr
 = (
pos
 - 16) % 32;

472 
	`CPU_CRITICAL_ENTER
();

473 
	`CPU_REG_NVIC_CLRPEND
(
group
Ë
	`DEF_BIT
(
nbr
);

474 
	`CPU_CRITICAL_EXIT
();

478 
	}
}

508 
	$CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

509 
CPU_INT08U
 
¥io
)

511 
CPU_INT08U
 
group
;

512 
CPU_INT08U
 
nbr
;

513 
CPU_INT08U
 
pos_max
;

514 
CPU_INT32U
 
¥io_32
;

515 
CPU_INT32U
 
ãmp
;

516 
	`CPU_SR_ALLOC
();

519 
¥io_32
 = 
	`CPU_RevBôs
((
CPU_INT08U
)
¥io
);

520 
¥io
 = (
CPU_INT08U
)(
¥io_32
 >> (3 * 
DEF_OCTET_NBR_BITS
));

522 
pos
) {

523 
CPU_INT_STK_PTR
:

524 
CPU_INT_RSVD_07
:

525 
CPU_INT_RSVD_08
:

526 
CPU_INT_RSVD_09
:

527 
CPU_INT_RSVD_10
:

528 
CPU_INT_RSVD_13
:

533 
CPU_INT_RESET
:

534 
CPU_INT_NMI
:

535 
CPU_INT_HFAULT
:

538 
CPU_INT_MEM
:

539 
	`CPU_CRITICAL_ENTER
();

540 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

541 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

542 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

543 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

544 
	`CPU_CRITICAL_EXIT
();

547 
CPU_INT_BUSFAULT
:

548 
	`CPU_CRITICAL_ENTER
();

549 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

550 
ãmp
 &~(
DEF_OCTET_MASK
 << (1 * 
DEF_OCTET_NBR_BITS
));

551 
ãmp
 |(
¥io
 << (1 * 
DEF_OCTET_NBR_BITS
));

552 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

553 
	`CPU_CRITICAL_EXIT
();

556 
CPU_INT_USAGEFAULT
:

557 
	`CPU_CRITICAL_ENTER
();

558 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

559 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

560 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

561 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

562 
	`CPU_CRITICAL_EXIT
();

565 
CPU_INT_SVCALL
:

566 
	`CPU_CRITICAL_ENTER
();

567 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

568 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

569 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

570 
CPU_REG_NVIC_SHPRI2
 = 
ãmp
;

571 
	`CPU_CRITICAL_EXIT
();

574 
CPU_INT_DBGMON
:

575 
	`CPU_CRITICAL_ENTER
();

576 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

577 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

578 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

579 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

580 
	`CPU_CRITICAL_EXIT
();

583 
CPU_INT_PENDSV
:

584 
	`CPU_CRITICAL_ENTER
();

585 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

586 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

587 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

588 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

589 
	`CPU_CRITICAL_EXIT
();

592 
CPU_INT_SYSTICK
:

593 
	`CPU_CRITICAL_ENTER
();

594 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

595 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

596 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

597 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

598 
	`CPU_CRITICAL_EXIT
();

604 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

605 i‡(
pos
 < 
pos_max
) {

606 
group
 = (
pos
 - 16) / 4;

607 
nbr
 = (
pos
 - 16) % 4;

609 
	`CPU_CRITICAL_ENTER
();

610 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

611 
ãmp
 &~(
DEF_OCTET_MASK
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

612 
ãmp
 |(
¥io
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

613 
	`CPU_REG_NVIC_PRIO
(
group
Ë
ãmp
;

614 
	`CPU_CRITICAL_EXIT
();

618 
	}
}

643 
CPU_INT16S
 
	$CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
)

645 
CPU_INT08U
 
group
;

646 
CPU_INT08U
 
nbr
;

647 
CPU_INT08U
 
pos_max
;

648 
CPU_INT16S
 
¥io
;

649 
CPU_INT32U
 
¥io_32
;

650 
CPU_INT32U
 
ãmp
;

651 
	`CPU_SR_ALLOC
();

654 
pos
) {

655 
CPU_INT_STK_PTR
:

656 
CPU_INT_RSVD_07
:

657 
CPU_INT_RSVD_08
:

658 
CPU_INT_RSVD_09
:

659 
CPU_INT_RSVD_10
:

660 
CPU_INT_RSVD_13
:

661 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

666 
CPU_INT_RESET
:

667 
¥io
 = -3;

670 
CPU_INT_NMI
:

671 
¥io
 = -2;

674 
CPU_INT_HFAULT
:

675 
¥io
 = -1;

679 
CPU_INT_MEM
:

680 
	`CPU_CRITICAL_ENTER
();

681 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

682 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

683 
	`CPU_CRITICAL_EXIT
();

687 
CPU_INT_BUSFAULT
:

688 
	`CPU_CRITICAL_ENTER
();

689 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

690 
¥io
 = (
ãmp
 >> (1 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

691 
	`CPU_CRITICAL_EXIT
();

695 
CPU_INT_USAGEFAULT
:

696 
	`CPU_CRITICAL_ENTER
();

697 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

698 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

701 
CPU_INT_SVCALL
:

702 
	`CPU_CRITICAL_ENTER
();

703 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

704 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

705 
	`CPU_CRITICAL_EXIT
();

708 
CPU_INT_DBGMON
:

709 
	`CPU_CRITICAL_ENTER
();

710 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

711 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

712 
	`CPU_CRITICAL_EXIT
();

715 
CPU_INT_PENDSV
:

716 
	`CPU_CRITICAL_ENTER
();

717 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

718 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

719 
	`CPU_CRITICAL_EXIT
();

722 
CPU_INT_SYSTICK
:

723 
	`CPU_CRITICAL_ENTER
();

724 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

725 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

726 
	`CPU_CRITICAL_EXIT
();

732 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

733 i‡(
pos
 < 
pos_max
) {

734 
group
 = (
pos
 - 16) / 4;

735 
nbr
 = (
pos
 - 16) % 4;

737 
	`CPU_CRITICAL_ENTER
();

738 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

739 
	`CPU_CRITICAL_EXIT
();

741 
¥io
 = (
ãmp
 >> (
nbr
 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

743 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

748 i‡(
¥io
 >= 0) {

749 
¥io_32
 = 
	`CPU_RevBôs
((
CPU_INT32U
)
¥io
);

750 
¥io
 = (
CPU_INT16S
)(
¥io_32
 >> (3 * 
DEF_OCTET_NBR_BITS
));

753  (
¥io
);

754 
	}
}

	@UCOSIII/uC-CPU/ARM-Cortex-M3/RealView/cpu.h

50 #i‚de‡ 
CPU_MODULE_PRESENT


51 
	#CPU_MODULE_PRESENT


	)

87 
	~<˝u_def.h
>

88 
	~<˝u_cfg.h
>

120 
	tCPU_VOID
;

121 
	tCPU_CHAR
;

122 
	tCPU_BOOLEAN
;

123 
	tCPU_INT08U
;

124 sig√d 
	tCPU_INT08S
;

125 
	tCPU_INT16U
;

126 sig√d 
	tCPU_INT16S
;

127 
	tCPU_INT32U
;

128 sig√d 
	tCPU_INT32S
;

129 
	tCPU_INT64U
;

130 sig√d 
	tCPU_INT64S
;

132 
	tCPU_FP32
;

133 
	tCPU_FP64
;

136 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

137 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

138 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

139 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

142 (*
	tCPU_FNCT_VOID
)();

143 (*
	tCPU_FNCT_PTR
 )(*
	tp_obj
);

169 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

170 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

171 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

173 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

183 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

184 
CPU_INT32U
 
	tCPU_ADDR
;

185 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

186 
CPU_INT16U
 
	tCPU_ADDR
;

188 
CPU_INT08U
 
	tCPU_ADDR
;

192 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

193 
CPU_INT32U
 
	tCPU_DATA
;

194 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

195 
CPU_INT16U
 
	tCPU_DATA
;

197 
CPU_INT08U
 
	tCPU_DATA
;

201 
CPU_DATA
 
	tCPU_ALIGN
;

202 
CPU_ADDR
 
	tCPU_SIZE_T
;

218 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

220 
CPU_INT32U
 
	tCPU_STK
;

221 
CPU_ADDR
 
	tCPU_STK_SIZE
;

298 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

300 
CPU_INT32U
 
	tCPU_SR
;

303 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

304 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

306 
	#CPU_SR_ALLOC
()

	)

311 
	#CPU_INT_DIS
(Ëdÿ{ 
˝u_§
 = 
	`CPU_SR_Save
(); 
	}
} 0Ë

	)

312 
	#CPU_INT_EN
(Ëdÿ{ 
	`CPU_SR_Re°‹e
(
˝u_§
); } 0Ë

	)

315 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


318 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); \

319 
	`CPU_I¡DisMósSèπ
(); } 0)

	)

322 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_I¡DisMósSt›
(); \

323 
	`CPU_INT_EN
(); } 0)

	)

327 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

328 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

359 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

362 
	#CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


	)

372 
CPU_I¡Dis
 ();

373 
CPU_I¡En
 ();

375 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
);

376 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
);

377 
CPU_I¡SrcPídCÃ
(
CPU_INT08U
 
pos
);

378 
CPU_INT16S
 
CPU_I¡SrcPrioGë
(
CPU_INT08U
 
pos
);

379 
CPU_I¡SrcPrioSë
(
CPU_INT08U
 
pos
,

380 
CPU_INT08U
 
¥io
);

383 
CPU_SR
 
CPU_SR_Save
 ();

384 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

387 
CPU_WaôF‹I¡
 ();

388 
CPU_WaôF‹Ex˚±
();

391 
CPU_DATA
 
CPU_RevBôs
 (CPU_DATA 
vÆ
);

393 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

394 
CPU_INT08U
 
bô_nbr
);

395 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

396 
CPU_INT08U
 
bô_nbr
);

406 
	#CPU_INT_STK_PTR
 0u

	)

407 
	#CPU_INT_RESET
 1u

	)

408 
	#CPU_INT_NMI
 2u

	)

409 
	#CPU_INT_HFAULT
 3u

	)

410 
	#CPU_INT_MEM
 4u

	)

411 
	#CPU_INT_BUSFAULT
 5u

	)

412 
	#CPU_INT_USAGEFAULT
 6u

	)

413 
	#CPU_INT_RSVD_07
 7u

	)

414 
	#CPU_INT_RSVD_08
 8u

	)

415 
	#CPU_INT_RSVD_09
 9u

	)

416 
	#CPU_INT_RSVD_10
 10u

	)

417 
	#CPU_INT_SVCALL
 11u

	)

418 
	#CPU_INT_DBGMON
 12u

	)

419 
	#CPU_INT_RSVD_13
 13u

	)

420 
	#CPU_INT_PENDSV
 14u

	)

421 
	#CPU_INT_SYSTICK
 15u

	)

422 
	#CPU_INT_EXT0
 16u

	)

431 
	#CPU_REG_NVIC_NVIC
 (*((
CPU_REG32
 *)(0xE000E004))Ë

	)

432 
	#CPU_REG_NVIC_ST_CTRL
 (*((
CPU_REG32
 *)(0xE000E010))Ë

	)

433 
	#CPU_REG_NVIC_ST_RELOAD
 (*((
CPU_REG32
 *)(0xE000E014))Ë

	)

434 
	#CPU_REG_NVIC_ST_CURRENT
 (*((
CPU_REG32
 *)(0xE000E018))Ë

	)

435 
	#CPU_REG_NVIC_ST_CAL
 (*((
CPU_REG32
 *)(0xE000E01C))Ë

	)

437 
	#CPU_REG_NVIC_SETEN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E100 + (nË* 4u))Ë

	)

438 
	#CPU_REG_NVIC_CLREN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E180 + (nË* 4u))Ë

	)

439 
	#CPU_REG_NVIC_SETPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E200 + (nË* 4u))Ë

	)

440 
	#CPU_REG_NVIC_CLRPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E280 + (nË* 4u))Ë

	)

441 
	#CPU_REG_NVIC_ACTIVE
(
n
Ë(*((
CPU_REG32
 *)(0xE000E300 + (nË* 4u))Ë

	)

442 
	#CPU_REG_NVIC_PRIO
(
n
Ë(*((
CPU_REG32
 *)(0xE000E400 + (nË* 4u))Ë

	)

444 
	#CPU_REG_NVIC_CPUID
 (*((
CPU_REG32
 *)(0xE000ED00))Ë

	)

445 
	#CPU_REG_NVIC_ICSR
 (*((
CPU_REG32
 *)(0xE000ED04))Ë

	)

446 
	#CPU_REG_NVIC_VTOR
 (*((
CPU_REG32
 *)(0xE000ED08))Ë

	)

447 
	#CPU_REG_NVIC_AIRCR
 (*((
CPU_REG32
 *)(0xE000ED0C))Ë

	)

448 
	#CPU_REG_NVIC_SCR
 (*((
CPU_REG32
 *)(0xE000ED10))Ë

	)

449 
	#CPU_REG_NVIC_CCR
 (*((
CPU_REG32
 *)(0xE000ED14))Ë

	)

450 
	#CPU_REG_NVIC_SHPRI1
 (*((
CPU_REG32
 *)(0xE000ED18))Ë

	)

451 
	#CPU_REG_NVIC_SHPRI2
 (*((
CPU_REG32
 *)(0xE000ED1C))Ë

	)

452 
	#CPU_REG_NVIC_SHPRI3
 (*((
CPU_REG32
 *)(0xE000ED20))Ë

	)

453 
	#CPU_REG_NVIC_SHCSR
 (*((
CPU_REG32
 *)(0xE000ED24))Ë

	)

454 
	#CPU_REG_NVIC_CFSR
 (*((
CPU_REG32
 *)(0xE000ED28))Ë

	)

455 
	#CPU_REG_NVIC_HFSR
 (*((
CPU_REG32
 *)(0xE000ED2C))Ë

	)

456 
	#CPU_REG_NVIC_DFSR
 (*((
CPU_REG32
 *)(0xE000ED30))Ë

	)

457 
	#CPU_REG_NVIC_MMFAR
 (*((
CPU_REG32
 *)(0xE000ED34))Ë

	)

458 
	#CPU_REG_NVIC_BFAR
 (*((
CPU_REG32
 *)(0xE000ED38))Ë

	)

459 
	#CPU_REG_NVIC_AFSR
 (*((
CPU_REG32
 *)(0xE000ED3C))Ë

	)

461 
	#CPU_REG_NVIC_PFR0
 (*((
CPU_REG32
 *)(0xE000ED40))Ë

	)

462 
	#CPU_REG_NVIC_PFR1
 (*((
CPU_REG32
 *)(0xE000ED44))Ë

	)

463 
	#CPU_REG_NVIC_DFR0
 (*((
CPU_REG32
 *)(0xE000ED48))Ë

	)

464 
	#CPU_REG_NVIC_AFR0
 (*((
CPU_REG32
 *)(0xE000ED4C))Ë

	)

465 
	#CPU_REG_NVIC_MMFR0
 (*((
CPU_REG32
 *)(0xE000ED50))Ë

	)

466 
	#CPU_REG_NVIC_MMFR1
 (*((
CPU_REG32
 *)(0xE000ED54))Ë

	)

467 
	#CPU_REG_NVIC_MMFR2
 (*((
CPU_REG32
 *)(0xE000ED58))Ë

	)

468 
	#CPU_REG_NVIC_MMFR3
 (*((
CPU_REG32
 *)(0xE000ED5C))Ë

	)

469 
	#CPU_REG_NVIC_ISAFR0
 (*((
CPU_REG32
 *)(0xE000ED60))Ë

	)

470 
	#CPU_REG_NVIC_ISAFR1
 (*((
CPU_REG32
 *)(0xE000ED64))Ë

	)

471 
	#CPU_REG_NVIC_ISAFR2
 (*((
CPU_REG32
 *)(0xE000ED68))Ë

	)

472 
	#CPU_REG_NVIC_ISAFR3
 (*((
CPU_REG32
 *)(0xE000ED6C))Ë

	)

473 
	#CPU_REG_NVIC_ISAFR4
 (*((
CPU_REG32
 *)(0xE000ED70))Ë

	)

474 
	#CPU_REG_NVIC_SW_TRIG
 (*((
CPU_REG32
 *)(0xE000EF00))Ë

	)

476 
	#CPU_REG_MPU_TYPE
 (*((
CPU_REG32
 *)(0xE000ED90))Ë

	)

477 
	#CPU_REG_MPU_CTRL
 (*((
CPU_REG32
 *)(0xE000ED94))Ë

	)

478 
	#CPU_REG_MPU_REG_NBR
 (*((
CPU_REG32
 *)(0xE000ED98))Ë

	)

479 
	#CPU_REG_MPU_REG_BASE
 (*((
CPU_REG32
 *)(0xE000ED9C))Ë

	)

480 
	#CPU_REG_MPU_REG_ATTR
 (*((
CPU_REG32
 *)(0xE000EDA0))Ë

	)

482 
	#CPU_REG_DBG_CTRL
 (*((
CPU_REG32
 *)(0xE000EDF0))Ë

	)

483 
	#CPU_REG_DBG_SELECT
 (*((
CPU_REG32
 *)(0xE000EDF4))Ë

	)

484 
	#CPU_REG_DBG_DATA
 (*((
CPU_REG32
 *)(0xE000EDF8))Ë

	)

485 
	#CPU_REG_DBG_INT
 (*((
CPU_REG32
 *)(0xE000EDFC))Ë

	)

496 
	#CPU_REG_NVIC_ST_CTRL_COUNTFLAG
 0x00010000

	)

497 
	#CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 0x00000004

	)

498 
	#CPU_REG_NVIC_ST_CTRL_TICKINT
 0x00000002

	)

499 
	#CPU_REG_NVIC_ST_CTRL_ENABLE
 0x00000001

	)

503 
	#CPU_REG_NVIC_ST_CAL_NOREF
 0x80000000

	)

504 
	#CPU_REG_NVIC_ST_CAL_SKEW
 0x40000000

	)

507 
	#CPU_REG_NVIC_ICSR_NMIPENDSET
 0x80000000

	)

508 
	#CPU_REG_NVIC_ICSR_PENDSVSET
 0x10000000

	)

509 
	#CPU_REG_NVIC_ICSR_PENDSVCLR
 0x08000000

	)

510 
	#CPU_REG_NVIC_ICSR_PENDSTSET
 0x04000000

	)

511 
	#CPU_REG_NVIC_ICSR_PENDSTCLR
 0x02000000

	)

512 
	#CPU_REG_NVIC_ICSR_ISRPREEMPT
 0x00800000

	)

513 
	#CPU_REG_NVIC_ICSR_ISRPENDING
 0x00400000

	)

514 
	#CPU_REG_NVIC_ICSR_RETTOBASE
 0x00000800

	)

517 
	#CPU_REG_NVIC_VTOR_TBLBASE
 0x20000000

	)

520 
	#CPU_REG_NVIC_AIRCR_ENDIANNESS
 0x00008000

	)

521 
	#CPU_REG_NVIC_AIRCR_SYSRESETREQ
 0x00000004

	)

522 
	#CPU_REG_NVIC_AIRCR_VECTCLRACTIVE
 0x00000002

	)

523 
	#CPU_REG_NVIC_AIRCR_VECTRESET
 0x00000001

	)

526 
	#CPU_REG_NVIC_SCR_SEVONPEND
 0x00000010

	)

527 
	#CPU_REG_NVIC_SCR_SLEEPDEEP
 0x00000004

	)

528 
	#CPU_REG_NVIC_SCR_SLEEPONEXIT
 0x00000002

	)

531 
	#CPU_REG_NVIC_CCR_STKALIGN
 0x00000200

	)

532 
	#CPU_REG_NVIC_CCR_BFHFNMIGN
 0x00000100

	)

533 
	#CPU_REG_NVIC_CCR_DIV_0_TRP
 0x00000010

	)

534 
	#CPU_REG_NVIC_CCR_UNALIGN_TRP
 0x00000008

	)

535 
	#CPU_REG_NVIC_CCR_USERSETMPEND
 0x00000002

	)

536 
	#CPU_REG_NVIC_CCR_NONBASETHRDENA
 0x00000001

	)

539 
	#CPU_REG_NVIC_SHCSR_USGFAULTENA
 0x00040000

	)

540 
	#CPU_REG_NVIC_SHCSR_BUSFAULTENA
 0x00020000

	)

541 
	#CPU_REG_NVIC_SHCSR_MEMFAULTENA
 0x00010000

	)

542 
	#CPU_REG_NVIC_SHCSR_SVCALLPENDED
 0x00008000

	)

543 
	#CPU_REG_NVIC_SHCSR_BUSFAULTPENDED
 0x00004000

	)

544 
	#CPU_REG_NVIC_SHCSR_MEMFAULTPENDED
 0x00002000

	)

545 
	#CPU_REG_NVIC_SHCSR_USGFAULTPENDED
 0x00001000

	)

546 
	#CPU_REG_NVIC_SHCSR_SYSTICKACT
 0x00000800

	)

547 
	#CPU_REG_NVIC_SHCSR_PENDSVACT
 0x00000400

	)

548 
	#CPU_REG_NVIC_SHCSR_MONITORACT
 0x00000100

	)

549 
	#CPU_REG_NVIC_SHCSR_SVCALLACT
 0x00000080

	)

550 
	#CPU_REG_NVIC_SHCSR_USGFAULTACT
 0x00000008

	)

551 
	#CPU_REG_NVIC_SHCSR_BUSFAULTACT
 0x00000002

	)

552 
	#CPU_REG_NVIC_SHCSR_MEMFAULTACT
 0x00000001

	)

556 
	#CPU_REG_NVIC_CFSR_DIVBYZERO
 0x02000000

	)

557 
	#CPU_REG_NVIC_CFSR_UNALIGNED
 0x01000000

	)

558 
	#CPU_REG_NVIC_CFSR_NOCP
 0x00080000

	)

559 
	#CPU_REG_NVIC_CFSR_INVPC
 0x00040000

	)

560 
	#CPU_REG_NVIC_CFSR_INVSTATE
 0x00020000

	)

561 
	#CPU_REG_NVIC_CFSR_UNDEFINSTR
 0x00010000

	)

562 
	#CPU_REG_NVIC_CFSR_BFARVALID
 0x00008000

	)

563 
	#CPU_REG_NVIC_CFSR_STKERR
 0x00001000

	)

564 
	#CPU_REG_NVIC_CFSR_UNSTKERR
 0x00000800

	)

565 
	#CPU_REG_NVIC_CFSR_IMPRECISERR
 0x00000400

	)

566 
	#CPU_REG_NVIC_CFSR_PRECISERR
 0x00000200

	)

567 
	#CPU_REG_NVIC_CFSR_IBUSERR
 0x00000100

	)

568 
	#CPU_REG_NVIC_CFSR_MMARVALID
 0x00000080

	)

569 
	#CPU_REG_NVIC_CFSR_MSTKERR
 0x00000010

	)

570 
	#CPU_REG_NVIC_CFSR_MUNSTKERR
 0x00000008

	)

571 
	#CPU_REG_NVIC_CFSR_DACCVIOL
 0x00000002

	)

572 
	#CPU_REG_NVIC_CFSR_IACCVIOL
 0x00000001

	)

575 
	#CPU_REG_NVIC_HFSR_DEBUGEVT
 0x80000000

	)

576 
	#CPU_REG_NVIC_HFSR_FORCED
 0x40000000

	)

577 
	#CPU_REG_NVIC_HFSR_VECTTBL
 0x00000002

	)

580 
	#CPU_REG_NVIC_DFSR_EXTERNAL
 0x00000010

	)

581 
	#CPU_REG_NVIC_DFSR_VCATCH
 0x00000008

	)

582 
	#CPU_REG_NVIC_DFSR_DWTTRAP
 0x00000004

	)

583 
	#CPU_REG_NVIC_DFSR_BKPT
 0x00000002

	)

584 
	#CPU_REG_NVIC_DFSR_HALTED
 0x00000001

	)

593 
	#CPU_MSK_NVIC_ICSR_VECT_ACTIVE
 0x000001FF

	)

603 #i‚de‡ 
CPU_CFG_ADDR_SIZE


610 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

611 (
	gCPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

612 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

613 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

622 #i‚de‡ 
CPU_CFG_DATA_SIZE


629 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

630 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

631 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

632 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

641 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


648 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

649 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

650 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

651 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

661 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

670 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


675 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

676 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

685 #i‚de‡ 
CPU_CFG_STK_GROWTH


690 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

691 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

700 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


706 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

707 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

708 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

	@UCOSIII/uC-CPU/ARM-Cortex-M3/RealView/cpu_c.c

48 
	#MICRIUM_SOURCE


	)

49 
	~<˝u.h
>

50 
	~<˝u_c‹e.h
>

52 
	~<lib_def.h
>

62 
	#CPU_INT_SRC_POS_MAX
 ((((
CPU_REG_NVIC_NVIC
 + 1Ë& 0x1FË* 32Ë+ 16)

	)

64 
	#CPU_BIT_BAND_SRAM_REG_LO
 0x20000000

	)

65 
	#CPU_BIT_BAND_SRAM_REG_HI
 0x200FFFFF

	)

66 
	#CPU_BIT_BAND_SRAM_BASE
 0x22000000

	)

69 
	#CPU_BIT_BAND_PERIPH_REG_LO
 0x40000000

	)

70 
	#CPU_BIT_BAND_PERIPH_REG_HI
 0x400FFFFF

	)

71 
	#CPU_BIT_BAND_PERIPH_BASE
 0x42000000

	)

135 
	$CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

136 
CPU_INT08U
 
bô_nbr
)

138 
CPU_ADDR
 
bô_w‹d_off
;

139 
CPU_ADDR
 
bô_w‹d_addr
;

142 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

143 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

144 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

145 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

147 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

149 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

150 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

151 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

152 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

154 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

156 
	}
}

178 
	$CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

179 
CPU_INT08U
 
bô_nbr
)

181 
CPU_ADDR
 
bô_w‹d_off
;

182 
CPU_ADDR
 
bô_w‹d_addr
;

185 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

186 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

187 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

188 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

190 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

192 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

193 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

194 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

195 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

197 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

199 
	}
}

252 
	$CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
)

254 
CPU_INT08U
 
group
;

255 
CPU_INT08U
 
pos_max
;

256 
CPU_INT08U
 
nbr
;

257 
	`CPU_SR_ALLOC
();

260 
pos
) {

261 
CPU_INT_STK_PTR
:

262 
CPU_INT_RSVD_07
:

263 
CPU_INT_RSVD_08
:

264 
CPU_INT_RSVD_09
:

265 
CPU_INT_RSVD_10
:

266 
CPU_INT_RSVD_13
:

271 
CPU_INT_RESET
:

272 
CPU_INT_NMI
:

273 
CPU_INT_HFAULT
:

274 
CPU_INT_SVCALL
:

275 
CPU_INT_DBGMON
:

276 
CPU_INT_PENDSV
:

279 
CPU_INT_MEM
:

280 
	`CPU_CRITICAL_ENTER
();

281 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

282 
	`CPU_CRITICAL_EXIT
();

285 
CPU_INT_BUSFAULT
:

286 
	`CPU_CRITICAL_ENTER
();

287 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

288 
	`CPU_CRITICAL_EXIT
();

291 
CPU_INT_USAGEFAULT
:

292 
	`CPU_CRITICAL_ENTER
();

293 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

294 
	`CPU_CRITICAL_EXIT
();

297 
CPU_INT_SYSTICK
:

298 
	`CPU_CRITICAL_ENTER
();

299 
CPU_REG_NVIC_ST_CTRL
 &~
CPU_REG_NVIC_ST_CTRL_ENABLE
;

300 
	`CPU_CRITICAL_EXIT
();

306 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

307 i‡(
pos
 < 
pos_max
) {

308 
group
 = (
pos
 - 16) / 32;

309 
nbr
 = (
pos
 - 16) % 32;

311 
	`CPU_CRITICAL_ENTER
();

312 
	`CPU_REG_NVIC_CLREN
(
group
Ë
	`DEF_BIT
(
nbr
);

313 
	`CPU_CRITICAL_EXIT
();

317 
	}
}

341 
	$CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
)

343 
CPU_INT08U
 
group
;

344 
CPU_INT08U
 
nbr
;

345 
CPU_INT08U
 
pos_max
;

346 
	`CPU_SR_ALLOC
();

349 
pos
) {

350 
CPU_INT_STK_PTR
:

351 
CPU_INT_RSVD_07
:

352 
CPU_INT_RSVD_08
:

353 
CPU_INT_RSVD_09
:

354 
CPU_INT_RSVD_10
:

355 
CPU_INT_RSVD_13
:

360 
CPU_INT_RESET
:

361 
CPU_INT_NMI
:

362 
CPU_INT_HFAULT
:

363 
CPU_INT_SVCALL
:

364 
CPU_INT_DBGMON
:

365 
CPU_INT_PENDSV
:

368 
CPU_INT_MEM
:

369 
	`CPU_CRITICAL_ENTER
();

370 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

371 
	`CPU_CRITICAL_EXIT
();

374 
CPU_INT_BUSFAULT
:

375 
	`CPU_CRITICAL_ENTER
();

376 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

377 
	`CPU_CRITICAL_EXIT
();

380 
CPU_INT_USAGEFAULT
:

381 
	`CPU_CRITICAL_ENTER
();

382 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

383 
	`CPU_CRITICAL_EXIT
();

386 
CPU_INT_SYSTICK
:

387 
	`CPU_CRITICAL_ENTER
();

388 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_ENABLE
;

389 
	`CPU_CRITICAL_EXIT
();

395 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

396 i‡(
pos
 < 
pos_max
) {

397 
group
 = (
pos
 - 16) / 32;

398 
nbr
 = (
pos
 - 16) % 32;

400 
	`CPU_CRITICAL_ENTER
();

401 
	`CPU_REG_NVIC_SETEN
(
group
Ë
	`DEF_BIT
(
nbr
);

402 
	`CPU_CRITICAL_EXIT
();

406 
	}
}

440 
	$CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
)

443 
CPU_INT08U
 
group
;

444 
CPU_INT08U
 
nbr
;

445 
CPU_INT08U
 
pos_max
;

446 
	`CPU_SR_ALLOC
();

449 
pos
) {

450 
CPU_INT_STK_PTR
:

451 
CPU_INT_RSVD_07
:

452 
CPU_INT_RSVD_08
:

453 
CPU_INT_RSVD_09
:

454 
CPU_INT_RSVD_10
:

455 
CPU_INT_RSVD_13
:

458 
CPU_INT_RESET
:

459 
CPU_INT_NMI
:

460 
CPU_INT_HFAULT
:

461 
CPU_INT_MEM
:

462 
CPU_INT_SVCALL
:

463 
CPU_INT_DBGMON
:

464 
CPU_INT_PENDSV
:

465 
CPU_INT_BUSFAULT
:

466 
CPU_INT_USAGEFAULT
:

467 
CPU_INT_SYSTICK
:

471 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

472 i‡(
pos
 < 
pos_max
) {

473 
group
 = (
pos
 - 16) / 32;

474 
nbr
 = (
pos
 - 16) % 32;

476 
	`CPU_CRITICAL_ENTER
();

477 
	`CPU_REG_NVIC_CLRPEND
(
group
Ë
	`DEF_BIT
(
nbr
);

478 
	`CPU_CRITICAL_EXIT
();

482 
	}
}

512 
	$CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

513 
CPU_INT08U
 
¥io
)

515 
CPU_INT08U
 
group
;

516 
CPU_INT08U
 
nbr
;

517 
CPU_INT08U
 
pos_max
;

518 
CPU_INT32U
 
¥io_32
;

519 
CPU_INT32U
 
ãmp
;

520 
	`CPU_SR_ALLOC
();

523 
¥io_32
 = 
	`CPU_RevBôs
((
CPU_INT08U
)
¥io
);

524 
¥io
 = (
CPU_INT08U
)(
¥io_32
 >> (3 * 
DEF_OCTET_NBR_BITS
));

526 
pos
) {

527 
CPU_INT_STK_PTR
:

528 
CPU_INT_RSVD_07
:

529 
CPU_INT_RSVD_08
:

530 
CPU_INT_RSVD_09
:

531 
CPU_INT_RSVD_10
:

532 
CPU_INT_RSVD_13
:

537 
CPU_INT_RESET
:

538 
CPU_INT_NMI
:

539 
CPU_INT_HFAULT
:

542 
CPU_INT_MEM
:

543 
	`CPU_CRITICAL_ENTER
();

544 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

545 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

546 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

547 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

548 
	`CPU_CRITICAL_EXIT
();

551 
CPU_INT_BUSFAULT
:

552 
	`CPU_CRITICAL_ENTER
();

553 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

554 
ãmp
 &~(
DEF_OCTET_MASK
 << (1 * 
DEF_OCTET_NBR_BITS
));

555 
ãmp
 |(
¥io
 << (1 * 
DEF_OCTET_NBR_BITS
));

556 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

557 
	`CPU_CRITICAL_EXIT
();

560 
CPU_INT_USAGEFAULT
:

561 
	`CPU_CRITICAL_ENTER
();

562 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

563 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

564 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

565 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

566 
	`CPU_CRITICAL_EXIT
();

569 
CPU_INT_SVCALL
:

570 
	`CPU_CRITICAL_ENTER
();

571 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

572 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

573 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

574 
CPU_REG_NVIC_SHPRI2
 = 
ãmp
;

575 
	`CPU_CRITICAL_EXIT
();

578 
CPU_INT_DBGMON
:

579 
	`CPU_CRITICAL_ENTER
();

580 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

581 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

582 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

583 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

584 
	`CPU_CRITICAL_EXIT
();

587 
CPU_INT_PENDSV
:

588 
	`CPU_CRITICAL_ENTER
();

589 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

590 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

591 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

592 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

593 
	`CPU_CRITICAL_EXIT
();

596 
CPU_INT_SYSTICK
:

597 
	`CPU_CRITICAL_ENTER
();

598 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

599 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

600 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

601 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

602 
	`CPU_CRITICAL_EXIT
();

608 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

609 i‡(
pos
 < 
pos_max
) {

610 
group
 = (
pos
 - 16) / 4;

611 
nbr
 = (
pos
 - 16) % 4;

613 
	`CPU_CRITICAL_ENTER
();

614 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

615 
ãmp
 &~(
DEF_OCTET_MASK
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

616 
ãmp
 |(
¥io
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

617 
	`CPU_REG_NVIC_PRIO
(
group
Ë
ãmp
;

618 
	`CPU_CRITICAL_EXIT
();

622 
	}
}

647 
CPU_INT16S
 
	$CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
)

649 
CPU_INT08U
 
group
;

650 
CPU_INT08U
 
nbr
;

651 
CPU_INT08U
 
pos_max
;

652 
CPU_INT16S
 
¥io
;

653 
CPU_INT32U
 
¥io_32
;

654 
CPU_INT32U
 
ãmp
;

655 
	`CPU_SR_ALLOC
();

658 
pos
) {

659 
CPU_INT_STK_PTR
:

660 
CPU_INT_RSVD_07
:

661 
CPU_INT_RSVD_08
:

662 
CPU_INT_RSVD_09
:

663 
CPU_INT_RSVD_10
:

664 
CPU_INT_RSVD_13
:

665 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

670 
CPU_INT_RESET
:

671 
¥io
 = -3;

674 
CPU_INT_NMI
:

675 
¥io
 = -2;

678 
CPU_INT_HFAULT
:

679 
¥io
 = -1;

683 
CPU_INT_MEM
:

684 
	`CPU_CRITICAL_ENTER
();

685 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

686 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

687 
	`CPU_CRITICAL_EXIT
();

691 
CPU_INT_BUSFAULT
:

692 
	`CPU_CRITICAL_ENTER
();

693 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

694 
¥io
 = (
ãmp
 >> (1 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

695 
	`CPU_CRITICAL_EXIT
();

699 
CPU_INT_USAGEFAULT
:

700 
	`CPU_CRITICAL_ENTER
();

701 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

702 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

705 
CPU_INT_SVCALL
:

706 
	`CPU_CRITICAL_ENTER
();

707 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

708 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

709 
	`CPU_CRITICAL_EXIT
();

712 
CPU_INT_DBGMON
:

713 
	`CPU_CRITICAL_ENTER
();

714 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

715 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

716 
	`CPU_CRITICAL_EXIT
();

719 
CPU_INT_PENDSV
:

720 
	`CPU_CRITICAL_ENTER
();

721 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

722 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

723 
	`CPU_CRITICAL_EXIT
();

726 
CPU_INT_SYSTICK
:

727 
	`CPU_CRITICAL_ENTER
();

728 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

729 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

730 
	`CPU_CRITICAL_EXIT
();

736 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

737 i‡(
pos
 < 
pos_max
) {

738 
group
 = (
pos
 - 16) / 4;

739 
nbr
 = (
pos
 - 16) % 4;

741 
	`CPU_CRITICAL_ENTER
();

742 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

743 
	`CPU_CRITICAL_EXIT
();

745 
¥io
 = (
ãmp
 >> (
nbr
 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

747 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

752 i‡(
¥io
 >= 0) {

753 
¥io_32
 = 
	`CPU_RevBôs
((
CPU_INT32U
)
¥io
);

754 
¥io
 = (
CPU_INT16S
)(
¥io_32
 >> (3 * 
DEF_OCTET_NBR_BITS
));

757  (
¥io
);

758 
	}
}

	@UCOSIII/uC-CPU/cpu_core.c

41 
	#MICRIUM_SOURCE


	)

42 
	#CPU_CORE_MODULE


	)

43 
	~<˝u_c‹e.h
>

93 #i‡(!(
deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) || \

94 (
	gCPU_CFG_DATA_SIZE_MAX
 > 
	gCPU_CFG_DATA_SIZE
))

95 c⁄° 
CPU_INT08U
 
	gCPU_C¡LódZîosTbl
[256] = {

123 
CPU_INT32U
 c⁄° 
	gCPU_Endü¬essTe°
 = 0x12345678LU;

132 #i‡ (
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

133 
CPU_NameInô
 ();

138 #i‡ ((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

139 (
	gCPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
))

140 
CPU_TS_Inô
 ();

144 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


145 
CPU_I¡DisMósInô
 ();

147 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCÆc
(CPU_TS_TMR 
time_tŸ_˙ts
);

192 
	$CPU_Inô
 ()

195 #i‡((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

196 (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
))

197 
	`CPU_TS_Inô
();

200 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


201 
	`CPU_I¡DisMósInô
();

205 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

206 
	`CPU_NameInô
();

208 
	}
}

231 
	$CPU_SW_Ex˚±i⁄
 ()

233 
DEF_ON
) {

236 
	}
}

259 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

260 
	$CPU_NameCÃ
 ()

262 
	`CPU_SR_ALLOC
();

265 
	`CPU_CRITICAL_ENTER
();

266 
	`Mem_CÃ
((*)&
CPU_Name
[0],

267 (
CPU_SIZE_T
Ë
CPU_CFG_NAME_SIZE
);

268 
	`CPU_CRITICAL_EXIT
();

269 
	}
}

303 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

304 
	$CPU_NameGë
 (
CPU_CHAR
 *
p_«me
,

305 
CPU_ERR
 *
p_îr
)

307 
	`CPU_SR_ALLOC
();

310 i‡(
p_îr
 =(
CPU_ERR
 *)0) {

311 
	`CPU_SW_EXCEPTION
(;);

314 i‡(
p_«me
 =(
CPU_CHAR
 *)0) {

315 *
p_îr
 = 
CPU_ERR_NULL_PTR
;

319 
	`CPU_CRITICAL_ENTER
();

320 ()
	`Så_C›y_N
(
p_«me
,

321 &
CPU_Name
[0],

322 
CPU_CFG_NAME_SIZE
);

323 
	`CPU_CRITICAL_EXIT
();

325 *
p_îr
 = 
CPU_ERR_NONE
;

326 
	}
}

356 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

357 
	$CPU_NameSë
 (c⁄° 
CPU_CHAR
 *
p_«me
,

358 
CPU_ERR
 *
p_îr
)

360 
CPU_SIZE_T
 
Àn
;

361 
	`CPU_SR_ALLOC
();

364 i‡(
p_îr
 =(
CPU_ERR
 *)0) {

365 
	`CPU_SW_EXCEPTION
(;);

368 i‡(
p_«me
 =(c⁄° 
CPU_CHAR
 *)0) {

369 *
p_îr
 = 
CPU_ERR_NULL_PTR
;

373 
Àn
 = 
	`Så_Lí_N
(
p_«me
,

374 
CPU_CFG_NAME_SIZE
);

375 i‡(
Àn
 < 
CPU_CFG_NAME_SIZE
) {

376 
	`CPU_CRITICAL_ENTER
();

377 ()
	`Så_C›y_N
(&
CPU_Name
[0],

378 
p_«me
,

379 
CPU_CFG_NAME_SIZE
);

380 
	`CPU_CRITICAL_EXIT
();

381 *
p_îr
 = 
CPU_ERR_NONE
;

384 *
p_îr
 = 
CPU_ERR_NAME_SIZE
;

386 
	}
}

442 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

443 
CPU_TS32
 
	$CPU_TS_Gë32
 ()

445 
CPU_TS32
 
ts
;

446 #i‡(
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

447 
CPU_TS_TMR
 
tmr_cur
;

448 
CPU_TS_TMR
 
tmr_dñè
;

449 
	`CPU_SR_ALLOC
();

453 #i‡(
CPU_CFG_TS_TMR_SIZE
 >
CPU_WORD_SIZE_32
)

454 
ts
 = (
CPU_TS32
)
	`CPU_TS_TmrRd
();

457 
	`CPU_INT_DIS
();

458 
tmr_cur
 = (
CPU_TS_TMR
Ë
	`CPU_TS_TmrRd
();

459 
tmr_dñè
 = (
CPU_TS_TMR
)(
tmr_cur
 - 
CPU_TS_32_TmrPªv
);

460 
CPU_TS_32_Accum
 +(
CPU_TS32
 ) 
tmr_dñè
;

461 
CPU_TS_32_TmrPªv
 = (
CPU_TS_TMR
Ë
tmr_cur
;

462 
ts
 = (
CPU_TS32
 ) 
CPU_TS_32_Accum
;

463 
	`CPU_INT_EN
();

466  (
ts
);

467 
	}
}

523 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

524 
CPU_TS64
 
	$CPU_TS_Gë64
 ()

526 
CPU_TS64
 
ts
;

527 #i‡(
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
)

528 
CPU_TS_TMR
 
tmr_cur
;

529 
CPU_TS_TMR
 
tmr_dñè
;

530 
	`CPU_SR_ALLOC
();

534 #i‡(
CPU_CFG_TS_TMR_SIZE
 >
CPU_WORD_SIZE_64
)

535 
ts
 = (
CPU_TS64
)
	`CPU_TS_TmrRd
();

538 
	`CPU_INT_DIS
();

539 
tmr_cur
 = (
CPU_TS_TMR
Ë
	`CPU_TS_TmrRd
();

540 
tmr_dñè
 = (
CPU_TS_TMR
)(
tmr_cur
 - 
CPU_TS_64_TmrPªv
);

541 
CPU_TS_64_Accum
 +(
CPU_TS64
 ) 
tmr_dñè
;

542 
CPU_TS_64_TmrPªv
 = (
CPU_TS_TMR
Ë
tmr_cur
;

543 
ts
 = (
CPU_TS64
 ) 
CPU_TS_64_Accum
;

544 
	`CPU_INT_EN
();

547  (
ts
);

548 
	}
}

577 #i‡(
CPU_CFG_TS_EN
 =
DEF_ENABLED
)

578 
	$CPU_TS_Upd©e
 ()

580 #i‡((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

581 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
))

582 ()
	`CPU_TS_Gë32
();

585 #i‡((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
) && \

586 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
))

587 ()
	`CPU_TS_Gë64
();

589 
	}
}

619 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

620 
CPU_TS_TMR_FREQ
 
	$CPU_TS_TmrFªqGë
 (
CPU_ERR
 *
p_îr
)

622 
CPU_TS_TMR_FREQ
 
‰eq_hz
;

625 i‡(
p_îr
 =(
CPU_ERR
 *)0) {

626 
	`CPU_SW_EXCEPTION
(;);

629 
‰eq_hz
 = 
CPU_TS_TmrFªq_Hz
;

630 *
p_îr
 = (
‰eq_hz
 !0uË? 
CPU_ERR_NONE
 : 
CPU_ERR_TS_FREQ_INVALID
;

632  (
‰eq_hz
);

633 
	}
}

670 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

671 
	$CPU_TS_TmrFªqSë
 (
CPU_TS_TMR_FREQ
 
‰eq_hz
)

673 
CPU_TS_TmrFªq_Hz
 = 
‰eq_hz
;

674 
	}
}

701 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


702 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxCurRe£t
 ()

704 
CPU_TS_TMR
 
time_max_˙ts
;

705 
	`CPU_SR_ALLOC
();

708 
time_max_˙ts
 = 
	`CPU_I¡DisMósMaxCurGë
();

709 
	`CPU_INT_DIS
();

710 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

711 
	`CPU_INT_EN
();

713  (
time_max_˙ts
);

714 
	}
}

742 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


743 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxCurGë
 ()

745 
CPU_TS_TMR
 
time_tŸ_˙ts
;

746 
CPU_TS_TMR
 
time_max_˙ts
;

747 
	`CPU_SR_ALLOC
();

750 
	`CPU_INT_DIS
();

751 
time_tŸ_˙ts
 = 
CPU_I¡DisMósMaxCur_˙ts
;

752 
	`CPU_INT_EN
();

753 
time_max_˙ts
 = 
	`CPU_I¡DisMósMaxCÆc
(
time_tŸ_˙ts
);

755  (
time_max_˙ts
);

756 
	}
}

784 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


785 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxGë
 ()

787 
CPU_TS_TMR
 
time_tŸ_˙ts
;

788 
CPU_TS_TMR
 
time_max_˙ts
;

789 
	`CPU_SR_ALLOC
();

792 
	`CPU_INT_DIS
();

793 
time_tŸ_˙ts
 = 
CPU_I¡DisMósMax_˙ts
;

794 
	`CPU_INT_EN
();

795 
time_max_˙ts
 = 
	`CPU_I¡DisMósMaxCÆc
(
time_tŸ_˙ts
);

797  (
time_max_˙ts
);

798 
	}
}

821 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


822 
	$CPU_I¡DisMósSèπ
 ()

824 
CPU_I¡DisMósCå
++;

825 i‡(
CPU_I¡DisNe°Cå
 == 0u) {

826 
CPU_I¡DisMósSèπ_˙ts
 = 
	`CPU_TS_TmrRd
();

828 
CPU_I¡DisNe°Cå
++;

829 
	}
}

1005 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


1006 
	$CPU_I¡DisMósSt›
 ()

1008 
CPU_TS_TMR
 
time_öts_disd_˙ts
;

1011 
CPU_I¡DisNe°Cå
--;

1012 i‡(
CPU_I¡DisNe°Cå
 == 0u) {

1013 
CPU_I¡DisMósSt›_˙ts
 = 
	`CPU_TS_TmrRd
();

1015 
time_öts_disd_˙ts
 = 
CPU_I¡DisMósSt›_˙ts
 -

1016 
CPU_I¡DisMósSèπ_˙ts
;

1018 i‡(
CPU_I¡DisMósMaxCur_˙ts
 < 
time_öts_disd_˙ts
) {

1019 
CPU_I¡DisMósMaxCur_˙ts
 = 
time_öts_disd_˙ts
;

1021 i‡(
CPU_I¡DisMósMax_˙ts
 < 
time_öts_disd_˙ts
) {

1022 
CPU_I¡DisMósMax_˙ts
 = 
time_öts_disd_˙ts
;

1025 
	}
}

1125 #i‚de‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


1126 
CPU_DATA
 
	$CPU_C¡LódZîos
 (
CPU_DATA
 
vÆ
)

1128 
CPU_DATA
 
nbr_Àad_zîos
;

1131 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_08
)

1132 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos08
((
CPU_INT08U
)
vÆ
);

1134 #ñi‡(
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

1135 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos16
((
CPU_INT16U
)
vÆ
);

1137 #ñi‡(
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

1138 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos32
((
CPU_INT32U
)
vÆ
);

1140 #ñi‡(
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
)

1141 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos64
((
CPU_INT64U
)
vÆ
);

1144 
nbr_Àad_zîos
 = 
DEF_INT_CPU_U_MAX_VAL
;

1148  (
nbr_Àad_zîos
);

1149 
	}
}

1189 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

1190 
CPU_DATA
 
	$CPU_C¡LódZîos08
 (
CPU_INT08U
 
vÆ
)

1192 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1193 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
)))

1194 
CPU_DATA
 
ix
;

1196 
CPU_DATA
 
nbr_Àad_zîos
;

1199 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1200 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
))

1201 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1202 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_08
Ë* 
DEF_OCTET_NBR_BITS
;

1208 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1209 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1213  (
nbr_Àad_zîos
);

1214 
	}
}

1256 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

1257 
CPU_DATA
 
	$CPU_C¡LódZîos16
 (
CPU_INT16U
 
vÆ
)

1259 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1260 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
)))

1261 
CPU_DATA
 
ix
;

1263 
CPU_DATA
 
nbr_Àad_zîos
;

1266 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1267 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
))

1268 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1269 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_16
Ë* 
DEF_OCTET_NBR_BITS
;

1273 i‡(
vÆ
 > 0x00FFu) {

1275 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

1276 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1280 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1281 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 8u);

1286  (
nbr_Àad_zîos
);

1287 
	}
}

1329 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

1330 
CPU_DATA
 
	$CPU_C¡LódZîos32
 (
CPU_INT32U
 
vÆ
)

1332 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1333 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
)))

1334 
CPU_DATA
 
ix
;

1336 
CPU_DATA
 
nbr_Àad_zîos
;

1339 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1340 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
))

1341 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1342 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_32
Ë* 
DEF_OCTET_NBR_BITS
;

1346 i‡(
vÆ
 > 0x0000FFFFu) {

1347 i‡(
vÆ
 > 0x00FFFFFFu) {

1349 
ix
 = (
CPU_DATA
)(
vÆ
 >> 24u);

1350 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1354 
ix
 = (
CPU_DATA
)(
vÆ
 >> 16u);

1355 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 8u);

1359 i‡(
vÆ
 > 0x000000FFu) {

1361 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

1362 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 16u);

1366 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1367 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 24u);

1373  (
nbr_Àad_zîos
);

1374 
	}
}

1416 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

1417 
CPU_DATA
 
	$CPU_C¡LódZîos64
 (
CPU_INT64U
 
vÆ
)

1419 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1420 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
)))

1421 
CPU_DATA
 
ix
;

1423 
CPU_DATA
 
nbr_Àad_zîos
;

1426 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1427 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
))

1428 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1429 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_64
Ë* 
DEF_OCTET_NBR_BITS
;

1433 i‡(
vÆ
 > 0x00000000FFFFFFFFu) {

1434 i‡(
vÆ
 > 0x0000FFFFFFFFFFFFu) {

1435 i‡(
vÆ
 > 0x00FFFFFFFFFFFFFFu) {

1437 
ix
 = (
CPU_DATA
)(
vÆ
 >> 56u);

1438 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1442 
ix
 = (
CPU_DATA
)(
vÆ
 >> 48u);

1443 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 8u);

1447 i‡(
vÆ
 > 0x000000FFFFFFFFFFu) {

1449 
ix
 = (
CPU_DATA
)(
vÆ
 >> 40u);

1450 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 16u);

1454 
ix
 = (
CPU_DATA
)(
vÆ
 >> 32u);

1455 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 24u);

1460 i‡(
vÆ
 > 0x000000000000FFFFu) {

1461 i‡(
vÆ
 > 0x0000000000FFFFFFu) {

1463 
ix
 = (
CPU_DATA
)(
vÆ
 >> 24u);

1464 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 32u);

1468 
ix
 = (
CPU_DATA
)(
vÆ
 >> 16u);

1469 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 40u);

1473 i‡(
vÆ
 > 0x00000000000000FFu) {

1475 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

1476 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 48u);

1480 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1481 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 56u);

1488  (
nbr_Àad_zîos
);

1489 
	}
}

1602 #i‚de‡ 
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


1603 
CPU_DATA
 
	$CPU_C¡TøûZîos
 (
CPU_DATA
 
vÆ
)

1605 
CPU_DATA
 
vÆ_bô_mask
;

1606 
CPU_DATA
 
nbr_Àad_zîos
;

1607 
CPU_DATA
 
nbr_åaû_zîos
;

1610 i‡(
vÆ
 == 0u) {

1611  (
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
);

1615 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_DATA
)~val + 1u);

1616 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
(
vÆ_bô_mask
);

1618 
nbr_åaû_zîos
 = ((
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1621  (
nbr_åaû_zîos
);

1622 
	}
}

1695 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

1696 
CPU_DATA
 
	$CPU_C¡TøûZîos08
 (
CPU_INT08U
 
vÆ
)

1698 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1699 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
)))

1700 
CPU_INT08U
 
vÆ_bô_mask
;

1701 
CPU_DATA
 
nbr_Àad_zîos
;

1703 
CPU_DATA
 
nbr_åaû_zîos
;

1706 i‡(
vÆ
 == 0u) {

1707  (
CPU_WORD_SIZE_08
 * 
DEF_OCTET_NBR_BITS
);

1711 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1712 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
))

1713 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

1716 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT08U
)~val + 1u);

1717 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos08
(
vÆ_bô_mask
);

1719 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_08
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1723  (
nbr_åaû_zîos
);

1724 
	}
}

1799 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

1800 
CPU_DATA
 
	$CPU_C¡TøûZîos16
 (
CPU_INT16U
 
vÆ
)

1802 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1803 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
)))

1804 
CPU_INT16U
 
vÆ_bô_mask
;

1805 
CPU_DATA
 
nbr_Àad_zîos
;

1807 
CPU_DATA
 
nbr_åaû_zîos
;

1810 i‡(
vÆ
 == 0u) {

1811  (
CPU_WORD_SIZE_16
 * 
DEF_OCTET_NBR_BITS
);

1815 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1816 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
))

1817 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

1820 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT16U
)~val + 1u);

1821 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos16
(
vÆ_bô_mask
);

1823 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_16
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1827  (
nbr_åaû_zîos
);

1828 
	}
}

1903 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

1904 
CPU_DATA
 
	$CPU_C¡TøûZîos32
 (
CPU_INT32U
 
vÆ
)

1906 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1907 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
)))

1908 
CPU_INT32U
 
vÆ_bô_mask
;

1909 
CPU_DATA
 
nbr_Àad_zîos
;

1911 
CPU_DATA
 
nbr_åaû_zîos
;

1914 i‡(
vÆ
 == 0u) {

1915  (
CPU_WORD_SIZE_32
 * 
DEF_OCTET_NBR_BITS
);

1919 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1920 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
))

1921 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

1924 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT32U
)~val + 1u);

1925 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos32
(
vÆ_bô_mask
);

1927 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_32
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1931  (
nbr_åaû_zîos
);

1932 
	}
}

2007 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

2008 
CPU_DATA
 
	$CPU_C¡TøûZîos64
 (
CPU_INT64U
 
vÆ
)

2010 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

2011 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
)))

2012 
CPU_INT64U
 
vÆ_bô_mask
;

2013 
CPU_DATA
 
nbr_Àad_zîos
;

2015 
CPU_DATA
 
nbr_åaû_zîos
;

2018 i‡(
vÆ
 == 0u) {

2019  (
CPU_WORD_SIZE_64
 * 
DEF_OCTET_NBR_BITS
);

2023 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

2024 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
))

2025 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

2028 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT64U
)~val + 1u);

2029 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos64
(
vÆ_bô_mask
);

2031 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_64
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

2035  (
nbr_åaû_zîos
);

2036 
	}
}

2064 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

2065 
	$CPU_NameInô
 ()

2067 
	`CPU_NameCÃ
();

2068 
	}
}

2099 #i‡((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

2100 (
	gCPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
))

2101 
	$CPU_TS_Inô
 ()

2103 #i‡(((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
 ) && \

2104 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)) || \

2105 ((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
 ) && \

2106 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
)))

2107 
CPU_TS_TMR
 
ts_tmr_˙ts
;

2112 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

2113 
CPU_TS_TmrFªq_Hz
 = 0u;

2114 
	`CPU_TS_TmrInô
();

2119 #i‡(((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
 ) && \

2120 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)) || \

2121 ((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
 ) && \

2122 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
)))

2123 
ts_tmr_˙ts
 = 
	`CPU_TS_TmrRd
();

2126 #i‡ ((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

2127 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
))

2128 
CPU_TS_32_Accum
 = 0u;

2129 
CPU_TS_32_TmrPªv
 = 
ts_tmr_˙ts
;

2132 #i‡ ((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
) && \

2133 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
))

2134 
CPU_TS_64_Accum
 = 0u;

2135 
CPU_TS_64_TmrPªv
 = 
ts_tmr_˙ts
;

2137 
	}
}

2179 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


2180 
	$CPU_I¡DisMósInô
 ()

2182 
CPU_TS_TMR
 
time_mós_tŸ_˙ts
;

2183 
CPU_INT16U
 
i
;

2184 
	`CPU_SR_ALLOC
();

2187 
CPU_I¡DisMósCå
 = 0u;

2188 
CPU_I¡DisNe°Cå
 = 0u;

2189 
CPU_I¡DisMósSèπ_˙ts
 = 0u;

2190 
CPU_I¡DisMósSt›_˙ts
 = 0u;

2191 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

2192 
CPU_I¡DisMósMax_˙ts
 = 0u;

2193 
CPU_I¡DisMósOvrhd_˙ts
 = 0u;

2196 
time_mós_tŸ_˙ts
 = 0u;

2197 
	`CPU_INT_DIS
();

2198 
i
 = 0u; i < 
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
; i++) {

2199 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

2200 
	`CPU_I¡DisMósSèπ
();

2201 
	`CPU_I¡DisMósSt›
();

2202 
time_mós_tŸ_˙ts
 +
CPU_I¡DisMósMaxCur_˙ts
;

2205 
CPU_I¡DisMósOvrhd_˙ts
 = (
time_mós_tŸ_˙ts
 + (
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
 / 2u))

2206 / 
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
;

2207 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

2208 
CPU_I¡DisMósMax_˙ts
 = 0u;

2209 
	`CPU_INT_EN
();

2210 
	}
}

2312 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


2313 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxCÆc
 (
CPU_TS_TMR
 
time_tŸ_˙ts
)

2315 
CPU_TS_TMR
 
time_max_˙ts
;

2318 
time_max_˙ts
 = 
time_tŸ_˙ts
;

2319 i‡(
time_max_˙ts
 > 
CPU_I¡DisMósOvrhd_˙ts
) {

2320 
time_max_˙ts
 -
CPU_I¡DisMósOvrhd_˙ts
;

2322 
time_max_˙ts
 = 0u;

2325  (
time_max_˙ts
);

2326 
	}
}

	@UCOSIII/uC-CPU/cpu_core.h

49 #i‚de‡ 
CPU_CORE_MODULE_PRESENT


50 
	#CPU_CORE_MODULE_PRESENT


	)

59 #ifde‡ 
CPU_CORE_MODULE


60 
	#CPU_CORE_EXT


	)

62 
	#CPU_CORE_EXT
 

	)

103 
	~<˝u.h
>

104 
	~<lib_def.h
>

105 
	~<˝u_cfg.h
>

107 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

108 
	~<lib_mem.h
>

109 
	~<lib_°r.h
>

129 #ifde‡ 
CPU_CFG_TS_EN


130 #unde‡
CPU_CFG_TS_EN


134 #i‡ ((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) || \

135 (
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
))

136 
	#CPU_CFG_TS_EN
 
DEF_ENABLED


	)

138 
	#CPU_CFG_TS_EN
 
DEF_DISABLED


	)

141 #i‡ ((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

142 (
	$deföed
(
CPU_CFG_INT_DIS_MEAS_EN
)))

143 
	#CPU_CFG_TS_TMR_EN
 
DEF_ENABLED


	)

145 
	#CPU_CFG_TS_TMR_EN
 
DEF_DISABLED


	)

155 
	#CPU_TIME_MEAS_NBR_MIN
 1u

	)

156 
	#CPU_TIME_MEAS_NBR_MAX
 128u

	)

172 
	e˝u_îr
 {

174 
CPU_ERR_NONE
 = 0u,

175 
CPU_ERR_NULL_PTR
 = 10u,

177 
CPU_ERR_NAME_SIZE
 = 1000u,

179 
CPU_ERR_TS_FREQ_INVALID
 = 2000u

181 } 
	tCPU_ERR
;

193 
CPU_INT32U
 
	tCPU_TS32
;

194 
CPU_INT64U
 
	tCPU_TS64
;

196 
CPU_TS32
 
	tCPU_TS
;

199 #i‡ (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

200 #i‡ (
CPU_CFG_TS_TMR_SIZE
 =
CPU_WORD_SIZE_08
)

201 
CPU_INT08U
 
	tCPU_TS_TMR
;

202 #ñi‡ (
CPU_CFG_TS_TMR_SIZE
 =
CPU_WORD_SIZE_16
)

203 
CPU_INT16U
 
	tCPU_TS_TMR
;

204 #ñi‡ (
CPU_CFG_TS_TMR_SIZE
 =
CPU_WORD_SIZE_64
)

205 
CPU_INT64U
 
	tCPU_TS_TMR
;

207 
CPU_INT32U
 
	tCPU_TS_TMR
;

218 
CPU_INT32U
 
	tCPU_TS_TMR_FREQ
;

227 #i‡ (
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

228 
CPU_CORE_EXT
 
CPU_CHAR
 
CPU_Name
[
CPU_CFG_NAME_SIZE
];

232 #i‡((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

233 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
))

234 
CPU_CORE_EXT
 
CPU_TS32
 
CPU_TS_32_Accum
;

235 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_TS_32_TmrPªv
;

238 #i‡((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
) && \

239 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
))

240 
CPU_CORE_EXT
 
CPU_TS64
 
CPU_TS_64_Accum
;

241 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_TS_64_TmrPªv
;

244 #i‡ (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

245 
CPU_CORE_EXT
 
CPU_TS_TMR_FREQ
 
CPU_TS_TmrFªq_Hz
;

249 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


250 
CPU_CORE_EXT
 
CPU_INT16U
 
CPU_I¡DisMósCå
;

251 
CPU_CORE_EXT
 
CPU_INT16U
 
CPU_I¡DisNe°Cå
;

253 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósSèπ_˙ts
;

254 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósSt›_˙ts
;

255 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósOvrhd_˙ts
;

256 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCur_˙ts
;

257 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósMax_˙ts
;

377 #i‚de‡ 
CPU_SW_EXCEPTION


378 
	#CPU_SW_EXCEPTION
(
îr_πn_vÆ
) do { \

379 
	`CPU_SW_Ex˚±i⁄
(); \

380 
	}
} 0)

	)

401 
	#CPU_VAL_UNUSED
(
vÆ
Ë(()&(vÆ));

	)

404 
	#CPU_VAL_IGNORED
(
vÆ
Ë
	`CPU_VAL_UNUSED
(vÆ)

	)

447 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

448 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

449 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

450 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

451 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))

	)

455 #i‡ ((
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
) || \

456 (
	gCPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
))

457 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)) | \

458 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

459 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

460 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)))

	)

463 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

464 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

465 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

466 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)) | \

467 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)))

	)

470 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

471 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

472 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

473 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))

	)

503 
CPU_Inô
 ();

505 
CPU_SW_Ex˚±i⁄
 ();

509 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

510 
CPU_NameCÃ
 ();

512 
CPU_NameGë
 ( 
CPU_CHAR
 *
p_«me
,

513 
CPU_ERR
 *
p_îr
);

515 
CPU_NameSë
 (c⁄° 
CPU_CHAR
 *
p_«me
,

516 
CPU_ERR
 *
p_îr
);

522 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

523 
CPU_TS32
 
CPU_TS_Gë32
 ();

526 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

527 
CPU_TS64
 
CPU_TS_Gë64
 ();

530 #i‡(
CPU_CFG_TS_EN
 =
DEF_ENABLED
)

531 
CPU_TS_Upd©e
 ();

535 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

536 
CPU_TS_TMR_FREQ
 
CPU_TS_TmrFªqGë
 (
CPU_ERR
 *
p_îr
);

538 
CPU_TS_TmrFªqSë
 (
CPU_TS_TMR_FREQ
 
‰eq_hz
);

543 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


545 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCurRe£t
();

547 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCurGë
 ();

549 
CPU_TS_TMR
 
CPU_I¡DisMósMaxGë
 ();

552 
CPU_I¡DisMósSèπ
 ();

554 
CPU_I¡DisMósSt›
 ();

560 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


561 #ifde‡
__˝lu•lus


566 
CPU_DATA
 
CPU_C¡LódZîos
 (CPU_DATA 
vÆ
);

568 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


569 #ifde‡
__˝lu•lus


574 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

575 
CPU_DATA
 
CPU_C¡LódZîos08
 (
CPU_INT08U
 
vÆ
);

577 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

578 
CPU_DATA
 
CPU_C¡LódZîos16
 (
CPU_INT16U
 
vÆ
);

580 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

581 
CPU_DATA
 
CPU_C¡LódZîos32
 (
CPU_INT32U
 
vÆ
);

583 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

584 
CPU_DATA
 
CPU_C¡LódZîos64
 (
CPU_INT64U
 
vÆ
);

588 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


589 #ifde‡
__˝lu•lus


594 
CPU_DATA
 
CPU_C¡TøûZîos
 (CPU_DATA 
vÆ
);

596 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


597 #ifde‡
__˝lu•lus


602 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

603 
CPU_DATA
 
CPU_C¡TøûZîos08
 (
CPU_INT08U
 
vÆ
);

605 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

606 
CPU_DATA
 
CPU_C¡TøûZîos16
 (
CPU_INT16U
 
vÆ
);

608 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

609 
CPU_DATA
 
CPU_C¡TøûZîos32
 (
CPU_INT32U
 
vÆ
);

611 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

612 
CPU_DATA
 
CPU_C¡TøûZîos64
 (
CPU_INT64U
 
vÆ
);

675 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

676 
CPU_TS_TmrInô
();

762 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

763 
CPU_TS_TMR
 
CPU_TS_TmrRd
();

823 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

824 
CPU_INT64U
 
CPU_TS32_to_uSec
(
CPU_TS32
 
ts_˙ts
);

827 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

828 
CPU_INT64U
 
CPU_TS64_to_uSec
(
CPU_TS64
 
ts_˙ts
);

838 #i‚de‡ 
CPU_CFG_NAME_EN


843 #ñi‡ ((
CPU_CFG_NAME_EN
 !
DEF_ENABLED
 ) && \

844 (
CPU_CFG_NAME_EN
 !
DEF_DISABLED
))

850 #ñi‡ (
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

852 #i‚de‡ 
CPU_CFG_NAME_SIZE


857 #ñi‡ (
DEF_CHK_VAL
(
CPU_CFG_NAME_SIZE
, \

859 
DEF_INT_08U_MAX_VAL
Ë!
DEF_OK
)

870 #i‚de‡ 
CPU_CFG_TS_32_EN


875 #ñi‡ ((
CPU_CFG_TS_32_EN
 !
DEF_DISABLED
) && \

876 (
CPU_CFG_TS_32_EN
 !
DEF_ENABLED
 ))

884 #i‚de‡ 
CPU_CFG_TS_64_EN


889 #ñi‡ ((
CPU_CFG_TS_64_EN
 !
DEF_DISABLED
) && \

890 (
CPU_CFG_TS_64_EN
 !
DEF_ENABLED
 ))

898 #i‚de‡ 
CPU_CFG_TS_EN


903 #ñi‡ ((
CPU_CFG_TS_EN
 !
DEF_DISABLED
) && \

904 (
CPU_CFG_TS_EN
 !
DEF_ENABLED
 ))

913 #i‚de‡ 
CPU_CFG_TS_TMR_EN


918 #ñi‡ ((
CPU_CFG_TS_TMR_EN
 !
DEF_DISABLED
) && \

919 (
CPU_CFG_TS_TMR_EN
 !
DEF_ENABLED
 ))

925 #ñi‡ (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

927 #i‚de‡ 
CPU_CFG_TS_TMR_SIZE


934 #ñi‡ ((
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_08
) && \

935 (
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_16
) && \

936 (
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_32
) && \

937 (
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_64
))

949 #i‚de‡ 
CPU_CFG_INT_DIS_MEAS_EN


956 #i‚de‡ 
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR


961 #ñi‡ (
DEF_CHK_VAL
(
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
, \

962 
CPU_TIME_MEAS_NBR_MIN
, \

963 
CPU_TIME_MEAS_NBR_MAX
Ë!
DEF_OK
)

975 #i‚de‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


982 #i‚de‡ 
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


995 #i‚de‡ 
CPU_CFG_ADDR_SIZE


999 #i‚de‡ 
CPU_CFG_DATA_SIZE


1003 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


1015 #i‡ (
LIB_VERSION
 < 13500u)

	@UCOSIII/uC-CPU/cpu_def.h

43 #i‚de‡ 
CPU_DEF_MODULE_PRESENT


44 
	#CPU_DEF_MODULE_PRESENT


	)

74 
	#CPU_CORE_VERSION
 12902u

	)

98 
	#CPU_WORD_SIZE_08
 1

	)

99 
	#CPU_WORD_SIZE_16
 2

	)

100 
	#CPU_WORD_SIZE_32
 4

	)

101 
	#CPU_WORD_SIZE_64
 8

	)

105 
	#CPU_ENDIAN_TYPE_NONE
 0u

	)

106 
	#CPU_ENDIAN_TYPE_BIG
 1u

	)

107 
	#CPU_ENDIAN_TYPE_LITTLE
 2u

	)

124 
	#CPU_STK_GROWTH_NONE
 0u

	)

125 
	#CPU_STK_GROWTH_LO_TO_HI
 1u

	)

126 
	#CPU_STK_GROWTH_HI_TO_LO
 2u

	)

203 
	#CPU_CRITICAL_METHOD_NONE
 0u

	)

204 
	#CPU_CRITICAL_METHOD_INT_DIS_EN
 1u

	)

205 
	#CPU_CRITICAL_METHOD_STATUS_STK
 2u

	)

206 
	#CPU_CRITICAL_METHOD_STATUS_LOCAL
 3u

	)

	@UCOSIII/uC-LIB/lib_ascii.c

80 
	#MICRIUM_SOURCE


	)

81 
	#LIB_ASCII_MODULE


	)

82 
	~<lib_ascii.h
>

153 
CPU_BOOLEAN
 
	$ASCII_IsAÕha
 (
CPU_CHAR
 
c
)

155 
CPU_BOOLEAN
 
Æpha
;

158 
Æpha
 = 
	`ASCII_IS_ALPHA
(
c
);

160  (
Æpha
);

161 
	}
}

183 
CPU_BOOLEAN
 
	$ASCII_IsAÕhaNum
 (
CPU_CHAR
 
c
)

185 
CPU_BOOLEAN
 
Æpha_num
;

188 
Æpha_num
 = 
	`ASCII_IS_ALPHA_NUM
(
c
);

190  (
Æpha_num
);

191 
	}
}

213 
CPU_BOOLEAN
 
	$ASCII_IsLowî
 (
CPU_CHAR
 
c
)

215 
CPU_BOOLEAN
 
lowî
;

218 
lowî
 = 
	`ASCII_IS_LOWER
(
c
);

220  (
lowî
);

221 
	}
}

243 
CPU_BOOLEAN
 
	$ASCII_IsUµî
 (
CPU_CHAR
 
c
)

245 
CPU_BOOLEAN
 
uµî
;

248 
uµî
 = 
	`ASCII_IS_UPPER
(
c
);

250  (
uµî
);

251 
	}
}

273 
CPU_BOOLEAN
 
	$ASCII_IsDig
 (
CPU_CHAR
 
c
)

275 
CPU_BOOLEAN
 
dig
;

278 
dig
 = 
	`ASCII_IS_DIG
(
c
);

280  (
dig
);

281 
	}
}

302 
CPU_BOOLEAN
 
	$ASCII_IsDigO˘
 (
CPU_CHAR
 
c
)

304 
CPU_BOOLEAN
 
dig_o˘
;

307 
dig_o˘
 = 
	`ASCII_IS_DIG_OCT
(
c
);

309  (
dig_o˘
);

310 
	}
}

332 
CPU_BOOLEAN
 
	$ASCII_IsDigHex
 (
CPU_CHAR
 
c
)

334 
CPU_BOOLEAN
 
dig_hex
;

337 
dig_hex
 = 
	`ASCII_IS_DIG_HEX
(
c
);

339  (
dig_hex
);

340 
	}
}

365 
CPU_BOOLEAN
 
	$ASCII_IsBœnk
 (
CPU_CHAR
 
c
)

367 
CPU_BOOLEAN
 
bœnk
;

370 
bœnk
 = 
	`ASCII_IS_BLANK
(
c
);

372  (
bœnk
);

373 
	}
}

399 
CPU_BOOLEAN
 
	$ASCII_IsS∑˚
 (
CPU_CHAR
 
c
)

401 
CPU_BOOLEAN
 
•a˚
;

404 
•a˚
 = 
	`ASCII_IS_SPACE
(
c
);

406  (
•a˚
);

407 
	}
}

433 
CPU_BOOLEAN
 
	$ASCII_IsPröt
 (
CPU_CHAR
 
c
)

435 
CPU_BOOLEAN
 
¥öt
;

438 
¥öt
 = 
	`ASCII_IS_PRINT
(
c
);

440  (
¥öt
);

441 
	}
}

467 
CPU_BOOLEAN
 
	$ASCII_IsGøph
 (
CPU_CHAR
 
c
)

469 
CPU_BOOLEAN
 
gøph
;

472 
gøph
 = 
	`ASCII_IS_GRAPH
(
c
);

474  (
gøph
);

475 
	}
}

497 
CPU_BOOLEAN
 
	$ASCII_IsPun˘
 (
CPU_CHAR
 
c
)

499 
CPU_BOOLEAN
 
pun˘
;

502 
pun˘
 = 
	`ASCII_IS_PUNCT
(
c
);

504  (
pun˘
);

505 
	}
}

531 
CPU_BOOLEAN
 
	$ASCII_IsCål
 (
CPU_CHAR
 
c
)

533 
CPU_BOOLEAN
 
˘æ
;

536 
˘æ
 = 
	`ASCII_IS_CTRL
(
c
);

538  (
˘æ
);

539 
	}
}

569 
CPU_CHAR
 
	$ASCII_ToLowî
 (
CPU_CHAR
 
c
)

571 
CPU_CHAR
 
lowî
;

574 
lowî
 = 
	`ASCII_TO_LOWER
(
c
);

576  (
lowî
);

577 
	}
}

607 
CPU_CHAR
 
	$ASCII_ToUµî
 (
CPU_CHAR
 
c
)

609 
CPU_CHAR
 
uµî
;

612 
uµî
 = 
	`ASCII_TO_UPPER
(
c
);

614  (
uµî
);

615 
	}
}

638 
CPU_BOOLEAN
 
	$ASCII_Cmp
 (
CPU_CHAR
 
c1
,

639 
CPU_CHAR
 
c2
)

641 
CPU_CHAR
 
c1_uµî
;

642 
CPU_CHAR
 
c2_uµî
;

643 
CPU_BOOLEAN
 
cmp
;

646 
c1_uµî
 = 
	`ASCII_ToUµî
(
c1
);

647 
c2_uµî
 = 
	`ASCII_ToUµî
(
c2
);

648 
cmp
 = (
c1_uµî
 =
c2_uµî
Ë? (
DEF_YES
Ë: (
DEF_NO
);

650  (
cmp
);

651 
	}
}

	@UCOSIII/uC-LIB/lib_ascii.h

82 #i‚de‡ 
LIB_ASCII_MODULE_PRESENT


83 
	#LIB_ASCII_MODULE_PRESENT


	)

118 
	~<˝u.h
>

119 
	~<lib_def.h
>

128 #ifde‡ 
LIB_ASCII_MODULE


129 
	#LIB_ASCII_EXT


	)

131 
	#LIB_ASCII_EXT
 

	)

148 
	#ASCII_CHAR_NULL
 0x00

	)

149 
	#ASCII_CHAR_START_OF_HEADING
 0x01

	)

150 
	#ASCII_CHAR_START_OF_TEXT
 0x02

	)

151 
	#ASCII_CHAR_END_OF_TEXT
 0x03

	)

152 
	#ASCII_CHAR_END_OF_TRANSMISSION
 0x04

	)

153 
	#ASCII_CHAR_ENQUIRY
 0x05

	)

154 
	#ASCII_CHAR_ACKNOWLEDGE
 0x06

	)

155 
	#ASCII_CHAR_BELL
 0x07

	)

156 
	#ASCII_CHAR_BACKSPACE
 0x08

	)

157 
	#ASCII_CHAR_CHARACTER_TABULATION
 0x09

	)

158 
	#ASCII_CHAR_LINE_FEED
 0x0A

	)

159 
	#ASCII_CHAR_LINE_TABULATION
 0x0B

	)

160 
	#ASCII_CHAR_FORM_FEED
 0x0C

	)

161 
	#ASCII_CHAR_CARRIAGE_RETURN
 0x0D

	)

162 
	#ASCII_CHAR_SHIFT_OUT
 0x0E

	)

163 
	#ASCII_CHAR_SHIFT_IN
 0x0F

	)

164 
	#ASCII_CHAR_DATA_LINK_ESCAPE
 0x10

	)

165 
	#ASCII_CHAR_DEVICE_CONTROL_ONE
 0x11

	)

166 
	#ASCII_CHAR_DEVICE_CONTROL_TWO
 0x12

	)

167 
	#ASCII_CHAR_DEVICE_CONTROL_THREE
 0x13

	)

168 
	#ASCII_CHAR_DEVICE_CONTROL_FOUR
 0x14

	)

169 
	#ASCII_CHAR_NEGATIVE_ACKNOWLEDGE
 0x15

	)

170 
	#ASCII_CHAR_SYNCHRONOUS_IDLE
 0x16

	)

171 
	#ASCII_CHAR_END_OF_TRANSMISSION_BLOCK
 0x17

	)

172 
	#ASCII_CHAR_CANCEL
 0x18

	)

173 
	#ASCII_CHAR_END_OF_MEDIUM
 0x19

	)

174 
	#ASCII_CHAR_SUBSITUTE
 0x1A

	)

175 
	#ASCII_CHAR_ESCAPE
 0x1B

	)

176 
	#ASCII_CHAR_INFO_SEPARATOR_FOUR
 0x1C

	)

177 
	#ASCII_CHAR_INFO_SEPARATOR_THREE
 0x1D

	)

178 
	#ASCII_CHAR_INFO_SEPARATOR_TWO
 0x1E

	)

179 
	#ASCII_CHAR_INFO_SEPARATOR_ONE
 0x1F

	)

181 
	#ASCII_CHAR_NUL
 
ASCII_CHAR_NULL


	)

182 
	#ASCII_CHAR_SOH
 
ASCII_CHAR_START_OF_HEADING


	)

183 
	#ASCII_CHAR_START_HEADING
 
ASCII_CHAR_START_OF_HEADING


	)

184 
	#ASCII_CHAR_STX
 
ASCII_CHAR_START_OF_TEXT


	)

185 
	#ASCII_CHAR_START_TEXT
 
ASCII_CHAR_START_OF_TEXT


	)

186 
	#ASCII_CHAR_ETX
 
ASCII_CHAR_END_OF_TEXT


	)

187 
	#ASCII_CHAR_END_TEXT
 
ASCII_CHAR_END_OF_TEXT


	)

188 
	#ASCII_CHAR_EOT
 
ASCII_CHAR_END_OF_TRANSMISSION


	)

189 
	#ASCII_CHAR_END_TRANSMISSION
 
ASCII_CHAR_END_OF_TRANSMISSION


	)

190 
	#ASCII_CHAR_ENQ
 
ASCII_CHAR_ENQUIRY


	)

191 
	#ASCII_CHAR_ACK
 
ASCII_CHAR_ACKNOWLEDGE


	)

192 
	#ASCII_CHAR_BEL
 
ASCII_CHAR_BELL


	)

193 
	#ASCII_CHAR_BS
 
ASCII_CHAR_BACKSPACE


	)

194 
	#ASCII_CHAR_HT
 
ASCII_CHAR_CHARACTER_TABULATION


	)

195 
	#ASCII_CHAR_TAB
 
ASCII_CHAR_CHARACTER_TABULATION


	)

196 
	#ASCII_CHAR_LF
 
ASCII_CHAR_LINE_FEED


	)

197 
	#ASCII_CHAR_VT
 
ASCII_CHAR_LINE_TABULATION


	)

198 
	#ASCII_CHAR_FF
 
ASCII_CHAR_FORM_FEED


	)

199 
	#ASCII_CHAR_CR
 
ASCII_CHAR_CARRIAGE_RETURN


	)

200 
	#ASCII_CHAR_SO
 
ASCII_CHAR_SHIFT_OUT


	)

201 
	#ASCII_CHAR_SI
 
ASCII_CHAR_SHIFT_IN


	)

202 
	#ASCII_CHAR_DLE
 
ASCII_CHAR_DATA_LINK_ESCAPE


	)

203 
	#ASCII_CHAR_DC1
 
ASCII_CHAR_DEVICE_CONTROL_ONE


	)

204 
	#ASCII_CHAR_DC2
 
ASCII_CHAR_DEVICE_CONTROL_TWO


	)

205 
	#ASCII_CHAR_DC3
 
ASCII_CHAR_DEVICE_CONTROL_THREE


	)

206 
	#ASCII_CHAR_DC4
 
ASCII_CHAR_DEVICE_CONTROL_FOUR


	)

207 
	#ASCII_CHAR_DEV_CTRL_ONE
 
ASCII_CHAR_DEVICE_CONTROL_ONE


	)

208 
	#ASCII_CHAR_DEV_CTRL_TWO
 
ASCII_CHAR_DEVICE_CONTROL_TWO


	)

209 
	#ASCII_CHAR_DEV_CTRL_THREE
 
ASCII_CHAR_DEVICE_CONTROL_THREE


	)

210 
	#ASCII_CHAR_DEV_CTRL_FOUR
 
ASCII_CHAR_DEVICE_CONTROL_FOUR


	)

211 
	#ASCII_CHAR_NAK
 
ASCII_CHAR_NEGATIVE_ACKNOWLEDGE


	)

212 
	#ASCII_CHAR_NEG_ACK
 
ASCII_CHAR_NEGATIVE_ACKNOWLEDGE


	)

213 
	#ASCII_CHAR_SYN
 
ASCII_CHAR_SYNCHRONOUS_IDLE


	)

214 
	#ASCII_CHAR_SYNC_IDLE
 
ASCII_CHAR_SYNCHRONOUS_IDLE


	)

215 
	#ASCII_CHAR_ETB
 
ASCII_CHAR_END_OF_TRANSMISSION_BLOCK


	)

216 
	#ASCII_CHAR_END_TRANSMISSION_BLK
 
ASCII_CHAR_END_OF_TRANSMISSION_BLOCK


	)

217 
	#ASCII_CHAR_CAN
 
ASCII_CHAR_CANCEL


	)

218 
	#ASCII_CHAR_EM
 
ASCII_CHAR_END_OF_MEDIUM


	)

219 
	#ASCII_CHAR_END_MEDIUM
 
ASCII_CHAR_END_OF_MEDIUM


	)

220 
	#ASCII_CHAR_SUB
 
ASCII_CHAR_SUBSITUTE


	)

221 
	#ASCII_CHAR_ESC
 
ASCII_CHAR_ESCAPE


	)

222 
	#ASCII_CHAR_IS1
 
ASCII_CHAR_INFO_SEPARATOR_ONE


	)

223 
	#ASCII_CHAR_IS2
 
ASCII_CHAR_INFO_SEPARATOR_TWO


	)

224 
	#ASCII_CHAR_IS3
 
ASCII_CHAR_INFO_SEPARATOR_THREE


	)

225 
	#ASCII_CHAR_IS4
 
ASCII_CHAR_INFO_SEPARATOR_FOUR


	)

229 
	#ASCII_CHAR_SPACE
 0x20

	)

230 
	#ASCII_CHAR_EXCLAMATION_MARK
 0x21

	)

231 
	#ASCII_CHAR_QUOTATION_MARK
 0x22

	)

232 
	#ASCII_CHAR_NUMBER_SIGN
 0x23

	)

233 
	#ASCII_CHAR_DOLLAR_SIGN
 0x24

	)

234 
	#ASCII_CHAR_PERCENTAGE_SIGN
 0x25

	)

235 
	#ASCII_CHAR_AMPERSAND
 0x26

	)

236 
	#ASCII_CHAR_APOSTROPHE
 0x27

	)

237 
	#ASCII_CHAR_LEFT_PARENTHESIS
 0x28

	)

238 
	#ASCII_CHAR_RIGHT_PARENTHESIS
 0x29

	)

239 
	#ASCII_CHAR_ASTERISK
 0x2A

	)

240 
	#ASCII_CHAR_PLUS_SIGN
 0x2B

	)

241 
	#ASCII_CHAR_COMMA
 0x2C

	)

242 
	#ASCII_CHAR_HYPHEN_MINUS
 0x2D

	)

243 
	#ASCII_CHAR_FULL_STOP
 0x2E

	)

244 
	#ASCII_CHAR_SOLIDUS
 0x2F

	)

246 
	#ASCII_CHAR_PAREN_LEFT
 
ASCII_CHAR_LEFT_PARENTHESIS


	)

247 
	#ASCII_CHAR_PAREN_RIGHT
 
ASCII_CHAR_RIGHT_PARENTHESIS


	)

251 
	#ASCII_CHAR_DIGIT_ZERO
 0x30

	)

252 
	#ASCII_CHAR_DIGIT_ONE
 0x31

	)

253 
	#ASCII_CHAR_DIGIT_TWO
 0x32

	)

254 
	#ASCII_CHAR_DIGIT_THREE
 0x33

	)

255 
	#ASCII_CHAR_DIGIT_FOUR
 0x34

	)

256 
	#ASCII_CHAR_DIGIT_FIVE
 0x35

	)

257 
	#ASCII_CHAR_DIGIT_SIX
 0x36

	)

258 
	#ASCII_CHAR_DIGIT_SEVEN
 0x37

	)

259 
	#ASCII_CHAR_DIGIT_EIGHT
 0x38

	)

260 
	#ASCII_CHAR_DIGIT_NINE
 0x39

	)

262 
	#ASCII_CHAR_DIG_ZERO
 
ASCII_CHAR_DIGIT_ZERO


	)

263 
	#ASCII_CHAR_DIG_ONE
 
ASCII_CHAR_DIGIT_ONE


	)

264 
	#ASCII_CHAR_DIG_TWO
 
ASCII_CHAR_DIGIT_TWO


	)

265 
	#ASCII_CHAR_DIG_THREE
 
ASCII_CHAR_DIGIT_THREE


	)

266 
	#ASCII_CHAR_DIG_FOUR
 
ASCII_CHAR_DIGIT_FOUR


	)

267 
	#ASCII_CHAR_DIG_FIVE
 
ASCII_CHAR_DIGIT_FIVE


	)

268 
	#ASCII_CHAR_DIG_SIX
 
ASCII_CHAR_DIGIT_SIX


	)

269 
	#ASCII_CHAR_DIG_SEVEN
 
ASCII_CHAR_DIGIT_SEVEN


	)

270 
	#ASCII_CHAR_DIG_EIGHT
 
ASCII_CHAR_DIGIT_EIGHT


	)

271 
	#ASCII_CHAR_DIG_NINE
 
ASCII_CHAR_DIGIT_NINE


	)

275 
	#ASCII_CHAR_COLON
 0x3A

	)

276 
	#ASCII_CHAR_SEMICOLON
 0x3B

	)

277 
	#ASCII_CHAR_LESS_THAN_SIGN
 0x3C

	)

278 
	#ASCII_CHAR_EQUALS_SIGN
 0x3D

	)

279 
	#ASCII_CHAR_GREATER_THAN_SIGN
 0x3E

	)

280 
	#ASCII_CHAR_QUESTION_MARK
 0x3F

	)

281 
	#ASCII_CHAR_COMMERCIAL_AT
 0x40

	)

283 
	#ASCII_CHAR_AT_SIGN
 
ASCII_CHAR_COMMERCIAL_AT


	)

287 
	#ASCII_CHAR_LATIN_UPPER_A
 0x41

	)

288 
	#ASCII_CHAR_LATIN_UPPER_B
 0x42

	)

289 
	#ASCII_CHAR_LATIN_UPPER_C
 0x43

	)

290 
	#ASCII_CHAR_LATIN_UPPER_D
 0x44

	)

291 
	#ASCII_CHAR_LATIN_UPPER_E
 0x45

	)

292 
	#ASCII_CHAR_LATIN_UPPER_F
 0x46

	)

293 
	#ASCII_CHAR_LATIN_UPPER_G
 0x47

	)

294 
	#ASCII_CHAR_LATIN_UPPER_H
 0x48

	)

295 
	#ASCII_CHAR_LATIN_UPPER_I
 0x49

	)

296 
	#ASCII_CHAR_LATIN_UPPER_J
 0x4A

	)

297 
	#ASCII_CHAR_LATIN_UPPER_K
 0x4B

	)

298 
	#ASCII_CHAR_LATIN_UPPER_L
 0x4C

	)

299 
	#ASCII_CHAR_LATIN_UPPER_M
 0x4D

	)

300 
	#ASCII_CHAR_LATIN_UPPER_N
 0x4E

	)

301 
	#ASCII_CHAR_LATIN_UPPER_O
 0x4F

	)

302 
	#ASCII_CHAR_LATIN_UPPER_P
 0x50

	)

303 
	#ASCII_CHAR_LATIN_UPPER_Q
 0x51

	)

304 
	#ASCII_CHAR_LATIN_UPPER_R
 0x52

	)

305 
	#ASCII_CHAR_LATIN_UPPER_S
 0x53

	)

306 
	#ASCII_CHAR_LATIN_UPPER_T
 0x54

	)

307 
	#ASCII_CHAR_LATIN_UPPER_U
 0x55

	)

308 
	#ASCII_CHAR_LATIN_UPPER_V
 0x56

	)

309 
	#ASCII_CHAR_LATIN_UPPER_W
 0x57

	)

310 
	#ASCII_CHAR_LATIN_UPPER_X
 0x58

	)

311 
	#ASCII_CHAR_LATIN_UPPER_Y
 0x59

	)

312 
	#ASCII_CHAR_LATIN_UPPER_Z
 0x5A

	)

316 
	#ASCII_CHAR_LEFT_SQUARE_BRACKET
 0x5B

	)

317 
	#ASCII_CHAR_REVERSE_SOLIDUS
 0x5C

	)

318 
	#ASCII_CHAR_RIGHT_SQUARE_BRACKET
 0x5D

	)

319 
	#ASCII_CHAR_CIRCUMFLEX_ACCENT
 0x5E

	)

320 
	#ASCII_CHAR_LOW_LINE
 0x5F

	)

321 
	#ASCII_CHAR_GRAVE_ACCENT
 0x60

	)

323 
	#ASCII_CHAR_BRACKET_SQUARE_LEFT
 
ASCII_CHAR_LEFT_SQUARE_BRACKET


	)

324 
	#ASCII_CHAR_BRACKET_SQUARE_RIGHT
 
ASCII_CHAR_RIGHT_SQUARE_BRACKET


	)

328 
	#ASCII_CHAR_LATIN_LOWER_A
 0x61

	)

329 
	#ASCII_CHAR_LATIN_LOWER_B
 0x62

	)

330 
	#ASCII_CHAR_LATIN_LOWER_C
 0x63

	)

331 
	#ASCII_CHAR_LATIN_LOWER_D
 0x64

	)

332 
	#ASCII_CHAR_LATIN_LOWER_E
 0x65

	)

333 
	#ASCII_CHAR_LATIN_LOWER_F
 0x66

	)

334 
	#ASCII_CHAR_LATIN_LOWER_G
 0x67

	)

335 
	#ASCII_CHAR_LATIN_LOWER_H
 0x68

	)

336 
	#ASCII_CHAR_LATIN_LOWER_I
 0x69

	)

337 
	#ASCII_CHAR_LATIN_LOWER_J
 0x6A

	)

338 
	#ASCII_CHAR_LATIN_LOWER_K
 0x6B

	)

339 
	#ASCII_CHAR_LATIN_LOWER_L
 0x6C

	)

340 
	#ASCII_CHAR_LATIN_LOWER_M
 0x6D

	)

341 
	#ASCII_CHAR_LATIN_LOWER_N
 0x6E

	)

342 
	#ASCII_CHAR_LATIN_LOWER_O
 0x6F

	)

343 
	#ASCII_CHAR_LATIN_LOWER_P
 0x70

	)

344 
	#ASCII_CHAR_LATIN_LOWER_Q
 0x71

	)

345 
	#ASCII_CHAR_LATIN_LOWER_R
 0x72

	)

346 
	#ASCII_CHAR_LATIN_LOWER_S
 0x73

	)

347 
	#ASCII_CHAR_LATIN_LOWER_T
 0x74

	)

348 
	#ASCII_CHAR_LATIN_LOWER_U
 0x75

	)

349 
	#ASCII_CHAR_LATIN_LOWER_V
 0x76

	)

350 
	#ASCII_CHAR_LATIN_LOWER_W
 0x77

	)

351 
	#ASCII_CHAR_LATIN_LOWER_X
 0x78

	)

352 
	#ASCII_CHAR_LATIN_LOWER_Y
 0x79

	)

353 
	#ASCII_CHAR_LATIN_LOWER_Z
 0x7A

	)

357 
	#ASCII_CHAR_LEFT_CURLY_BRACKET
 0x7B

	)

358 
	#ASCII_CHAR_VERTICAL_LINE
 0x7C

	)

359 
	#ASCII_CHAR_RIGHT_CURLY_BRACKET
 0x7D

	)

360 
	#ASCII_CHAR_TILDE
 0x7E

	)

362 
	#ASCII_CHAR_BRACKET_CURLY_LEFT
 
ASCII_CHAR_LEFT_CURLY_BRACKET


	)

363 
	#ASCII_CHAR_BRACKET_CURLY_RIGHT
 
ASCII_CHAR_RIGHT_CURLY_BRACKET


	)

367 
	#ASCII_CHAR_DELETE
 0x7F

	)

369 
	#ASCII_CHAR_DEL
 
ASCII_CHAR_DELETE


	)

421 
	#ASCII_IS_DIG
(
c
Ë((((cË>
ASCII_CHAR_DIG_ZERO
Ë&& ((cË<
ASCII_CHAR_DIG_NINE
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

442 
	#ASCII_IS_DIG_OCT
(
c
Ë((((cË>
ASCII_CHAR_DIG_ZERO
Ë&& ((cË<
ASCII_CHAR_DIG_SEVEN
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

464 
	#ASCII_IS_DIG_HEX
(
c
Ë(((((cË>
ASCII_CHAR_DIG_ZERO
 ) && ((cË<
ASCII_CHAR_DIG_NINE
 )) || \

465 (((
c
Ë>
ASCII_CHAR_LATIN_UPPER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_UPPER_F
)) || \

466 (((
c
Ë>
ASCII_CHAR_LATIN_LOWER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_LOWER_F
))Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

488 
	#ASCII_IS_LOWER
(
c
Ë((((cË>
ASCII_CHAR_LATIN_LOWER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_LOWER_Z
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

510 
	#ASCII_IS_UPPER
(
c
Ë((((cË>
ASCII_CHAR_LATIN_UPPER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_UPPER_Z
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

532 
	#ASCII_IS_ALPHA
(
c
Ë((((
	`ASCII_IS_UPPER
(c)Ë=
DEF_YES
) || \

533 ((
	`ASCII_IS_LOWER
(
c
)Ë=
DEF_YES
)Ë? (DEF_YESË: (
DEF_NO
))

	)

555 
	#ASCII_IS_ALPHA_NUM
(
c
Ë((((
	`ASCII_IS_ALPHA
(c)Ë=
DEF_YES
) || \

556 ((
	`ASCII_IS_DIG
 (
c
)Ë=
DEF_YES
)Ë? (DEF_YESË: (
DEF_NO
))

	)

581 
	#ASCII_IS_BLANK
(
c
Ë((((cË=
ASCII_CHAR_SPACE
Ë|| ((cË=
ASCII_CHAR_HT
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

607 
	#ASCII_IS_SPACE
(
c
Ë((((cË=
ASCII_CHAR_SPACE
Ë|| ((cË=
ASCII_CHAR_CR
) || \

608 ((
c
Ë=
ASCII_CHAR_LF
 ) || ((cË=
ASCII_CHAR_FF
) || \

609 ((
c
Ë=
ASCII_CHAR_HT
 ) || ((cË=
ASCII_CHAR_VT
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

635 
	#ASCII_IS_PRINT
(
c
Ë((((cË>
ASCII_CHAR_SPACE
Ë&& ((cË<
ASCII_CHAR_TILDE
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

661 
	#ASCII_IS_GRAPH
(
c
Ë((((cË>
ASCII_CHAR_EXCLAMATION_MARK
Ë&& ((cË<
ASCII_CHAR_TILDE
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

683 
	#ASCII_IS_PUNCT
(
c
Ë((((
	`ASCII_IS_PRINT
(c)Ë=
DEF_YES
) && \

684 ((
	`ASCII_IS_SPACE
(
c
)Ë=
DEF_NO
 ) && \

685 ((
	`ASCII_IS_ALPHA_NUM
(
c
)Ë=
DEF_NO
 )Ë? (
DEF_YES
Ë: (DEF_NO))

	)

711 
	#ASCII_IS_CTRL
(
c
Ë(((((
CPU_INT08S
)(cË>
ASCII_CHAR_NULL
 ) && ((cË<
ASCII_CHAR_IS1
)) || \

712 ((
c
Ë=
ASCII_CHAR_DEL
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

748 
	#ASCII_TO_LOWER
(
c
Ë(((
	`ASCII_IS_UPPER
(c)Ë=
DEF_YES
Ë? ((cË+ (
ASCII_CHAR_LATIN_LOWER_A
 - 
ASCII_CHAR_LATIN_UPPER_A
)Ë: (c))

	)

778 
	#ASCII_TO_UPPER
(
c
Ë(((
	`ASCII_IS_LOWER
(c)Ë=
DEF_YES
Ë? ((cË- (
ASCII_CHAR_LATIN_LOWER_A
 - 
ASCII_CHAR_LATIN_UPPER_A
)Ë: (c))

	)

787 
CPU_BOOLEAN
 
ASCII_IsAÕha
 (
CPU_CHAR
 
c
);

789 
CPU_BOOLEAN
 
ASCII_IsAÕhaNum
(
CPU_CHAR
 
c
);

791 
CPU_BOOLEAN
 
ASCII_IsLowî
 (
CPU_CHAR
 
c
);

793 
CPU_BOOLEAN
 
ASCII_IsUµî
 (
CPU_CHAR
 
c
);

795 
CPU_BOOLEAN
 
ASCII_IsDig
 (
CPU_CHAR
 
c
);

797 
CPU_BOOLEAN
 
ASCII_IsDigO˘
 (
CPU_CHAR
 
c
);

799 
CPU_BOOLEAN
 
ASCII_IsDigHex
 (
CPU_CHAR
 
c
);

801 
CPU_BOOLEAN
 
ASCII_IsBœnk
 (
CPU_CHAR
 
c
);

803 
CPU_BOOLEAN
 
ASCII_IsS∑˚
 (
CPU_CHAR
 
c
);

805 
CPU_BOOLEAN
 
ASCII_IsPröt
 (
CPU_CHAR
 
c
);

807 
CPU_BOOLEAN
 
ASCII_IsGøph
 (
CPU_CHAR
 
c
);

809 
CPU_BOOLEAN
 
ASCII_IsPun˘
 (
CPU_CHAR
 
c
);

811 
CPU_BOOLEAN
 
ASCII_IsCål
 (
CPU_CHAR
 
c
);

814 
CPU_CHAR
 
ASCII_ToLowî
 (CPU_CHAR 
c
);

816 
CPU_CHAR
 
ASCII_ToUµî
 (CPU_CHAR 
c
);

819 
CPU_BOOLEAN
 
ASCII_Cmp
 (
CPU_CHAR
 
c1
,

820 
CPU_CHAR
 
c2
);

	@UCOSIII/uC-LIB/lib_def.h

66 #i‚de‡ 
LIB_DEF_MODULE_PRESENT


67 
	#LIB_DEF_MODULE_PRESENT


	)

97 
	#LIB_VERSION
 13702u

	)

130 
	~<˝u_def.h
>

131 
	~<˝u.h
>

140 
	#DEF_NULL
 0

	)

144 
	#DEF_FALSE
 0u

	)

145 
	#DEF_TRUE
 1u

	)

147 
	#DEF_NO
 0u

	)

148 
	#DEF_YES
 1u

	)

150 
	#DEF_DISABLED
 0u

	)

151 
	#DEF_ENABLED
 1u

	)

153 
	#DEF_INACTIVE
 0u

	)

154 
	#DEF_ACTIVE
 1u

	)

156 
	#DEF_INVALID
 0u

	)

157 
	#DEF_VALID
 1u

	)

159 
	#DEF_OFF
 0u

	)

160 
	#DEF_ON
 1u

	)

162 
	#DEF_CLR
 0u

	)

163 
	#DEF_SET
 1u

	)

165 
	#DEF_FAIL
 0u

	)

166 
	#DEF_OK
 1u

	)

170 
	#DEF_BIT_NONE
 0x00u

	)

172 
	#DEF_BIT_00
 0x01u

	)

173 
	#DEF_BIT_01
 0x02u

	)

174 
	#DEF_BIT_02
 0x04u

	)

175 
	#DEF_BIT_03
 0x08u

	)

176 
	#DEF_BIT_04
 0x10u

	)

177 
	#DEF_BIT_05
 0x20u

	)

178 
	#DEF_BIT_06
 0x40u

	)

179 
	#DEF_BIT_07
 0x80u

	)

181 
	#DEF_BIT_08
 0x0100u

	)

182 
	#DEF_BIT_09
 0x0200u

	)

183 
	#DEF_BIT_10
 0x0400u

	)

184 
	#DEF_BIT_11
 0x0800u

	)

185 
	#DEF_BIT_12
 0x1000u

	)

186 
	#DEF_BIT_13
 0x2000u

	)

187 
	#DEF_BIT_14
 0x4000u

	)

188 
	#DEF_BIT_15
 0x8000u

	)

190 
	#DEF_BIT_16
 0x00010000u

	)

191 
	#DEF_BIT_17
 0x00020000u

	)

192 
	#DEF_BIT_18
 0x00040000u

	)

193 
	#DEF_BIT_19
 0x00080000u

	)

194 
	#DEF_BIT_20
 0x00100000u

	)

195 
	#DEF_BIT_21
 0x00200000u

	)

196 
	#DEF_BIT_22
 0x00400000u

	)

197 
	#DEF_BIT_23
 0x00800000u

	)

199 
	#DEF_BIT_24
 0x01000000u

	)

200 
	#DEF_BIT_25
 0x02000000u

	)

201 
	#DEF_BIT_26
 0x04000000u

	)

202 
	#DEF_BIT_27
 0x08000000u

	)

203 
	#DEF_BIT_28
 0x10000000u

	)

204 
	#DEF_BIT_29
 0x20000000u

	)

205 
	#DEF_BIT_30
 0x40000000u

	)

206 
	#DEF_BIT_31
 0x80000000u

	)

207 
	#DEF_BIT_32
 0x0000000100000000u

	)

208 
	#DEF_BIT_33
 0x0000000200000000u

	)

209 
	#DEF_BIT_34
 0x0000000400000000u

	)

210 
	#DEF_BIT_35
 0x0000000800000000u

	)

211 
	#DEF_BIT_36
 0x0000001000000000u

	)

212 
	#DEF_BIT_37
 0x0000002000000000u

	)

213 
	#DEF_BIT_38
 0x0000004000000000u

	)

214 
	#DEF_BIT_39
 0x0000008000000000u

	)

216 
	#DEF_BIT_40
 0x0000010000000000u

	)

217 
	#DEF_BIT_41
 0x0000020000000000u

	)

218 
	#DEF_BIT_42
 0x0000040000000000u

	)

219 
	#DEF_BIT_43
 0x0000080000000000u

	)

220 
	#DEF_BIT_44
 0x0000100000000000u

	)

221 
	#DEF_BIT_45
 0x0000200000000000u

	)

222 
	#DEF_BIT_46
 0x0000400000000000u

	)

223 
	#DEF_BIT_47
 0x0000800000000000u

	)

225 
	#DEF_BIT_48
 0x0001000000000000u

	)

226 
	#DEF_BIT_49
 0x0002000000000000u

	)

227 
	#DEF_BIT_50
 0x0004000000000000u

	)

228 
	#DEF_BIT_51
 0x0008000000000000u

	)

229 
	#DEF_BIT_52
 0x0010000000000000u

	)

230 
	#DEF_BIT_53
 0x0020000000000000u

	)

231 
	#DEF_BIT_54
 0x0040000000000000u

	)

232 
	#DEF_BIT_55
 0x0080000000000000u

	)

234 
	#DEF_BIT_56
 0x0100000000000000u

	)

235 
	#DEF_BIT_57
 0x0200000000000000u

	)

236 
	#DEF_BIT_58
 0x0400000000000000u

	)

237 
	#DEF_BIT_59
 0x0800000000000000u

	)

238 
	#DEF_BIT_60
 0x1000000000000000u

	)

239 
	#DEF_BIT_61
 0x2000000000000000u

	)

240 
	#DEF_BIT_62
 0x4000000000000000u

	)

241 
	#DEF_BIT_63
 0x8000000000000000u

	)

245 
	#DEF_ALIGN_MAX_NBR_OCTETS
 4096u

	)

249 
	#DEF_OCTET_NBR_BITS
 8u

	)

250 
	#DEF_OCTET_MASK
 0xFFu

	)

252 
	#DEF_OCTET_TO_BIT_NBR_BITS
 3u

	)

253 
	#DEF_OCTET_TO_BIT_SHIFT
 
DEF_OCTET_TO_BIT_NBR_BITS


	)

254 
	#DEF_OCTET_TO_BIT_MASK
 0x07u

	)

257 
	#DEF_NIBBLE_NBR_BITS
 4u

	)

258 
	#DEF_NIBBLE_MASK
 0x0Fu

	)

262 
	#DEF_NBR_BASE_BIN
 2u

	)

263 
	#DEF_NBR_BASE_OCT
 8u

	)

264 
	#DEF_NBR_BASE_DEC
 10u

	)

265 
	#DEF_NBR_BASE_HEX
 16u

	)

269 
	#DEF_INT_08_NBR_BITS
 8u

	)

270 
	#DEF_INT_08_MASK
 0xFFu

	)

272 
	#DEF_INT_08U_MIN_VAL
 0u

	)

273 
	#DEF_INT_08U_MAX_VAL
 255u

	)

275 
	#DEF_INT_08S_MIN_VAL_ONES_CPL
 (-127)

	)

276 
	#DEF_INT_08S_MAX_VAL_ONES_CPL
 127

	)

278 
	#DEF_INT_08S_MIN_VAL
 (
DEF_INT_08S_MIN_VAL_ONES_CPL
 - 1)

	)

279 
	#DEF_INT_08S_MAX_VAL
 
DEF_INT_08S_MAX_VAL_ONES_CPL


	)

281 
	#DEF_INT_08U_NBR_DIG_MIN
 1u

	)

282 
	#DEF_INT_08U_NBR_DIG_MAX
 3u

	)

284 
	#DEF_INT_08S_NBR_DIG_MIN
 3u

	)

285 
	#DEF_INT_08S_NBR_DIG_MAX
 3u

	)

289 
	#DEF_INT_16_NBR_BITS
 16u

	)

290 
	#DEF_INT_16_MASK
 0xFFFFu

	)

292 
	#DEF_INT_16U_MIN_VAL
 0u

	)

293 
	#DEF_INT_16U_MAX_VAL
 65535u

	)

295 
	#DEF_INT_16S_MIN_VAL_ONES_CPL
 (-32767)

	)

296 
	#DEF_INT_16S_MAX_VAL_ONES_CPL
 32767

	)

298 
	#DEF_INT_16S_MIN_VAL
 (
DEF_INT_16S_MIN_VAL_ONES_CPL
 - 1)

	)

299 
	#DEF_INT_16S_MAX_VAL
 
DEF_INT_16S_MAX_VAL_ONES_CPL


	)

301 
	#DEF_INT_16U_NBR_DIG_MIN
 1u

	)

302 
	#DEF_INT_16U_NBR_DIG_MAX
 5u

	)

304 
	#DEF_INT_16S_NBR_DIG_MIN
 5u

	)

305 
	#DEF_INT_16S_NBR_DIG_MAX
 5u

	)

309 
	#DEF_INT_32_NBR_BITS
 32u

	)

310 
	#DEF_INT_32_MASK
 0xFFFFFFFFu

	)

312 
	#DEF_INT_32U_MIN_VAL
 0u

	)

313 
	#DEF_INT_32U_MAX_VAL
 4294967295u

	)

315 
	#DEF_INT_32S_MIN_VAL_ONES_CPL
 (-2147483647)

	)

316 
	#DEF_INT_32S_MAX_VAL_ONES_CPL
 2147483647

	)

318 
	#DEF_INT_32S_MIN_VAL
 (
DEF_INT_32S_MIN_VAL_ONES_CPL
 - 1)

	)

319 
	#DEF_INT_32S_MAX_VAL
 
DEF_INT_32S_MAX_VAL_ONES_CPL


	)

321 
	#DEF_INT_32U_NBR_DIG_MIN
 1u

	)

322 
	#DEF_INT_32U_NBR_DIG_MAX
 10u

	)

324 
	#DEF_INT_32S_NBR_DIG_MIN
 10u

	)

325 
	#DEF_INT_32S_NBR_DIG_MAX
 10u

	)

329 
	#DEF_INT_64_NBR_BITS
 64u

	)

330 
	#DEF_INT_64_MASK
 0xFFFFFFFFFFFFFFFFu

	)

332 
	#DEF_INT_64U_MIN_VAL
 0u

	)

333 
	#DEF_INT_64U_MAX_VAL
 18446744073709551615u

	)

335 
	#DEF_INT_64S_MIN_VAL_ONES_CPL
 (-9223372036854775807)

	)

336 
	#DEF_INT_64S_MAX_VAL_ONES_CPL
 9223372036854775807

	)

338 
	#DEF_INT_64S_MIN_VAL
 (
DEF_INT_64S_MIN_VAL_ONES_CPL
 - 1)

	)

339 
	#DEF_INT_64S_MAX_VAL
 
DEF_INT_64S_MAX_VAL_ONES_CPL


	)

341 
	#DEF_INT_64U_NBR_DIG_MIN
 1u

	)

342 
	#DEF_INT_64U_NBR_DIG_MAX
 20u

	)

344 
	#DEF_INT_64S_NBR_DIG_MIN
 19u

	)

345 
	#DEF_INT_64S_NBR_DIG_MAX
 19u

	)

349 
	#DEF_INT_CPU_NBR_BITS
 (
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
)

	)

350 
	#DEF_INT_CPU_NBR_BITS_MAX
 (
CPU_CFG_DATA_SIZE_MAX
 * 
DEF_OCTET_NBR_BITS
)

	)

354 #i‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_08_NBR_BITS
)

357 
	#DEF_INT_CPU_MASK
 
DEF_INT_08_MASK


	)

359 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_08U_MIN_VAL


	)

360 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_08U_MAX_VAL


	)

362 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_08S_MIN_VAL


	)

363 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_08S_MAX_VAL


	)

365 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_08S_MIN_VAL_ONES_CPL


	)

366 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_08S_MAX_VAL_ONES_CPL


	)

370 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_16_NBR_BITS
)

373 
	#DEF_INT_CPU_MASK
 
DEF_INT_16_MASK


	)

375 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_16U_MIN_VAL


	)

376 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_16U_MAX_VAL


	)

378 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_16S_MIN_VAL


	)

379 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_16S_MAX_VAL


	)

381 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_16S_MIN_VAL_ONES_CPL


	)

382 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_16S_MAX_VAL_ONES_CPL


	)

386 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_32_NBR_BITS
)

389 
	#DEF_INT_CPU_MASK
 
DEF_INT_32_MASK


	)

391 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_32U_MIN_VAL


	)

392 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_32U_MAX_VAL


	)

394 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_32S_MIN_VAL


	)

395 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_32S_MAX_VAL


	)

397 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_32S_MIN_VAL_ONES_CPL


	)

398 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_32S_MAX_VAL_ONES_CPL


	)

402 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_64_NBR_BITS
)

405 
	#DEF_INT_CPU_MASK
 
DEF_INT_64_MASK


	)

407 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_64U_MIN_VAL


	)

408 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_64U_MAX_VAL


	)

410 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_64S_MIN_VAL


	)

411 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_64S_MAX_VAL


	)

413 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_64S_MIN_VAL_ONES_CPL


	)

414 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_64S_MAX_VAL_ONES_CPL


	)

427 
	#DEF_TIME_NBR_DAY_PER_WK
 7u

	)

428 
	#DEF_TIME_NBR_DAY_PER_YR
 365u

	)

429 
	#DEF_TIME_NBR_DAY_PER_YR_LEAP
 366u

	)

431 
	#DEF_TIME_NBR_HR_PER_DAY
 24u

	)

432 
	#DEF_TIME_NBR_HR_PER_WK
 (
DEF_TIME_NBR_HR_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_WK
 )

	)

433 
	#DEF_TIME_NBR_HR_PER_YR
 (
DEF_TIME_NBR_HR_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR
 )

	)

434 
	#DEF_TIME_NBR_HR_PER_YR_LEAP
 (
DEF_TIME_NBR_HR_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR_LEAP
)

	)

436 
	#DEF_TIME_NBR_MIN_PER_HR
 60u

	)

437 
	#DEF_TIME_NBR_MIN_PER_DAY
 (
DEF_TIME_NBR_MIN_PER_HR
 * 
DEF_TIME_NBR_HR_PER_DAY
 )

	)

438 
	#DEF_TIME_NBR_MIN_PER_WK
 (
DEF_TIME_NBR_MIN_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_WK
 )

	)

439 
	#DEF_TIME_NBR_MIN_PER_YR
 (
DEF_TIME_NBR_MIN_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR
 )

	)

440 
	#DEF_TIME_NBR_MIN_PER_YR_LEAP
 (
DEF_TIME_NBR_MIN_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR_LEAP
)

	)

442 
	#DEF_TIME_NBR_SEC_PER_MIN
 60u

	)

443 
	#DEF_TIME_NBR_SEC_PER_HR
 (
DEF_TIME_NBR_SEC_PER_MIN
 * 
DEF_TIME_NBR_MIN_PER_HR
 )

	)

444 
	#DEF_TIME_NBR_SEC_PER_DAY
 (
DEF_TIME_NBR_SEC_PER_HR
 * 
DEF_TIME_NBR_HR_PER_DAY
 )

	)

445 
	#DEF_TIME_NBR_SEC_PER_WK
 (
DEF_TIME_NBR_SEC_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_WK
 )

	)

446 
	#DEF_TIME_NBR_SEC_PER_YR
 (
DEF_TIME_NBR_SEC_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR
 )

	)

447 
	#DEF_TIME_NBR_SEC_PER_YR_LEAP
 (
DEF_TIME_NBR_SEC_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR_LEAP
)

	)

449 
	#DEF_TIME_NBR_mS_PER_SEC
 1000u

	)

450 
	#DEF_TIME_NBR_uS_PER_SEC
 1000000u

	)

451 
	#DEF_TIME_NBR_nS_PER_SEC
 1000000000u

	)

462 
	elib_îr
 {

464 
	mLIB_ERR_NONE
 = 0u,

466 
	mLIB_MEM_ERR_NONE
 = 10000u,

467 
	mLIB_MEM_ERR_NULL_PTR
 = 10001u,

469 
	mLIB_MEM_ERR_INVALID_MEM_SIZE
 = 10100u,

470 
	mLIB_MEM_ERR_INVALID_MEM_ALIGN
 = 10101u,

471 
	mLIB_MEM_ERR_INVALID_SEG_SIZE
 = 10110u,

472 
	mLIB_MEM_ERR_INVALID_SEG_OVERLAP
 = 10111u,

473 
	mLIB_MEM_ERR_INVALID_POOL
 = 10120u,

474 
	mLIB_MEM_ERR_INVALID_BLK_NBR
 = 10130u,

475 
	mLIB_MEM_ERR_INVALID_BLK_SIZE
 = 10131u,

476 
	mLIB_MEM_ERR_INVALID_BLK_ALIGN
 = 10132u,

477 
	mLIB_MEM_ERR_INVALID_BLK_IX
 = 10133u,

478 
	mLIB_MEM_ERR_INVALID_BLK_ADDR
 = 10135u,

479 
	mLIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL
 = 10136u,

481 
	mLIB_MEM_ERR_SEG_EMPTY
 = 10200u,

482 
	mLIB_MEM_ERR_SEG_OVF
 = 10201u,

483 
	mLIB_MEM_ERR_POOL_FULL
 = 10205u,

484 
	mLIB_MEM_ERR_POOL_EMPTY
 = 10206u,

486 
	mLIB_MEM_ERR_HEAP_EMPTY
 = 10210u,

487 
	mLIB_MEM_ERR_HEAP_OVF
 = 10211u,

488 
	mLIB_MEM_ERR_HEAP_NOT_FOUND
 = 10215u

490 } 
	tLIB_ERR
;

514 #i‚de‡ 
TRACE_LEVEL_OFF


515 
	#TRACE_LEVEL_OFF
 0u

	)

518 #i‚de‡ 
TRACE_LEVEL_INFO


519 
	#TRACE_LEVEL_INFO
 1u

	)

522 #i‚de‡ 
TRACE_LEVEL_DBG


523 
	#TRACE_LEVEL_DBG
 2u

	)

526 #i‚de‡ 
TRACE_LEVEL_LOG


527 
	#TRACE_LEVEL_LOG
 3u

	)

556 
	#DEF_BIT
(
bô
Ë(1u << (bô))

	)

584 
	#DEF_BIT08
(
bô
Ë((
CPU_INT08U
)((CPU_INT08U)1u << (bô)))

	)

586 
	#DEF_BIT16
(
bô
Ë((
CPU_INT16U
)((CPU_INT16U)1u << (bô)))

	)

588 
	#DEF_BIT32
(
bô
Ë((
CPU_INT32U
)((CPU_INT32U)1u << (bô)))

	)

590 
	#DEF_BIT64
(
bô
Ë((
CPU_INT64U
)((CPU_INT64U)1u << (bô)))

	)

616 
	#DEF_BIT_MASK
(
bô_mask
, 
bô_shi·
Ë((bô_maskË<< (bô_shi·))

	)

642 
	#DEF_BIT_MASK_08
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT08U
)((CPU_INT08U)(bô_maskË<< (bô_shi·)))

	)

644 
	#DEF_BIT_MASK_16
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT16U
)((CPU_INT16U)(bô_maskË<< (bô_shi·)))

	)

646 
	#DEF_BIT_MASK_32
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT32U
)((CPU_INT32U)(bô_maskË<< (bô_shi·)))

	)

648 
	#DEF_BIT_MASK_64
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT64U
)((CPU_INT64U)(bô_maskË<< (bô_shi·)))

	)

684 
	#DEF_BIT_FIELD
(
bô_fõld
, 
bô_shi·
Ë((((bô_fõldË>
DEF_INT_CPU_NBR_BITS
Ë? (
DEF_INT_CPU_U_MAX_VAL
) \

685 : (
	`DEF_BIT
(
bô_fõld
) - 1uL)) \

686 << (
bô_shi·
))

	)

713 
	#DEF_BIT_FIELD_08
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT08U
)((((CPU_INT08U)(bô_fõldË>(CPU_INT08U)
DEF_INT_08_NBR_BITS
Ë? (CPU_INT08U)(
DEF_INT_08U_MAX_VAL
) \

714 : (
CPU_INT08U
)(
	`DEF_BIT08
(
bô_fõld
) - (CPU_INT08U)1u)) \

715 << (
bô_shi·
)))

	)

717 
	#DEF_BIT_FIELD_16
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT16U
)((((CPU_INT16U)(bô_fõldË>(CPU_INT16U)
DEF_INT_16_NBR_BITS
Ë? (CPU_INT16U)(
DEF_INT_16U_MAX_VAL
) \

718 : (
CPU_INT16U
)(
	`DEF_BIT16
(
bô_fõld
) - (CPU_INT16U)1u)) \

719 << (
bô_shi·
)))

	)

721 
	#DEF_BIT_FIELD_32
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT32U
)((((CPU_INT32U)(bô_fõldË>(CPU_INT32U)
DEF_INT_32_NBR_BITS
Ë? (CPU_INT32U)(
DEF_INT_32U_MAX_VAL
) \

722 : (
CPU_INT32U
)(
	`DEF_BIT32
(
bô_fõld
) - (CPU_INT32U)1u)) \

723 << (
bô_shi·
)))

	)

725 
	#DEF_BIT_FIELD_64
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT64U
)((((CPU_INT64U)(bô_fõldË>(CPU_INT64U)
DEF_INT_64_NBR_BITS
Ë? (CPU_INT64U)(
DEF_INT_64U_MAX_VAL
) \

726 : (
CPU_INT64U
)(
	`DEF_BIT64
(
bô_fõld
) - (CPU_INT64U)1u)) \

727 << (
bô_shi·
)))

	)

748 
	#DEF_BIT_SET
(
vÆ
, 
mask
Ë((vÆË((vÆË| (mask)))

	)

771 
	#DEF_BIT_SET_08
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
(vÆ, mask)

	)

773 
	#DEF_BIT_SET_16
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
(vÆ, mask)

	)

775 
	#DEF_BIT_SET_32
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
(vÆ, mask)

	)

777 
	#DEF_BIT_SET_64
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
(vÆ, mask)

	)

798 
	#DEF_BIT_CLR
(
vÆ
, 
mask
Ë((vÆË((vÆË& ~(mask)))

	)

821 
	#DEF_BIT_CLR_08
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
(vÆ, mask)

	)

823 
	#DEF_BIT_CLR_16
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
(vÆ, mask)

	)

825 
	#DEF_BIT_CLR_32
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
(vÆ, mask)

	)

827 
	#DEF_BIT_CLR_64
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
(vÆ, mask)

	)

852 
	#DEF_BIT_IS_SET
(
vÆ
, 
mask
) ((((mask) != 0u) && \

853 (((
vÆ
Ë& (
mask
)Ë=(mask))Ë? (
DEF_YES
Ë: (
DEF_NO
 ))

	)

878 
	#DEF_BIT_IS_CLR
(
vÆ
, 
mask
) ((((mask) != 0u) && \

879 (((
vÆ
Ë& (
mask
)Ë=0u)Ë? (
DEF_YES
Ë: (
DEF_NO
 ))

	)

904 
	#DEF_BIT_IS_SET_ANY
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë=0uË? (
DEF_NO
 ) : (
DEF_YES
))

	)

927 
	#DEF_BIT_IS_CLR_ANY
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë=(mask)Ë? (
DEF_NO
 ) : (
DEF_YES
))

	)

980 
	#DEF_CHK_VAL_MIN
(
vÆ
, 
vÆ_mö
) (((!(((val) >= 1) && ((val_min) < 1))) && \

981 ((((
vÆ_mö
Ë>1Ë&& ((
vÆ
) < 1)) || \

982 ((
vÆ
Ë< (
vÆ_mö
)))Ë? 
DEF_FAIL
 : 
DEF_OK
)

	)

1029 
	#DEF_CHK_VAL_MAX
(
vÆ
, 
vÆ_max
) (((!(((val_max) >= 1) && ((val) < 1))) && \

1030 ((((
vÆ
Ë>1Ë&& ((
vÆ_max
) < 1)) || \

1031 ((
vÆ
Ë> (
vÆ_max
)))Ë? 
DEF_FAIL
 : 
DEF_OK
)

	)

1082 
	#DEF_CHK_VAL
(
vÆ
, 
vÆ_mö
, 
vÆ_max
Ë(((
	`DEF_CHK_VAL_MIN
(vÆ, vÆ_möË=
DEF_FAIL
) || \

1083 (
	`DEF_CHK_VAL_MAX
(
vÆ
, 
vÆ_max
Ë=
DEF_FAIL
)Ë? DEF_FAIL : 
DEF_OK
)

	)

1106 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_08
)

1108 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : 0)

	)

1111 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_16
)

1113 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1114 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : 0))

	)

1117 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_32
)

1119 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1120 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : \

1121 (((
obj
Ë=
CPU_WORD_SIZE_32
Ë? 
DEF_INT_32U_MAX_VAL
 : 0)))

	)

1124 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_64
)

1126 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1127 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : \

1128 (((
obj
Ë=
CPU_WORD_SIZE_32
Ë? 
DEF_INT_32U_MAX_VAL
 : \

1129 (((
obj
Ë=
CPU_WORD_SIZE_64
Ë? 
DEF_INT_64U_MAX_VAL
 : 0))))

	)

1169 
	#DEF_MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

1188 
	#DEF_MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

1207 
	#DEF_ABS
(
a
Ë((◊Ë< 0Ë? (-◊)Ë: (a))

	)

1231 #i‡ (
CPU_CORE_VERSION
 < 12900u)

	@UCOSIII/uC-LIB/lib_math.c

67 
	#MICRIUM_SOURCE


	)

68 
	#LIB_MATH_MODULE


	)

69 
	~<lib_m©h.h
>

106 
RAND_NBR
 
	gM©h_R™dSìdCur
;

144 
	$M©h_Inô
 ()

146 
	`M©h_R™dSëSìd
((
RAND_NBR
)
RAND_SEED_INIT_VAL
);

147 
	}
}

172 
	$M©h_R™dSëSìd
 (
RAND_NBR
 
£ed
)

174 
	`CPU_SR_ALLOC
();

177 
	`CPU_CRITICAL_ENTER
();

178 
M©h_R™dSìdCur
 = 
£ed
;

179 
	`CPU_CRITICAL_EXIT
();

180 
	}
}

212 
RAND_NBR
 
	$M©h_R™d
 ()

214 
RAND_NBR
 
£ed
;

215 
RAND_NBR
 
ønd_nbr
;

216 
	`CPU_SR_ALLOC
();

219 
	`CPU_CRITICAL_ENTER
();

220 
£ed
 = 
M©h_R™dSìdCur
;

221 
ønd_nbr
 = 
	`M©h_R™dSìd
(
£ed
);

222 
M©h_R™dSìdCur
 = 
ønd_nbr
;

223 
	`CPU_CRITICAL_EXIT
();

225  (
ønd_nbr
);

226 
	}
}

269 
RAND_NBR
 
	$M©h_R™dSìd
 (
RAND_NBR
 
£ed
)

271 
RAND_NBR
 
ønd_nbr
;

274 
ønd_nbr
 = (((
RAND_NBR
)
RAND_LCG_PARAM_A
 * 
£ed
Ë+ (RAND_NBR)
RAND_LCG_PARAM_B
Ë% ((RAND_NBR)
RAND_LCG_PARAM_M
 + 1u);

276  (
ønd_nbr
);

277 
	}
}

	@UCOSIII/uC-LIB/lib_math.h

70 #i‚de‡ 
LIB_MATH_MODULE_PRESENT


71 
	#LIB_MATH_MODULE_PRESENT


	)

106 
	~<˝u.h
>

107 
	~<˝u_c‹e.h
>

109 
	~<lib_def.h
>

118 #ifde‡ 
LIB_MATH_MODULE


119 
	#LIB_MATH_EXT


	)

121 
	#LIB_MATH_EXT
 

	)

165 
	#RAND_SEED_INIT_VAL
 1u

	)

167 
	#RAND_LCG_PARAM_M
 0x7FFFFFFFu

	)

168 
	#RAND_LCG_PARAM_A
 1103515245u

	)

169 
	#RAND_LCG_PARAM_B
 12345u

	)

184 
CPU_INT32U
 
	tRAND_NBR
;

200 
M©h_Inô
 ();

203 
M©h_R™dSëSìd
(
RAND_NBR
 
£ed
);

205 
RAND_NBR
 
M©h_R™d
 ();

207 
RAND_NBR
 
M©h_R™dSìd
 (RAND_NBR 
£ed
);

	@UCOSIII/uC-LIB/lib_mem.c

58 
	#MICRIUM_SOURCE


	)

59 
	#LIB_MEM_MODULE


	)

60 
	~<lib_mem.h
>

97 #i‡ (
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

98 
MEM_POOL
 *
	gMem_PoﬁTbl
;

99 
MEM_POOL
 
	gMem_PoﬁHóp
;

101 #i‚de‡ 
LIB_MEM_CFG_HEAP_BASE_ADDR


102 
CPU_INT08U
 
	gMem_Hóp
[
LIB_MEM_CFG_HEAP_SIZE
];

113 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

115 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

116 
CPU_BOOLEAN
 
Mem_PoﬁBlkIsVÆidAddr
(
MEM_POOL
 *
pmem_poﬁ
,

117 *
pmem_blk
);

121 
CPU_SIZE_T
 
Mem_SegCÆcTŸSize
 (*
pmem_addr
,

122 
MEM_POOL_BLK_QTY
 
blk_nbr
,

123 
CPU_SIZE_T
 
blk_size
,

124 
CPU_SIZE_T
 
blk_Æign
);

126 *
Mem_SegAŒoc
 (
MEM_POOL
 *
pmem_poﬁ
,

127 
CPU_SIZE_T
 
size
,

128 
CPU_SIZE_T
 
Æign
);

163 
	$Mem_Inô
 ()

165 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

166 
MEM_POOL
 *
pmem_poﬁ
;

169 
pmem_poﬁ
 = (
MEM_POOL
 *)&
Mem_PoﬁHóp
;

170 
pmem_poﬁ
->
Ty≥
 = (
LIB_MEM_TYPE
Ë
LIB_MEM_TYPE_HEAP
;

171 
pmem_poﬁ
->
SegHódPå
 = (
MEM_POOL
 *)&
Mem_PoﬁHóp
;

172 
pmem_poﬁ
->
SegPªvPå
 = (
MEM_POOL
 *) 0;

173 
pmem_poﬁ
->
SegNextPå
 = (
MEM_POOL
 *) 0;

174 
pmem_poﬁ
->
PoﬁPªvPå
 = (
MEM_POOL
 *) 0;

175 
pmem_poﬁ
->
PoﬁNextPå
 = (
MEM_POOL
 *) 0;

176 
pmem_poﬁ
->
PoﬁAddrSèπ
 = (*) 0;

177 
pmem_poﬁ
->
PoﬁAddrEnd
 = (*) 0;

178 
pmem_poﬁ
->
PoﬁPås
 = (**) 0;

179 
pmem_poﬁ
->
BlkSize
 = (
CPU_SIZE_T
 ) 0u;

180 
pmem_poﬁ
->
BlkNbr
 = (
CPU_SIZE_T
 ) 0u;

181 
pmem_poﬁ
->
BlkIx
 = (
MEM_POOL_IX
 ) 0u;

183 #ifde‡ 
LIB_MEM_CFG_HEAP_BASE_ADDR


184 
pmem_poﬁ
->
SegAddr
 = (*Ë
LIB_MEM_CFG_HEAP_BASE_ADDR
;

185 
pmem_poﬁ
->
SegAddrNextAvaû
 = (*Ë
LIB_MEM_CFG_HEAP_BASE_ADDR
;

187 
pmem_poﬁ
->
SegAddr
 = (*)&
Mem_Hóp
[0];

188 
pmem_poﬁ
->
SegAddrNextAvaû
 = (*)&
Mem_Hóp
[0];

191 
pmem_poﬁ
->
SegSizeTŸ
 = (
CPU_SIZE_T
 ) 
LIB_MEM_CFG_HEAP_SIZE
;

192 
pmem_poﬁ
->
SegSizeRem
 = (
CPU_SIZE_T
 ) 
LIB_MEM_CFG_HEAP_SIZE
;

195 
Mem_PoﬁTbl
 = &
Mem_PoﬁHóp
;

197 
	}
}

222 
	$Mem_CÃ
 (*
pmem
,

223 
CPU_SIZE_T
 
size
)

225 
	`Mem_Së
(
pmem
,

227 
size
);

228 
	}
}

265 
	$Mem_Së
 (*
pmem
,

266 
CPU_INT08U
 
d©a_vÆ
,

267 
CPU_SIZE_T
 
size
)

269 
CPU_SIZE_T
 
size_ªm
;

270 
CPU_ALIGN
 
d©a_Æign
;

271 
CPU_ALIGN
 *
pmem_Æign
;

272 
CPU_INT08U
 *
pmem_08
;

273 
CPU_DATA
 
mem_Æign_mod
;

274 
CPU_DATA
 
i
;

277 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

278 i‡(
size
 < 1) {

281 i‡(
pmem
 == (*)0) {

287 
d©a_Æign
 = 0u;

288 
i
 = 0u; i < (
CPU_ALIGN
); i++) {

289 
d©a_Æign
 <<
DEF_OCTET_NBR_BITS
;

290 
d©a_Æign
 |(
CPU_ALIGN
)
d©a_vÆ
;

293 
size_ªm
 = 
size
;

294 
mem_Æign_mod
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem
 % (
CPU_ALIGN
));

296 
pmem_08
 = (
CPU_INT08U
 *)
pmem
;

297 i‡(
mem_Æign_mod
 != 0u) {

298 
i
 = 
mem_Æign_mod
;

299 (
size_ªm
 > 0) &&

300 (
i
 < (
CPU_ALIGN
 ))) {

301 *
pmem_08
++ = 
d©a_vÆ
;

302 
size_ªm
 -(
CPU_INT08U
);

303 
i
++;

307 
pmem_Æign
 = (
CPU_ALIGN
 *)
pmem_08
;

308 
size_ªm
 >(
CPU_ALIGN
)) {

309 *
pmem_Æign
++ = 
d©a_Æign
;

310 
size_ªm
 -(
CPU_ALIGN
);

313 
pmem_08
 = (
CPU_INT08U
 *)
pmem_Æign
;

314 
size_ªm
 > 0) {

315 *
pmem_08
++ = 
d©a_vÆ
;

316 
size_ªm
 -(
CPU_INT08U
);

318 
	}
}

374 #i‡(
LIB_MEM_CFG_OPTIMIZE_ASM_EN
 !
DEF_ENABLED
)

375 
	$Mem_C›y
 ( *
pde°
,

376 c⁄° *
p§c
,

377 
CPU_SIZE_T
 
size
)

379 
CPU_SIZE_T
 
size_ªm
;

380 
CPU_SIZE_T
 
mem_g≠_o˘ës
;

381 
CPU_ALIGN
 *
pmem_Æign_de°
;

382 c⁄° 
CPU_ALIGN
 *
pmem_Æign_§c
;

383 
CPU_INT08U
 *
pmem_08_de°
;

384 c⁄° 
CPU_INT08U
 *
pmem_08_§c
;

385 
CPU_DATA
 
i
;

386 
CPU_DATA
 
mem_Æign_mod_de°
;

387 
CPU_DATA
 
mem_Æign_mod_§c
;

388 
CPU_BOOLEAN
 
mem_Æig√d
;

391 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

392 i‡(
size
 < 1) {

395 i‡(
pde°
 == (*)0) {

398 i‡(
p§c
 == (*)0) {

404 
size_ªm
 = 
size
;

406 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pde°
;

407 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
p§c
;

409 
mem_g≠_o˘ës
 = 
pmem_08_§c
 - 
pmem_08_de°
;

412 i‡(
mem_g≠_o˘ës
 >(
CPU_ALIGN
)) {

414 
mem_Æign_mod_de°
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_de°
 % (
CPU_ALIGN
));

415 
mem_Æign_mod_§c
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_§c
 % (
CPU_ALIGN
));

417 
mem_Æig√d
 = (
mem_Æign_mod_de°
 =
mem_Æign_mod_§c
Ë? 
DEF_YES
 : 
DEF_NO
;

419 i‡(
mem_Æig√d
 =
DEF_YES
) {

421 i‡(
mem_Æign_mod_de°
 != 0u) {

422 
i
 = 
mem_Æign_mod_de°
;

423 (
size_ªm
 > 0) &&

424 (
i
 < (
CPU_ALIGN
 ))) {

425 *
pmem_08_de°
++ = *
pmem_08_§c
++;

426 
size_ªm
 -(
CPU_INT08U
);

427 
i
++;

431 
pmem_Æign_de°
 = ( 
CPU_ALIGN
 *)
pmem_08_de°
;

432 
pmem_Æign_§c
 = (c⁄° 
CPU_ALIGN
 *)
pmem_08_§c
;

433 
size_ªm
 >(
CPU_ALIGN
)) {

434 *
pmem_Æign_de°
++ = *
pmem_Æign_§c
++;

435 
size_ªm
 -(
CPU_ALIGN
);

438 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pmem_Æign_de°
;

439 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
pmem_Æign_§c
;

443 
size_ªm
 > 0) {

444 *
pmem_08_de°
++ = *
pmem_08_§c
++;

445 
size_ªm
 -(
CPU_INT08U
);

447 
	}
}

488 
	$Mem_Move
 ( *
pde°
,

489 c⁄° *
p§c
,

490 
CPU_SIZE_T
 
size
)

492 
CPU_SIZE_T
 
size_ªm
;

493 
CPU_SIZE_T
 
mem_g≠_o˘ës
;

494 
CPU_ALIGN
 *
pmem_Æign_de°
;

495 c⁄° 
CPU_ALIGN
 *
pmem_Æign_§c
;

496 
CPU_INT08U
 *
pmem_08_de°
;

497 c⁄° 
CPU_INT08U
 *
pmem_08_§c
;

498 
CPU_INT08S
 
i
;

499 
CPU_DATA
 
mem_Æign_mod_de°
;

500 
CPU_DATA
 
mem_Æign_mod_§c
;

501 
CPU_BOOLEAN
 
mem_Æig√d
;

504 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

505 i‡(
size
 < 1) {

508 i‡(
pde°
 == (*)0) {

511 i‡(
p§c
 == (*)0) {

516 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
p§c
;

517 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pde°
;

518 i‡(
pmem_08_§c
 > 
pmem_08_de°
) {

519 
	`Mem_C›y
(
pde°
, 
p§c
, 
size
);

523 
size_ªm
 = 
size
;

525 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pde°
 + 
size
 - 1;

526 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
p§c
 + 
size
 - 1;

528 
mem_g≠_o˘ës
 = 
pmem_08_de°
 - 
pmem_08_§c
;

531 i‡(
mem_g≠_o˘ës
 >(
CPU_ALIGN
)) {

534 
mem_Æign_mod_de°
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_de°
 % (
CPU_ALIGN
));

535 
mem_Æign_mod_§c
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_§c
 % (
CPU_ALIGN
));

537 
mem_Æig√d
 = (
mem_Æign_mod_de°
 =
mem_Æign_mod_§c
Ë? 
DEF_YES
 : 
DEF_NO
;

539 i‡(
mem_Æig√d
 =
DEF_YES
) {

541 i‡(
mem_Æign_mod_de°
 !((
CPU_ALIGN
) - 1)) {

542 
i
 = 
mem_Æign_mod_de°
;

543 (
size_ªm
 > 0) &&

544 (
i
 >= 0)) {

545 *
pmem_08_de°
-- = *
pmem_08_§c
--;

546 
size_ªm
 -(
CPU_INT08U
);

547 
i
--;

552 
pmem_Æign_de°
 = ( 
CPU_ALIGN
 *)((
CPU_INT08U
 *)
pmem_08_de°
 - (CPU_ALIGN) + 1);

553 
pmem_Æign_§c
 = (c⁄° 
CPU_ALIGN
 *)((
CPU_INT08U
 *)
pmem_08_§c
 - (CPU_ALIGN) + 1);

554 
size_ªm
 >(
CPU_ALIGN
)) {

555 *
pmem_Æign_de°
-- = *
pmem_Æign_§c
--;

556 
size_ªm
 -(
CPU_ALIGN
);

559 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pmem_Æign_de°
 + (
CPU_ALIGN
) - 1;

560 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
pmem_Æign_§c
 + (
CPU_ALIGN
) - 1;

565 
size_ªm
 > 0) {

566 *
pmem_08_de°
-- = *
pmem_08_§c
--;

567 
size_ªm
 -(
CPU_INT08U
);

569 
	}
}

614 
CPU_BOOLEAN
 
	$Mem_Cmp
 (c⁄° *
p1_mem
,

615 c⁄° *
p2_mem
,

616 
CPU_SIZE_T
 
size
)

618 
CPU_SIZE_T
 
size_ªm
;

619 
CPU_ALIGN
 *
p1_mem_Æign
;

620 
CPU_ALIGN
 *
p2_mem_Æign
;

621 c⁄° 
CPU_INT08U
 *
p1_mem_08
;

622 c⁄° 
CPU_INT08U
 *
p2_mem_08
;

623 
CPU_DATA
 
i
;

624 
CPU_DATA
 
mem_Æign_mod_1
;

625 
CPU_DATA
 
mem_Æign_mod_2
;

626 
CPU_BOOLEAN
 
mem_Æig√d
;

627 
CPU_BOOLEAN
 
mem_cmp
;

630 i‡(
size
 < 1) {

631  (
DEF_YES
);

633 i‡(
p1_mem
 == (*)0) {

634  (
DEF_NO
);

636 i‡(
p2_mem
 == (*)0) {

637  (
DEF_NO
);

641 
mem_cmp
 = 
DEF_YES
;

642 
size_ªm
 = 
size
;

644 
p1_mem_08
 = (c⁄° 
CPU_INT08U
 *)
p1_mem
 + 
size
;

645 
p2_mem_08
 = (c⁄° 
CPU_INT08U
 *)
p2_mem
 + 
size
;

647 
mem_Æign_mod_1
 = (
CPU_INT08U
)((
CPU_ADDR
)
p1_mem_08
 % (
CPU_ALIGN
));

648 
mem_Æign_mod_2
 = (
CPU_INT08U
)((
CPU_ADDR
)
p2_mem_08
 % (
CPU_ALIGN
));

650 
mem_Æig√d
 = (
mem_Æign_mod_1
 =
mem_Æign_mod_2
Ë? 
DEF_YES
 : 
DEF_NO
;

652 i‡(
mem_Æig√d
 =
DEF_YES
) {

654 i‡(
mem_Æign_mod_1
 != 0u) {

655 
i
 = 
mem_Æign_mod_1
;

656 (
mem_cmp
 =
DEF_YES
) &&

657 (
size_ªm
 > 0) &&

658 (
i
 > 0)) {

659 
p1_mem_08
--;

660 
p2_mem_08
--;

661 i‡(*
p1_mem_08
 !*
p2_mem_08
) {

662 
mem_cmp
 = 
DEF_NO
;

664 
size_ªm
 -(
CPU_INT08U
);

665 
i
--;

669 i‡(
mem_cmp
 =
DEF_YES
) {

670 
p1_mem_Æign
 = (
CPU_ALIGN
 *)
p1_mem_08
;

671 
p2_mem_Æign
 = (
CPU_ALIGN
 *)
p2_mem_08
;

673 (
mem_cmp
 =
DEF_YES
) &&

674 (
size_ªm
 >(
CPU_ALIGN
))) {

675 
p1_mem_Æign
--;

676 
p2_mem_Æign
--;

677 i‡(*
p1_mem_Æign
 !*
p2_mem_Æign
) {

678 
mem_cmp
 = 
DEF_NO
;

680 
size_ªm
 -(
CPU_ALIGN
);

683 
p1_mem_08
 = (
CPU_INT08U
 *)
p1_mem_Æign
;

684 
p2_mem_08
 = (
CPU_INT08U
 *)
p2_mem_Æign
;

688 (
mem_cmp
 =
DEF_YES
) &&

689 (
size_ªm
 > 0)) {

690 
p1_mem_08
--;

691 
p2_mem_08
--;

692 i‡(*
p1_mem_08
 !*
p2_mem_08
) {

693 
mem_cmp
 = 
DEF_NO
;

695 
size_ªm
 -(
CPU_INT08U
);

698  (
mem_cmp
);

699 
	}
}

740 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

741 *
	$Mem_HópAŒoc
 (
CPU_SIZE_T
 
size
,

742 
CPU_SIZE_T
 
Æign
,

743 
CPU_SIZE_T
 *
po˘ës_ªqd
,

744 
LIB_ERR
 *
≥º
)

746 
MEM_POOL
 *
pmem_poﬁ_hóp
;

747 *
pmem_addr
;

748 *
pmem_blk
;

749 
CPU_SIZE_T
 
o˘ës_ªqd_unu£d
;

750 
CPU_SIZE_T
 
size_ªm
;

751 
CPU_SIZE_T
 
size_ªq
;

752 
	`CPU_SR_ALLOC
();

755 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

756 i‡(
≥º
 =(
LIB_ERR
 *)0) {

757 
	`CPU_SW_EXCEPTION
((*)0);

762 i‡(
po˘ës_ªqd
 =(
CPU_SIZE_T
 *) 0) {

763 
po˘ës_ªqd
 = (
CPU_SIZE_T
 *)&
o˘ës_ªqd_unu£d
;

764 ()&
o˘ës_ªqd_unu£d
;

766 *
po˘ës_ªqd
 = 0u;

769 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

770 i‡(
size
 < 1) {

771 *
≥º
 = 
LIB_MEM_ERR_INVALID_MEM_SIZE
;

775 i‡(
Æign
 < 1) {

776 *
≥º
 = 
LIB_MEM_ERR_INVALID_MEM_ALIGN
;

782 
pmem_poﬁ_hóp
 = &
Mem_PoﬁHóp
;

784 
	`CPU_CRITICAL_ENTER
();

786 
pmem_addr
 = 
pmem_poﬁ_hóp
->
SegAddrNextAvaû
;

787 
size_ªm
 = 
pmem_poﬁ_hóp
->
SegSizeRem
;

788 
size_ªq
 = 
	`Mem_SegCÆcTŸSize
(
pmem_addr
,

790 
size
,

791 
Æign
);

792 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

793 i‡(
size_ªq
 < 1) {

794 
	`CPU_CRITICAL_EXIT
();

795 *
po˘ës_ªqd
 = 
size
;

796 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

801 i‡(
size_ªq
 > 
size_ªm
) {

802 
	`CPU_CRITICAL_EXIT
();

803 *
po˘ës_ªqd
 = 
size_ªq
 - 
size_ªm
;

804 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

808 
pmem_blk
 = 
	`Mem_SegAŒoc
(
pmem_poﬁ_hóp
, 
size
, 
Æign
);

809 i‡(
pmem_blk
 == (*)0) {

810 
	`CPU_CRITICAL_EXIT
();

811 *
po˘ës_ªqd
 = 
size_ªq
;

812 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

816 
	`CPU_CRITICAL_EXIT
();

818 *
≥º
 = 
LIB_MEM_ERR_NONE
;

820  (
pmem_blk
);

821 
	}
}

852 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

853 
CPU_SIZE_T
 
	$Mem_HópGëSizeRem
 (
CPU_SIZE_T
 
Æign
,

854 
LIB_ERR
 *
≥º
)

856 
CPU_SIZE_T
 
size_ªm
;

859 
size_ªm
 = 
	`Mem_SegGëSizeRem
(&
Mem_PoﬁHóp
, 
Æign
, 
≥º
);

861  (
size_ªm
);

862 
	}
}

899 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

900 
CPU_SIZE_T
 
	$Mem_SegGëSizeRem
 (
MEM_POOL
 *
pmem_poﬁ
,

901 
CPU_SIZE_T
 
Æign
,

902 
LIB_ERR
 *
≥º
)

904 
MEM_POOL
 *
pmem_£g
;

905 
MEM_POOL
 *
pmem_£g_size
;

906 
CPU_SIZE_T
 
size_ªm
;

907 
CPU_SIZE_T
 
size_ªm_mod
;

908 
CPU_SIZE_T
 
£g_addr_mod
;

909 
CPU_ADDR
 
£g_addr
;

910 
	`CPU_SR_ALLOC
();

913 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

915 i‡(
≥º
 =(
LIB_ERR
 *)0) {

916 
	`CPU_SW_EXCEPTION
(0u);

919 i‡(
Æign
 < 1) {

920 *
≥º
 = 
LIB_MEM_ERR_INVALID_MEM_ALIGN
;

923 i‡(
Æign
 > 
DEF_ALIGN_MAX_NBR_OCTETS
) {

924 *
≥º
 = 
LIB_MEM_ERR_INVALID_MEM_ALIGN
;

928 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

929 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

934 
	`CPU_CRITICAL_ENTER
();

936 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

937 
pmem_poﬁ
->
Ty≥
) {

938 
LIB_MEM_TYPE_HEAP
:

939 
LIB_MEM_TYPE_POOL
:

943 
LIB_MEM_TYPE_NONE
:

945 
	`CPU_CRITICAL_EXIT
();

946 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

952 
pmem_£g
 = 
pmem_poﬁ
->
SegHódPå
;

953 
pmem_£g_size
 = (
pmem_£g
->
SegAddr
 != (*)0)

954 ? 
pmem_£g
 : &
Mem_PoﬁHóp
;

955 
size_ªm
 = 
pmem_£g_size
->
SegSizeRem
;

956 
£g_addr
 = (
CPU_ADDR
)
pmem_£g_size
->
SegAddrNextAvaû
;

958 
	`CPU_CRITICAL_EXIT
();

960 i‡(
Æign
 > 1) {

961 
£g_addr_mod
 = 
£g_addr
 % 
Æign
;

962 
size_ªm_mod
 = (
£g_addr_mod
 > 0uË? (
Æign
 - seg_addr_mod) : 0u;

963 
size_ªm
 -
size_ªm_mod
;

967 *
≥º
 = 
LIB_MEM_ERR_NONE
;

969  (
size_ªm
);

970 
	}
}

1003 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1004 
	$Mem_PoﬁCÃ
 (
MEM_POOL
 *
pmem_poﬁ
,

1005 
LIB_ERR
 *
≥º
)

1008 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1009 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1010 
	`CPU_SW_EXCEPTION
(;);

1015 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1016 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1021 
pmem_poﬁ
->
Ty≥
 = (
LIB_MEM_TYPE
)
LIB_MEM_TYPE_NONE
;

1022 
pmem_poﬁ
->
SegHódPå
 = (
MEM_POOL
 *)0;

1023 
pmem_poﬁ
->
SegPªvPå
 = (
MEM_POOL
 *)0;

1024 
pmem_poﬁ
->
SegNextPå
 = (
MEM_POOL
 *)0;

1025 
pmem_poﬁ
->
PoﬁPªvPå
 = (
MEM_POOL
 *)0;

1026 
pmem_poﬁ
->
PoﬁNextPå
 = (
MEM_POOL
 *)0;

1027 
pmem_poﬁ
->
PoﬁAddrSèπ
 = (*)0;

1028 
pmem_poﬁ
->
PoﬁAddrEnd
 = (*)0;

1029 
pmem_poﬁ
->
PoﬁPås
 = (**)0;

1030 
pmem_poﬁ
->
PoﬁSize
 = (
CPU_SIZE_T
 )0u;

1031 
pmem_poﬁ
->
BlkAlign
 = (
CPU_SIZE_T
 )0u;

1032 
pmem_poﬁ
->
BlkSize
 = (
CPU_SIZE_T
 )0u;

1033 
pmem_poﬁ
->
BlkNbr
 = (
CPU_SIZE_T
 )0u;

1034 
pmem_poﬁ
->
BlkIx
 = (
MEM_POOL_IX
 )0u;

1035 
pmem_poﬁ
->
SegAddr
 = (*)0;

1036 
pmem_poﬁ
->
SegAddrNextAvaû
 = (*)0;

1037 
pmem_poﬁ
->
SegSizeTŸ
 = (
CPU_SIZE_T
 )0u;

1038 
pmem_poﬁ
->
SegSizeRem
 = (
CPU_SIZE_T
 )0u;

1041 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1042 
	}
}

1197 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1198 
	$Mem_PoﬁCª©e
 (
MEM_POOL
 *
pmem_poﬁ
,

1199 *
pmem_ba£_addr
,

1200 
CPU_SIZE_T
 
mem_size
,

1201 
MEM_POOL_BLK_QTY
 
blk_nbr
,

1202 
CPU_SIZE_T
 
blk_size
,

1203 
CPU_SIZE_T
 
blk_Æign
,

1204 
CPU_SIZE_T
 *
po˘ës_ªqd
,

1205 
LIB_ERR
 *
≥º
)

1207 
MEM_POOL
 *
pmem_poﬁ_hóp
;

1208 
MEM_POOL
 *
pmem_poﬁ_√xt
;

1209 
MEM_POOL
 *
pmem_£g
;

1210 
MEM_POOL
 *
pmem_£g_¥ev
;

1211 
MEM_POOL
 *
pmem_£g_√xt
;

1212 **
µoﬁ_±r
;

1213 *
pmem_blk
;

1214 
CPU_INT08U
 *
pmem_addr_±rs
;

1215 
CPU_INT08U
 *
pmem_addr_poﬁ
;

1216 
CPU_INT08U
 *
pmem_ba£_addr_°¨t
;

1217 
CPU_INT08U
 *
pmem_ba£_addr_íd
;

1218 
CPU_INT08U
 *
pmem_£g_addr_°¨t
;

1219 
CPU_INT08U
 *
pmem_£g_addr_íd
;

1220 
MEM_POOL_BLK_QTY
 
blk_ªm
;

1221 
CPU_SIZE_T
 
o˘ës_ªqd_unu£d
;

1222 
CPU_SIZE_T
 
size_tŸ
;

1223 
CPU_SIZE_T
 
size_tŸ_±rs
;

1224 
CPU_SIZE_T
 
size_tŸ_poﬁ
;

1225 
CPU_SIZE_T
 
size_ªm
;

1226 
CPU_SIZE_T
 
size_poﬁ_±rs
;

1227 
CPU_SIZE_T
 
i
;

1228 
	`CPU_SR_ALLOC
();

1231 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1232 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1233 
	`CPU_SW_EXCEPTION
(;);

1238 i‡(
po˘ës_ªqd
 =(
CPU_SIZE_T
 *) 0) {

1239 
po˘ës_ªqd
 = (
CPU_SIZE_T
 *)&
o˘ës_ªqd_unu£d
;

1240 ()&
o˘ës_ªqd_unu£d
;

1242 *
po˘ës_ªqd
 = 0u;

1246 
	`Mem_PoﬁCÃ
(
pmem_poﬁ
, 
≥º
);

1247 i‡(*
≥º
 !
LIB_MEM_ERR_NONE
) {

1253 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1254 i‡(
pmem_ba£_addr
 != (*)0) {

1255 i‡(
mem_size
 < 1) {

1256 *
≥º
 = 
LIB_MEM_ERR_INVALID_SEG_SIZE
;

1261 i‡(
blk_nbr
 < 1) {

1262 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_NBR
;

1266 i‡(
blk_size
 < 1) {

1267 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

1271 i‡(
blk_Æign
 < 1) {

1272 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ALIGN
;

1279 i‡(
Mem_PoﬁTbl
 =(
MEM_POOL
 *)0) {

1280 *
≥º
 = 
LIB_MEM_ERR_HEAP_NOT_FOUND
;

1286 
pmem_poﬁ_hóp
 = (
MEM_POOL
 *)&
Mem_PoﬁHóp
;

1287 
size_tŸ
 = (
CPU_SIZE_T
) 0u;

1289 
	`CPU_CRITICAL_ENTER
();

1291 i‡(
pmem_ba£_addr
 == (*)0) {

1292 
pmem_£g
 = 
pmem_poﬁ_hóp
;

1293 
pmem_£g_¥ev
 = 
pmem_poﬁ_hóp
;

1294 
pmem_£g_√xt
 = 
pmem_poﬁ_hóp
;

1298 
pmem_addr_±rs
 = (
CPU_INT08U
 *)
pmem_poﬁ_hóp
->
SegAddrNextAvaû
;

1299 
size_tŸ_±rs
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_±rs
,

1300 (
CPU_SIZE_T
)
blk_nbr
,

1301 (
CPU_SIZE_T
)(*),

1302 (
CPU_SIZE_T
)(*));

1303 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1304 i‡(
size_tŸ_±rs
 < 1) {

1305 
	`CPU_CRITICAL_EXIT
();

1306 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

1311 
pmem_addr_poﬁ
 = 
pmem_addr_±rs
 + 
size_tŸ_±rs
;

1312 
size_tŸ_poﬁ
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_poﬁ
,

1313 (
CPU_SIZE_T
)
blk_nbr
,

1314 (
CPU_SIZE_T
)
blk_size
,

1315 (
CPU_SIZE_T
)
blk_Æign
);

1316 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1317 i‡(
size_tŸ_poﬁ
 < 1) {

1318 
	`CPU_CRITICAL_EXIT
();

1319 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

1324 
size_tŸ
 = 
size_tŸ_±rs
 + 
size_tŸ_poﬁ
;

1326 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1327 i‡((
size_tŸ
 < 
size_tŸ_±rs
) ||

1328 (
size_tŸ
 < 
size_tŸ_poﬁ
)) {

1329 
	`CPU_CRITICAL_EXIT
();

1330 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

1335 
size_ªm
 = 
pmem_poﬁ_hóp
->
SegSizeRem
;

1336 i‡(
size_tŸ
 > 
size_ªm
) {

1337 
	`CPU_CRITICAL_EXIT
();

1338 *
po˘ës_ªqd
 = 
size_tŸ
 - 
size_ªm
;

1339 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

1345 
pmem_ba£_addr_°¨t
 = (
CPU_INT08U
 *)
pmem_ba£_addr
;

1346 
pmem_ba£_addr_íd
 = (
CPU_INT08U
 *)
pmem_ba£_addr
 + 
mem_size
 - 1;

1348 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1349 i‡(
pmem_ba£_addr_íd
 < 
pmem_ba£_addr_°¨t
) {

1350 
	`CPU_CRITICAL_EXIT
();

1351 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR
;

1356 
pmem_£g
 = (
MEM_POOL
 *)0;

1357 
pmem_£g_¥ev
 = (
MEM_POOL
 *)0;

1358 
pmem_£g_√xt
 = 
Mem_PoﬁTbl
;

1360 
pmem_£g_√xt
 !(
MEM_POOL
 *)0) {

1362 i‡((
pmem_ba£_addr
 =
pmem_£g_√xt
->
SegAddr
) &&

1363 (
mem_size
 =
pmem_£g_√xt
->
SegSizeTŸ
)) {

1365 
pmem_£g
 = 
pmem_£g_√xt
;

1369 
pmem_£g_addr_°¨t
 = (
CPU_INT08U
 *)
pmem_£g_√xt
->
SegAddr
;

1370 
pmem_£g_addr_íd
 = (
CPU_INT08U
 *)
pmem_£g_√xt
->
SegAddr
 +Ömem_£g_√xt->
SegSizeTŸ
 - 1;

1373 i‡(
pmem_ba£_addr_íd
 < 
pmem_£g_addr_°¨t
) {

1377 } i‡(((
pmem_ba£_addr_°¨t
 <
pmem_£g_addr_°¨t
) &&

1378 (
pmem_ba£_addr_íd
 >
pmem_£g_addr_°¨t
)) ||

1379 ((
pmem_ba£_addr_°¨t
 >
pmem_£g_addr_°¨t
) &&

1380 (
pmem_ba£_addr_íd
 <
pmem_£g_addr_íd
 )) ||

1381 ((
pmem_ba£_addr_°¨t
 <
pmem_£g_addr_íd
 ) &&

1382 (
pmem_ba£_addr_íd
 >
pmem_£g_addr_íd
 ))) {

1383 
	`CPU_CRITICAL_EXIT
();

1384 *
≥º
 = 
LIB_MEM_ERR_INVALID_SEG_OVERLAP
;

1389 
pmem_£g_¥ev
 = 
pmem_£g_√xt
;

1390 
pmem_£g_√xt
 =Ömem_£g_√xt->
SegNextPå
;

1393 i‡(
pmem_£g
 =(
MEM_POOL
 *)0) {

1394 
pmem_£g
 = 
pmem_poﬁ
;

1395 
pmem_poﬁ
->
SegAddr
 = 
pmem_ba£_addr
;

1396 
pmem_poﬁ
->
SegAddrNextAvaû
 = 
pmem_ba£_addr
;

1397 
pmem_poﬁ
->
SegSizeTŸ
 = 
mem_size
;

1398 
pmem_poﬁ
->
SegSizeRem
 = 
mem_size
;

1403 
pmem_addr_±rs
 = (
CPU_INT08U
 *)
pmem_poﬁ_hóp
->
SegAddrNextAvaû
;

1404 
size_tŸ_±rs
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_±rs
,

1405 (
CPU_SIZE_T
)
blk_nbr
,

1406 (
CPU_SIZE_T
)(*),

1407 (
CPU_SIZE_T
)(*));

1408 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1409 i‡(
size_tŸ_±rs
 < 1) {

1410 
	`CPU_CRITICAL_EXIT
();

1411 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

1416 
size_ªm
 = 
pmem_poﬁ_hóp
->
SegSizeRem
;

1417 i‡(
size_tŸ_±rs
 > 
size_ªm
) {

1418 
	`CPU_CRITICAL_EXIT
();

1419 *
po˘ës_ªqd
 = 
size_tŸ_±rs
 - 
size_ªm
;

1420 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

1425 
pmem_addr_poﬁ
 = (
CPU_INT08U
 *)
pmem_£g
->
SegAddrNextAvaû
;

1426 
size_tŸ_poﬁ
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_poﬁ
,

1427 (
CPU_SIZE_T
)
blk_nbr
,

1428 (
CPU_SIZE_T
)
blk_size
,

1429 (
CPU_SIZE_T
)
blk_Æign
);

1430 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1431 i‡(
size_tŸ_poﬁ
 < 1) {

1432 
	`CPU_CRITICAL_EXIT
();

1433 *
≥º
 = 
LIB_MEM_ERR_SEG_OVF
;

1438 
size_ªm
 = 
pmem_£g
->
SegSizeRem
;

1439 i‡(
size_tŸ_poﬁ
 > 
size_ªm
) {

1440 
	`CPU_CRITICAL_EXIT
();

1441 *
po˘ës_ªqd
 = 
size_tŸ_poﬁ
 - 
size_ªm
;

1442 *
≥º
 = 
LIB_MEM_ERR_SEG_EMPTY
;

1449 
size_poﬁ_±rs
 = (
CPU_SIZE_T
)(
blk_nbr
 * (*));

1451 
µoﬁ_±r
 = (**)
	`Mem_SegAŒoc
((
MEM_POOL
 *)
pmem_poﬁ_hóp
,

1452 (
CPU_SIZE_T
)
size_poﬁ_±rs
,

1453 (
CPU_SIZE_T
)(*));

1454 i‡(
µoﬁ_±r
 == (**)0) {

1455 
size_ªm
 = 
pmem_poﬁ_hóp
->
SegSizeRem
;

1456 
	`CPU_CRITICAL_EXIT
();

1458 i‡(
pmem_ba£_addr
 == (*)0) {

1459 i‡(
size_tŸ
 > 
size_ªm
) {

1460 *
po˘ës_ªqd
 = 
size_tŸ
 - 
size_ªm
;

1462 *
po˘ës_ªqd
 = 
size_tŸ
;

1465 i‡(
size_poﬁ_±rs
 > 
size_ªm
) {

1466 *
po˘ës_ªqd
 = 
size_poﬁ_±rs
 - 
size_ªm
;

1468 *
po˘ës_ªqd
 = 
size_poﬁ_±rs
;

1471 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

1475 
i
 = 0u; i < (
CPU_SIZE_T
)
blk_nbr
; i++) {

1476 
pmem_blk
 = (*)
	`Mem_SegAŒoc
(
pmem_£g
, 
blk_size
, 
blk_Æign
);

1477 i‡(
pmem_blk
 == (*)0) {

1478 
pmem_addr_poﬁ
 = (
CPU_INT08U
 *)
pmem_£g
->
SegAddrNextAvaû
;

1479 
size_ªm
 = (
CPU_SIZE_T
 )
pmem_£g
->
SegSizeRem
;

1480 
	`CPU_CRITICAL_EXIT
();

1481 
blk_ªm
 = 
blk_nbr
 - (
MEM_POOL_BLK_QTY
)
i
;

1482 
size_tŸ
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_poﬁ
,

1483 (
MEM_POOL_BLK_QTY
)
blk_ªm
,

1484 (
CPU_SIZE_T
 )
blk_size
,

1485 (
CPU_SIZE_T
 )
blk_Æign
);

1487 i‡(
size_tŸ
 > 
size_ªm
) {

1488 *
po˘ës_ªqd
 = 
size_tŸ
 - 
size_ªm
;

1490 *
po˘ës_ªqd
 = 
size_tŸ
;

1492 *
≥º
 = 
LIB_MEM_ERR_SEG_EMPTY
;

1495 
µoﬁ_±r
[
i
] = 
pmem_blk
;

1500 i‡(
pmem_£g
 =
pmem_poﬁ
) {

1502 
pmem_poﬁ
->
SegPªvPå
 = 
pmem_£g_¥ev
;

1503 
pmem_poﬁ
->
SegNextPå
 = 
pmem_£g_√xt
;

1505 i‡(
pmem_£g_¥ev
 !(
MEM_POOL
 *)0) {

1506 
pmem_£g_¥ev
->
SegNextPå
 = 
pmem_poﬁ
;

1508 
Mem_PoﬁTbl
 = 
pmem_poﬁ
;

1511 i‡(
pmem_£g_√xt
 !(
MEM_POOL
 *)0) {

1512 
pmem_£g_√xt
->
SegPªvPå
 = 
pmem_poﬁ
;

1517 
pmem_poﬁ_√xt
 = 
pmem_£g
->
PoﬁNextPå
;

1518 
pmem_poﬁ
->
PoﬁPªvPå
 = 
pmem_£g
;

1519 
pmem_poﬁ
->
PoﬁNextPå
 = 
pmem_poﬁ_√xt
;

1521 
pmem_£g
->
PoﬁNextPå
 = 
pmem_poﬁ
;

1523 i‡(
pmem_poﬁ_√xt
 !(
MEM_POOL
 *)0) {

1524 
pmem_poﬁ_√xt
->
PoﬁPªvPå
 = 
pmem_poﬁ
;

1531 
pmem_poﬁ
->
Ty≥
 = (
LIB_MEM_TYPE
 ) 
LIB_MEM_TYPE_POOL
;

1532 
pmem_poﬁ
->
SegHódPå
 = (
MEM_POOL
 *Ë
pmem_£g
;

1533 
pmem_poﬁ
->
PoﬁAddrSèπ
 = (*Ë
pmem_addr_poﬁ
;

1534 
pmem_poﬁ
->
PoﬁAddrEnd
 = (*)(
pmem_addr_poﬁ
 + 
size_tŸ_poﬁ
 - 1);

1535 
pmem_poﬁ
->
PoﬁPås
 = (**Ë
µoﬁ_±r
;

1536 
pmem_poﬁ
->
PoﬁSize
 = (
CPU_SIZE_T
 ) 
size_tŸ_poﬁ
;

1537 
pmem_poﬁ
->
BlkAlign
 = (
CPU_SIZE_T
 ) 
blk_Æign
;

1538 
pmem_poﬁ
->
BlkSize
 = (
CPU_SIZE_T
 ) 
blk_size
;

1539 
pmem_poﬁ
->
BlkNbr
 = (
MEM_POOL_BLK_QTY
Ë
blk_nbr
;

1540 
pmem_poﬁ
->
BlkIx
 = (
MEM_POOL_IX
 ) 
blk_nbr
;

1543 
	`CPU_CRITICAL_EXIT
();

1545 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1546 
	}
}

1578 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1579 
MEM_POOL_BLK_QTY
 
	$Mem_PoﬁBlkGëNbrAvaû
 (
MEM_POOL
 *
pmem_poﬁ
,

1580 
LIB_ERR
 *
≥º
)

1582 
MEM_POOL_BLK_QTY
 
nbr_blk_ªm
;

1583 
	`CPU_SR_ALLOC
();

1586 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1588 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1589 
	`CPU_SW_EXCEPTION
(0u);

1592 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1593 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1598 
	`CPU_CRITICAL_ENTER
();

1600 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1601 
pmem_poﬁ
->
Ty≥
) {

1602 
LIB_MEM_TYPE_POOL
:

1606 
LIB_MEM_TYPE_NONE
:

1607 
LIB_MEM_TYPE_HEAP
:

1609 
	`CPU_CRITICAL_EXIT
();

1610 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1616 
nbr_blk_ªm
 = 
pmem_poﬁ
->
BlkIx
;

1618 
	`CPU_CRITICAL_EXIT
();

1621 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1623  (
nbr_blk_ªm
);

1624 
	}
}

1658 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1659 *
	$Mem_PoﬁBlkGë
 (
MEM_POOL
 *
pmem_poﬁ
,

1660 
CPU_SIZE_T
 
size
,

1661 
LIB_ERR
 *
≥º
)

1663 *
pmem_blk
;

1664 
	`CPU_SR_ALLOC
();

1667 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1668 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1669 
	`CPU_SW_EXCEPTION
((*)0);

1674 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1675 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1676 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1680 i‡(
size
 < 1) {

1681 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

1686 
	`CPU_CRITICAL_ENTER
();

1688 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1689 i‡(
pmem_poﬁ
->
Ty≥
 !
LIB_MEM_TYPE_POOL
) {

1690 
	`CPU_CRITICAL_EXIT
();

1691 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1695 i‡(
size
 > 
pmem_poﬁ
->
BlkSize
) {

1696 
	`CPU_CRITICAL_EXIT
();

1697 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

1702 ()&
size
;

1704 i‡(
pmem_poﬁ
->
BlkIx
 < 1) {

1705 
	`CPU_CRITICAL_EXIT
();

1706 *
≥º
 = 
LIB_MEM_ERR_POOL_EMPTY
;

1710 i‡(
pmem_poﬁ
->
BlkIx
 >Ömem_poﬁ->
BlkNbr
) {

1711 
	`CPU_CRITICAL_EXIT
();

1712 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_IX
;

1717 
pmem_poﬁ
->
BlkIx
--;

1718 
pmem_blk
 = 
pmem_poﬁ
->
PoﬁPås
[pmem_poﬁ->
BlkIx
];

1720 
	`CPU_CRITICAL_EXIT
();

1722 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1724  (
pmem_blk
);

1725 
	}
}

1762 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1763 *
	$Mem_PoﬁBlkGëU£dAtIx
 (
MEM_POOL
 *
pmem_poﬁ
,

1764 
MEM_POOL_IX
 
u£d_ix
,

1765 
LIB_ERR
 *
≥º
)

1767 
MEM_POOL_IX
 
blk_ix
;

1768 *
pmem_blk
;

1769 
	`CPU_SR_ALLOC
();

1772 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1773 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1774 
	`CPU_SW_EXCEPTION
((*)0);

1779 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1780 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1781 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1786 
	`CPU_CRITICAL_ENTER
();

1788 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1789 i‡(
pmem_poﬁ
->
Ty≥
 !
LIB_MEM_TYPE_POOL
) {

1790 
	`CPU_CRITICAL_EXIT
();

1791 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1795 i‡(
pmem_poﬁ
->
BlkIx
 >pmem_poﬁ->
BlkNbr
) {

1796 
	`CPU_CRITICAL_EXIT
();

1797 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_IX
;

1802 
blk_ix
 = 
pmem_poﬁ
->
BlkNbr
 - 
u£d_ix
 - 1u;

1804 i‡(
blk_ix
 >
pmem_poﬁ
->
BlkNbr
) {

1805 
	`CPU_CRITICAL_EXIT
();

1806 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_IX
;

1810 i‡(
blk_ix
 < 
pmem_poﬁ
->
BlkIx
) {

1811 
	`CPU_CRITICAL_EXIT
();

1812 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_IX
;

1816 
pmem_blk
 = 
pmem_poﬁ
->
PoﬁPås
[
blk_ix
];

1818 
	`CPU_CRITICAL_EXIT
();

1820 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1822  (
pmem_blk
);

1823 
	}
}

1858 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1859 
	$Mem_PoﬁBlkFªe
 (
MEM_POOL
 *
pmem_poﬁ
,

1860 *
pmem_blk
,

1861 
LIB_ERR
 *
≥º
)

1863 *
p_addr
;

1864 
CPU_BOOLEAN
 
addr_vÆid
;

1865 
MEM_POOL_IX
 
i
;

1866 
	`CPU_SR_ALLOC
();

1869 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1870 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1871 
	`CPU_SW_EXCEPTION
(;);

1876 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1877 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1878 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1882 i‡(
pmem_blk
 == (*)0) {

1883 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1888 
	`CPU_CRITICAL_ENTER
();

1890 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1891 i‡(
pmem_poﬁ
->
Ty≥
 !
LIB_MEM_TYPE_POOL
) {

1892 
	`CPU_CRITICAL_EXIT
();

1893 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1897 
addr_vÆid
 = 
	`Mem_PoﬁBlkIsVÆidAddr
(
pmem_poﬁ
, 
pmem_blk
);

1898 i‡(
addr_vÆid
 !
DEF_OK
) {

1899 
	`CPU_CRITICAL_EXIT
();

1900 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR
;

1904 
i
 = 0u; i < 
pmem_poﬁ
->
BlkIx
; i++) {

1905 i‡(
pmem_blk
 =
pmem_poﬁ
->
PoﬁPås
[
i
]) {

1906 
	`CPU_CRITICAL_EXIT
();

1907 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL
;

1913 i‡(
pmem_poﬁ
->
BlkIx
 >pmem_poﬁ->
BlkNbr
) {

1914 
	`CPU_CRITICAL_EXIT
();

1915 *
≥º
 = 
LIB_MEM_ERR_POOL_FULL
;

1920 
addr_vÆid
 = 
DEF_NO
;

1921 
i
 = 
pmem_poﬁ
->
BlkIx
; i <Ömem_poﬁ->
BlkNbr
; i++) {

1922 
p_addr
 = 
pmem_poﬁ
->
PoﬁPås
[
i
];

1923 i‡(
p_addr
 =
pmem_blk
) {

1924 
addr_vÆid
 = 
DEF_YES
;

1929 i‡(
addr_vÆid
 =
DEF_YES
) {

1930 
pmem_poﬁ
->
PoﬁPås
[
i
] =Ömem_poﬁ->PoﬁPås[pmem_poﬁ->
BlkIx
];

1932 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1933 
	`CPU_CRITICAL_EXIT
();

1934 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1940 
pmem_poﬁ
->
PoﬁPås
[pmem_poﬁ->
BlkIx
] = 
pmem_blk
;

1941 
pmem_poﬁ
->
BlkIx
++;

1943 
	`CPU_CRITICAL_EXIT
();

1945 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1946 
	}
}

1985 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1986 
MEM_POOL_IX
 
	$Mem_PoﬁBlkIxGë
 (
MEM_POOL
 *
pmem_poﬁ
,

1987 *
pmem_blk
,

1988 
LIB_ERR
 *
≥º
)

1990 *
p_addr
;

1991 
CPU_BOOLEAN
 
addr_vÆid
;

1992 
MEM_POOL_IX
 
i
;

1993 
MEM_POOL_IX
 
poﬁ_ix
;

1994 
MEM_POOL_IX
 
övÆid_ix
;

1995 
	`CPU_SR_ALLOC
();

1998 
övÆid_ix
 = 
	`DEF_GET_U_MAX_VAL
(
MEM_POOL_IX
);

1999 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2000 i‡(
≥º
 =(
LIB_ERR
 *)0) {

2001 
	`CPU_SW_EXCEPTION
(
övÆid_ix
);

2006 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2007 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

2008 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

2009  (
övÆid_ix
);

2012 i‡(
pmem_blk
 == (*)0) {

2013 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

2014  (
övÆid_ix
);

2018 
	`CPU_CRITICAL_ENTER
();

2020 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2021 i‡(
pmem_poﬁ
->
Ty≥
 !
LIB_MEM_TYPE_POOL
) {

2022 
	`CPU_CRITICAL_EXIT
();

2023 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

2024 (
övÆid_ix
);

2027 
addr_vÆid
 = 
	`Mem_PoﬁBlkIsVÆidAddr
(
pmem_poﬁ
, 
pmem_blk
);

2028 i‡(
addr_vÆid
 !
DEF_OK
) {

2029 
	`CPU_CRITICAL_EXIT
();

2030 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR
;

2031  (
övÆid_ix
);

2034 
i
 = 0u; i < 
pmem_poﬁ
->
BlkIx
; i++) {

2035 i‡(
pmem_blk
 =
pmem_poﬁ
->
PoﬁPås
[
i
]) {

2036 
	`CPU_CRITICAL_EXIT
();

2037 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL
;

2038  (
övÆid_ix
);

2043 i‡(
pmem_poﬁ
->
BlkIx
 >pmem_poﬁ->
BlkNbr
) {

2044 
	`CPU_CRITICAL_EXIT
();

2045 *
≥º
 = 
LIB_MEM_ERR_POOL_FULL
;

2046  (
övÆid_ix
);

2049 
addr_vÆid
 = 
DEF_NO
;

2050 
i
 = 
pmem_poﬁ
->
BlkIx
; i <Ömem_poﬁ->
BlkNbr
; i++) {

2051 
p_addr
 = 
pmem_poﬁ
->
PoﬁPås
[
i
];

2052 i‡(
p_addr
 =
pmem_blk
) {

2053 
addr_vÆid
 = 
DEF_YES
;

2058 i‡(
addr_vÆid
 =
DEF_YES
) {

2059 
poﬁ_ix
 = 
pmem_poﬁ
->
BlkNbr
 - 1 - 
i
;

2060 
	`CPU_CRITICAL_EXIT
();

2061 *
≥º
 = 
LIB_MEM_ERR_NONE
;

2062  (
poﬁ_ix
);

2064 
	`CPU_CRITICAL_EXIT
();

2065 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

2066  (
övÆid_ix
);

2069 
	}
}

2103 #i‡((
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
) && \

2104 (
	gLIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
))

2105 
CPU_BOOLEAN
 
	$Mem_PoﬁBlkIsVÆidAddr
 (
MEM_POOL
 *
pmem_poﬁ
,

2106 *
pmem_blk
)

2108 
CPU_INT08U
 *
µoﬁ_addr_fú°
;

2109 *
µoﬁ_addr_°¨t
;

2110 *
µoﬁ_addr_íd
;

2111 
CPU_SIZE_T
 
Æign_off£t
;

2112 
CPU_SIZE_T
 
blk_Æign
;

2113 
CPU_SIZE_T
 
blk_Æign_off£t
;

2114 
CPU_SIZE_T
 
blk_size
;

2115 
CPU_SIZE_T
 
mem_Æign
;

2116 
CPU_SIZE_T
 
mem_Æign_off£t
;

2117 
CPU_SIZE_T
 
mem_diff
;

2118 
CPU_BOOLEAN
 
addr_vÆid
;

2121 
µoﬁ_addr_°¨t
 = 
pmem_poﬁ
->
PoﬁAddrSèπ
;

2122 
µoﬁ_addr_íd
 = 
pmem_poﬁ
->
PoﬁAddrEnd
;

2124 i‡((
pmem_blk
 < 
µoﬁ_addr_°¨t
) ||

2125 (
pmem_blk
 > 
µoﬁ_addr_íd
)) {

2126  (
DEF_NO
);

2129 
blk_Æign
 = (
CPU_SIZE_T
)
pmem_poﬁ
->
BlkAlign
;

2130 
Æign_off£t
 = (
CPU_SIZE_T
)((
CPU_ADDR
)
µoﬁ_addr_°¨t
 % 
blk_Æign
);

2131 i‡(
Æign_off£t
 != 0u) {

2132 
mem_Æign_off£t
 = 
blk_Æign
 - 
Æign_off£t
;

2134 
mem_Æign_off£t
 = 0u;

2137 
blk_size
 = 
pmem_poﬁ
->
BlkSize
;

2138 
Æign_off£t
 = 
blk_size
 % 
blk_Æign
;

2139 i‡(
Æign_off£t
 != 0u) {

2140 
blk_Æign_off£t
 = 
blk_Æign
 - 
Æign_off£t
;

2142 
blk_Æign_off£t
 = 0u;

2145 
µoﬁ_addr_fú°
 = (
CPU_INT08U
 *)((CPU_INT08U *)
µoﬁ_addr_°¨t
 + 
mem_Æign_off£t
);

2146 
mem_diff
 = (
CPU_SIZE_T
 )((
CPU_INT08U
 *)
pmem_blk
 - 
µoﬁ_addr_fú°
);

2147 
mem_Æign
 = (
CPU_SIZE_T
 )–
blk_size
 + 
blk_Æign_off£t
);

2149 
addr_vÆid
 = ((
mem_diff
 % 
mem_Æign
Ë=0uË? 
DEF_YES
 : 
DEF_NO
;

2151  (
addr_vÆid
);

2152 
	}
}

2259 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

2260 
CPU_SIZE_T
 
	$Mem_SegCÆcTŸSize
 (*
pmem_addr
,

2261 
MEM_POOL_BLK_QTY
 
blk_nbr
,

2262 
CPU_SIZE_T
 
blk_size
,

2263 
CPU_SIZE_T
 
blk_Æign
)

2265 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2266 
CPU_SIZE_T
 
blk_size_mem_Æig√d
;

2267 
CPU_SIZE_T
 
blk_size_Æig√d
;

2268 
CPU_SIZE_T
 
blk_size_Æig√d_nbr
;

2269 
CPU_SIZE_T
 
blk_size_tŸ
;

2271 
CPU_SIZE_T
 
Æign_off£t
;

2272 
CPU_SIZE_T
 
mem_Æign_off£t
;

2273 
CPU_SIZE_T
 
blk_Æign_off£t
;

2274 
CPU_SIZE_T
 
size_tŸ
;

2277 
Æign_off£t
 = (
CPU_ADDR
)
pmem_addr
 % 
blk_Æign
;

2278 i‡(
Æign_off£t
 != 0u) {

2279 
mem_Æign_off£t
 = 
blk_Æign
 - 
Æign_off£t
;

2281 
mem_Æign_off£t
 = 0u;

2284 
Æign_off£t
 = 
blk_size
 % 
blk_Æign
;

2285 i‡(
Æign_off£t
 != 0u) {

2286 
blk_Æign_off£t
 = 
blk_Æign
 - 
Æign_off£t
;

2288 
blk_Æign_off£t
 = 0u;

2291 
size_tŸ
 = 
mem_Æign_off£t
 + ((
blk_size
 + 
blk_Æign_off£t
Ë* ((
CPU_SIZE_T
)
blk_nbr
 - 1)) + blk_size;

2293 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2294 
blk_size_mem_Æig√d
 = 
mem_Æign_off£t
 + 
blk_size
;

2295 i‡((
blk_size_mem_Æig√d
 < 
mem_Æign_off£t
) ||

2296 (
blk_size_mem_Æig√d
 < 
blk_size
)) {

2300 i‡(
blk_nbr
 > 1) {

2301 
blk_size_Æig√d
 = 
blk_size
 + 
blk_Æign_off£t
;

2302 i‡((
blk_size_Æig√d
 < 
blk_Æign_off£t
) ||

2303 (
blk_size_Æig√d
 < 
blk_size
)) {

2307 
blk_size_Æig√d_nbr
 = 
blk_size_Æig√d
 * ((
CPU_SIZE_T
)
blk_nbr
 - 1);

2308 i‡((
blk_size_Æig√d_nbr
 < 
blk_size_Æig√d
) ||

2309 (
blk_size_Æig√d_nbr
 < 
blk_Æign_off£t
) ||

2310 (
blk_size_Æig√d_nbr
 < 
blk_size
)) {

2314 
blk_size_tŸ
 = 
blk_size_Æig√d_nbr
 + 
blk_size
;

2315 i‡((
blk_size_tŸ
 < 
blk_size_Æig√d_nbr
) ||

2316 (
blk_size_tŸ
 < 
blk_size
)) {

2320 i‡((
size_tŸ
 < 
blk_size_mem_Æig√d
) ||

2321 (
size_tŸ
 < 
blk_size_Æig√d_nbr
) ||

2322 (
size_tŸ
 < 
blk_size_tŸ
)) {

2328  (
size_tŸ
);

2329 
	}
}

2366 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

2367 *
	$Mem_SegAŒoc
 (
MEM_POOL
 *
pmem_poﬁ
,

2368 
CPU_SIZE_T
 
size
,

2369 
CPU_SIZE_T
 
Æign
)

2371 
CPU_INT08U
 *
pmem_addr
;

2372 
CPU_INT08U
 *
pmem_addr_√xt
;

2373 
CPU_SIZE_T
 
mem_Æign
;

2374 
CPU_SIZE_T
 
Æign_off£t
;

2375 
CPU_SIZE_T
 
size_tŸ
;

2378 
pmem_addr
 = (
CPU_INT08U
 *)
pmem_poﬁ
->
SegAddrNextAvaû
;

2380 
mem_Æign
 = (
CPU_SIZE_T
)((
CPU_ADDR
)
pmem_addr
 % 
Æign
);

2382 i‡(
mem_Æign
 != 0u) {

2383 
Æign_off£t
 = 
Æign
 - 
mem_Æign
;

2385 
Æign_off£t
 = 0u;

2388 
size_tŸ
 = 
Æign_off£t
 + 
size
;

2389 i‡(
size_tŸ
 > 
pmem_poﬁ
->
SegSizeRem
) {

2393 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2394 i‡((
size_tŸ
 < 
Æign_off£t
) ||

2395 (
size_tŸ
 < 
size
)) {

2400 
pmem_addr_√xt
 = 
pmem_addr
 + 
size_tŸ
;

2402 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2403 i‡(
pmem_addr_√xt
 < 
pmem_addr
) {

2408 
pmem_addr
 +
Æign_off£t
;

2410 
pmem_poﬁ
->
SegAddrNextAvaû
 = (*)
pmem_addr_√xt
;

2411 
pmem_poﬁ
->
SegSizeRem
 -(
CPU_SIZE_T
)
size_tŸ
;

2413  ((*)
pmem_addr
);

2414 
	}
}

	@UCOSIII/uC-LIB/lib_mem.h

64 #i‚de‡ 
LIB_MEM_MODULE_PRESENT


65 
	#LIB_MEM_MODULE_PRESENT


	)

105 
	~<˝u.h
>

106 
	~<˝u_c‹e.h
>

108 
	~<lib_def.h
>

109 
	~<lib_cfg.h
>

118 #ifde‡ 
LIB_MEM_MODULE


119 
	#LIB_MEM_EXT


	)

121 
	#LIB_MEM_EXT
 

	)

147 #i‚de‡ 
LIB_MEM_CFG_ARG_CHK_EXT_EN


148 
	#LIB_MEM_CFG_ARG_CHK_EXT_EN
 
DEF_DISABLED


	)

163 #i‚de‡ 
LIB_MEM_CFG_OPTIMIZE_ASM_EN


164 
	#LIB_MEM_CFG_OPTIMIZE_ASM_EN
 
DEF_DISABLED


	)

179 #i‚de‡ 
LIB_MEM_CFG_ALLOC_EN


180 
	#LIB_MEM_CFG_ALLOC_EN
 
DEF_DISABLED


	)

203 
	#LIB_MEM_TYPE_NONE
 
	`CPU_TYPE_CREATE
('N', 'O', 'N', 'E')

	)

204 
	#LIB_MEM_TYPE_HEAP
 
	`CPU_TYPE_CREATE
('H', 'E', 'A', 'P')

	)

205 
	#LIB_MEM_TYPE_POOL
 
	`CPU_TYPE_CREATE
('P', 'O', 'O', 'L')

	)

223 
CPU_INT32U
 
	tLIB_MEM_TYPE
;

232 
CPU_SIZE_T
 
	tMEM_POOL_BLK_QTY
;

241 
MEM_POOL_BLK_QTY
 
	tMEM_POOL_IX
;

288 
mem_poﬁ
 
	tMEM_POOL
;

291 
	smem_poﬁ
 {

292 
LIB_MEM_TYPE
 
	mTy≥
;

294 
MEM_POOL
 *
	mSegHódPå
;

295 
MEM_POOL
 *
	mSegPªvPå
;

296 
MEM_POOL
 *
	mSegNextPå
;

297 
MEM_POOL
 *
	mPoﬁPªvPå
;

298 
MEM_POOL
 *
	mPoﬁNextPå
;

300 *
	mPoﬁAddrSèπ
;

301 *
	mPoﬁAddrEnd
;

302 **
	mPoﬁPås
;

303 
MEM_POOL_IX
 
	mBlkIx
;

304 
CPU_SIZE_T
 
	mPoﬁSize
;

305 
MEM_POOL_BLK_QTY
 
	mBlkNbr
;

306 
CPU_SIZE_T
 
	mBlkSize
;

307 
CPU_SIZE_T
 
	mBlkAlign
;

310 *
	mSegAddr
;

311 *
	mSegAddrNextAvaû
;

312 
CPU_SIZE_T
 
	mSegSizeTŸ
;

313 
CPU_SIZE_T
 
	mSegSizeRem
;

403 #i‡ ((
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
) || \

404 (
	gCPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
))

406 
	#MEM_VAL_BIG_TO_LITTLE_16
(
vÆ
Ë((
CPU_INT16U
)(((CPU_INT16U)((((CPU_INT16U)(vÆ)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

407 ((
CPU_INT16U
)((((CPU_INT16U)(
vÆ
)Ë& (CPU_INT16UË0x00FFuË<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

409 
	#MEM_VAL_BIG_TO_LITTLE_32
(
vÆ
Ë((
CPU_INT32U
)(((CPU_INT32U)((((CPU_INT32U)(vÆ)Ë& (CPU_INT32U)0xFF000000uË>> (3u * 
DEF_OCTET_NBR_BITS
))) | \

410 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

411 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË<< (1u * 
DEF_OCTET_NBR_BITS
))) | \

412 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x000000FFuË<< (3u * 
DEF_OCTET_NBR_BITS
)))))

	)

414 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

416 
	#MEM_VAL_BIG_TO_LITTLE_16
(
vÆ
Ë((
CPU_INT16U
)(((CPU_INT16U)((((CPU_INT16U)(vÆ)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

417 ((
CPU_INT16U
)((((CPU_INT16U)(
vÆ
)Ë& (CPU_INT16UË0x00FFuË<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

419 
	#MEM_VAL_BIG_TO_LITTLE_32
(
vÆ
Ë((
CPU_INT32U
)(((CPU_INT32U)((((CPU_INT32U)(vÆ)Ë& (CPU_INT32U)0xFF000000uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

420 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË<< (1u * 
DEF_OCTET_NBR_BITS
))) | \

421 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

422 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x000000FFuË<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

426 
	#MEM_VAL_BIG_TO_LITTLE_16
(
vÆ
Ë(vÆ)

	)

427 
	#MEM_VAL_BIG_TO_LITTLE_32
(
vÆ
Ë(vÆ)

	)

432 
	#MEM_VAL_LITTLE_TO_BIG_16
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_16
(vÆ)

	)

433 
	#MEM_VAL_LITTLE_TO_BIG_32
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_32
(vÆ)

	)

437 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

439 
	#MEM_VAL_BIG_TO_HOST_16
(
vÆ
Ë(vÆ)

	)

440 
	#MEM_VAL_BIG_TO_HOST_32
(
vÆ
Ë(vÆ)

	)

441 
	#MEM_VAL_LITTLE_TO_HOST_16
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_BIG_16
(vÆ)

	)

442 
	#MEM_VAL_LITTLE_TO_HOST_32
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_BIG_32
(vÆ)

	)

444 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

446 
	#MEM_VAL_BIG_TO_HOST_16
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_16
(vÆ)

	)

447 
	#MEM_VAL_BIG_TO_HOST_32
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_32
(vÆ)

	)

448 
	#MEM_VAL_LITTLE_TO_HOST_16
(
vÆ
Ë(vÆ)

	)

449 
	#MEM_VAL_LITTLE_TO_HOST_32
(
vÆ
Ë(vÆ)

	)

459 
	#MEM_VAL_HOST_TO_BIG_16
(
vÆ
Ë
	`MEM_VAL_BIG_TO_HOST_16
(vÆ)

	)

460 
	#MEM_VAL_HOST_TO_BIG_32
(
vÆ
Ë
	`MEM_VAL_BIG_TO_HOST_32
(vÆ)

	)

461 
	#MEM_VAL_HOST_TO_LITTLE_16
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_HOST_16
(vÆ)

	)

462 
	#MEM_VAL_HOST_TO_LITTLE_32
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_HOST_32
(vÆ)

	)

516 
	#MEM_VAL_GET_INT08U_BIG
(
addr
Ë((
CPU_INT08U
Ë((CPU_INT08U)(((CPU_INT08U)(*(((CPU_INT08U *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))))

	)

518 
	#MEM_VAL_GET_INT16U_BIG
(
addr
Ë((
CPU_INT16U
)(((CPU_INT16U)(((CPU_INT16U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (1u * 
DEF_OCTET_NBR_BITS
))) + \

519 ((
CPU_INT16U
)(((CPU_INT16U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))))

	)

521 
	#MEM_VAL_GET_INT32U_BIG
(
addr
Ë((
CPU_INT32U
)(((CPU_INT32U)(((CPU_INT32U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (3u * 
DEF_OCTET_NBR_BITS
))) + \

522 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (2u * 
DEF_OCTET_NBR_BITS
))) + \

523 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 2))Ë<< (1u * 
DEF_OCTET_NBR_BITS
))) + \

524 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 3))Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))))

	)

528 
	#MEM_VAL_GET_INT08U_LITTLE
(
addr
Ë((
CPU_INT08U
Ë((CPU_INT08U)(((CPU_INT08U)(*(((CPU_INT08U *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))))

	)

530 
	#MEM_VAL_GET_INT16U_LITTLE
(
addr
Ë((
CPU_INT16U
)(((CPU_INT16U)(((CPU_INT16U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))) + \

531 ((
CPU_INT16U
)(((CPU_INT16U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

533 
	#MEM_VAL_GET_INT32U_LITTLE
(
addr
Ë((
CPU_INT32U
)(((CPU_INT32U)(((CPU_INT32U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))) + \

534 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (1u * 
DEF_OCTET_NBR_BITS
))) + \

535 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 2))Ë<< (2u * 
DEF_OCTET_NBR_BITS
))) + \

536 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 3))Ë<< (3u * 
DEF_OCTET_NBR_BITS
)))))

	)

540 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

542 
	#MEM_VAL_GET_INT08U
(
addr
Ë
	`MEM_VAL_GET_INT08U_BIG
◊ddr)

	)

543 
	#MEM_VAL_GET_INT16U
(
addr
Ë
	`MEM_VAL_GET_INT16U_BIG
◊ddr)

	)

544 
	#MEM_VAL_GET_INT32U
(
addr
Ë
	`MEM_VAL_GET_INT32U_BIG
◊ddr)

	)

546 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

548 
	#MEM_VAL_GET_INT08U
(
addr
Ë
	`MEM_VAL_GET_INT08U_LITTLE
◊ddr)

	)

549 
	#MEM_VAL_GET_INT16U
(
addr
Ë
	`MEM_VAL_GET_INT16U_LITTLE
◊ddr)

	)

550 
	#MEM_VAL_GET_INT32U
(
addr
Ë
	`MEM_VAL_GET_INT32U_LITTLE
◊ddr)

	)

612 
	#MEM_VAL_SET_INT08U_BIG
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((CPU_INT08U)(vÆ)Ë& (CPU_INT08UË0xFFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

614 
	#MEM_VAL_SET_INT16U_BIG
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT16U
)(vÆ)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); \

615 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT16U
)(
vÆ
)Ë& (CPU_INT16UË0x00FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

617 
	#MEM_VAL_SET_INT32U_BIG
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT32U
)(vÆ)Ë& (CPU_INT32U)0xFF000000uË>> (3u * 
DEF_OCTET_NBR_BITS
))); \

618 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË>> (2u * 
DEF_OCTET_NBR_BITS
))); \

619 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 2)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); \

620 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 3)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x000000FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

624 
	#MEM_VAL_SET_INT08U_LITTLE
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((CPU_INT08U)(vÆ)Ë& (CPU_INT08UË0xFFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

626 
	#MEM_VAL_SET_INT16U_LITTLE
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT16U
)(vÆ)Ë& (CPU_INT16UË0x00FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); \

627 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT16U
)(
vÆ
)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

629 
	#MEM_VAL_SET_INT32U_LITTLE
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT32U
)(vÆ)Ë& (CPU_INT32U)0x000000FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); \

630 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); \

631 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 2)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË>> (2u * 
DEF_OCTET_NBR_BITS
))); \

632 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 3)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0xFF000000uË>> (3u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

636 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

638 
	#MEM_VAL_SET_INT08U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT08U_BIG
◊ddr, vÆ)

	)

639 
	#MEM_VAL_SET_INT16U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT16U_BIG
◊ddr, vÆ)

	)

640 
	#MEM_VAL_SET_INT32U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT32U_BIG
◊ddr, vÆ)

	)

642 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

644 
	#MEM_VAL_SET_INT08U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT08U_LITTLE
◊ddr, vÆ)

	)

645 
	#MEM_VAL_SET_INT16U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT16U_LITTLE
◊ddr, vÆ)

	)

646 
	#MEM_VAL_SET_INT32U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT32U_LITTLE
◊ddr, vÆ)

	)

718 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

721 
	#MEM_VAL_COPY_GET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

723 
	#MEM_VAL_COPY_GET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

724 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); } 0)

	)

726 
	#MEM_VAL_COPY_GET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

727 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

728 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

729 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); } 0)

	)

733 
	#MEM_VAL_COPY_GET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

735 
	#MEM_VAL_COPY_GET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \

736 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

738 
	#MEM_VAL_COPY_GET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \

739 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

740 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

741 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

745 
	#MEM_VAL_COPY_GET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_BIG
◊ddr_de°,áddr_§c)

	)

746 
	#MEM_VAL_COPY_GET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_BIG
◊ddr_de°,áddr_§c)

	)

747 
	#MEM_VAL_COPY_GET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_BIG
◊ddr_de°,áddr_§c)

	)

752 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

755 
	#MEM_VAL_COPY_GET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

757 
	#MEM_VAL_COPY_GET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \

758 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

760 
	#MEM_VAL_COPY_GET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \

761 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

762 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

763 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

767 
	#MEM_VAL_COPY_GET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

769 
	#MEM_VAL_COPY_GET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

770 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); } 0)

	)

772 
	#MEM_VAL_COPY_GET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

773 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

774 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

775 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); } 0)

	)

779 
	#MEM_VAL_COPY_GET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_LITTLE
◊ddr_de°,áddr_§c)

	)

780 
	#MEM_VAL_COPY_GET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_LITTLE
◊ddr_de°,áddr_§c)

	)

781 
	#MEM_VAL_COPY_GET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_LITTLE
◊ddr_de°,áddr_§c)

	)

866 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

869 
	#MEM_VAL_COPY_GET_INTU_BIG
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

870 
CPU_SIZE_T
 
_i
; \

872 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

873 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)) + _i)); \

875 } 0)

	)

878 
	#MEM_VAL_COPY_GET_INTU_LITTLE
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

879 
CPU_SIZE_T
 
_i
; \

880 
CPU_SIZE_T
 
_j
; \

883 
_j
 = (
vÆ_size
) - 1; \

885 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

886 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 
_j
)); \

887 
_j
--; \

889 } 0)

	)

892 
	#MEM_VAL_COPY_GET_INTU
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_BIG
◊ddr_de°,áddr_§c, vÆ_size)

	)

897 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

900 
	#MEM_VAL_COPY_GET_INTU_BIG
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

901 
CPU_SIZE_T
 
_i
; \

902 
CPU_SIZE_T
 
_j
; \

905 
_j
 = (
vÆ_size
) - 1; \

907 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

908 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 
_j
)); \

909 
_j
--; \

911 } 0)

	)

914 
	#MEM_VAL_COPY_GET_INTU_LITTLE
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

915 
CPU_SIZE_T
 
_i
; \

917 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

918 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)) + _i)); \

920 } 0)

	)

923 
	#MEM_VAL_COPY_GET_INTU
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_LITTLE
◊ddr_de°,áddr_§c, vÆ_size)

	)

993 
	#MEM_VAL_COPY_SET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_BIG
◊ddr_de°,áddr_§c)

	)

994 
	#MEM_VAL_COPY_SET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_BIG
◊ddr_de°,áddr_§c)

	)

995 
	#MEM_VAL_COPY_SET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_BIG
◊ddr_de°,áddr_§c)

	)

997 
	#MEM_VAL_COPY_SET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_LITTLE
◊ddr_de°,áddr_§c)

	)

998 
	#MEM_VAL_COPY_SET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_LITTLE
◊ddr_de°,áddr_§c)

	)

999 
	#MEM_VAL_COPY_SET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_LITTLE
◊ddr_de°,áddr_§c)

	)

1002 
	#MEM_VAL_COPY_SET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U
◊ddr_de°,áddr_§c)

	)

1003 
	#MEM_VAL_COPY_SET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U
◊ddr_de°,áddr_§c)

	)

1004 
	#MEM_VAL_COPY_SET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U
◊ddr_de°,áddr_§c)

	)

1067 
	#MEM_VAL_COPY_SET_INTU_BIG
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_BIG
◊ddr_de°,áddr_§c, vÆ_size)

	)

1068 
	#MEM_VAL_COPY_SET_INTU_LITTLE
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_LITTLE
◊ddr_de°,áddr_§c, vÆ_size)

	)

1069 
	#MEM_VAL_COPY_SET_INTU
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU
◊ddr_de°,áddr_§c, vÆ_size)

	)

1120 
	#MEM_VAL_COPY_08
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

1122 
	#MEM_VAL_COPY_16
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

1123 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); } 0)

	)

1125 
	#MEM_VAL_COPY_32
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

1126 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

1127 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

1128 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); } 0)

	)

1131 
	#MEM_VAL_COPY
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

1132 
CPU_SIZE_T
 
_i
; \

1134 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

1135 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)) +_i)); \

1137 } 0)

	)

1146 
Mem_Inô
 ( );

1149 
Mem_CÃ
 ( *
pmem
,

1150 
CPU_SIZE_T
 
size
);

1152 
Mem_Së
 ( *
pmem
,

1153 
CPU_INT08U
 
d©a_vÆ
,

1154 
CPU_SIZE_T
 
size
);

1156 
Mem_C›y
 ( *
pde°
,

1157 c⁄° *
p§c
,

1158 
CPU_SIZE_T
 
size
);

1160 
Mem_Move
 ( *
pde°
,

1161 c⁄° *
p§c
,

1162 
CPU_SIZE_T
 
size
);

1164 
CPU_BOOLEAN
 
Mem_Cmp
 (c⁄° *
p1_mem
,

1165 c⁄° *
p2_mem
,

1166 
CPU_SIZE_T
 
size
);

1170 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1172 *
Mem_HópAŒoc
 ( 
CPU_SIZE_T
 
size
,

1173 
CPU_SIZE_T
 
Æign
,

1174 
CPU_SIZE_T
 *
po˘ës_ªqd
,

1175 
LIB_ERR
 *
≥º
);

1177 
CPU_SIZE_T
 
Mem_HópGëSizeRem
 ( CPU_SIZE_T 
Æign
,

1178 
LIB_ERR
 *
≥º
);

1181 
CPU_SIZE_T
 
Mem_SegGëSizeRem
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1182 
CPU_SIZE_T
 
Æign
,

1183 
LIB_ERR
 *
≥º
);

1186 
Mem_PoﬁCÃ
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1187 
LIB_ERR
 *
≥º
);

1189 
Mem_PoﬁCª©e
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1190 *
pmem_ba£_addr
,

1191 
CPU_SIZE_T
 
mem_size
,

1192 
MEM_POOL_BLK_QTY
 
blk_nbr
,

1193 
CPU_SIZE_T
 
blk_size
,

1194 
CPU_SIZE_T
 
blk_Æign
,

1195 
CPU_SIZE_T
 *
po˘ës_ªqd
,

1196 
LIB_ERR
 *
≥º
);

1199 
MEM_POOL_BLK_QTY
 
Mem_PoﬁBlkGëNbrAvaû
–
MEM_POOL
 *
pmem_poﬁ
,

1200 
LIB_ERR
 *
≥º
);

1202 *
Mem_PoﬁBlkGë
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1203 
CPU_SIZE_T
 
size
,

1204 
LIB_ERR
 *
≥º
);

1206 *
Mem_PoﬁBlkGëU£dAtIx
–
MEM_POOL
 *
pmem_poﬁ
,

1207 
MEM_POOL_IX
 
u£d_ix
,

1208 
LIB_ERR
 *
≥º
);

1210 
Mem_PoﬁBlkFªe
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1211 *
pmem_blk
,

1212 
LIB_ERR
 *
≥º
);

1214 
MEM_POOL_IX
 
Mem_PoﬁBlkIxGë
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1215 *
pmem_blk
,

1216 
LIB_ERR
 *
≥º
);

1227 #i‚de‡ 
LIB_MEM_CFG_ARG_CHK_EXT_EN


1232 #ñi‡ ((
LIB_MEM_CFG_ARG_CHK_EXT_EN
 !
DEF_DISABLED
) && \

1233 (
	gLIB_MEM_CFG_ARG_CHK_EXT_EN
 !
DEF_ENABLED
 ))

1241 #i‚de‡ 
LIB_MEM_CFG_OPTIMIZE_ASM_EN


1246 #ñi‡ ((
LIB_MEM_CFG_OPTIMIZE_ASM_EN
 !
DEF_DISABLED
) && \

1247 (
LIB_MEM_CFG_OPTIMIZE_ASM_EN
 !
DEF_ENABLED
 ))

1256 #i‚de‡ 
LIB_MEM_CFG_ALLOC_EN


1261 #ñi‡ ((
LIB_MEM_CFG_ALLOC_EN
 !
DEF_DISABLED
) && \

1262 (
LIB_MEM_CFG_ALLOC_EN
 !
DEF_ENABLED
 ))

1268 #ñi‡ (
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1271 #i‚de‡ 
LIB_MEM_CFG_HEAP_SIZE


1275 #ñi‡ (
DEF_CHK_VAL_MIN
(
LIB_MEM_CFG_HEAP_SIZE
, 1Ë!
DEF_OK
)

1281 #ifde‡ 
LIB_MEM_CFG_HEAP_BASE_ADDR


1282 #i‡ (
LIB_MEM_CFG_HEAP_BASE_ADDR
 == 0x0)

1299 #i‡ (
CPU_CORE_VERSION
 < 127u)

	@UCOSIII/uC-LIB/lib_str.c

68 
	#MICRIUM_SOURCE


	)

69 
	#LIB_STR_MODULE


	)

70 
	~<lib_°r.h
>

100 c⁄° 
CPU_INT32U
 
	gSå_Mu…OvfThTbl_I¡32U
[] = {

101 (
CPU_INT32U
Ë
DEF_INT_32U_MAX_VAL
,

102 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 1u),

103 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 2u),

104 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 3u),

105 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 4u),

106 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 5u),

107 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 6u),

108 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 7u),

109 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 8u),

110 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 9u),

111 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 10u),

112 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 11u),

113 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 12u),

114 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 13u),

115 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 14u),

116 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 15u),

117 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 16u),

118 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 17u),

119 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 18u),

120 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 19u),

121 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 20u),

122 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 21u),

123 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 22u),

124 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 23u),

125 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 24u),

126 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 25u),

127 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 26u),

128 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 27u),

129 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 28u),

130 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 29u),

131 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 30u),

132 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 31u),

133 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 32u),

134 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 33u),

135 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 34u),

136 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 35u),

137 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 36u)

154 
CPU_CHAR
 *
Så_FmtNbr_I¡32
 ( 
CPU_INT32U
 
nbr
,

155 
CPU_INT08U
 
nbr_dig
,

156 
CPU_INT08U
 
nbr_ba£
,

157 
CPU_BOOLEAN
 
nbr_√g
,

158 
CPU_CHAR
 
Àad_ch¨
,

159 
CPU_BOOLEAN
 
lowî_ˇ£
,

160 
CPU_BOOLEAN
 
nul
,

161 
CPU_CHAR
 *
p°r
);

163 
CPU_INT32U
 
Så_P¨£Nbr_I¡32
(c⁄° 
CPU_CHAR
 *
p°r
,

164 
CPU_CHAR
 **
p°r_√xt
,

165 
CPU_INT08U
 
nbr_ba£
,

166 
CPU_BOOLEAN
 
nbr_sig√d
,

167 
CPU_BOOLEAN
 *
≤br_√g
);

216 
CPU_SIZE_T
 
	$Så_Lí
 (c⁄° 
CPU_CHAR
 *
p°r
)

218 
CPU_SIZE_T
 
Àn
;

221 
Àn
 = 
	`Så_Lí_N
(
p°r
,

222 
DEF_INT_CPU_U_MAX_VAL
);

224  (
Àn
);

225 
	}
}

275 
CPU_SIZE_T
 
	$Så_Lí_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

276 
CPU_SIZE_T
 
Àn_max
)

278 c⁄° 
CPU_CHAR
 *
p°r_Àn
;

279 
CPU_SIZE_T
 
Àn
;

282 
p°r_Àn
 = 
p°r
;

283 
Àn
 = 0u;

284 –
p°r_Àn
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

285 (*
p°r_Àn
 !–
CPU_CHAR
 )'\0') &&

286 –
Àn
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

287 
p°r_Àn
++;

288 
Àn
++;

291  (
Àn
);

292 
	}
}

347 
CPU_CHAR
 *
	$Så_C›y
 ( 
CPU_CHAR
 *
p°r_de°
,

348 c⁄° 
CPU_CHAR
 *
p°r_§c
)

350 
CPU_CHAR
 *
p°r_πn
;

353 
p°r_πn
 = 
	`Så_C›y_N
(
p°r_de°
,

354 
p°r_§c
,

355 
DEF_INT_CPU_U_MAX_VAL
);

357  (
p°r_πn
);

358 
	}
}

437 
CPU_CHAR
 *
	$Så_C›y_N
 ( 
CPU_CHAR
 *
p°r_de°
,

438 c⁄° 
CPU_CHAR
 *
p°r_§c
,

439 
CPU_SIZE_T
 
Àn_max
)

441 
CPU_CHAR
 *
p°r_c›y_de°
;

442 c⁄° 
CPU_CHAR
 *
p°r_c›y_§c
;

443 
CPU_SIZE_T
 
Àn_c›y
;

446 i‡(
p°r_de°
 =(
CPU_CHAR
 *)0) {

447  ((
CPU_CHAR
 *)0);

449 i‡(
p°r_§c
 =(c⁄° 
CPU_CHAR
 *)0) {

450  ((
CPU_CHAR
 *)0);

454 
p°r_c›y_de°
 = 
p°r_de°
;

455 
p°r_c›y_§c
 = 
p°r_§c
;

456 
Àn_c›y
 = 0u;

458 –
p°r_c›y_de°
 !–
CPU_CHAR
 *) 0 ) &&

459 –
p°r_c›y_§c
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

460 (*
p°r_c›y_§c
 !–
CPU_CHAR
 )'\0') &&

461 –
Àn_c›y
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

462 *
p°r_c›y_de°
 = *
p°r_c›y_§c
;

463 
p°r_c›y_de°
++;

464 
p°r_c›y_§c
++;

465 
Àn_c›y
++;

468 i‡((
p°r_c›y_de°
 =–
CPU_CHAR
 *)0) ||

469 (
p°r_c›y_§c
 =(c⁄° 
CPU_CHAR
 *)0)) {

470  ((
CPU_CHAR
 *)0);

473 i‡(
Àn_c›y
 < 
Àn_max
) {

474 *
p°r_c›y_de°
 = (
CPU_CHAR
)'\0';

478  (
p°r_de°
);

479 
	}
}

538 
CPU_CHAR
 *
	$Så_C©
 ( 
CPU_CHAR
 *
p°r_de°
,

539 c⁄° 
CPU_CHAR
 *
p°r_ˇt
)

541 
CPU_CHAR
 *
p°r_πn
;

544 
p°r_πn
 = 
	`Så_C©_N
(
p°r_de°
,

545 
p°r_ˇt
,

546 
DEF_INT_CPU_U_MAX_VAL
);

548  (
p°r_πn
);

549 
	}
}

620 
CPU_CHAR
 *
	$Så_C©_N
 ( 
CPU_CHAR
 *
p°r_de°
,

621 c⁄° 
CPU_CHAR
 *
p°r_ˇt
,

622 
CPU_SIZE_T
 
Àn_max
)

624 
CPU_CHAR
 *
p°r_ˇt_de°
;

625 c⁄° 
CPU_CHAR
 *
p°r_ˇt_§c
;

626 
CPU_SIZE_T
 
Àn_ˇt
;

629 i‡(
p°r_de°
 =(
CPU_CHAR
 *)0) {

630  ((
CPU_CHAR
 *)0);

632 i‡(
p°r_ˇt
 =(c⁄° 
CPU_CHAR
 *)0) {

633  ((
CPU_CHAR
 *)0);

636 i‡(
Àn_max
 < 1) {

637  ((
CPU_CHAR
 *)
p°r_de°
);

641 
p°r_ˇt_de°
 = 
p°r_de°
;

642 –
p°r_ˇt_de°
 !(
CPU_CHAR
 *) 0 ) &&

643 (*
p°r_ˇt_de°
 !(
CPU_CHAR
 )'\0')) {

644 
p°r_ˇt_de°
++;

646 i‡(
p°r_ˇt_de°
 =(
CPU_CHAR
 *)0) {

647  ((
CPU_CHAR
 *)0);

650 
p°r_ˇt_§c
 = 
p°r_ˇt
;

651 
Àn_ˇt
 = 0u;

653 –
p°r_ˇt_de°
 !–
CPU_CHAR
 *) 0 ) &&

654 –
p°r_ˇt_§c
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

655 (*
p°r_ˇt_§c
 !–
CPU_CHAR
 )'\0') &&

656 –
Àn_ˇt
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

657 *
p°r_ˇt_de°
 = *
p°r_ˇt_§c
;

658 
p°r_ˇt_de°
++;

659 
p°r_ˇt_§c
++;

660 
Àn_ˇt
++;

663 i‡((
p°r_ˇt_de°
 =–
CPU_CHAR
 *)0) ||

664 (
p°r_ˇt_§c
 =(c⁄° 
CPU_CHAR
 *)0)) {

665  ((
CPU_CHAR
 *)0);

668 *
p°r_ˇt_de°
 = (
CPU_CHAR
)'\0';

671  (
p°r_de°
);

672 
	}
}

750 
CPU_INT16S
 
	$Så_Cmp
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

751 c⁄° 
CPU_CHAR
 *
p2_°r
)

753 
CPU_INT16S
 
cmp_vÆ
;

756 
cmp_vÆ
 = 
	`Så_Cmp_N
(
p1_°r
,

757 
p2_°r
,

758 
DEF_INT_CPU_U_MAX_VAL
);

760  (
cmp_vÆ
);

761 
	}
}

851 
CPU_INT16S
 
	$Så_Cmp_N
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

852 c⁄° 
CPU_CHAR
 *
p2_°r
,

853 
CPU_SIZE_T
 
Àn_max
)

855 c⁄° 
CPU_CHAR
 *
p1_°r_cmp
;

856 c⁄° 
CPU_CHAR
 *
p2_°r_cmp
;

857 c⁄° 
CPU_CHAR
 *
p1_°r_cmp_√xt
;

858 c⁄° 
CPU_CHAR
 *
p2_°r_cmp_√xt
;

859 
CPU_INT16S
 
cmp_vÆ
;

860 
CPU_SIZE_T
 
cmp_Àn
;

863 i‡(
Àn_max
 < 1) {

867 i‡(
p1_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

868 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

871 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)(*
p2_°r
);

872  (
cmp_vÆ
);

874 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

875 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r
);

876  (
cmp_vÆ
);

880 
p1_°r_cmp
 = 
p1_°r
;

881 
p2_°r_cmp
 = 
p2_°r
;

882 
p1_°r_cmp_√xt
 = 
p1_°r_cmp
;

883 
p2_°r_cmp_√xt
 = 
p2_°r_cmp
;

884 
p1_°r_cmp_√xt
++;

885 
p2_°r_cmp_√xt
++;

886 
cmp_Àn
 = 0u;

888 (*
p1_°r_cmp
 =*
p2_°r_cmp
) &&

889 (*
p1_°r_cmp
 !–
CPU_CHAR
 )'\0') &&

890 –
p1_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

891 –
p2_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

892 –
cmp_Àn
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

893 
p1_°r_cmp
++;

894 
p2_°r_cmp
++;

895 
p1_°r_cmp_√xt
++;

896 
p2_°r_cmp_√xt
++;

897 
cmp_Àn
++;

901 i‡(
cmp_Àn
 =
Àn_max
) {

905 i‡(*
p1_°r_cmp
 !*
p2_°r_cmp
) {

907 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r_cmp
Ë- (CPU_INT16S)(*
p2_°r_cmp
);

909 } i‡(*
p1_°r_cmp
 =(
CPU_CHAR
)'\0') {

910 
cmp_vÆ
 = (
CPU_INT16S
)0;

913 i‡(
p1_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

914 i‡(
p2_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

915 
cmp_vÆ
 = (
CPU_INT16S
)0;

918 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)(*
p2_°r_cmp_√xt
);

921 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r_cmp_√xt
);

926  (
cmp_vÆ
);

927 
	}
}

1015 
CPU_INT16S
 
	$Så_CmpIgn‹eCa£
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

1016 c⁄° 
CPU_CHAR
 *
p2_°r
)

1018 
CPU_INT16S
 
cmp_vÆ
;

1021 
cmp_vÆ
 = 
	`Så_CmpIgn‹eCa£_N
(
p1_°r
,

1022 
p2_°r
,

1023 
DEF_INT_CPU_U_MAX_VAL
);

1025  (
cmp_vÆ
);

1026 
	}
}

1126 
CPU_INT16S
 
	$Så_CmpIgn‹eCa£_N
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

1127 c⁄° 
CPU_CHAR
 *
p2_°r
,

1128 
CPU_SIZE_T
 
Àn_max
)

1130 c⁄° 
CPU_CHAR
 *
p1_°r_cmp
;

1131 c⁄° 
CPU_CHAR
 *
p2_°r_cmp
;

1132 c⁄° 
CPU_CHAR
 *
p1_°r_cmp_√xt
;

1133 c⁄° 
CPU_CHAR
 *
p2_°r_cmp_√xt
;

1134 
CPU_CHAR
 
ch¨_1
;

1135 
CPU_CHAR
 
ch¨_2
;

1136 
CPU_INT16S
 
cmp_vÆ
;

1137 
CPU_SIZE_T
 
cmp_Àn
;

1140 i‡(
Àn_max
 < 1) {

1144 i‡(
p1_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1145 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1148 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r
);

1149 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)
ch¨_2
;

1150  (
cmp_vÆ
);

1152 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1153 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r
);

1154 
cmp_vÆ
 = (
CPU_INT16S
)
ch¨_1
;

1155  (
cmp_vÆ
);

1159 
p1_°r_cmp
 = 
p1_°r
;

1160 
p2_°r_cmp
 = 
p2_°r
;

1161 
p1_°r_cmp_√xt
 = 
p1_°r_cmp
;

1162 
p2_°r_cmp_√xt
 = 
p2_°r_cmp
;

1163 
p1_°r_cmp_√xt
++;

1164 
p2_°r_cmp_√xt
++;

1165 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r_cmp
);

1166 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r_cmp
);

1167 
cmp_Àn
 = 0u;

1169 –
ch¨_1
 =
ch¨_2
) &&

1170 (*
p1_°r_cmp
 !–
CPU_CHAR
 )'\0') &&

1171 –
p1_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

1172 –
p2_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

1173 –
cmp_Àn
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

1174 
p1_°r_cmp
++;

1175 
p2_°r_cmp
++;

1176 
p1_°r_cmp_√xt
++;

1177 
p2_°r_cmp_√xt
++;

1178 
cmp_Àn
++;

1179 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r_cmp
);

1180 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r_cmp
);

1184 i‡(
cmp_Àn
 =
Àn_max
) {

1188 i‡(
ch¨_1
 !
ch¨_2
) {

1189 
cmp_vÆ
 = (
CPU_INT16S
)
ch¨_1
 - (CPU_INT16S)
ch¨_2
;

1191 } i‡(
ch¨_1
 =(
CPU_CHAR
)'\0') {

1192 
cmp_vÆ
 = (
CPU_INT16S
)0;

1195 i‡(
p1_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

1196 i‡(
p2_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

1197 
cmp_vÆ
 = (
CPU_INT16S
)0;

1199 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r_cmp_√xt
);

1200 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)
ch¨_2
;

1203 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r_cmp_√xt
);

1204 
cmp_vÆ
 = (
CPU_INT16S
)
ch¨_1
;

1209  (
cmp_vÆ
);

1210 
	}
}

1265 
CPU_CHAR
 *
	$Så_Ch¨
 (c⁄° 
CPU_CHAR
 *
p°r
,

1266 
CPU_CHAR
 
§ch_ch¨
)

1268 
CPU_CHAR
 *
p°r_πn
;

1271 
p°r_πn
 = 
	`Så_Ch¨_N
(
p°r
,

1272 
DEF_INT_CPU_U_MAX_VAL
,

1273 
§ch_ch¨
);

1275  (
p°r_πn
);

1276 
	}
}

1345 
CPU_CHAR
 *
	$Så_Ch¨_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

1346 
CPU_SIZE_T
 
Àn_max
,

1347 
CPU_CHAR
 
§ch_ch¨
)

1349 c⁄° 
CPU_CHAR
 *
p°r_ch¨
;

1350 
CPU_SIZE_T
 
Àn_§ch
;

1353 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1354  ((
CPU_CHAR
 *)0);

1357 i‡(
Àn_max
 < 1) {

1358  ((
CPU_CHAR
 *)0);

1362 
p°r_ch¨
 = 
p°r
;

1363 
Àn_§ch
 = 0u;

1365 –
p°r_ch¨
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

1366 (*
p°r_ch¨
 !–
CPU_CHAR
 )'\0') &&

1367 (*
p°r_ch¨
 !–
CPU_CHAR
 )
§ch_ch¨
) &&

1368 –
Àn_§ch
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

1369 
p°r_ch¨
++;

1370 
Àn_§ch
++;

1374 i‡(
p°r_ch¨
 =(c⁄° 
CPU_CHAR
 *)0) {

1375  ((
CPU_CHAR
 *)0);

1378 i‡(
Àn_§ch
 >
Àn_max
) {

1379  ((
CPU_CHAR
 *)0);

1382 i‡(*
p°r_ch¨
 !
§ch_ch¨
) {

1383  ((
CPU_CHAR
 *)0);

1387  ((
CPU_CHAR
 *)
p°r_ch¨
);

1388 
	}
}

1442 
CPU_CHAR
 *
	$Så_Ch¨_La°
 (c⁄° 
CPU_CHAR
 *
p°r
,

1443 
CPU_CHAR
 
§ch_ch¨
)

1445 
CPU_CHAR
 *
p°r_πn
;

1448 
p°r_πn
 = 
	`Så_Ch¨_La°_N
(
p°r
,

1449 
DEF_INT_CPU_U_MAX_VAL
,

1450 
§ch_ch¨
);

1452  (
p°r_πn
);

1453 
	}
}

1524 
CPU_CHAR
 *
	$Så_Ch¨_La°_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

1525 
CPU_SIZE_T
 
Àn_max
,

1526 
CPU_CHAR
 
§ch_ch¨
)

1528 c⁄° 
CPU_CHAR
 *
p°r_ch¨
;

1529 
CPU_SIZE_T
 
°r_Àn_max
;

1530 
CPU_SIZE_T
 
°r_Àn
;

1533 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1534  ((
CPU_CHAR
 *)0);

1537 i‡(
Àn_max
 < 1) {

1538  ((
CPU_CHAR
 *)0);

1542 
p°r_ch¨
 = 
p°r
;

1543 
°r_Àn_max
 = 
Àn_max
 - ((
CPU_CHAR
)'\0');

1544 
°r_Àn
 = 
	`Så_Lí_N
(
p°r_ch¨
, 
°r_Àn_max
);

1545 
p°r_ch¨
 +
°r_Àn
;

1547 i‡(
p°r_ch¨
 =(c⁄° 
CPU_CHAR
 *)0) {

1548  ((
CPU_CHAR
 *)0);

1551 –
p°r_ch¨
 !
p°r
) &&

1552 (*
p°r_ch¨
 !
§ch_ch¨
)) {

1553 
p°r_ch¨
--;

1557 i‡(*
p°r_ch¨
 !
§ch_ch¨
) {

1558  ((
CPU_CHAR
 *)0);

1562  ((
CPU_CHAR
 *)
p°r_ch¨
);

1563 
	}
}

1603 
CPU_CHAR
 *
	$Så_Ch¨_Rïœ˚
 (
CPU_CHAR
 *
p°r
,

1604 
CPU_CHAR
 
ch¨_§ch
,

1605 
CPU_CHAR
 
ch¨_ª∂a˚
)

1607 
CPU_CHAR
 *
p°r_πn
;

1610 
p°r_πn
 = 
	`Så_Ch¨_Rïœ˚_N
(
p°r
,

1611 
ch¨_§ch
,

1612 
ch¨_ª∂a˚
,

1613 
DEF_INT_CPU_U_MAX_VAL
);

1615  (
p°r_πn
);

1616 
	}
}

1665 
CPU_CHAR
 *
	$Så_Ch¨_Rïœ˚_N
 (
CPU_CHAR
 *
p°r
,

1666 
CPU_CHAR
 
ch¨_§ch
,

1667 
CPU_CHAR
 
ch¨_ª∂a˚
,

1668 
CPU_SIZE_T
 
Àn_max
)

1670 
CPU_CHAR
 *
p°r_ch¨
;

1671 
CPU_SIZE_T
 
Àn
;

1674 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1675  ((
CPU_CHAR
 *)0);

1678 i‡(
Àn_max
 < 1) {

1679  ((
CPU_CHAR
 *)0);

1682 
p°r_ch¨
 = 
p°r
;

1683 
Àn
 = 
Àn_max
;

1685 –
p°r_ch¨
 !(c⁄° 
CPU_CHAR
 *)0) &&

1686 (*
p°r_ch¨
 !
ASCII_CHAR_NULL
 ) &&

1687 –
Àn
 > 0)) {

1689 i‡(*
p°r_ch¨
 =
ch¨_§ch
) {

1690 *
p°r_ch¨
 = 
ch¨_ª∂a˚
;

1693 
p°r_ch¨
++;

1694 
Àn
--;

1697  (
p°r
);

1698 
	}
}

1761 
CPU_CHAR
 *
	$Så_Så
 (c⁄° 
CPU_CHAR
 *
p°r
,

1762 c⁄° 
CPU_CHAR
 *
p°r_§ch
)

1764 
CPU_CHAR
 *
p°r_πn
;

1767 
p°r_πn
 = 
	`Så_Så_N
(
p°r
,

1768 
p°r_§ch
,

1769 
DEF_INT_CPU_U_MAX_VAL
);

1771  (
p°r_πn
);

1772 
	}
}

1845 
CPU_CHAR
 *
	$Så_Så_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

1846 c⁄° 
CPU_CHAR
 *
p°r_§ch
,

1847 
CPU_SIZE_T
 
Àn_max
)

1849 
CPU_SIZE_T
 
°r_Àn
;

1850 
CPU_SIZE_T
 
°r_Àn_§ch
;

1851 
CPU_SIZE_T
 
Àn_max_§ch
;

1852 
CPU_SIZE_T
 
§ch_Àn
;

1853 
CPU_SIZE_T
 
§ch_ix
;

1854 
CPU_BOOLEAN
 
§ch_d⁄e
;

1855 
CPU_INT16S
 
§ch_cmp
;

1856 c⁄° 
CPU_CHAR
 *
p°r_°r
;

1857 c⁄° 
CPU_CHAR
 *
p°r_§ch_ix
;

1860 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1861  ((
CPU_CHAR
 *)0);

1863 i‡(
p°r_§ch
 =(c⁄° 
CPU_CHAR
 *)0) {

1864  ((
CPU_CHAR
 *)0);

1867 i‡(
Àn_max
 < 1) {

1868  ((
CPU_CHAR
 *)0);

1872 
Àn_max_§ch
 = (
Àn_max
 < 
DEF_INT_CPU_U_MAX_VAL
)

1873 ? (
Àn_max
 + 1uË: 
DEF_INT_CPU_U_MAX_VAL
;

1875 
°r_Àn
 = 
	`Så_Lí_N
(
p°r
, 
Àn_max
);

1876 
°r_Àn_§ch
 = 
	`Så_Lí_N
(
p°r_§ch
, 
Àn_max_§ch
);

1877 i‡(
°r_Àn_§ch
 < 1) {

1878  ((
CPU_CHAR
 *)
p°r
);

1880 i‡(
°r_Àn_§ch
 > 
°r_Àn
) {

1881  ((
CPU_CHAR
 *)0);

1884 
p°r_°r
 = 
p°r
 + 
°r_Àn
;

1885 i‡(
p°r_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1886  ((
CPU_CHAR
 *)0);

1888 
p°r_°r
 = 
p°r_§ch
 + 
°r_Àn_§ch
;

1889 i‡(
p°r_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1890  ((
CPU_CHAR
 *)0);

1894 
§ch_Àn
 = 
°r_Àn
 - 
°r_Àn_§ch
;

1895 
§ch_ix
 = 0u;

1896 
§ch_d⁄e
 = 
DEF_NO
;

1899 
p°r_§ch_ix
 = (c⁄° 
CPU_CHAR
 *)(
p°r
 + 
§ch_ix
);

1900 
§ch_cmp
 = 
	`Så_Cmp_N
(
p°r_§ch_ix
, 
p°r_§ch
, 
°r_Àn_§ch
);

1901 
§ch_d⁄e
 = (
§ch_cmp
 =0Ë? 
DEF_YES
 : 
DEF_NO
;

1902 
§ch_ix
++;

1903 } (
§ch_d⁄e
 =
DEF_NO
Ë&& (
§ch_ix
 <
§ch_Àn
));

1906 i‡(
§ch_cmp
 != 0) {

1907  ((
CPU_CHAR
 *)0);

1910  ((
CPU_CHAR
 *)
p°r_§ch_ix
);

1911 
	}
}

2038 
CPU_CHAR
 *
	$Så_FmtNbr_I¡32U
 (
CPU_INT32U
 
nbr
,

2039 
CPU_INT08U
 
nbr_dig
,

2040 
CPU_INT08U
 
nbr_ba£
,

2041 
CPU_CHAR
 
Àad_ch¨
,

2042 
CPU_BOOLEAN
 
lowî_ˇ£
,

2043 
CPU_BOOLEAN
 
nul
,

2044 
CPU_CHAR
 *
p°r
)

2046 
CPU_CHAR
 *
p°r_fmt
;

2049 
p°r_fmt
 = 
	`Så_FmtNbr_I¡32
(
nbr
,

2050 
nbr_dig
,

2051 
nbr_ba£
,

2052 
DEF_NO
,

2053 
Àad_ch¨
,

2054 
lowî_ˇ£
,

2055 
nul
,

2056 
p°r
);

2058  (
p°r_fmt
);

2059 
	}
}

2254 
CPU_CHAR
 *
	$Så_FmtNbr_I¡32S
 (
CPU_INT32S
 
nbr
,

2255 
CPU_INT08U
 
nbr_dig
,

2256 
CPU_INT08U
 
nbr_ba£
,

2257 
CPU_CHAR
 
Àad_ch¨
,

2258 
CPU_BOOLEAN
 
lowî_ˇ£
,

2259 
CPU_BOOLEAN
 
nul
,

2260 
CPU_CHAR
 *
p°r
)

2262 
CPU_CHAR
 *
p°r_fmt
;

2263 
CPU_INT32S
 
nbr_fmt
;

2264 
CPU_BOOLEAN
 
nbr_√g
;

2267 i‡(
nbr
 < 0) {

2268 
nbr_fmt
 = -
nbr
;

2269 
nbr_√g
 = 
DEF_YES
;

2271 
nbr_fmt
 = 
nbr
;

2272 
nbr_√g
 = 
DEF_NO
;

2275 
p°r_fmt
 = 
	`Så_FmtNbr_I¡32
((
CPU_INT32U
)
nbr_fmt
,

2276 
nbr_dig
,

2277 
nbr_ba£
,

2278 
nbr_√g
,

2279 
Àad_ch¨
,

2280 
lowî_ˇ£
,

2281 
nul
,

2282 
p°r
);

2284  (
p°r_fmt
);

2285 
	}
}

2567 #i‡(
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

2568 
CPU_CHAR
 *
	$Så_FmtNbr_32
 (
CPU_FP32
 
nbr
,

2569 
CPU_INT08U
 
nbr_dig
,

2570 
CPU_INT08U
 
nbr_dp
,

2571 
CPU_CHAR
 
Àad_ch¨
,

2572 
CPU_BOOLEAN
 
nul
,

2573 
CPU_CHAR
 *
p°r
)

2575 
CPU_CHAR
 *
p°r_fmt
;

2576 
CPU_DATA
 
i
;

2577 
CPU_FP32
 
nbr_fmt
;

2578 
CPU_FP32
 
nbr_log
;

2579 
CPU_INT32U
 
nbr_shi·d
;

2580 
CPU_INT16U
 
nbr_dig_max
;

2581 
CPU_INT16U
 
nbr_dig_sig
;

2582 
CPU_INT08U
 
nbr_√g_sign
;

2583 
CPU_INT08U
 
dig_vÆ
;

2584 
CPU_FP32
 
dig_exp
;

2585 
CPU_FP32
 
dp_exp
;

2586 
CPU_BOOLEAN
 
Àad_ch¨_dig
;

2587 
CPU_BOOLEAN
 
Àad_ch¨_fmtd
;

2588 
CPU_BOOLEAN
 
Àad_ch¨_0
;

2589 
CPU_BOOLEAN
 
fmt_övÆid
;

2590 
CPU_BOOLEAN
 
¥öt_ch¨
;

2591 
CPU_BOOLEAN
 
nbr_√g
;

2592 
CPU_BOOLEAN
 
nbr_√g_fmtd
;

2596 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

2597  ((
CPU_CHAR
 *)0);

2600 
dig_exp
 = 1.0f;

2601 
fmt_övÆid
 = 
DEF_NO
;

2602 
Àad_ch¨_0
 = (
Àad_ch¨
 ='0'Ë? 
DEF_YES
 : 
DEF_NO
;

2603 
nbr_fmt
 = 0.0f;

2604 
nbr_√g
 = 
DEF_NO
;

2606 i‡((
nbr_dig
 < 1Ë&& (
nbr_dp
 < 1)) {

2607 
fmt_övÆid
 = 
DEF_YES
;

2610 i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

2611 
¥öt_ch¨
 = 
	`ASCII_IsPröt
(
Àad_ch¨
);

2612 i‡(
¥öt_ch¨
 !
DEF_YES
) {

2613 
fmt_övÆid
 = 
DEF_YES
;

2615 } i‡(
Àad_ch¨
 != '0') {

2616 
Àad_ch¨_dig
 = 
	`ASCII_IsDig
(
Àad_ch¨
);

2617 i‡(
Àad_ch¨_dig
 =
DEF_YES
) {

2618 
fmt_övÆid
 = 
DEF_YES
;

2625 
p°r_fmt
 = 
p°r
;

2627 i‡(
fmt_övÆid
 =
DEF_NO
) {

2628 i‡(
nbr
 < 0.0f) {

2629 
nbr_fmt
 = -
nbr
;

2630 
nbr_√g_sign
 = 1u;

2631 
nbr_√g
 = 
DEF_YES
;

2633 
nbr_fmt
 = 
nbr
;

2634 
nbr_√g_sign
 = 0u;

2635 
nbr_√g
 = 
DEF_NO
;

2638 
nbr_log
 = 
nbr_fmt
;

2639 
nbr_dig_max
 = 0u;

2640 
nbr_log
 >= 1.0f) {

2641 
nbr_dig_max
++;

2642 
nbr_log
 /= 10.0f;

2645 i‡(((
nbr_dig
 >(
nbr_dig_max
 + 
nbr_√g_sign
)) ||

2646 (
nbr_dig_max
 < 1)) &&

2647 ((
nbr_dig
 > 1) ||

2648 (
nbr_dp
 > 0) ||

2649 (
nbr_√g
 =
DEF_NO
))) {

2651 
i
 = 1u; i < 
nbr_dig
; i++) {

2652 
dig_exp
 *= 10.0f;

2655 
nbr_√g_fmtd
 = 
DEF_NO
;

2656 
nbr_dig_sig
 = 0u;

2657 
Àad_ch¨_fmtd
 = 
DEF_NO
;

2659 
fmt_övÆid
 = 
DEF_YES
;

2665 
i
 = 
nbr_dig
; i > 0; i--) {

2666 i‡(
fmt_övÆid
 =
DEF_NO
) {

2667 i‡(
nbr_dig_sig
 < 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
) {

2668 
nbr_shi·d
 = (
CPU_INT32U
)(
nbr_fmt
 / 
dig_exp
);

2669 i‡((
nbr_shi·d
 > 0) ||

2670 (
i
 == 1u)) {

2672 i‡((
nbr_√g
 =
DEF_YES
) &&

2673 (
nbr_√g_fmtd
 =
DEF_NO
 )) {

2675 i‡(
Àad_ch¨_fmtd
 =
DEF_YES
) {

2676 
p°r_fmt
--;

2678 *
p°r_fmt
++ = '-';

2679 
nbr_√g_fmtd
 = 
DEF_YES
;

2682 i‡(
nbr_shi·d
 > 0) {

2683 
dig_vÆ
 = (
CPU_INT08U
)(
nbr_shi·d
 % 10u);

2684 *
p°r_fmt
++ = (
CPU_CHAR
 )(
dig_vÆ
 + '0');

2686 
nbr_dig_sig
++;

2688 } i‡((
nbr_dig
 > 1) ||

2689 (
nbr_√g
 =
DEF_NO
)) {

2690 *
p°r_fmt
++ = '0';

2693 } i‡((
nbr_√g
 =
DEF_YES
) &&

2694 (
Àad_ch¨_0
 =
DEF_YES
) &&

2695 (
nbr_√g_fmtd
 =
DEF_NO
 )) {

2697 *
p°r_fmt
++ = '-';

2698 
nbr_√g_fmtd
 = 
DEF_YES
;

2700 } i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

2701 *
p°r_fmt
++ = 
Àad_ch¨
;

2702 
Àad_ch¨_fmtd
 = 
DEF_YES
;

2705 
dig_exp
 /= 10.0f;

2708 *
p°r_fmt
++ = '0';

2712 *
p°r_fmt
++ = '?';

2717 i‡(
nbr_dp
 > 0) {

2718 i‡(
nbr_dig
 < 1) {

2719 i‡(
fmt_övÆid
 =
DEF_NO
) {

2720 i‡((
nbr_√g
 =
DEF_YES
) &&

2721 (
nbr_√g_fmtd
 =
DEF_NO
 )) {

2722 *
p°r_fmt
++ = '-';

2724 *
p°r_fmt
++ = '0';

2727 *
p°r_fmt
++ = '?';

2731 i‡(
fmt_övÆid
 =
DEF_NO
) {

2732 *
p°r_fmt
++ = '.';

2734 *
p°r_fmt
++ = '?';

2737 
dp_exp
 = 10.0f;

2738 
i
 = 0u; i < 
nbr_dp
; i++) {

2739 i‡(
fmt_övÆid
 =
DEF_NO
) {

2741 i‡(
nbr_dig_sig
 < 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
) {

2742 
nbr_shi·d
 = (
CPU_INT32U
)(
nbr_fmt
 * 
dp_exp
);

2743 
dig_vÆ
 = (
CPU_INT32U
)(
nbr_shi·d
 % 10u);

2744 *
p°r_fmt
++ = (
CPU_CHAR
 )(
dig_vÆ
 + '0');

2745 
dp_exp
 *= 10.0f;

2747 i‡((
nbr_shi·d
 > 0) ||

2748 (
nbr_dig_sig
 > 0)) {

2749 
nbr_dig_sig
++;

2753 *
p°r_fmt
++ = '0';

2757 *
p°r_fmt
++ = '?';

2763 i‡(
nul
 !
DEF_NO
) {

2764 *
p°r_fmt
 = (
CPU_CHAR
)'\0';

2768 i‡(
fmt_övÆid
 !
DEF_NO
) {

2769  ((
CPU_CHAR
 *)0);

2773  (
p°r
);

2774 
	}
}

2972 
CPU_INT32U
 
	$Så_P¨£Nbr_I¡32U
 (c⁄° 
CPU_CHAR
 *
p°r
,

2973 
CPU_CHAR
 **
p°r_√xt
,

2974 
CPU_INT08U
 
nbr_ba£
)

2976 
CPU_INT32U
 
nbr
;

2979 
nbr
 = 
	`Så_P¨£Nbr_I¡32
–
p°r
,

2980 
p°r_√xt
,

2981 
nbr_ba£
,

2982 
DEF_NO
,

2983 (
CPU_BOOLEAN
 *)0);

2985  (
nbr
);

2986 
	}
}

3188 
CPU_INT32S
 
	$Så_P¨£Nbr_I¡32S
 (c⁄° 
CPU_CHAR
 *
p°r
,

3189 
CPU_CHAR
 **
p°r_√xt
,

3190 
CPU_INT08U
 
nbr_ba£
)

3192 
CPU_INT32S
 
nbr
;

3193 
CPU_INT32U
 
nbr_abs
;

3194 
CPU_BOOLEAN
 
nbr_√g
;

3197 
nbr_abs
 = 
	`Så_P¨£Nbr_I¡32
(
p°r
,

3198 
p°r_√xt
,

3199 
nbr_ba£
,

3200 
DEF_YES
,

3201 &
nbr_√g
);

3203 i‡(
nbr_√g
 =
DEF_NO
) {

3204 
nbr
 = (
nbr_abs
 > (
CPU_INT32U
Ë
DEF_INT_32S_MAX_VAL
Ë? (
CPU_INT32S
)DEF_INT_32S_MAX_VAL

3205 : (
CPU_INT32S
)
nbr_abs
;

3207 
nbr
 = (
nbr_abs
 > (
CPU_INT32U
)-
DEF_INT_32S_MIN_VAL_ONES_CPL
Ë? (
CPU_INT32S
)
DEF_INT_32S_MIN_VAL


3208 : -(
CPU_INT32S
)
nbr_abs
;

3211  (
nbr
);

3212 
	}
}

3443 
CPU_CHAR
 *
	$Så_FmtNbr_I¡32
 (
CPU_INT32U
 
nbr
,

3444 
CPU_INT08U
 
nbr_dig
,

3445 
CPU_INT08U
 
nbr_ba£
,

3446 
CPU_BOOLEAN
 
nbr_√g
,

3447 
CPU_CHAR
 
Àad_ch¨
,

3448 
CPU_BOOLEAN
 
lowî_ˇ£
,

3449 
CPU_BOOLEAN
 
nul
,

3450 
CPU_CHAR
 *
p°r
)

3452 
CPU_CHAR
 *
p°r_fmt
;

3453 
CPU_DATA
 
i
;

3454 
CPU_INT32U
 
nbr_fmt
;

3455 
CPU_INT32U
 
nbr_log
;

3456 
CPU_INT08U
 
nbr_dig_max
;

3457 
CPU_INT08U
 
nbr_dig_mö
;

3458 
CPU_INT08U
 
nbr_dig_fmtd
;

3459 
CPU_INT08U
 
nbr_√g_sign
;

3460 
CPU_INT08U
 
nbr_Àad_ch¨
;

3461 
CPU_INT08U
 
dig_vÆ
;

3462 
CPU_INT08U
 
Àad_ch¨_dñè_0
;

3463 
CPU_INT08U
 
Àad_ch¨_dñè_a
;

3464 
CPU_BOOLEAN
 
Àad_ch¨_dig
;

3465 
CPU_BOOLEAN
 
Àad_ch¨_0
;

3466 
CPU_BOOLEAN
 
fmt_övÆid
;

3467 
CPU_BOOLEAN
 
¥öt_ch¨
;

3468 
CPU_BOOLEAN
 
nbr_√g_fmtd
;

3472 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

3473  ((
CPU_CHAR
 *)0);

3476 
fmt_övÆid
 = 
DEF_NO
;

3477 
Àad_ch¨_0
 = 
DEF_NO
;

3479 i‡(
nbr_dig
 < 1) {

3480 
fmt_övÆid
 = 
DEF_YES
;

3483 i‡((
nbr_ba£
 < 2u) ||

3484 (
nbr_ba£
 > 36u)) {

3485 
fmt_övÆid
 = 
DEF_YES
;

3488 i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

3489 
¥öt_ch¨
 = 
	`ASCII_IsPröt
(
Àad_ch¨
);

3490 i‡(
¥öt_ch¨
 !
DEF_YES
) {

3491 
fmt_övÆid
 = 
DEF_YES
;

3493 } i‡(
Àad_ch¨
 != '0') {

3494 
Àad_ch¨_dñè_0
 = (
CPU_INT08U
)(
Àad_ch¨
 - '0');

3495 i‡(
lowî_ˇ£
 !
DEF_YES
) {

3496 
Àad_ch¨_dñè_a
 = (
CPU_INT08U
)(
Àad_ch¨
 - 'A');

3498 
Àad_ch¨_dñè_a
 = (
CPU_INT08U
)(
Àad_ch¨
 - 'a');

3501 
Àad_ch¨_dig
 = (((
nbr_ba£
 <10uË&& (
Àad_ch¨_dñè_0
 <Çbr_base)) ||

3502 ((
nbr_ba£
 > 10uË&& ((
Àad_ch¨_dñè_0
 < 10u) ||

3503 (
Àad_ch¨_dñè_a
 < (
nbr_ba£
 - 10u))))Ë? 
DEF_YES
 : 
DEF_NO
;

3505 i‡(
Àad_ch¨_dig
 =
DEF_YES
) {

3506 
fmt_övÆid
 = 
DEF_YES
;

3513 
p°r_fmt
 = 
p°r
;

3515 i‡(
fmt_övÆid
 =
DEF_NO
) {

3516 
nbr_fmt
 = 
nbr
;

3517 
nbr_log
 = 
nbr
;

3518 
nbr_dig_max
 = 1u;

3519 
nbr_log
 >
nbr_ba£
) {

3520 
nbr_dig_max
++;

3521 
nbr_log
 /
nbr_ba£
;

3524 
nbr_√g_sign
 = (
nbr_√g
 =
DEF_YES
) ? 1u : 0u;

3525 i‡(
nbr_dig
 >(
nbr_dig_max
 + 
nbr_√g_sign
)) {

3526 
nbr_√g_fmtd
 = 
DEF_NO
;

3527 
nbr_dig_mö
 = 
	`DEF_MIN
(
nbr_dig_max
, 
nbr_dig
);

3529 i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

3530 
nbr_dig_fmtd
 = 
nbr_dig
;

3531 
nbr_Àad_ch¨
 = 
nbr_dig
 -

3532 
nbr_dig_mö
 - 
nbr_√g_sign
;

3534 
nbr_dig_fmtd
 = 
nbr_dig_mö
 + 
nbr_√g_sign
;

3535 
nbr_Àad_ch¨
 = 0u;

3538 i‡(
nbr_Àad_ch¨
 > 0) {

3539 
Àad_ch¨_0
 = (
Àad_ch¨
 == '0')

3540 ? 
DEF_YES
 : 
DEF_NO
;

3542 
Àad_ch¨_0
 = 
DEF_NO
;

3546 
fmt_övÆid
 = 
DEF_YES
;

3550 i‡(
fmt_övÆid
 !
DEF_NO
) {

3551 
nbr_dig_fmtd
 = 
nbr_dig
;

3556 
p°r_fmt
 +
nbr_dig_fmtd
;

3558 i‡(
nul
 !
DEF_NO
) {

3559 *
p°r_fmt
 = (
CPU_CHAR
)'\0';

3561 
p°r_fmt
--;

3564 
i
 = 0u; i < 
nbr_dig_fmtd
; i++) {

3565 i‡(
fmt_övÆid
 =
DEF_NO
) {

3566 i‡((
nbr_fmt
 > 0) ||

3567 (
i
 == 0u)) {

3569 
dig_vÆ
 = (
CPU_INT08U
)(
nbr_fmt
 % 
nbr_ba£
);

3570 i‡(
dig_vÆ
 < 10u) {

3571 *
p°r_fmt
-- = (
CPU_CHAR
)(
dig_vÆ
 + '0');

3573 i‡(
lowî_ˇ£
 !
DEF_YES
) {

3574 *
p°r_fmt
-- = (
CPU_CHAR
)((
dig_vÆ
 - 10u) + 'A');

3576 *
p°r_fmt
-- = (
CPU_CHAR
)((
dig_vÆ
 - 10u) + 'a');

3580 
nbr_fmt
 /
nbr_ba£
;

3582 } i‡((
nbr_√g
 =
DEF_YES
) &&

3583 (((
Àad_ch¨_0
 =
DEF_NO
 ) &&

3584 (
nbr_√g_fmtd
 =
DEF_NO
 )) ||

3585 ((
Àad_ch¨_0
 !
DEF_NO
 ) &&

3586 (
i
 =(
nbr_dig_fmtd
 - 1u))))) {

3588 *
p°r_fmt
-- = '-';

3589 
nbr_√g_fmtd
 = 
DEF_YES
;

3591 } i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

3592 *
p°r_fmt
-- = 
Àad_ch¨
;

3596 *
p°r_fmt
-- = '?';

3601 i‡(
fmt_övÆid
 !
DEF_NO
) {

3602  ((
CPU_CHAR
 *)0);

3606  (
p°r
);

3607 
	}
}

3836 
CPU_INT32U
 
	$Så_P¨£Nbr_I¡32
 (c⁄° 
CPU_CHAR
 *
p°r
,

3837 
CPU_CHAR
 **
p°r_√xt
,

3838 
CPU_INT08U
 
nbr_ba£
,

3839 
CPU_BOOLEAN
 
nbr_sig√d
,

3840 
CPU_BOOLEAN
 *
≤br_√g
)

3842 c⁄° 
CPU_CHAR
 *
p°r_∑r£
;

3843 c⁄° 
CPU_CHAR
 *
p°r_∑r£_nbr
;

3844 
CPU_CHAR
 *
p°r_∑r£_unu£d
;

3845 
CPU_CHAR
 
∑r£_ch¨
;

3846 
CPU_INT08U
 
∑r£_dig
;

3847 
CPU_INT32U
 
nbr
;

3848 
CPU_BOOLEAN
 
nbr_√g_unu£d
;

3849 
CPU_BOOLEAN
 
nbr_dig
;

3850 
CPU_BOOLEAN
 
nbr_Æpha
;

3851 
CPU_BOOLEAN
 
nbr_hex
;

3852 
CPU_BOOLEAN
 
nbr_hex_lowî
;

3853 
CPU_BOOLEAN
 
whôe•a˚
;

3854 
CPU_BOOLEAN
 
√g
;

3855 
CPU_BOOLEAN
 
ovf
;

3856 
CPU_BOOLEAN
 
d⁄e
;

3859 i‡(
p°r_√xt
 =(
CPU_CHAR
 **) 0) {

3860 
p°r_√xt
 = (
CPU_CHAR
 **)&
p°r_∑r£_unu£d
;

3861 ()&
p°r_∑r£_unu£d
;

3863 *
p°r_√xt
 = (
CPU_CHAR
 *)
p°r
;

3865 i‡(
≤br_√g
 =(
CPU_BOOLEAN
 *) 0) {

3866 
≤br_√g
 = (
CPU_BOOLEAN
 *)&
nbr_√g_unu£d
;

3867 ()&
nbr_√g_unu£d
;

3869 *
≤br_√g
 = 
DEF_NO
;

3872 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

3876 i‡((
nbr_ba£
 == 1u) ||

3877 (
nbr_ba£
 > 36u)) {

3883 
p°r_∑r£
 = 
p°r
;

3885 
whôe•a˚
 = 
	`ASCII_IsS∑˚
(*
p°r_∑r£
);

3886 
whôe•a˚
 =
DEF_YES
) {

3887 
p°r_∑r£
++;

3888 
whôe•a˚
 = 
	`ASCII_IsS∑˚
(*
p°r_∑r£
);

3891 *
p°r_∑r£
) {

3893 
p°r_∑r£
++;

3894 
√g
 = 
DEF_NO
;

3899 i‡(
nbr_sig√d
 =
DEF_YES
) {

3900 
p°r_∑r£
++;

3902 
√g
 = 
DEF_YES
;

3907 
√g
 = 
DEF_NO
;

3913 
p°r_∑r£_nbr
 = 
p°r_∑r£
;

3915 
nbr_ba£
) {

3917 i‡(*
p°r_∑r£
 == '0') {

3918 
p°r_∑r£
++;

3919 *
p°r_∑r£
) {

3922 
nbr_ba£
 = 16u;

3923 
∑r£_ch¨
 = (
CPU_CHAR
)(*(
p°r_∑r£
 + 1));

3924 
nbr_hex
 = 
	`ASCII_IsDigHex
(
∑r£_ch¨
);

3925 i‡(
nbr_hex
 =
DEF_YES
) {

3926 
p°r_∑r£
++;

3932 
nbr_ba£
 = 8u;

3937 
nbr_ba£
 = 10u;

3943 i‡(*
p°r_∑r£
 == '0') {

3944 
p°r_∑r£
++;

3950 i‡(*
p°r_∑r£
 == '0') {

3951 
p°r_∑r£
++;

3952 *
p°r_∑r£
) {

3955 
∑r£_ch¨
 = (
CPU_CHAR
)(*(
p°r_∑r£
 + 1));

3956 
nbr_hex
 = 
	`ASCII_IsDigHex
(
∑r£_ch¨
);

3957 i‡(
nbr_hex
 =
DEF_YES
) {

3958 
p°r_∑r£
++;

3976 
nbr
 = 0u;

3977 
ovf
 = 
DEF_NO
;

3978 
d⁄e
 = 
DEF_NO
;

3980 
d⁄e
 =
DEF_NO
) {

3981 
∑r£_ch¨
 = (
CPU_CHAR
)*
p°r_∑r£
;

3982 
nbr_Æpha
 = 
	`ASCII_IsAÕhaNum
(
∑r£_ch¨
);

3983 i‡(
nbr_Æpha
 =
DEF_YES
) {

3985 
nbr_dig
 = 
	`ASCII_IsDig
(
∑r£_ch¨
);

3986 i‡(
nbr_dig
 =
DEF_YES
) {

3987 
∑r£_dig
 = (
CPU_INT08U
)(
∑r£_ch¨
 - '0');

3989 
nbr_hex_lowî
 = 
	`ASCII_IsLowî
(
∑r£_ch¨
);

3990 i‡(
nbr_hex_lowî
 =
DEF_YES
) {

3991 
∑r£_dig
 = (
CPU_INT08U
)((
∑r£_ch¨
 - 'a') + 10u);

3993 
∑r£_dig
 = (
CPU_INT08U
)((
∑r£_ch¨
 - 'A') + 10u);

3997 i‡(
∑r£_dig
 < 
nbr_ba£
) {

3998 i‡(
ovf
 =
DEF_NO
) {

3999 i‡(
nbr
 <
Så_Mu…OvfThTbl_I¡32U
[
nbr_ba£
]) {

4001 
nbr
 *
nbr_ba£
;

4002 
nbr
 +
∑r£_dig
;

4003 i‡(
nbr
 < 
∑r£_dig
) {

4004 
ovf
 = 
DEF_YES
;

4007 
ovf
 = 
DEF_YES
;

4010 
p°r_∑r£
++;

4013 
d⁄e
 = 
DEF_YES
;

4017 
d⁄e
 = 
DEF_YES
;

4021 i‡(
ovf
 =
DEF_YES
) {

4022 
nbr
 = 
DEF_INT_32U_MAX_VAL
;

4026 i‡(
p°r_∑r£
 !
p°r_∑r£_nbr
) {

4027 *
p°r_√xt
 = (
CPU_CHAR
 *)
p°r_∑r£
;

4029 *
p°r_√xt
 = (
CPU_CHAR
 *)
p°r
;

4032 *
≤br_√g
 = 
√g
;

4035  (
nbr
);

4036 
	}
}

	@UCOSIII/uC-LIB/lib_str.h

59 #i‚de‡ 
LIB_STR_MODULE_PRESENT


60 
	#LIB_STR_MODULE_PRESENT


	)

106 
	#LIB_STR_FP_MAX_NBR_DIG_SIG_MIN
 1u

	)

107 
	#LIB_STR_FP_MAX_NBR_DIG_SIG_MAX
 9u

	)

108 
	#LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT
 7u

	)

153 
	~<˝u.h
>

155 
	~<lib_def.h
>

156 
	~<lib_ascii.h
>

158 
	~<lib_cfg.h
>

161 
	~<°dio.h
>

171 #ifde‡ 
LIB_STR_MODULE


172 
	#LIB_STR_EXT


	)

174 
	#LIB_STR_EXT
 

	)

198 #i‚de‡ 
LIB_STR_CFG_FP_EN


199 
	#LIB_STR_CFG_FP_EN
 
DEF_DISABLED


	)

206 #i‚de‡ 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG


207 
	#LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
 
LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT


	)

217 
	#STR_CR_LF
 "\r\n"

	)

218 
	#STR_LF_CR
 "\n\r"

	)

219 
	#STR_NEW_LINE
 
STR_CR_LF


	)

220 
	#STR_PARENT_PATH
 ".."

	)

222 
	#STR_CR_LF_LEN
 ((
STR_CR_LF
Ë- 1)

	)

223 
	#STR_LF_CR_LEN
 ((
STR_LF_CR
Ë- 1)

	)

224 
	#STR_NEW_LINE_LEN
 ((
STR_NEW_LINE
Ë- 1)

	)

225 
	#STR_PARENT_PATH_LEN
 ((
STR_PARENT_PATH
Ë- 1)

	)

262 
	#Så_FmtPröt
 
¢¥ötf


	)

263 
	#Så_FmtSˇn
 
ssˇnf


	)

273 
CPU_SIZE_T
 
Så_Lí
 (c⁄° 
CPU_CHAR
 *
p°r
);

275 
CPU_SIZE_T
 
Så_Lí_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

276 
CPU_SIZE_T
 
Àn_max
);

280 
CPU_CHAR
 *
Så_C›y
 ( CPU_CHAR *
p°r_de°
,

281 c⁄° 
CPU_CHAR
 *
p°r_§c
);

283 
CPU_CHAR
 *
Så_C›y_N
 ( CPU_CHAR *
p°r_de°
,

284 c⁄° 
CPU_CHAR
 *
p°r_§c
,

285 
CPU_SIZE_T
 
Àn_max
);

288 
CPU_CHAR
 *
Så_C©
 ( CPU_CHAR *
p°r_de°
,

289 c⁄° 
CPU_CHAR
 *
p°r_ˇt
);

291 
CPU_CHAR
 *
Så_C©_N
 ( CPU_CHAR *
p°r_de°
,

292 c⁄° 
CPU_CHAR
 *
p°r_ˇt
,

293 
CPU_SIZE_T
 
Àn_max
);

297 
CPU_INT16S
 
Så_Cmp
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

298 c⁄° 
CPU_CHAR
 *
p2_°r
);

300 
CPU_INT16S
 
Så_Cmp_N
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

301 c⁄° 
CPU_CHAR
 *
p2_°r
,

302 
CPU_SIZE_T
 
Àn_max
);

304 
CPU_INT16S
 
Så_CmpIgn‹eCa£
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

305 c⁄° 
CPU_CHAR
 *
p2_°r
);

307 
CPU_INT16S
 
Så_CmpIgn‹eCa£_N
(c⁄° 
CPU_CHAR
 *
p1_°r
,

308 c⁄° 
CPU_CHAR
 *
p2_°r
,

309 
CPU_SIZE_T
 
Àn_max
);

313 
CPU_CHAR
 *
Så_Ch¨
 (c⁄° CPU_CHAR *
p°r
,

314 
CPU_CHAR
 
§ch_ch¨
);

316 
CPU_CHAR
 *
Så_Ch¨_N
 (c⁄° CPU_CHAR *
p°r
,

317 
CPU_SIZE_T
 
Àn_max
,

318 
CPU_CHAR
 
§ch_ch¨
);

320 
CPU_CHAR
 *
Så_Ch¨_La°
 (c⁄° CPU_CHAR *
p°r
,

321 
CPU_CHAR
 
§ch_ch¨
);

323 
CPU_CHAR
 *
Så_Ch¨_La°_N
 (c⁄° CPU_CHAR *
p°r
,

324 
CPU_SIZE_T
 
Àn_max
,

325 
CPU_CHAR
 
§ch_ch¨
);

327 
CPU_CHAR
 *
Så_Ch¨_Rïœ˚
 ( CPU_CHAR *
p°r
,

328 
CPU_CHAR
 
ch¨_§ch
,

329 
CPU_CHAR
 
ch¨_ª∂a˚
);

331 
CPU_CHAR
 *
Så_Ch¨_Rïœ˚_N
 ( CPU_CHAR *
p°r
,

332 
CPU_CHAR
 
ch¨_§ch
,

333 
CPU_CHAR
 
ch¨_ª∂a˚
,

334 
CPU_SIZE_T
 
Àn_max
);

336 
CPU_CHAR
 *
Så_Så
 (c⁄° CPU_CHAR *
p°r
,

337 c⁄° 
CPU_CHAR
 *
p°r_§ch
);

339 
CPU_CHAR
 *
Så_Så_N
 (c⁄° CPU_CHAR *
p°r
,

340 c⁄° 
CPU_CHAR
 *
p°r_§ch
,

341 
CPU_SIZE_T
 
Àn_max
);

345 
CPU_CHAR
 *
Så_FmtNbr_I¡32U
 ( 
CPU_INT32U
 
nbr
,

346 
CPU_INT08U
 
nbr_dig
,

347 
CPU_INT08U
 
nbr_ba£
,

348 
CPU_CHAR
 
Àad_ch¨
,

349 
CPU_BOOLEAN
 
lowî_ˇ£
,

350 
CPU_BOOLEAN
 
nul
,

351 
CPU_CHAR
 *
p°r
);

353 
CPU_CHAR
 *
Så_FmtNbr_I¡32S
 ( 
CPU_INT32S
 
nbr
,

354 
CPU_INT08U
 
nbr_dig
,

355 
CPU_INT08U
 
nbr_ba£
,

356 
CPU_CHAR
 
Àad_ch¨
,

357 
CPU_BOOLEAN
 
lowî_ˇ£
,

358 
CPU_BOOLEAN
 
nul
,

359 
CPU_CHAR
 *
p°r
);

361 #i‡(
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

362 
CPU_CHAR
 *
Så_FmtNbr_32
 ( 
CPU_FP32
 
nbr
,

363 
CPU_INT08U
 
nbr_dig
,

364 
CPU_INT08U
 
nbr_dp
,

365 
CPU_CHAR
 
Àad_ch¨
,

366 
CPU_BOOLEAN
 
nul
,

367 
CPU_CHAR
 *
p°r
);

372 
CPU_INT32U
 
Så_P¨£Nbr_I¡32U
(c⁄° 
CPU_CHAR
 *
p°r
,

373 
CPU_CHAR
 **
p°r_√xt
,

374 
CPU_INT08U
 
nbr_ba£
);

376 
CPU_INT32S
 
Så_P¨£Nbr_I¡32S
(c⁄° 
CPU_CHAR
 *
p°r
,

377 
CPU_CHAR
 **
p°r_√xt
,

378 
CPU_INT08U
 
nbr_ba£
);

387 #i‚de‡ 
LIB_STR_CFG_FP_EN


392 #ñi‡ ((
LIB_STR_CFG_FP_EN
 !
DEF_DISABLED
) && \

393 (
	gLIB_STR_CFG_FP_EN
 !
DEF_ENABLED
 ))

399 #ñi‡ (
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

401 #i‚de‡ 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG


406 #ñi‡ (
DEF_CHK_VAL
(
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
, \

407 
LIB_STR_FP_MAX_NBR_DIG_SIG_MIN
, \

408 
LIB_STR_FP_MAX_NBR_DIG_SIG_MAX
Ë!
DEF_OK
)

	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/GNU/os_cpu.h

34 #i‚de‡ 
OS_CPU_H


35 
	#OS_CPU_H


	)

37 #ifde‡ 
OS_CPU_GLOBALS


38 
	#OS_CPU_EXT


	)

40 
	#OS_CPU_EXT
 

	)

49 #i‚de‡ 
NVIC_INT_CTRL


50 
	#NVIC_INT_CTRL
 *((
CPU_REG32
 *)0xE000ED04)

	)

53 #i‚de‡ 
NVIC_PENDSVSET


54 
	#NVIC_PENDSVSET
 0x10000000

	)

57 
	#OS_TASK_SW
(Ë
NVIC_INT_CTRL
 = 
NVIC_PENDSVSET


	)

58 
	#OSI¡CtxSw
(Ë
NVIC_INT_CTRL
 = 
NVIC_PENDSVSET


	)

79 #i‡ 
OS_CFG_TS_EN
 == 1u

80 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`CPU_TS_TmrRd
(Ë

	)

82 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

85 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

86 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

115 
	#OS_CPU_CFG_SYSTICK_PRIO
 0u

	)

123 
OS_CPU_EXT
 
CPU_STK
 *
OS_CPU_Ex˚±StkBa£
;

131 
OSSèπHighRdy
 ();

133 
OS_CPU_PídSVH™dÀr
 ();

136 
OS_CPU_SysTickH™dÀr
();

137 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
);

	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/GNU/os_cpu_c.c

35 
	#OS_CPU_GLOBALS


	)

37 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


38 c⁄° 
CPU_CHAR
 *
	gos_˝u_c__c
 = "$Id: $";

48 
	~<os.h
>

63 
	$OSIdÀTaskHook
 ()

65 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

66 i‡(
OS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

67 (*
OS_AµIdÀTaskHookPå
)();

70 
	}
}

86 
	$OSInôHook
 ()

88 
CPU_STK_SIZE
 
i
;

89 
CPU_STK
 *
p_°k
;

92 
p_°k
 = 
OSCfg_ISRStkBa£På
;

93 
i
 = 0u; i < 
OSCfg_ISRStkSize
; i++) {

94 *
p_°k
++ = (
CPU_STK
)0u;

96 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)(
OSCfg_ISRStkBa£På
 + 
OSCfg_ISRStkSize
 - 1u);

97 
	}
}

114 
	$OSSètTaskHook
 ()

116 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

117 i‡(
OS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

118 (*
OS_AµSètTaskHookPå
)();

121 
	}
}

137 
	$OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

139 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

140 i‡(
OS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

141 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

144 ()
p_tcb
;

146 
	}
}

162 
	$OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

164 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

165 i‡(
OS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

166 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

169 ()
p_tcb
;

171 
	}
}

188 
	$OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

190 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

191 i‡(
OS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

192 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

195 ()
p_tcb
;

197 
	}
}

229 
CPU_STK
 *
	$OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

230 *
p_¨g
,

231 
CPU_STK
 *
p_°k_ba£
,

232 
CPU_STK
 *
p_°k_limô
,

233 
CPU_STK_SIZE
 
°k_size
,

234 
OS_OPT
 
›t
)

236 
CPU_STK
 *
p_°k
;

239 ()
›t
;

241 
p_°k
 = &
p_°k_ba£
[
°k_size
];

243 *--
p_°k
 = (
CPU_STK
)0x01000000u;

244 *--
p_°k
 = (
CPU_STK
)
p_èsk
;

245 *--
p_°k
 = (
CPU_STK
)
OS_TaskRëu∫
;

246 *--
p_°k
 = (
CPU_STK
)0x12121212u;

247 *--
p_°k
 = (
CPU_STK
)0x03030303u;

248 *--
p_°k
 = (
CPU_STK
)0x02020202u;

249 *--
p_°k
 = (
CPU_STK
)
p_°k_limô
;

250 *--
p_°k
 = (
CPU_STK
)
p_¨g
;

252 *--
p_°k
 = (
CPU_STK
)0x11111111u;

253 *--
p_°k
 = (
CPU_STK
)0x10101010u;

254 *--
p_°k
 = (
CPU_STK
)0x09090909u;

255 *--
p_°k
 = (
CPU_STK
)0x08080808u;

256 *--
p_°k
 = (
CPU_STK
)0x07070707u;

257 *--
p_°k
 = (
CPU_STK
)0x06060606u;

258 *--
p_°k
 = (
CPU_STK
)0x05050505u;

259 *--
p_°k
 = (
CPU_STK
)0x04040404u;

261  (
p_°k
);

262 
	}
}

282 
	$OSTaskSwHook
 ()

284 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

285 
CPU_TS
 
ts
;

287 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


288 
CPU_TS
 
öt_dis_time
;

293 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

294 i‡(
OS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

295 (*
OS_AµTaskSwHookPå
)();

299 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

300 
ts
 = 
	`OS_TS_GET
();

301 i‡(
OSTCBCurPå
 !
OSTCBHighRdyPå
) {

302 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

303 
OSTCBCurPå
->
Cy˛esTŸÆ
 +(
OS_CYCLES
)OSTCBCurPå->
Cy˛esDñè
;

306 
OSTCBHighRdyPå
->
Cy˛esSèπ
 = 
ts
;

309 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


310 
öt_dis_time
 = 
	`CPU_I¡DisMósMaxCurRe£t
();

311 i‡(
OSTCBCurPå
->
I¡DisTimeMax
 < 
öt_dis_time
) {

312 
OSTCBCurPå
->
I¡DisTimeMax
 = 
öt_dis_time
;

316 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

318 i‡(
OSTCBCurPå
->
SchedLockTimeMax
 < 
OSSchedLockTimeMaxCur
) {

319 
OSTCBCurPå
->
SchedLockTimeMax
 = 
OSSchedLockTimeMaxCur
;

321 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

323 
	}
}

339 
	$OSTimeTickHook
 ()

341 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

342 i‡(
OS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

343 (*
OS_AµTimeTickHookPå
)();

346 
	}
}

363 
	$OS_CPU_SysTickH™dÀr
 ()

365 
	`CPU_SR_ALLOC
();

368 
	`CPU_CRITICAL_ENTER
();

369 
OSI¡Ne°ögCå
++;

370 
	`CPU_CRITICAL_EXIT
();

372 
	`OSTimeTick
();

374 
	`OSI¡Exô
();

375 
	}
}

391 
	$OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
)

393 
CPU_INT32U
 
¥io
;

396 
CPU_REG_NVIC_ST_RELOAD
 = 
˙ts
 - 1u;

399 
¥io
 = 
CPU_REG_NVIC_SHPRI3
;

400 
¥io
 &
	`DEF_BIT_FIELD
(24, 0);

401 
¥io
 |
	`DEF_BIT_MASK
(
OS_CPU_CFG_SYSTICK_PRIO
, 24);

403 
CPU_REG_NVIC_SHPRI3
 = 
¥io
;

406 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 |

407 
CPU_REG_NVIC_ST_CTRL_ENABLE
;

409 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_TICKINT
;

410 
	}
}

	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/IAR/os_cpu.h

34 #i‚de‡ 
OS_CPU_H


35 
	#OS_CPU_H


	)

37 #ifde‡ 
OS_CPU_GLOBALS


38 
	#OS_CPU_EXT


	)

40 
	#OS_CPU_EXT
 

	)

49 #i‚de‡ 
NVIC_INT_CTRL


50 
	#NVIC_INT_CTRL
 *((
CPU_REG32
 *)0xE000ED04)

	)

53 #i‚de‡ 
NVIC_PENDSVSET


54 
	#NVIC_PENDSVSET
 0x10000000

	)

57 
	#OS_TASK_SW
(Ë
NVIC_INT_CTRL
 = 
NVIC_PENDSVSET


	)

58 
	#OSI¡CtxSw
(Ë
NVIC_INT_CTRL
 = 
NVIC_PENDSVSET


	)

79 #i‡ 
OS_CFG_TS_EN
 == 1u

80 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`CPU_TS_TmrRd
(Ë

	)

82 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

85 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

86 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

115 
	#OS_CPU_CFG_SYSTICK_PRIO
 0u

	)

123 
OS_CPU_EXT
 
CPU_STK
 *
OS_CPU_Ex˚±StkBa£
;

131 
OSSèπHighRdy
 ();

133 
OS_CPU_PídSVH™dÀr
 ();

136 
OS_CPU_SysTickH™dÀr
();

137 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
);

	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/IAR/os_cpu_c.c

39 
	#OS_CPU_GLOBALS


	)

41 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


42 c⁄° 
CPU_CHAR
 *
	gos_˝u_c__c
 = "$Id: $";

52 
	~<os.h
>

67 
	$OSIdÀTaskHook
 ()

69 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

70 i‡(
OS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

71 (*
OS_AµIdÀTaskHookPå
)();

74 
	}
}

90 
	$OSInôHook
 ()

92 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)(
OSCfg_ISRStkBa£På
 + 
OSCfg_ISRStkSize
 - 1u);

93 
	}
}

110 
	$OSSètTaskHook
 ()

112 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

113 i‡(
OS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

114 (*
OS_AµSètTaskHookPå
)();

117 
	}
}

133 
	$OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

135 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

136 i‡(
OS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

137 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

140 ()
p_tcb
;

142 
	}
}

158 
	$OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

160 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

161 i‡(
OS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

162 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

165 ()
p_tcb
;

167 
	}
}

184 
	$OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

186 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

187 i‡(
OS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

188 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

191 ()
p_tcb
;

193 
	}
}

225 
CPU_STK
 *
	$OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

226 *
p_¨g
,

227 
CPU_STK
 *
p_°k_ba£
,

228 
CPU_STK
 *
p_°k_limô
,

229 
CPU_STK_SIZE
 
°k_size
,

230 
OS_OPT
 
›t
)

232 
CPU_STK
 *
p_°k
;

235 ()
›t
;

237 
p_°k
 = &
p_°k_ba£
[
°k_size
];

239 *--
p_°k
 = (
CPU_STK
)0x01000000u;

240 *--
p_°k
 = (
CPU_STK
)
p_èsk
;

241 *--
p_°k
 = (
CPU_STK
)
OS_TaskRëu∫
;

242 *--
p_°k
 = (
CPU_STK
)0x12121212u;

243 *--
p_°k
 = (
CPU_STK
)0x03030303u;

244 *--
p_°k
 = (
CPU_STK
)0x02020202u;

245 *--
p_°k
 = (
CPU_STK
)
p_°k_limô
;

246 *--
p_°k
 = (
CPU_STK
)
p_¨g
;

248 *--
p_°k
 = (
CPU_STK
)0x11111111u;

249 *--
p_°k
 = (
CPU_STK
)0x10101010u;

250 *--
p_°k
 = (
CPU_STK
)0x09090909u;

251 *--
p_°k
 = (
CPU_STK
)0x08080808u;

252 *--
p_°k
 = (
CPU_STK
)0x07070707u;

253 *--
p_°k
 = (
CPU_STK
)0x06060606u;

254 *--
p_°k
 = (
CPU_STK
)0x05050505u;

255 *--
p_°k
 = (
CPU_STK
)0x04040404u;

257  (
p_°k
);

258 
	}
}

278 
	$OSTaskSwHook
 ()

280 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

281 
CPU_TS
 
ts
;

283 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


284 
CPU_TS
 
öt_dis_time
;

289 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

290 i‡(
OS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

291 (*
OS_AµTaskSwHookPå
)();

295 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

296 
ts
 = 
	`OS_TS_GET
();

297 i‡(
OSTCBCurPå
 !
OSTCBHighRdyPå
) {

298 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

299 
OSTCBCurPå
->
Cy˛esTŸÆ
 +(
OS_CYCLES
)OSTCBCurPå->
Cy˛esDñè
;

302 
OSTCBHighRdyPå
->
Cy˛esSèπ
 = 
ts
;

305 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


306 
öt_dis_time
 = 
	`CPU_I¡DisMósMaxCurRe£t
();

307 i‡(
OSTCBCurPå
->
I¡DisTimeMax
 < 
öt_dis_time
) {

308 
OSTCBCurPå
->
I¡DisTimeMax
 = 
öt_dis_time
;

312 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

314 i‡(
OSTCBCurPå
->
SchedLockTimeMax
 < 
OSSchedLockTimeMaxCur
) {

315 
OSTCBCurPå
->
SchedLockTimeMax
 = 
OSSchedLockTimeMaxCur
;

317 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

319 
	}
}

335 
	$OSTimeTickHook
 ()

337 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

338 i‡(
OS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

339 (*
OS_AµTimeTickHookPå
)();

342 
	}
}

359 
	$OS_CPU_SysTickH™dÀr
 ()

361 
	`CPU_SR_ALLOC
();

364 
	`CPU_CRITICAL_ENTER
();

365 
OSI¡Ne°ögCå
++;

366 
	`CPU_CRITICAL_EXIT
();

368 
	`OSTimeTick
();

370 
	`OSI¡Exô
();

371 
	}
}

387 
	$OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
)

389 
CPU_INT32U
 
¥io
;

392 
CPU_REG_NVIC_ST_RELOAD
 = 
˙ts
 - 1u;

395 
¥io
 = 
CPU_REG_NVIC_SHPRI3
;

396 
¥io
 &
	`DEF_BIT_FIELD
(24, 0);

397 
¥io
 |
	`DEF_BIT_MASK
(
OS_CPU_CFG_SYSTICK_PRIO
, 24);

399 
CPU_REG_NVIC_SHPRI3
 = 
¥io
;

402 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 |

403 
CPU_REG_NVIC_ST_CTRL_ENABLE
;

405 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_TICKINT
;

406 
	}
}

	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/RealView/os_cpu.h

34 #i‚de‡ 
OS_CPU_H


35 
	#OS_CPU_H


	)

37 #ifde‡ 
OS_CPU_GLOBALS


38 
	#OS_CPU_EXT


	)

40 
	#OS_CPU_EXT
 

	)

49 #i‚de‡ 
NVIC_INT_CTRL


50 
	#NVIC_INT_CTRL
 *((
CPU_REG32
 *)0xE000ED04)

	)

53 #i‚de‡ 
NVIC_PENDSVSET


54 
	#NVIC_PENDSVSET
 0x10000000

	)

57 
	#OS_TASK_SW
(Ë
NVIC_INT_CTRL
 = 
NVIC_PENDSVSET


	)

58 
	#OSI¡CtxSw
(Ë
NVIC_INT_CTRL
 = 
NVIC_PENDSVSET


	)

79 #i‡ 
OS_CFG_TS_EN
 == 1u

80 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`CPU_TS_TmrRd
(Ë

	)

82 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

85 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

86 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

115 
	#OS_CPU_CFG_SYSTICK_PRIO
 0u

	)

123 
OS_CPU_EXT
 
CPU_STK
 *
OS_CPU_Ex˚±StkBa£
;

131 
OSSèπHighRdy
 ();

133 
OS_CPU_PídSVH™dÀr
 ();

136 
OS_CPU_SysTickH™dÀr
();

137 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
);

	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/RealView/os_cpu_c.c

35 
	#OS_CPU_GLOBALS


	)

37 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


38 c⁄° 
CPU_CHAR
 *
	gos_˝u_c__c
 = "$Id: $";

48 
	~<os.h
>

63 
	$OSIdÀTaskHook
 ()

65 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

66 i‡(
OS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

67 (*
OS_AµIdÀTaskHookPå
)();

70 
	}
}

86 
	$OSInôHook
 ()

88 
CPU_STK_SIZE
 
i
;

89 
CPU_STK
 *
p_°k
;

92 
p_°k
 = 
OSCfg_ISRStkBa£På
;

93 
i
 = 0u; i < 
OSCfg_ISRStkSize
; i++) {

94 *
p_°k
++ = (
CPU_STK
)0u;

96 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)(
OSCfg_ISRStkBa£På
 + 
OSCfg_ISRStkSize
 - 1u);

97 
	}
}

114 
	$OSSètTaskHook
 ()

116 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

117 i‡(
OS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

118 (*
OS_AµSètTaskHookPå
)();

121 
	}
}

137 
	$OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

139 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

140 i‡(
OS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

141 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

144 ()
p_tcb
;

146 
	}
}

162 
	$OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

164 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

165 i‡(
OS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

166 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

169 ()
p_tcb
;

171 
	}
}

188 
	$OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

190 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

191 i‡(
OS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

192 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

195 ()
p_tcb
;

197 
	}
}

229 
CPU_STK
 *
	$OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

230 *
p_¨g
,

231 
CPU_STK
 *
p_°k_ba£
,

232 
CPU_STK
 *
p_°k_limô
,

233 
CPU_STK_SIZE
 
°k_size
,

234 
OS_OPT
 
›t
)

236 
CPU_STK
 *
p_°k
;

239 ()
›t
;

241 
p_°k
 = &
p_°k_ba£
[
°k_size
];

243 *--
p_°k
 = (
CPU_STK
)0x01000000u;

244 *--
p_°k
 = (
CPU_STK
)
p_èsk
;

245 *--
p_°k
 = (
CPU_STK
)
OS_TaskRëu∫
;

246 *--
p_°k
 = (
CPU_STK
)0x12121212u;

247 *--
p_°k
 = (
CPU_STK
)0x03030303u;

248 *--
p_°k
 = (
CPU_STK
)0x02020202u;

249 *--
p_°k
 = (
CPU_STK
)
p_°k_limô
;

250 *--
p_°k
 = (
CPU_STK
)
p_¨g
;

252 *--
p_°k
 = (
CPU_STK
)0x11111111u;

253 *--
p_°k
 = (
CPU_STK
)0x10101010u;

254 *--
p_°k
 = (
CPU_STK
)0x09090909u;

255 *--
p_°k
 = (
CPU_STK
)0x08080808u;

256 *--
p_°k
 = (
CPU_STK
)0x07070707u;

257 *--
p_°k
 = (
CPU_STK
)0x06060606u;

258 *--
p_°k
 = (
CPU_STK
)0x05050505u;

259 *--
p_°k
 = (
CPU_STK
)0x04040404u;

261  (
p_°k
);

262 
	}
}

282 
	$OSTaskSwHook
 ()

284 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

285 
CPU_TS
 
ts
;

287 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


288 
CPU_TS
 
öt_dis_time
;

293 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

294 i‡(
OS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

295 (*
OS_AµTaskSwHookPå
)();

299 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

300 
ts
 = 
	`OS_TS_GET
();

301 i‡(
OSTCBCurPå
 !
OSTCBHighRdyPå
) {

302 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

303 
OSTCBCurPå
->
Cy˛esTŸÆ
 +(
OS_CYCLES
)OSTCBCurPå->
Cy˛esDñè
;

306 
OSTCBHighRdyPå
->
Cy˛esSèπ
 = 
ts
;

309 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


310 
öt_dis_time
 = 
	`CPU_I¡DisMósMaxCurRe£t
();

311 i‡(
OSTCBCurPå
->
I¡DisTimeMax
 < 
öt_dis_time
) {

312 
OSTCBCurPå
->
I¡DisTimeMax
 = 
öt_dis_time
;

316 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

318 i‡(
OSTCBCurPå
->
SchedLockTimeMax
 < 
OSSchedLockTimeMaxCur
) {

319 
OSTCBCurPå
->
SchedLockTimeMax
 = 
OSSchedLockTimeMaxCur
;

321 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

323 
	}
}

339 
	$OSTimeTickHook
 ()

341 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

342 i‡(
OS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

343 (*
OS_AµTimeTickHookPå
)();

346 
	}
}

363 
	$OS_CPU_SysTickH™dÀr
 ()

365 
	`CPU_SR_ALLOC
();

368 
	`CPU_CRITICAL_ENTER
();

369 
OSI¡Ne°ögCå
++;

370 
	`CPU_CRITICAL_EXIT
();

372 
	`OSTimeTick
();

374 
	`OSI¡Exô
();

375 
	}
}

391 
	$OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
)

393 
CPU_INT32U
 
¥io
;

396 
CPU_REG_NVIC_ST_RELOAD
 = 
˙ts
 - 1u;

399 
¥io
 = 
CPU_REG_NVIC_SHPRI3
;

400 
¥io
 &
	`DEF_BIT_FIELD
(24, 0);

401 
¥io
 |
	`DEF_BIT_MASK
(
OS_CPU_CFG_SYSTICK_PRIO
, 24);

403 
CPU_REG_NVIC_SHPRI3
 = 
¥io
;

406 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 |

407 
CPU_REG_NVIC_ST_CTRL_ENABLE
;

409 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_TICKINT
;

410 
	}
}

	@UCOSIII/uCOS-III/Source/os.h

36 #i‚de‡ 
OS_H


37 
	#OS_H


	)

45 
	#OS_VERSION
 30300u

	)

53 #ifde‡
__˝lu•lus


59 
	~<os_cfg.h
>

60 
	~<˝u.h
>

61 
	~<˝u_c‹e.h
>

62 
	~<lib_def.h
>

63 
	~<os_ty≥.h
>

64 
	~<os_˝u.h
>

74 #i‡ 
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u && 
deföed
(
CPU_CFG_INT_DIS_MEAS_EN
)

75 
	#OS_SCHED_LOCK_TIME_MEAS_START
(Ë
	`OS_SchedLockTimeMósSèπ
()

	)

77 
	#OS_SCHED_LOCK_TIME_MEAS_START
()

	)

81 #i‡ 
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u && 
deföed
(
CPU_CFG_INT_DIS_MEAS_EN
)

82 
	#OS_SCHED_LOCK_TIME_MEAS_STOP
(Ë
	`OS_SchedLockTimeMósSt›
()

	)

84 
	#OS_SCHED_LOCK_TIME_MEAS_STOP
()

	)

87 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

89 
	#OS_CRITICAL_ENTER
() \

91 
	`CPU_CRITICAL_ENTER
(); \

92 
OSSchedLockNe°ögCå
++; \

93 i‡(
OSSchedLockNe°ögCå
 == 1u) { \

94 
	`OS_SCHED_LOCK_TIME_MEAS_START
(); \

96 
	`CPU_CRITICAL_EXIT
(); \

97 } 0)

	)

99 
	#OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
() \

101 
OSSchedLockNe°ögCå
++; \

103 i‡(
OSSchedLockNe°ögCå
 == 1u) { \

104 
	`OS_SCHED_LOCK_TIME_MEAS_START
(); \

106 
	`CPU_CRITICAL_EXIT
(); \

107 } 0)

	)

110 
	#OS_CRITICAL_EXIT
() \

112 
	`CPU_CRITICAL_ENTER
(); \

113 
OSSchedLockNe°ögCå
--; \

114 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) { \

115 
	`OS_SCHED_LOCK_TIME_MEAS_STOP
(); \

116 i‡(
OSI¡QNbrE¡rõs
 > (
OS_OBJ_QTY
)0) { \

117 
	`CPU_CRITICAL_EXIT
(); \

118 
	`OS_Sched0
(); \

120 
	`CPU_CRITICAL_EXIT
(); \

123 
	`CPU_CRITICAL_EXIT
(); \

125 } 0)

	)

127 
	#OS_CRITICAL_EXIT_NO_SCHED
() \

129 
	`CPU_CRITICAL_ENTER
(); \

130 
OSSchedLockNe°ögCå
--; \

131 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) { \

132 
	`OS_SCHED_LOCK_TIME_MEAS_STOP
(); \

134 
	`CPU_CRITICAL_EXIT
(); \

135 } 0)

	)

141 
	#OS_CRITICAL_ENTER
(Ë
	`CPU_CRITICAL_ENTER
()

	)

143 
	#OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
()

	)

145 
	#OS_CRITICAL_EXIT
(Ë
	`CPU_CRITICAL_EXIT
()

	)

147 
	#OS_CRITICAL_EXIT_NO_SCHED
(Ë
	`CPU_CRITICAL_EXIT
()

	)

157 #ifde‡ 
OS_GLOBALS


158 
	#OS_EXT


	)

160 
	#OS_EXT
 

	)

164 
	#OS_PRIO_TBL_SIZE
 (((
OS_CFG_PRIO_MAX
 - 1uË/ 
DEF_INT_CPU_NBR_BITS
Ë+ 1u)

	)

166 
	#OS_MSG_EN
 (((
OS_CFG_TASK_Q_EN
 > 0uË|| (
OS_CFG_Q_EN
 > 0u)Ë? 1u : 0u)

	)

183 
	#OS_STATE_OS_STOPPED
 (
OS_STATE
)(0u)

	)

184 
	#OS_STATE_OS_RUNNING
 (
OS_STATE
)(1u)

	)

186 
	#OS_STATE_NOT_RDY
 (
CPU_BOOLEAN
)(0u)

	)

187 
	#OS_STATE_RDY
 (
CPU_BOOLEAN
)(1u)

	)

191 
	#OS_TASK_STATE_BIT_DLY
 (
OS_STATE
)(0x01uË

	)

193 
	#OS_TASK_STATE_BIT_PEND
 (
OS_STATE
)(0x02uË

	)

195 
	#OS_TASK_STATE_BIT_SUSPENDED
 (
OS_STATE
)(0x04uË

	)

199 
	#OS_TASK_STATE_RDY
 (
OS_STATE
)–0uË

	)

200 
	#OS_TASK_STATE_DLY
 (
OS_STATE
)–1uË

	)

201 
	#OS_TASK_STATE_PEND
 (
OS_STATE
)–2uË

	)

202 
	#OS_TASK_STATE_PEND_TIMEOUT
 (
OS_STATE
)–3uË

	)

203 
	#OS_TASK_STATE_SUSPENDED
 (
OS_STATE
)–4uË

	)

204 
	#OS_TASK_STATE_DLY_SUSPENDED
 (
OS_STATE
)–5uË

	)

205 
	#OS_TASK_STATE_PEND_SUSPENDED
 (
OS_STATE
)–6uË

	)

206 
	#OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
 (
OS_STATE
)–7uË

	)

207 
	#OS_TASK_STATE_DEL
 (
OS_STATE
)(255u)

	)

210 
	#OS_TASK_PEND_ON_NOTHING
 (
OS_STATE
)–0uË

	)

211 
	#OS_TASK_PEND_ON_FLAG
 (
OS_STATE
)–1uË

	)

212 
	#OS_TASK_PEND_ON_TASK_Q
 (
OS_STATE
)–2uË

	)

213 
	#OS_TASK_PEND_ON_MULTI
 (
OS_STATE
)–3uË

	)

214 
	#OS_TASK_PEND_ON_MUTEX
 (
OS_STATE
)–4uË

	)

215 
	#OS_TASK_PEND_ON_Q
 (
OS_STATE
)–5uË

	)

216 
	#OS_TASK_PEND_ON_SEM
 (
OS_STATE
)–6uË

	)

217 
	#OS_TASK_PEND_ON_TASK_SEM
 (
OS_STATE
)–7uË

	)

226 
	#OS_STATUS_PEND_OK
 (
OS_STATUS
)–0uË

	)

227 
	#OS_STATUS_PEND_ABORT
 (
OS_STATUS
)–1uË

	)

228 
	#OS_STATUS_PEND_DEL
 (
OS_STATUS
)–2uË

	)

229 
	#OS_STATUS_PEND_TIMEOUT
 (
OS_STATUS
)–3uË

	)

241 
	#OS_OBJ_TYPE_NONE
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('N', 'O', 'N', 'E')

	)

242 
	#OS_OBJ_TYPE_FLAG
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('F', 'L', 'A', 'G')

	)

243 
	#OS_OBJ_TYPE_MEM
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('M', 'E', 'M', ' ')

	)

244 
	#OS_OBJ_TYPE_MUTEX
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('M', 'U', 'T', 'X')

	)

245 
	#OS_OBJ_TYPE_Q
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('Q', 'U', 'E', 'U')

	)

246 
	#OS_OBJ_TYPE_SEM
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('S', 'E', 'M', 'A')

	)

247 
	#OS_OBJ_TYPE_TASK_MSG
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'M', 'S', 'G')

	)

248 
	#OS_OBJ_TYPE_TASK_RESUME
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'R', 'E', 'S')

	)

249 
	#OS_OBJ_TYPE_TASK_SIGNAL
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'S', 'I', 'G')

	)

250 
	#OS_OBJ_TYPE_TASK_SUSPEND
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'S', 'U', 'S')

	)

251 
	#OS_OBJ_TYPE_TICK
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'I', 'C', 'K')

	)

252 
	#OS_OBJ_TYPE_TMR
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'M', 'R', ' ')

	)

260 
	#OS_OPT_NONE
 (
OS_OPT
)(0x0000u)

	)

268 
	#OS_OPT_DEL_NO_PEND
 (
OS_OPT
)(0x0000u)

	)

269 
	#OS_OPT_DEL_ALWAYS
 (
OS_OPT
)(0x0001u)

	)

277 
	#OS_OPT_PEND_FLAG_MASK
 (
OS_OPT
)(0x000Fu)

	)

278 
	#OS_OPT_PEND_FLAG_CLR_ALL
 (
OS_OPT
)(0x0001uË

	)

279 
	#OS_OPT_PEND_FLAG_CLR_AND
 (
OS_OPT
)(0x0001u)

	)

281 
	#OS_OPT_PEND_FLAG_CLR_ANY
 (
OS_OPT
)(0x0002uË

	)

282 
	#OS_OPT_PEND_FLAG_CLR_OR
 (
OS_OPT
)(0x0002u)

	)

284 
	#OS_OPT_PEND_FLAG_SET_ALL
 (
OS_OPT
)(0x0004uË

	)

285 
	#OS_OPT_PEND_FLAG_SET_AND
 (
OS_OPT
)(0x0004u)

	)

287 
	#OS_OPT_PEND_FLAG_SET_ANY
 (
OS_OPT
)(0x0008uË

	)

288 
	#OS_OPT_PEND_FLAG_SET_OR
 (
OS_OPT
)(0x0008u)

	)

290 
	#OS_OPT_PEND_FLAG_CONSUME
 (
OS_OPT
)(0x0100uË

	)

293 
	#OS_OPT_PEND_BLOCKING
 (
OS_OPT
)(0x0000u)

	)

294 
	#OS_OPT_PEND_NON_BLOCKING
 (
OS_OPT
)(0x8000u)

	)

302 
	#OS_OPT_PEND_ABORT_1
 (
OS_OPT
)(0x0000uË

	)

303 
	#OS_OPT_PEND_ABORT_ALL
 (
OS_OPT
)(0x0100uË

	)

312 
	#OS_OPT_POST_NONE
 (
OS_OPT
)(0x0000u)

	)

314 
	#OS_OPT_POST_FLAG_SET
 (
OS_OPT
)(0x0000u)

	)

315 
	#OS_OPT_POST_FLAG_CLR
 (
OS_OPT
)(0x0001u)

	)

317 
	#OS_OPT_POST_FIFO
 (
OS_OPT
)(0x0000uË

	)

318 
	#OS_OPT_POST_LIFO
 (
OS_OPT
)(0x0010uË

	)

319 
	#OS_OPT_POST_1
 (
OS_OPT
)(0x0000uË

	)

320 
	#OS_OPT_POST_ALL
 (
OS_OPT
)(0x0200uË

	)

322 
	#OS_OPT_POST_NO_SCHED
 (
OS_OPT
)(0x8000uË

	)

330 
	#OS_OPT_TASK_NONE
 (
OS_OPT
)(0x0000uË

	)

331 
	#OS_OPT_TASK_STK_CHK
 (
OS_OPT
)(0x0001uË

	)

332 
	#OS_OPT_TASK_STK_CLR
 (
OS_OPT
)(0x0002uË

	)

333 
	#OS_OPT_TASK_SAVE_FP
 (
OS_OPT
)(0x0004uË

	)

334 
	#OS_OPT_TASK_NO_TLS
 (
OS_OPT
)(0x0008uË

	)

342 
	#OS_OPT_TIME_DLY
 
DEF_BIT_NONE


	)

343 
	#OS_OPT_TIME_TIMEOUT
 ((
OS_OPT
)
DEF_BIT_01
)

	)

344 
	#OS_OPT_TIME_MATCH
 ((
OS_OPT
)
DEF_BIT_02
)

	)

345 
	#OS_OPT_TIME_PERIODIC
 ((
OS_OPT
)
DEF_BIT_03
)

	)

347 
	#OS_OPT_TIME_HMSM_STRICT
 ((
OS_OPT
)
DEF_BIT_NONE
)

	)

348 
	#OS_OPT_TIME_HMSM_NON_STRICT
 ((
OS_OPT
)
DEF_BIT_04
)

	)

350 
	#OS_OPT_TIME_MASK
 ((
OS_OPT
)(
OS_OPT_TIME_DLY
 | \

351 
OS_OPT_TIME_TIMEOUT
 | \

352 
OS_OPT_TIME_PERIODIC
 | \

353 
OS_OPT_TIME_MATCH
))

	)

355 
	#OS_OPT_TIME_OPTS_MASK
 (
OS_OPT_TIME_DLY
 | \

356 
OS_OPT_TIME_TIMEOUT
 | \

357 
OS_OPT_TIME_PERIODIC
 | \

358 
OS_OPT_TIME_MATCH
 | \

359 
OS_OPT_TIME_HMSM_NON_STRICT
)

	)

367 
	#OS_OPT_TMR_NONE
 (
OS_OPT
)(0uË

	)

369 
	#OS_OPT_TMR_ONE_SHOT
 (
OS_OPT
)(1uË

	)

370 
	#OS_OPT_TMR_PERIODIC
 (
OS_OPT
)(2uË

	)

372 
	#OS_OPT_TMR_CALLBACK
 (
OS_OPT
)(3uË

	)

373 
	#OS_OPT_TMR_CALLBACK_ARG
 (
OS_OPT
)(4uË

	)

381 
	#OS_TMR_STATE_UNUSED
 (
OS_STATE
)(0u)

	)

382 
	#OS_TMR_STATE_STOPPED
 (
OS_STATE
)(1u)

	)

383 
	#OS_TMR_STATE_RUNNING
 (
OS_STATE
)(2u)

	)

384 
	#OS_TMR_STATE_COMPLETED
 (
OS_STATE
)(3u)

	)

392 
	#OS_PRIO_INIT
 (
OS_PRIO
)(
OS_CFG_PRIO_MAX
)

	)

400 
	#OS_TICK_TH_INIT
 (
OS_TICK
)(
	`DEF_BIT
 (((OS_TICKË* 
DEF_OCTET_NBR_BITS
Ë- 1u))

	)

403 
	#OS_TICK_TH_RDY
 (
OS_TICK
)(
	`DEF_BIT_FIELD
((((OS_TICKË* 
DEF_OCTET_NBR_BITS
) / 2u), \

404 (((
OS_TICK
Ë* 
DEF_OCTET_NBR_BITS
Ë/ 2u)))

	)

421 
	eos_îr
 {

422 
OS_ERR_NONE
 = 0u,

424 
OS_ERR_A
 = 10000u,

425 
OS_ERR_ACCEPT_ISR
 = 10001u,

427 
OS_ERR_B
 = 11000u,

429 
OS_ERR_C
 = 12000u,

430 
OS_ERR_CREATE_ISR
 = 12001u,

432 
OS_ERR_D
 = 13000u,

433 
OS_ERR_DEL_ISR
 = 13001u,

435 
OS_ERR_E
 = 14000u,

437 
OS_ERR_F
 = 15000u,

438 
OS_ERR_FATAL_RETURN
 = 15001u,

440 
OS_ERR_FLAG_GRP_DEPLETED
 = 15101u,

441 
OS_ERR_FLAG_NOT_RDY
 = 15102u,

442 
OS_ERR_FLAG_PEND_OPT
 = 15103u,

443 
OS_ERR_FLUSH_ISR
 = 15104u,

445 
OS_ERR_G
 = 16000u,

447 
OS_ERR_H
 = 17000u,

449 
OS_ERR_I
 = 18000u,

450 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
 = 18001u,

451 
OS_ERR_INT_Q
 = 18002u,

452 
OS_ERR_INT_Q_FULL
 = 18003u,

453 
OS_ERR_INT_Q_SIZE
 = 18004u,

454 
OS_ERR_INT_Q_STK_INVALID
 = 18005u,

455 
OS_ERR_INT_Q_STK_SIZE_INVALID
 = 18006u,

457 
OS_ERR_J
 = 19000u,

459 
OS_ERR_K
 = 20000u,

461 
OS_ERR_L
 = 21000u,

462 
OS_ERR_LOCK_NESTING_OVF
 = 21001u,

464 
OS_ERR_M
 = 22000u,

466 
OS_ERR_MEM_CREATE_ISR
 = 22201u,

467 
OS_ERR_MEM_FULL
 = 22202u,

468 
OS_ERR_MEM_INVALID_P_ADDR
 = 22203u,

469 
OS_ERR_MEM_INVALID_BLKS
 = 22204u,

470 
OS_ERR_MEM_INVALID_PART
 = 22205u,

471 
OS_ERR_MEM_INVALID_P_BLK
 = 22206u,

472 
OS_ERR_MEM_INVALID_P_MEM
 = 22207u,

473 
OS_ERR_MEM_INVALID_P_DATA
 = 22208u,

474 
OS_ERR_MEM_INVALID_SIZE
 = 22209u,

475 
OS_ERR_MEM_NO_FREE_BLKS
 = 22210u,

477 
OS_ERR_MSG_POOL_EMPTY
 = 22301u,

478 
OS_ERR_MSG_POOL_NULL_PTR
 = 22302u,

480 
OS_ERR_MUTEX_NOT_OWNER
 = 22401u,

481 
OS_ERR_MUTEX_OWNER
 = 22402u,

482 
OS_ERR_MUTEX_NESTING
 = 22403u,

484 
OS_ERR_N
 = 23000u,

485 
OS_ERR_NAME
 = 23001u,

486 
OS_ERR_NO_MORE_ID_AVAIL
 = 23002u,

488 
OS_ERR_O
 = 24000u,

489 
OS_ERR_OBJ_CREATED
 = 24001u,

490 
OS_ERR_OBJ_DEL
 = 24002u,

491 
OS_ERR_OBJ_PTR_NULL
 = 24003u,

492 
OS_ERR_OBJ_TYPE
 = 24004u,

494 
OS_ERR_OPT_INVALID
 = 24101u,

496 
OS_ERR_OS_NOT_RUNNING
 = 24201u,

497 
OS_ERR_OS_RUNNING
 = 24202u,

499 
OS_ERR_P
 = 25000u,

500 
OS_ERR_PEND_ABORT
 = 25001u,

501 
OS_ERR_PEND_ABORT_ISR
 = 25002u,

502 
OS_ERR_PEND_ABORT_NONE
 = 25003u,

503 
OS_ERR_PEND_ABORT_SELF
 = 25004u,

504 
OS_ERR_PEND_DEL
 = 25005u,

505 
OS_ERR_PEND_ISR
 = 25006u,

506 
OS_ERR_PEND_LOCKED
 = 25007u,

507 
OS_ERR_PEND_WOULD_BLOCK
 = 25008u,

509 
OS_ERR_POST_NULL_PTR
 = 25101u,

510 
OS_ERR_POST_ISR
 = 25102u,

512 
OS_ERR_PRIO_EXIST
 = 25201u,

513 
OS_ERR_PRIO
 = 25202u,

514 
OS_ERR_PRIO_INVALID
 = 25203u,

516 
OS_ERR_PTR_INVALID
 = 25301u,

518 
OS_ERR_Q
 = 26000u,

519 
OS_ERR_Q_FULL
 = 26001u,

520 
OS_ERR_Q_EMPTY
 = 26002u,

521 
OS_ERR_Q_MAX
 = 26003u,

522 
OS_ERR_Q_SIZE
 = 26004u,

524 
OS_ERR_R
 = 27000u,

525 
OS_ERR_REG_ID_INVALID
 = 27001u,

526 
OS_ERR_ROUND_ROBIN_1
 = 27002u,

527 
OS_ERR_ROUND_ROBIN_DISABLED
 = 27003u,

529 
OS_ERR_S
 = 28000u,

530 
OS_ERR_SCHED_INVALID_TIME_SLICE
 = 28001u,

531 
OS_ERR_SCHED_LOCK_ISR
 = 28002u,

532 
OS_ERR_SCHED_LOCKED
 = 28003u,

533 
OS_ERR_SCHED_NOT_LOCKED
 = 28004u,

534 
OS_ERR_SCHED_UNLOCK_ISR
 = 28005u,

536 
OS_ERR_SEM_OVF
 = 28101u,

537 
OS_ERR_SET_ISR
 = 28102u,

539 
OS_ERR_STAT_RESET_ISR
 = 28201u,

540 
OS_ERR_STAT_PRIO_INVALID
 = 28202u,

541 
OS_ERR_STAT_STK_INVALID
 = 28203u,

542 
OS_ERR_STAT_STK_SIZE_INVALID
 = 28204u,

543 
OS_ERR_STATE_INVALID
 = 28205u,

544 
OS_ERR_STATUS_INVALID
 = 28206u,

545 
OS_ERR_STK_INVALID
 = 28207u,

546 
OS_ERR_STK_SIZE_INVALID
 = 28208u,

547 
OS_ERR_STK_LIMIT_INVALID
 = 28209u,

549 
OS_ERR_T
 = 29000u,

550 
OS_ERR_TASK_CHANGE_PRIO_ISR
 = 29001u,

551 
OS_ERR_TASK_CREATE_ISR
 = 29002u,

552 
OS_ERR_TASK_DEL
 = 29003u,

553 
OS_ERR_TASK_DEL_IDLE
 = 29004u,

554 
OS_ERR_TASK_DEL_INVALID
 = 29005u,

555 
OS_ERR_TASK_DEL_ISR
 = 29006u,

556 
OS_ERR_TASK_INVALID
 = 29007u,

557 
OS_ERR_TASK_NO_MORE_TCB
 = 29008u,

558 
OS_ERR_TASK_NOT_DLY
 = 29009u,

559 
OS_ERR_TASK_NOT_EXIST
 = 29010u,

560 
OS_ERR_TASK_NOT_SUSPENDED
 = 29011u,

561 
OS_ERR_TASK_OPT
 = 29012u,

562 
OS_ERR_TASK_RESUME_ISR
 = 29013u,

563 
OS_ERR_TASK_RESUME_PRIO
 = 29014u,

564 
OS_ERR_TASK_RESUME_SELF
 = 29015u,

565 
OS_ERR_TASK_RUNNING
 = 29016u,

566 
OS_ERR_TASK_STK_CHK_ISR
 = 29017u,

567 
OS_ERR_TASK_SUSPENDED
 = 29018u,

568 
OS_ERR_TASK_SUSPEND_IDLE
 = 29019u,

569 
OS_ERR_TASK_SUSPEND_INT_HANDLER
 = 29020u,

570 
OS_ERR_TASK_SUSPEND_ISR
 = 29021u,

571 
OS_ERR_TASK_SUSPEND_PRIO
 = 29022u,

572 
OS_ERR_TASK_WAITING
 = 29023u,

574 
OS_ERR_TCB_INVALID
 = 29101u,

576 
OS_ERR_TLS_ID_INVALID
 = 29120u,

577 
OS_ERR_TLS_ISR
 = 29121u,

578 
OS_ERR_TLS_NO_MORE_AVAIL
 = 29122u,

579 
OS_ERR_TLS_NOT_EN
 = 29123u,

580 
OS_ERR_TLS_DESTRUCT_ASSIGNED
 = 29124u,

582 
OS_ERR_TICK_PRIO_INVALID
 = 29201u,

583 
OS_ERR_TICK_STK_INVALID
 = 29202u,

584 
OS_ERR_TICK_STK_SIZE_INVALID
 = 29203u,

585 
OS_ERR_TICK_WHEEL_SIZE
 = 29204u,

587 
OS_ERR_TIME_DLY_ISR
 = 29301u,

588 
OS_ERR_TIME_DLY_RESUME_ISR
 = 29302u,

589 
OS_ERR_TIME_GET_ISR
 = 29303u,

590 
OS_ERR_TIME_INVALID_HOURS
 = 29304u,

591 
OS_ERR_TIME_INVALID_MINUTES
 = 29305u,

592 
OS_ERR_TIME_INVALID_SECONDS
 = 29306u,

593 
OS_ERR_TIME_INVALID_MILLISECONDS
 = 29307u,

594 
OS_ERR_TIME_NOT_DLY
 = 29308u,

595 
OS_ERR_TIME_SET_ISR
 = 29309u,

596 
OS_ERR_TIME_ZERO_DLY
 = 29310u,

598 
OS_ERR_TIMEOUT
 = 29401u,

600 
OS_ERR_TMR_INACTIVE
 = 29501u,

601 
OS_ERR_TMR_INVALID_DEST
 = 29502u,

602 
OS_ERR_TMR_INVALID_DLY
 = 29503u,

603 
OS_ERR_TMR_INVALID_PERIOD
 = 29504u,

604 
OS_ERR_TMR_INVALID_STATE
 = 29505u,

605 
OS_ERR_TMR_INVALID
 = 29506u,

606 
OS_ERR_TMR_ISR
 = 29507u,

607 
OS_ERR_TMR_NO_CALLBACK
 = 29508u,

608 
OS_ERR_TMR_NON_AVAIL
 = 29509u,

609 
OS_ERR_TMR_PRIO_INVALID
 = 29510u,

610 
OS_ERR_TMR_STK_INVALID
 = 29511u,

611 
OS_ERR_TMR_STK_SIZE_INVALID
 = 29512u,

612 
OS_ERR_TMR_STOPPED
 = 29513u,

614 
OS_ERR_U
 = 30000u,

616 
OS_ERR_V
 = 31000u,

618 
OS_ERR_W
 = 32000u,

620 
OS_ERR_X
 = 33000u,

622 
OS_ERR_Y
 = 34000u,

623 
OS_ERR_YIELD_ISR
 = 34001u,

625 
OS_ERR_Z
 = 35000u

626 } 
	tOS_ERR
;

638 
os_Êag_gΩ
 
	tOS_FLAG_GRP
;

640 
os_mem
 
	tOS_MEM
;

642 
os_msg
 
	tOS_MSG
;

643 
os_msg_poﬁ
 
	tOS_MSG_POOL
;

644 
os_msg_q
 
	tOS_MSG_Q
;

646 
os_muãx
 
	tOS_MUTEX
;

648 
os_öt_q
 
	tOS_INT_Q
;

650 
os_q
 
	tOS_Q
;

652 
os_£m
 
	tOS_SEM
;

654 (*
	gOS_TASK_PTR
)(*
	tp_¨g
);

656 
os_tcb
 
	tOS_TCB
;

658 #i‡
deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

659 *
	tOS_TLS
;

661 
CPU_DATA
 
	tOS_TLS_ID
;

663 (*
	gOS_TLS_DESTRUCT_PTR
)(
	tOS_TCB
 *
	tp_tcb
,

664 
	tOS_TLS_ID
 
	tid
,

665 
	tOS_TLS
 
	tvÆue
);

668 
os_rdy_li°
 
	tOS_RDY_LIST
;

670 
os_tick_•oke
 
	tOS_TICK_SPOKE
;

672 (*
	gOS_TMR_CALLBACK_PTR
)(*
	tp_tmr
, *
	tp_¨g
);

673 
os_tmr
 
	tOS_TMR
;

674 
os_tmr_•oke
 
	tOS_TMR_SPOKE
;

677 
os_≥nd_d©a
 
	tOS_PEND_DATA
;

678 
os_≥nd_li°
 
	tOS_PEND_LIST
;

679 
os_≥nd_obj
 
	tOS_PEND_OBJ
;

681 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

682 (*
	gOS_APP_HOOK_VOID
)();

683 (*
	gOS_APP_HOOK_TCB
)(
	tOS_TCB
 *
	tp_tcb
);

701 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

702 
	sos_öt_q
 {

703 
OS_OBJ_TYPE
 
	gTy≥
;

704 
OS_INT_Q
 *
	gNextPå
;

705 *
	gObjPå
;

706 *
	gMsgPå
;

707 
OS_MSG_SIZE
 
	gMsgSize
;

708 
OS_FLAGS
 
	gFœgs
;

709 
OS_OPT
 
	gO±
;

710 
CPU_TS
 
	gTS
;

720 
	sos_rdy_li°
 {

721 
OS_TCB
 *
	gHódPå
;

722 
OS_TCB
 *
	gTaûPå
;

723 
OS_OBJ_QTY
 
	gNbrE¡rõs
;

733 
	sos_≥nd_d©a
 {

734 
OS_PEND_DATA
 *
	gPªvPå
;

735 
OS_PEND_DATA
 *
	gNextPå
;

736 
OS_TCB
 *
	gTCBPå
;

737 
OS_PEND_OBJ
 *
	gPídObjPå
;

738 
OS_PEND_OBJ
 *
	gRdyObjPå
;

739 *
	gRdyMsgPå
;

740 
OS_MSG_SIZE
 
	gRdyMsgSize
;

741 
CPU_TS
 
	gRdyTS
;

745 
	sos_≥nd_li°
 {

746 
OS_PEND_DATA
 *
	gHódPå
;

747 
OS_PEND_DATA
 *
	gTaûPå
;

748 
OS_OBJ_QTY
 
	gNbrE¡rõs
;

767 
	sos_≥nd_obj
 {

768 
OS_OBJ_TYPE
 
	gTy≥
;

769 
CPU_CHAR
 *
	gNamePå
;

770 
OS_PEND_LIST
 
	gPídLi°
;

771 #i‡
OS_CFG_DBG_EN
 > 0u

772 *
	gDbgPªvPå
;

773 *
	gDbgNextPå
;

774 
CPU_CHAR
 *
	gDbgNamePå
;

788 
	sos_Êag_gΩ
 {

790 
OS_OBJ_TYPE
 
	gTy≥
;

791 
CPU_CHAR
 *
	gNamePå
;

792 
OS_PEND_LIST
 
	gPídLi°
;

793 #i‡
OS_CFG_DBG_EN
 > 0u

794 
OS_FLAG_GRP
 *
	gDbgPªvPå
;

795 
OS_FLAG_GRP
 *
	gDbgNextPå
;

796 
CPU_CHAR
 *
	gDbgNamePå
;

799 
OS_FLAGS
 
	gFœgs
;

800 
CPU_TS
 
	gTS
;

811 
	sos_mem
 {

812 
OS_OBJ_TYPE
 
	gTy≥
;

813 *
	gAddrPå
;

814 
CPU_CHAR
 *
	gNamePå
;

815 *
	gFªeLi°På
;

816 
OS_MEM_SIZE
 
	gBlkSize
;

817 
OS_MEM_QTY
 
	gNbrMax
;

818 
OS_MEM_QTY
 
	gNbrFªe
;

819 #i‡
OS_CFG_DBG_EN
 > 0u

820 
OS_MEM
 *
	gDbgPªvPå
;

821 
OS_MEM
 *
	gDbgNextPå
;

832 
	sos_msg
 {

833 
OS_MSG
 *
	gNextPå
;

834 *
	gMsgPå
;

835 
OS_MSG_SIZE
 
	gMsgSize
;

836 
CPU_TS
 
	gMsgTS
;

842 
	sos_msg_poﬁ
 {

843 
OS_MSG
 *
	gNextPå
;

844 
OS_MSG_QTY
 
	gNbrFªe
;

845 
OS_MSG_QTY
 
	gNbrU£d
;

846 
OS_MSG_QTY
 
	gNbrU£dMax
;

851 
	sos_msg_q
 {

852 
OS_MSG
 *
	gInPå
;

853 
OS_MSG
 *
	gOutPå
;

854 
OS_MSG_QTY
 
	gNbrE¡rõsSize
;

855 
OS_MSG_QTY
 
	gNbrE¡rõs
;

856 
OS_MSG_QTY
 
	gNbrE¡rõsMax
;

868 
	sos_muãx
 {

870 
OS_OBJ_TYPE
 
	gTy≥
;

871 
CPU_CHAR
 *
	gNamePå
;

872 
OS_PEND_LIST
 
	gPídLi°
;

873 #i‡
OS_CFG_DBG_EN
 > 0u

874 
OS_MUTEX
 *
	gDbgPªvPå
;

875 
OS_MUTEX
 *
	gDbgNextPå
;

876 
CPU_CHAR
 *
	gDbgNamePå
;

879 
OS_TCB
 *
	gOw√rTCBPå
;

880 
OS_PRIO
 
	gOw√rOrigöÆPrio
;

881 
OS_NESTING_CTR
 
	gOw√rNe°ögCå
;

882 
CPU_TS
 
	gTS
;

894 
	sos_q
 {

896 
OS_OBJ_TYPE
 
	gTy≥
;

897 
CPU_CHAR
 *
	gNamePå
;

898 
OS_PEND_LIST
 
	gPídLi°
;

899 #i‡
OS_CFG_DBG_EN
 > 0u

900 
OS_Q
 *
	gDbgPªvPå
;

901 
OS_Q
 *
	gDbgNextPå
;

902 
CPU_CHAR
 *
	gDbgNamePå
;

905 
OS_MSG_Q
 
	gMsgQ
;

917 
	sos_£m
 {

919 
OS_OBJ_TYPE
 
	gTy≥
;

920 
CPU_CHAR
 *
	gNamePå
;

921 
OS_PEND_LIST
 
	gPídLi°
;

922 #i‡
OS_CFG_DBG_EN
 > 0u

923 
OS_SEM
 *
	gDbgPªvPå
;

924 
OS_SEM
 *
	gDbgNextPå
;

925 
CPU_CHAR
 *
	gDbgNamePå
;

928 
OS_SEM_CTR
 
	gCå
;

929 
CPU_TS
 
	gTS
;

939 
	sos_tcb
 {

940 
CPU_STK
 *
	gStkPå
;

942 *
	gExtPå
;

944 
CPU_STK
 *
	gStkLimôPå
;

946 
OS_TCB
 *
	gNextPå
;

947 
OS_TCB
 *
	gPªvPå
;

949 
OS_TCB
 *
	gTickNextPå
;

950 
OS_TCB
 *
	gTickPªvPå
;

952 
OS_TICK_SPOKE
 *
	gTickSpokePå
;

954 
CPU_CHAR
 *
	gNamePå
;

956 
CPU_STK
 *
	gStkBa£På
;

958 #i‡
deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

959 
OS_TLS
 
	gTLS_Tbl
[
OS_CFG_TLS_TBL_SIZE
];

962 
OS_TASK_PTR
 
	gTaskE¡ryAddr
;

963 *
	gTaskE¡ryArg
;

965 
OS_PEND_DATA
 *
	gPídD©aTblPå
;

966 
OS_STATE
 
	gPídOn
;

967 
OS_STATUS
 
	gPídSètus
;

969 
OS_STATE
 
	gTaskSèã
;

970 
OS_PRIO
 
	gPrio
;

971 
CPU_STK_SIZE
 
	gStkSize
;

972 
OS_OPT
 
	gO±
;

974 
OS_OBJ_QTY
 
	gPídD©aTblE¡rõs
;

976 
CPU_TS
 
	gTS
;

978 
OS_SEM_CTR
 
	gSemCå
;

981 
OS_TICK
 
	gTickCåPªv
;

982 
OS_TICK
 
	gTickCåM©ch
;

983 
OS_TICK
 
	gTickRemaö
;

985 
OS_TICK
 
	gTimeQu™è
;

986 
OS_TICK
 
	gTimeQu™èCå
;

988 #i‡
OS_MSG_EN
 > 0u

989 *
	gMsgPå
;

990 
OS_MSG_SIZE
 
	gMsgSize
;

993 #i‡
OS_CFG_TASK_Q_EN
 > 0u

994 
OS_MSG_Q
 
	gMsgQ
;

995 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

996 
CPU_TS
 
	gMsgQPídTime
;

997 
CPU_TS
 
	gMsgQPídTimeMax
;

1001 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1002 
OS_REG
 
	gRegTbl
[
OS_CFG_TASK_REG_TBL_SIZE
];

1005 #i‡
OS_CFG_FLAG_EN
 > 0u

1006 
OS_FLAGS
 
	gFœgsPíd
;

1007 
OS_FLAGS
 
	gFœgsRdy
;

1008 
OS_OPT
 
	gFœgsO±
;

1011 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1012 
OS_NESTING_CTR
 
	gSu•ídCå
;

1015 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1016 
OS_CPU_USAGE
 
	gCPUUßge
;

1017 
OS_CPU_USAGE
 
	gCPUUßgeMax
;

1018 
OS_CTX_SW_CTR
 
	gCtxSwCå
;

1019 
CPU_TS
 
	gCy˛esDñè
;

1020 
CPU_TS
 
	gCy˛esSèπ
;

1021 
OS_CYCLES
 
	gCy˛esTŸÆ
;

1022 
OS_CYCLES
 
	gCy˛esTŸÆPªv
;

1024 
CPU_TS
 
	gSemPídTime
;

1025 
CPU_TS
 
	gSemPídTimeMax
;

1028 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1029 
CPU_STK_SIZE
 
	gStkU£d
;

1030 
CPU_STK_SIZE
 
	gStkFªe
;

1033 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


1034 
CPU_TS
 
	gI¡DisTimeMax
;

1036 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

1037 
CPU_TS
 
	gSchedLockTimeMax
;

1040 #i‡
OS_CFG_DBG_EN
 > 0u

1041 
OS_TCB
 *
	gDbgPªvPå
;

1042 
OS_TCB
 *
	gDbgNextPå
;

1043 
CPU_CHAR
 *
	gDbgNamePå
;

1054 
	sos_tick_•oke
 {

1055 
OS_TCB
 *
	gFú°På
;

1056 
OS_OBJ_QTY
 
	gNbrE¡rõs
;

1057 
OS_OBJ_QTY
 
	gNbrE¡rõsMax
;

1067 
	sos_tmr
 {

1068 
OS_OBJ_TYPE
 
	gTy≥
;

1069 
CPU_CHAR
 *
	gNamePå
;

1070 
OS_TMR_CALLBACK_PTR
 
	gCÆlbackPå
;

1071 *
	gCÆlbackPåArg
;

1072 
OS_TMR
 *
	gNextPå
;

1073 
OS_TMR
 *
	gPªvPå
;

1074 
OS_TICK
 
	gM©ch
;

1075 
OS_TICK
 
	gRemaö
;

1076 
OS_TICK
 
	gDly
;

1077 
OS_TICK
 
	gPîiod
;

1078 
OS_OPT
 
	gO±
;

1079 
OS_STATE
 
	gSèã
;

1080 #i‡
OS_CFG_DBG_EN
 > 0u

1081 
OS_TMR
 *
	gDbgPªvPå
;

1082 
OS_TMR
 *
	gDbgNextPå
;

1088 
	sos_tmr_•oke
 {

1089 
OS_TMR
 *
	gFú°På
;

1090 
OS_OBJ_QTY
 
	gNbrE¡rõs
;

1091 
OS_OBJ_QTY
 
	gNbrE¡rõsMax
;

1103 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

1104 
OS_EXT
 
OS_APP_HOOK_TCB
 
	gOS_AµTaskCª©eHookPå
;

1105 
OS_EXT
 
OS_APP_HOOK_TCB
 
	gOS_AµTaskDñHookPå
;

1106 
OS_EXT
 
OS_APP_HOOK_TCB
 
	gOS_AµTaskRëu∫HookPå
;

1108 
OS_EXT
 
OS_APP_HOOK_VOID
 
	gOS_AµIdÀTaskHookPå
;

1109 
OS_EXT
 
OS_APP_HOOK_VOID
 
	gOS_AµSètTaskHookPå
;

1110 
OS_EXT
 
OS_APP_HOOK_VOID
 
	gOS_AµTaskSwHookPå
;

1111 
OS_EXT
 
OS_APP_HOOK_VOID
 
	gOS_AµTimeTickHookPå
;

1115 
OS_EXT
 
OS_IDLE_CTR
 
	gOSIdÀTaskCå
;

1116 
OS_EXT
 
OS_TCB
 
	gOSIdÀTaskTCB
;

1119 
OS_EXT
 
OS_NESTING_CTR
 
	gOSI¡Ne°ögCå
;

1120 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


1121 
OS_EXT
 
CPU_TS
 
	gOSI¡DisTimeMax
;

1124 
OS_EXT
 
OS_STATE
 
	gOSRu¬ög
;

1128 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1129 
OS_EXT
 
OS_INT_Q
 *
	gOSI¡QInPå
;

1130 
OS_EXT
 
OS_INT_Q
 *
	gOSI¡QOutPå
;

1131 
OS_EXT
 
OS_OBJ_QTY
 
	gOSI¡QNbrE¡rõs
;

1132 
OS_EXT
 
OS_OBJ_QTY
 
	gOSI¡QNbrE¡rõsMax
;

1133 
OS_EXT
 
OS_OBJ_QTY
 
	gOSI¡QOvfCå
;

1134 
OS_EXT
 
OS_TCB
 
	gOSI¡QTaskTCB
;

1135 
OS_EXT
 
CPU_TS
 
	gOSI¡QTaskTimeMax
;

1139 #i‡
OS_CFG_FLAG_EN
 > 0u

1140 #i‡
OS_CFG_DBG_EN
 > 0u

1141 
OS_EXT
 
OS_FLAG_GRP
 *
	gOSFœgDbgLi°På
;

1143 
OS_EXT
 
OS_OBJ_QTY
 
	gOSFœgQty
;

1147 #i‡
OS_CFG_MEM_EN
 > 0u

1148 #i‡
OS_CFG_DBG_EN
 > 0u

1149 
OS_EXT
 
OS_MEM
 *
	gOSMemDbgLi°På
;

1151 
OS_EXT
 
OS_OBJ_QTY
 
	gOSMemQty
;

1155 #i‡
OS_MSG_EN
 > 0u

1156 
OS_EXT
 
OS_MSG_POOL
 
	gOSMsgPoﬁ
;

1160 #i‡
OS_CFG_MUTEX_EN
 > 0u

1161 #i‡
OS_CFG_DBG_EN
 > 0u

1162 
OS_EXT
 
OS_MUTEX
 *
	gOSMuãxDbgLi°På
;

1164 
OS_EXT
 
OS_OBJ_QTY
 
	gOSMuãxQty
;

1168 
OS_EXT
 
OS_PRIO
 
	gOSPrioCur
;

1169 
OS_EXT
 
OS_PRIO
 
	gOSPrioHighRdy
;

1170 
OS_EXT
 
OS_PRIO
 
	gOSPrioSaved
;

1171 
CPU_DATA
 
OSPrioTbl
[
OS_PRIO_TBL_SIZE
];

1174 #i‡
OS_CFG_Q_EN
 > 0u

1175 #i‡
OS_CFG_DBG_EN
 > 0u

1176 
OS_EXT
 
OS_Q
 *
	gOSQDbgLi°På
;

1178 
OS_EXT
 
OS_OBJ_QTY
 
	gOSQQty
;

1184 
OS_EXT
 
OS_RDY_LIST
 
	gOSRdyLi°
[
OS_CFG_PRIO_MAX
];

1187 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


1188 
OS_EXT
 
CPU_BOOLEAN
 
	gOSSa„tyCrôiˇlSèπFœg
;

1191 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

1192 
OS_EXT
 
CPU_TS_TMR
 
	gOSSchedLockTimeBegö
;

1193 
OS_EXT
 
CPU_TS_TMR
 
	gOSSchedLockTimeMax
;

1194 
OS_EXT
 
CPU_TS_TMR
 
	gOSSchedLockTimeMaxCur
;

1197 
OS_EXT
 
OS_NESTING_CTR
 
	gOSSchedLockNe°ögCå
;

1198 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1199 
OS_EXT
 
OS_TICK
 
	gOSSchedRoundRoböDÊtTimeQu™è
;

1200 
OS_EXT
 
CPU_BOOLEAN
 
	gOSSchedRoundRoböEn
;

1203 #i‡
OS_CFG_SEM_EN
 > 0u

1204 #i‡
OS_CFG_DBG_EN
 > 0u

1205 
OS_EXT
 
OS_SEM
 *
	gOSSemDbgLi°På
;

1207 
OS_EXT
 
OS_OBJ_QTY
 
	gOSSemQty
;

1211 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

1212 
OS_EXT
 
CPU_BOOLEAN
 
	gOSSètRe£tFœg
;

1213 
OS_EXT
 
OS_CPU_USAGE
 
	gOSSètTaskCPUUßge
;

1214 
OS_EXT
 
OS_CPU_USAGE
 
	gOSSètTaskCPUUßgeMax
;

1215 
OS_EXT
 
OS_TICK
 
	gOSSètTaskCå
;

1216 
OS_EXT
 
OS_TICK
 
	gOSSètTaskCåMax
;

1217 
OS_EXT
 
OS_TICK
 
	gOSSètTaskCåRun
;

1218 
OS_EXT
 
CPU_BOOLEAN
 
	gOSSètTaskRdy
;

1219 
OS_EXT
 
OS_TCB
 
	gOSSètTaskTCB
;

1220 
OS_EXT
 
CPU_TS
 
	gOSSètTaskTimeMax
;

1224 
OS_EXT
 
OS_CTX_SW_CTR
 
	gOSTaskCtxSwCå
;

1225 #i‡
OS_CFG_DBG_EN
 > 0u

1226 
OS_EXT
 
OS_TCB
 *
	gOSTaskDbgLi°På
;

1228 
OS_EXT
 
OS_OBJ_QTY
 
	gOSTaskQty
;

1230 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1231 
OS_EXT
 
OS_REG_ID
 
	gOSTaskRegNextAvaûID
;

1235 
OS_EXT
 
OS_TICK
 
	gOSTickCå
;

1236 
OS_EXT
 
OS_TCB
 
	gOSTickTaskTCB
;

1237 
OS_EXT
 
CPU_TS
 
	gOSTickTaskTimeMax
;

1240 #i‡
OS_CFG_TMR_EN
 > 0u

1241 #i‡
OS_CFG_DBG_EN
 > 0u

1242 
OS_EXT
 
OS_TMR
 *
	gOSTmrDbgLi°På
;

1244 
OS_EXT
 
OS_OBJ_QTY
 
	gOSTmrQty
;

1245 
OS_EXT
 
OS_TCB
 
	gOSTmrTaskTCB
;

1246 
OS_EXT
 
CPU_TS
 
	gOSTmrTaskTimeMax
;

1247 
OS_EXT
 
OS_TICK
 
	gOSTmrTickCå
;

1248 
OS_EXT
 
OS_CTR
 
	gOSTmrUpd©eC¡
;

1249 
OS_EXT
 
OS_CTR
 
	gOSTmrUpd©eCå
;

1253 
OS_EXT
 
OS_TCB
 *
	gOSTCBCurPå
;

1254 
OS_EXT
 
OS_TCB
 *
	gOSTCBHighRdyPå
;

1265 
CPU_STK
 * c⁄° 
OSCfg_IdÀTaskStkBa£På
;

1266 
CPU_STK_SIZE
 c⁄° 
OSCfg_IdÀTaskStkLimô
;

1267 
CPU_STK_SIZE
 c⁄° 
OSCfg_IdÀTaskStkSize
;

1268 
CPU_INT32U
 c⁄° 
OSCfg_IdÀTaskStkSizeRAM
;

1270 
OS_INT_Q
 * c⁄° 
OSCfg_I¡QBa£På
;

1271 
OS_OBJ_QTY
 c⁄° 
OSCfg_I¡QSize
;

1272 
CPU_INT32U
 c⁄° 
OSCfg_I¡QSizeRAM
;

1273 
CPU_STK
 * c⁄° 
OSCfg_I¡QTaskStkBa£På
;

1274 
CPU_STK_SIZE
 c⁄° 
OSCfg_I¡QTaskStkLimô
;

1275 
CPU_STK_SIZE
 c⁄° 
OSCfg_I¡QTaskStkSize
;

1276 
CPU_INT32U
 c⁄° 
OSCfg_I¡QTaskStkSizeRAM
;

1278 
CPU_STK
 * c⁄° 
OSCfg_ISRStkBa£På
;

1279 
CPU_STK_SIZE
 c⁄° 
OSCfg_ISRStkSize
;

1280 
CPU_INT32U
 c⁄° 
OSCfg_ISRStkSizeRAM
;

1282 
OS_MSG_SIZE
 c⁄° 
OSCfg_MsgPoﬁSize
;

1283 
CPU_INT32U
 c⁄° 
OSCfg_MsgPoﬁSizeRAM
;

1284 
OS_MSG
 * c⁄° 
OSCfg_MsgPoﬁBa£På
;

1286 
OS_PRIO
 c⁄° 
OSCfg_SètTaskPrio
;

1287 
OS_RATE_HZ
 c⁄° 
OSCfg_SètTaskR©e_Hz
;

1288 
CPU_STK
 * c⁄° 
OSCfg_SètTaskStkBa£På
;

1289 
CPU_STK_SIZE
 c⁄° 
OSCfg_SètTaskStkLimô
;

1290 
CPU_STK_SIZE
 c⁄° 
OSCfg_SètTaskStkSize
;

1291 
CPU_INT32U
 c⁄° 
OSCfg_SètTaskStkSizeRAM
;

1293 
CPU_STK_SIZE
 c⁄° 
OSCfg_StkSizeMö
;

1295 
OS_RATE_HZ
 c⁄° 
OSCfg_TickR©e_Hz
;

1296 
OS_PRIO
 c⁄° 
OSCfg_TickTaskPrio
;

1297 
CPU_STK
 * c⁄° 
OSCfg_TickTaskStkBa£På
;

1298 
CPU_STK_SIZE
 c⁄° 
OSCfg_TickTaskStkLimô
;

1299 
CPU_STK_SIZE
 c⁄° 
OSCfg_TickTaskStkSize
;

1300 
CPU_INT32U
 c⁄° 
OSCfg_TickTaskStkSizeRAM
;

1301 
OS_OBJ_QTY
 c⁄° 
OSCfg_TickWhìlSize
;

1302 
CPU_INT32U
 c⁄° 
OSCfg_TickWhìlSizeRAM
;

1304 
OS_PRIO
 c⁄° 
OSCfg_TmrTaskPrio
;

1305 
OS_RATE_HZ
 c⁄° 
OSCfg_TmrTaskR©e_Hz
;

1306 
CPU_STK
 * c⁄° 
OSCfg_TmrTaskStkBa£På
;

1307 
CPU_STK_SIZE
 c⁄° 
OSCfg_TmrTaskStkLimô
;

1308 
CPU_STK_SIZE
 c⁄° 
OSCfg_TmrTaskStkSize
;

1309 
CPU_INT32U
 c⁄° 
OSCfg_TmrTaskStkSizeRAM
;

1310 
OS_OBJ_QTY
 c⁄° 
OSCfg_TmrWhìlSize
;

1311 
CPU_INT32U
 c⁄° 
OSCfg_TmrSizeRAM
;

1314 
CPU_STK
 
OSCfg_IdÀTaskStk
[];

1316 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

1317 
CPU_STK
 
OSCfg_I¡QTaskStk
[];

1318 
OS_INT_Q
 
OSCfg_I¡Q
[];

1321 
CPU_STK
 
OSCfg_ISRStk
[];

1323 #i‡(
OS_MSG_EN
 > 0u)

1324 
OS_MSG
 
OSCfg_MsgPoﬁ
[];

1327 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

1328 
CPU_STK
 
OSCfg_SètTaskStk
[];

1331 
CPU_STK
 
OSCfg_TickTaskStk
[];

1332 
OS_TICK_SPOKE
 
OSCfg_TickWhìl
[];

1334 #i‡(
OS_CFG_TMR_EN
 > 0u)

1335 
CPU_STK
 
OSCfg_TmrTaskStk
[];

1336 
OS_TMR_SPOKE
 
OSCfg_TmrWhìl
[];

1351 #i‡
OS_CFG_FLAG_EN
 > 0u

1353 
OSFœgCª©e
 (
OS_FLAG_GRP
 *
p_gΩ
,

1354 
CPU_CHAR
 *
p_«me
,

1355 
OS_FLAGS
 
Êags
,

1356 
OS_ERR
 *
p_îr
);

1358 #i‡
OS_CFG_FLAG_DEL_EN
 > 0u

1359 
OS_OBJ_QTY
 
OSFœgDñ
 (
OS_FLAG_GRP
 *
p_gΩ
,

1360 
OS_OPT
 
›t
,

1361 
OS_ERR
 *
p_îr
);

1364 
OS_FLAGS
 
OSFœgPíd
 (
OS_FLAG_GRP
 *
p_gΩ
,

1365 
OS_FLAGS
 
Êags
,

1366 
OS_TICK
 
timeout
,

1367 
OS_OPT
 
›t
,

1368 
CPU_TS
 *
p_ts
,

1369 
OS_ERR
 *
p_îr
);

1371 #i‡
OS_CFG_FLAG_PEND_ABORT_EN
 > 0u

1372 
OS_OBJ_QTY
 
OSFœgPídAb‹t
 (
OS_FLAG_GRP
 *
p_gΩ
,

1373 
OS_OPT
 
›t
,

1374 
OS_ERR
 *
p_îr
);

1377 
OS_FLAGS
 
OSFœgPídGëFœgsRdy
 (
OS_ERR
 *
p_îr
);

1379 
OS_FLAGS
 
OSFœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

1380 
OS_FLAGS
 
Êags
,

1381 
OS_OPT
 
›t
,

1382 
OS_ERR
 *
p_îr
);

1386 
OS_FœgCÃ
 (
OS_FLAG_GRP
 *
p_gΩ
);

1388 
OS_FœgBlock
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

1389 
OS_FLAG_GRP
 *
p_gΩ
,

1390 
OS_FLAGS
 
Êags
,

1391 
OS_OPT
 
›t
,

1392 
OS_TICK
 
timeout
);

1394 #i‡
OS_CFG_DBG_EN
 > 0u

1395 
OS_FœgDbgLi°Add
 (
OS_FLAG_GRP
 *
p_gΩ
);

1397 
OS_FœgDbgLi°Remove
 (
OS_FLAG_GRP
 *
p_gΩ
);

1400 
OS_FœgInô
 (
OS_ERR
 *
p_îr
);

1402 
OS_FLAGS
 
OS_FœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

1403 
OS_FLAGS
 
Êags
,

1404 
OS_OPT
 
›t
,

1405 
CPU_TS
 
ts
,

1406 
OS_ERR
 *
p_îr
);

1408 
OS_FœgTaskRdy
 (
OS_TCB
 *
p_tcb
,

1409 
OS_FLAGS
 
Êags_rdy
,

1410 
CPU_TS
 
ts
);

1418 #i‡
OS_CFG_MEM_EN
 > 0u

1420 
OSMemCª©e
 (
OS_MEM
 *
p_mem
,

1421 
CPU_CHAR
 *
p_«me
,

1422 *
p_addr
,

1423 
OS_MEM_QTY
 
n_blks
,

1424 
OS_MEM_SIZE
 
blk_size
,

1425 
OS_ERR
 *
p_îr
);

1427 *
OSMemGë
 (
OS_MEM
 *
p_mem
,

1428 
OS_ERR
 *
p_îr
);

1430 
OSMemPut
 (
OS_MEM
 *
p_mem
,

1431 *
p_blk
,

1432 
OS_ERR
 *
p_îr
);

1436 #i‡
OS_CFG_DBG_EN
 > 0u

1437 
OS_MemDbgLi°Add
 (
OS_MEM
 *
p_mem
);

1440 
OS_MemInô
 (
OS_ERR
 *
p_îr
);

1449 #i‡
OS_CFG_MUTEX_EN
 > 0u

1451 
OSMuãxCª©e
 (
OS_MUTEX
 *
p_muãx
,

1452 
CPU_CHAR
 *
p_«me
,

1453 
OS_ERR
 *
p_îr
);

1455 #i‡
OS_CFG_MUTEX_DEL_EN
 > 0u

1456 
OS_OBJ_QTY
 
OSMuãxDñ
 (
OS_MUTEX
 *
p_muãx
,

1457 
OS_OPT
 
›t
,

1458 
OS_ERR
 *
p_îr
);

1461 
OSMuãxPíd
 (
OS_MUTEX
 *
p_muãx
,

1462 
OS_TICK
 
timeout
,

1463 
OS_OPT
 
›t
,

1464 
CPU_TS
 *
p_ts
,

1465 
OS_ERR
 *
p_îr
);

1467 #i‡
OS_CFG_MUTEX_PEND_ABORT_EN
 > 0u

1468 
OS_OBJ_QTY
 
OSMuãxPídAb‹t
 (
OS_MUTEX
 *
p_muãx
,

1469 
OS_OPT
 
›t
,

1470 
OS_ERR
 *
p_îr
);

1473 
OSMuãxPo°
 (
OS_MUTEX
 *
p_muãx
,

1474 
OS_OPT
 
›t
,

1475 
OS_ERR
 *
p_îr
);

1480 
OS_MuãxCÃ
 (
OS_MUTEX
 *
p_muãx
);

1482 #i‡
OS_CFG_DBG_EN
 > 0u

1483 
OS_MuãxDbgLi°Add
 (
OS_MUTEX
 *
p_muãx
);

1485 
OS_MuãxDbgLi°Remove
 (
OS_MUTEX
 *
p_muãx
);

1488 
OS_MuãxInô
 (
OS_ERR
 *
p_îr
);

1496 #i‡
OS_CFG_PEND_MULTI_EN
 > 0u

1498 
OS_OBJ_QTY
 
OSPídMu…i
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1499 
OS_OBJ_QTY
 
tbl_size
,

1500 
OS_TICK
 
timeout
,

1501 
OS_OPT
 
›t
,

1502 
OS_ERR
 *
p_îr
);

1506 
OS_OBJ_QTY
 
OS_PídMu…iGëRdy
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1507 
OS_OBJ_QTY
 
tbl_size
);

1509 
CPU_BOOLEAN
 
OS_PídMu…iVÆid©e
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1510 
OS_OBJ_QTY
 
tbl_size
);

1512 
OS_PídMu…iWaô
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1513 
OS_OBJ_QTY
 
tbl_size
,

1514 
OS_TICK
 
timeout
);

1521 #i‡
OS_CFG_Q_EN
 > 0u

1523 
OSQCª©e
 (
OS_Q
 *
p_q
,

1524 
CPU_CHAR
 *
p_«me
,

1525 
OS_MSG_QTY
 
max_qty
,

1526 
OS_ERR
 *
p_îr
);

1528 #i‡
OS_CFG_Q_DEL_EN
 > 0u

1529 
OS_OBJ_QTY
 
OSQDñ
 (
OS_Q
 *
p_q
,

1530 
OS_OPT
 
›t
,

1531 
OS_ERR
 *
p_îr
);

1534 #i‡
OS_CFG_Q_FLUSH_EN
 > 0u

1535 
OS_MSG_QTY
 
OSQFlush
 (
OS_Q
 *
p_q
,

1536 
OS_ERR
 *
p_îr
);

1539 *
OSQPíd
 (
OS_Q
 *
p_q
,

1540 
OS_TICK
 
timeout
,

1541 
OS_OPT
 
›t
,

1542 
OS_MSG_SIZE
 *
p_msg_size
,

1543 
CPU_TS
 *
p_ts
,

1544 
OS_ERR
 *
p_îr
);

1546 #i‡
OS_CFG_Q_PEND_ABORT_EN
 > 0u

1547 
OS_OBJ_QTY
 
OSQPídAb‹t
 (
OS_Q
 *
p_q
,

1548 
OS_OPT
 
›t
,

1549 
OS_ERR
 *
p_îr
);

1552 
OSQPo°
 (
OS_Q
 *
p_q
,

1553 *
p_void
,

1554 
OS_MSG_SIZE
 
msg_size
,

1555 
OS_OPT
 
›t
,

1556 
OS_ERR
 *
p_îr
);

1560 
OS_QCÃ
 (
OS_Q
 *
p_q
);

1562 #i‡
OS_CFG_DBG_EN
 > 0u

1563 
OS_QDbgLi°Add
 (
OS_Q
 *
p_q
);

1565 
OS_QDbgLi°Remove
 (
OS_Q
 *
p_q
);

1568 
OS_QInô
 (
OS_ERR
 *
p_îr
);

1570 
OS_QPo°
 (
OS_Q
 *
p_q
,

1571 *
p_void
,

1572 
OS_MSG_SIZE
 
msg_size
,

1573 
OS_OPT
 
›t
,

1574 
CPU_TS
 
ts
,

1575 
OS_ERR
 *
p_îr
);

1583 #i‡
OS_CFG_SEM_EN
 > 0u

1585 
OSSemCª©e
 (
OS_SEM
 *
p_£m
,

1586 
CPU_CHAR
 *
p_«me
,

1587 
OS_SEM_CTR
 
˙t
,

1588 
OS_ERR
 *
p_îr
);

1590 
OS_OBJ_QTY
 
OSSemDñ
 (
OS_SEM
 *
p_£m
,

1591 
OS_OPT
 
›t
,

1592 
OS_ERR
 *
p_îr
);

1594 
OS_SEM_CTR
 
OSSemPíd
 (
OS_SEM
 *
p_£m
,

1595 
OS_TICK
 
timeout
,

1596 
OS_OPT
 
›t
,

1597 
CPU_TS
 *
p_ts
,

1598 
OS_ERR
 *
p_îr
);

1600 #i‡
OS_CFG_SEM_PEND_ABORT_EN
 > 0u

1601 
OS_OBJ_QTY
 
OSSemPídAb‹t
 (
OS_SEM
 *
p_£m
,

1602 
OS_OPT
 
›t
,

1603 
OS_ERR
 *
p_îr
);

1606 
OS_SEM_CTR
 
OSSemPo°
 (
OS_SEM
 *
p_£m
,

1607 
OS_OPT
 
›t
,

1608 
OS_ERR
 *
p_îr
);

1610 #i‡
OS_CFG_SEM_SET_EN
 > 0u

1611 
OSSemSë
 (
OS_SEM
 *
p_£m
,

1612 
OS_SEM_CTR
 
˙t
,

1613 
OS_ERR
 *
p_îr
);

1618 
OS_SemCÃ
 (
OS_SEM
 *
p_£m
);

1620 #i‡
OS_CFG_DBG_EN
 > 0u

1621 
OS_SemDbgLi°Add
 (
OS_SEM
 *
p_£m
);

1623 
OS_SemDbgLi°Remove
 (
OS_SEM
 *
p_£m
);

1626 
OS_SemInô
 (
OS_ERR
 *
p_îr
);

1628 
OS_SEM_CTR
 
OS_SemPo°
 (
OS_SEM
 *
p_£m
,

1629 
OS_OPT
 
›t
,

1630 
CPU_TS
 
ts
,

1631 
OS_ERR
 *
p_îr
);

1639 #i‡
OS_CFG_TASK_CHANGE_PRIO_EN
 > 0u

1640 
OSTaskCh™gePrio
 (
OS_TCB
 *
p_tcb
,

1641 
OS_PRIO
 
¥io_√w
,

1642 
OS_ERR
 *
p_îr
);

1645 
OSTaskCª©e
 (
OS_TCB
 *
p_tcb
,

1646 
CPU_CHAR
 *
p_«me
,

1647 
OS_TASK_PTR
 
p_èsk
,

1648 *
p_¨g
,

1649 
OS_PRIO
 
¥io
,

1650 
CPU_STK
 *
p_°k_ba£
,

1651 
CPU_STK_SIZE
 
°k_limô
,

1652 
CPU_STK_SIZE
 
°k_size
,

1653 
OS_MSG_QTY
 
q_size
,

1654 
OS_TICK
 
time_qu™è
,

1655 *
p_ext
,

1656 
OS_OPT
 
›t
,

1657 
OS_ERR
 *
p_îr
);

1659 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

1660 
OSTaskDñ
 (
OS_TCB
 *
p_tcb
,

1661 
OS_ERR
 *
p_îr
);

1664 #i‡
OS_CFG_TASK_Q_EN
 > 0u

1665 
OS_MSG_QTY
 
OSTaskQFlush
 (
OS_TCB
 *
p_tcb
,

1666 
OS_ERR
 *
p_îr
);

1668 *
OSTaskQPíd
 (
OS_TICK
 
timeout
,

1669 
OS_OPT
 
›t
,

1670 
OS_MSG_SIZE
 *
p_msg_size
,

1671 
CPU_TS
 *
p_ts
,

1672 
OS_ERR
 *
p_îr
);

1674 
CPU_BOOLEAN
 
OSTaskQPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1675 
OS_OPT
 
›t
,

1676 
OS_ERR
 *
p_îr
);

1678 
OSTaskQPo°
 (
OS_TCB
 *
p_tcb
,

1679 *
p_void
,

1680 
OS_MSG_SIZE
 
msg_size
,

1681 
OS_OPT
 
›t
,

1682 
OS_ERR
 *
p_îr
);

1686 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1687 
OS_REG
 
OSTaskRegGë
 (
OS_TCB
 *
p_tcb
,

1688 
OS_REG_ID
 
id
,

1689 
OS_ERR
 *
p_îr
);

1691 
OS_REG_ID
 
OSTaskRegGëID
 (
OS_ERR
 *
p_îr
);

1693 
OSTaskRegSë
 (
OS_TCB
 *
p_tcb
,

1694 
OS_REG_ID
 
id
,

1695 
OS_REG
 
vÆue
,

1696 
OS_ERR
 *
p_îr
);

1699 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1700 
OSTaskResume
 (
OS_TCB
 *
p_tcb
,

1701 
OS_ERR
 *
p_îr
);

1703 
OSTaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1704 
OS_ERR
 *
p_îr
);

1707 
OS_SEM_CTR
 
OSTaskSemPíd
 (
OS_TICK
 
timeout
,

1708 
OS_OPT
 
›t
,

1709 
CPU_TS
 *
p_ts
,

1710 
OS_ERR
 *
p_îr
);

1712 #i‡(
OS_CFG_TASK_SEM_PEND_ABORT_EN
 > 0u)

1713 
CPU_BOOLEAN
 
OSTaskSemPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1714 
OS_OPT
 
›t
,

1715 
OS_ERR
 *
p_îr
);

1718 
OS_SEM_CTR
 
OSTaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1719 
OS_OPT
 
›t
,

1720 
OS_ERR
 *
p_îr
);

1722 
OS_SEM_CTR
 
OSTaskSemSë
 (
OS_TCB
 *
p_tcb
,

1723 
OS_SEM_CTR
 
˙t
,

1724 
OS_ERR
 *
p_îr
);

1726 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1727 
OSTaskStkChk
 (
OS_TCB
 *
p_tcb
,

1728 
CPU_STK_SIZE
 *
p_‰ì
,

1729 
CPU_STK_SIZE
 *
p_u£d
,

1730 
OS_ERR
 *
p_îr
);

1733 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1734 
OSTaskTimeQu™èSë
 (
OS_TCB
 *
p_tcb
,

1735 
OS_TICK
 
time_qu™è
,

1736 
OS_ERR
 *
p_îr
);

1741 
OS_TaskBlock
 (
OS_TCB
 *
p_tcb
,

1742 
OS_TICK
 
timeout
);

1744 #i‡
OS_CFG_DBG_EN
 > 0u

1745 
OS_TaskDbgLi°Add
 (
OS_TCB
 *
p_tcb
);

1747 
OS_TaskDbgLi°Remove
 (
OS_TCB
 *
p_tcb
);

1750 
OS_TaskInô
 (
OS_ERR
 *
p_îr
);

1752 
OS_TaskInôTCB
 (
OS_TCB
 *
p_tcb
);

1754 
OS_TaskQPo°
 (
OS_TCB
 *
p_tcb
,

1755 *
p_void
,

1756 
OS_MSG_SIZE
 
msg_size
,

1757 
OS_OPT
 
›t
,

1758 
CPU_TS
 
ts
,

1759 
OS_ERR
 *
p_îr
);

1761 
OS_TaskRdy
 (
OS_TCB
 *
p_tcb
);

1763 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1764 
OS_TaskResume
 (
OS_TCB
 *
p_tcb
,

1765 
OS_ERR
 *
p_îr
);

1768 
OS_TaskRëu∫
 ();

1770 
OS_SEM_CTR
 
OS_TaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1771 
OS_OPT
 
›t
,

1772 
CPU_TS
 
ts
,

1773 
OS_ERR
 *
p_îr
);

1775 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1776 
OS_TaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1777 
OS_ERR
 *
p_îr
);

1785 #i‡
deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

1786 
OS_TLS_ID
 
OS_TLS_GëID
 (
OS_ERR
 *
p_îr
);

1788 
OS_TLS
 
OS_TLS_GëVÆue
 (
OS_TCB
 *
p_tcb
,

1789 
OS_TLS_ID
 
id
,

1790 
OS_ERR
 *
p_îr
);

1792 
OS_TLS_Inô
 (
OS_ERR
 *
p_îr
);

1794 
OS_TLS_SëVÆue
 (
OS_TCB
 *
p_tcb
,

1795 
OS_TLS_ID
 
id
,

1796 
OS_TLS
 
vÆue
,

1797 
OS_ERR
 *
p_îr
);

1799 
OS_TLS_SëDe°ru˘
 (
OS_TLS_ID
 
id
,

1800 
OS_TLS_DESTRUCT_PTR
 
p_de°ru˘
,

1801 
OS_ERR
 *
p_îr
);

1803 
OS_TLS_TaskCª©e
 (
OS_TCB
 *
p_tcb
);

1805 
OS_TLS_TaskDñ
 (
OS_TCB
 *
p_tcb
);

1807 
OS_TLS_TaskSw
 ();

1815 
OSTimeDly
 (
OS_TICK
 
dly
,

1816 
OS_OPT
 
›t
,

1817 
OS_ERR
 *
p_îr
);

1819 #i‡
OS_CFG_TIME_DLY_HMSM_EN
 > 0u

1820 
OSTimeDlyHMSM
 (
CPU_INT16U
 
hours
,

1821 
CPU_INT16U
 
möuãs
,

1822 
CPU_INT16U
 
£c⁄ds
,

1823 
CPU_INT32U
 
mûli
,

1824 
OS_OPT
 
›t
,

1825 
OS_ERR
 *
p_îr
);

1828 #i‡
OS_CFG_TIME_DLY_RESUME_EN
 > 0u

1829 
OSTimeDlyResume
 (
OS_TCB
 *
p_tcb
,

1830 
OS_ERR
 *
p_îr
);

1833 
OS_TICK
 
OSTimeGë
 (
OS_ERR
 *
p_îr
);

1835 
OSTimeSë
 (
OS_TICK
 
ticks
,

1836 
OS_ERR
 *
p_îr
);

1838 
OSTimeTick
 ();

1845 #i‡
OS_CFG_TMR_EN
 > 0u

1846 
OSTmrCª©e
 (
OS_TMR
 *
p_tmr
,

1847 
CPU_CHAR
 *
p_«me
,

1848 
OS_TICK
 
dly
,

1849 
OS_TICK
 
≥riod
,

1850 
OS_OPT
 
›t
,

1851 
OS_TMR_CALLBACK_PTR
 
p_ˇŒback
,

1852 *
p_ˇŒback_¨g
,

1853 
OS_ERR
 *
p_îr
);

1855 
CPU_BOOLEAN
 
OSTmrDñ
 (
OS_TMR
 *
p_tmr
,

1856 
OS_ERR
 *
p_îr
);

1858 
OS_TICK
 
OSTmrRemaöGë
 (
OS_TMR
 *
p_tmr
,

1859 
OS_ERR
 *
p_îr
);

1861 
CPU_BOOLEAN
 
OSTmrSèπ
 (
OS_TMR
 *
p_tmr
,

1862 
OS_ERR
 *
p_îr
);

1864 
OS_STATE
 
OSTmrSèãGë
 (
OS_TMR
 *
p_tmr
,

1865 
OS_ERR
 *
p_îr
);

1867 
CPU_BOOLEAN
 
OSTmrSt›
 (
OS_TMR
 *
p_tmr
,

1868 
OS_OPT
 
›t
,

1869 *
p_ˇŒback_¨g
,

1870 
OS_ERR
 *
p_îr
);

1874 
OS_TmrCÃ
 (
OS_TMR
 *
p_tmr
);

1876 #i‡
OS_CFG_DBG_EN
 > 0u

1877 
OS_TmrDbgLi°Add
 (
OS_TMR
 *
p_tmr
);

1879 
OS_TmrDbgLi°Remove
 (
OS_TMR
 *
p_tmr
);

1882 
OS_TmrInô
 (
OS_ERR
 *
p_îr
);

1884 
OS_TmrLök
 (
OS_TMR
 *
p_tmr
,

1885 
OS_OPT
 
›t
);

1887 
OS_TmrRe£tPók
 ();

1889 
OS_TmrU∆ök
 (
OS_TMR
 *
p_tmr
);

1891 
OS_TmrTask
 (*
p_¨g
);

1900 
OSInô
 (
OS_ERR
 *
p_îr
);

1902 
OSI¡E¡î
 ();

1903 
OSI¡Exô
 ();

1905 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


1906 
OSSa„tyCrôiˇlSèπ
 ();

1909 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1910 
OSSchedRoundRoböCfg
 (
CPU_BOOLEAN
 
í
,

1911 
OS_TICK
 
dÊt_time_qu™è
,

1912 
OS_ERR
 *
p_îr
);

1914 
OSSchedRoundRoböYõld
 (
OS_ERR
 *
p_îr
);

1918 
OSSched
 ();

1920 
OSSchedLock
 (
OS_ERR
 *
p_îr
);

1921 
OSSchedU∆ock
 (
OS_ERR
 *
p_îr
);

1923 
OSSèπ
 (
OS_ERR
 *
p_îr
);

1925 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

1926 
OSSètRe£t
 (
OS_ERR
 *
p_îr
);

1928 
OSSètTaskCPUUßgeInô
 (
OS_ERR
 *
p_îr
);

1931 
CPU_INT16U
 
OSVîsi⁄
 (
OS_ERR
 *
p_îr
);

1935 
OS_IdÀTask
 (*
p_¨g
);

1937 
OS_IdÀTaskInô
 (
OS_ERR
 *
p_îr
);

1939 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

1940 
OS_SètTask
 (*
p_¨g
);

1943 
OS_SètTaskInô
 (
OS_ERR
 *
p_îr
);

1945 
OS_TickTask
 (*
p_¨g
);

1946 
OS_TickTaskInô
 (
OS_ERR
 *
p_îr
);

1957 
OSInôHook
 ();

1959 
OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
);

1960 
OSTaskDñHook
 (
OS_TCB
 *
p_tcb
);

1962 
OSIdÀTaskHook
 ();

1964 
OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
);

1966 
OSSètTaskHook
 ();

1968 
CPU_STK
 *
OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

1969 *
p_¨g
,

1970 
CPU_STK
 *
p_°k_ba£
,

1971 
CPU_STK
 *
p_°k_limô
,

1972 
CPU_STK_SIZE
 
°k_size
,

1973 
OS_OPT
 
›t
);

1975 
OSTaskSwHook
 ();

1977 
OSTimeTickHook
 ();

1988 
OSCfg_Inô
 ();

1990 #i‡
OS_CFG_DBG_EN
 > 0u

1991 
OS_Dbg_Inô
 ();

1995 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1996 
OS_I¡QTaskInô
 (
OS_ERR
 *
p_îr
);

1998 
OS_I¡QPo°
 (
OS_OBJ_TYPE
 
ty≥
,

1999 *
p_obj
,

2000 *
p_void
,

2001 
OS_MSG_SIZE
 
msg_size
,

2002 
OS_FLAGS
 
Êags
,

2003 
OS_OPT
 
›t
,

2004 
CPU_TS
 
ts
,

2005 
OS_ERR
 *
p_îr
);

2007 
OS_I¡QRePo°
 ();

2009 
OS_I¡QTask
 (*
p_¨g
);

2014 
OS_MsgPoﬁCª©e
 (
OS_MSG
 *
p_msg
,

2015 
OS_MSG_QTY
 
size
);

2017 
OS_MsgPoﬁInô
 (
OS_ERR
 *
p_îr
);

2019 
OS_MSG_QTY
 
OS_MsgQFªeAŒ
 (
OS_MSG_Q
 *
p_msg_q
);

2021 *
OS_MsgQGë
 (
OS_MSG_Q
 *
p_msg_q
,

2022 
OS_MSG_SIZE
 *
p_msg_size
,

2023 
CPU_TS
 *
p_ts
,

2024 
OS_ERR
 *
p_îr
);

2026 
OS_MsgQInô
 (
OS_MSG_Q
 *
p_msg_q
,

2027 
OS_MSG_QTY
 
size
);

2029 
OS_MsgQPut
 (
OS_MSG_Q
 *
p_msg_q
,

2030 *
p_void
,

2031 
OS_MSG_SIZE
 
msg_size
,

2032 
OS_OPT
 
›t
,

2033 
CPU_TS
 
ts
,

2034 
OS_ERR
 *
p_îr
);

2038 
OS_Píd
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

2039 
OS_PEND_OBJ
 *
p_obj
,

2040 
OS_STATE
 
≥ndög_⁄
,

2041 
OS_TICK
 
timeout
);

2043 
OS_PídAb‹t
 (
OS_PEND_OBJ
 *
p_obj
,

2044 
OS_TCB
 *
p_tcb
,

2045 
CPU_TS
 
ts
);

2047 
OS_PídAb‹t1
 (
OS_PEND_OBJ
 *
p_obj
,

2048 
OS_TCB
 *
p_tcb
,

2049 
CPU_TS
 
ts
);

2051 
OS_PídObjDñ
 (
OS_PEND_OBJ
 *
p_obj
,

2052 
OS_TCB
 *
p_tcb
,

2053 
CPU_TS
 
ts
);

2055 
OS_PídObjDñ1
 (
OS_PEND_OBJ
 *
p_obj
,

2056 
OS_TCB
 *
p_tcb
,

2057 
CPU_TS
 
ts
);

2059 
OS_Po°
 (
OS_PEND_OBJ
 *
p_obj
,

2060 
OS_TCB
 *
p_tcb
,

2061 *
p_void
,

2062 
OS_MSG_SIZE
 
msg_size
,

2063 
CPU_TS
 
ts
);

2065 
OS_Po°1
 (
OS_PEND_OBJ
 *
p_obj
,

2066 
OS_TCB
 *
p_tcb
,

2067 *
p_void
,

2068 
OS_MSG_SIZE
 
msg_size
,

2069 
CPU_TS
 
ts
);

2073 
OS_PrioInô
 ();

2075 
OS_PrioIn£π
 (
OS_PRIO
 
¥io
);

2077 
OS_PrioRemove
 (
OS_PRIO
 
¥io
);

2079 
OS_PRIO
 
OS_PrioGëHighe°
 ();

2083 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

2084 
OS_Sched0
 ();

2087 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

2088 
OS_SchedLockTimeMósSèπ
 ();

2089 
OS_SchedLockTimeMósSt›
 ();

2092 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

2093 
OS_SchedRoundRobö
 (
OS_RDY_LIST
 *
p_rdy_li°
);

2098 
OS_RdyLi°Inô
 ();

2100 
OS_RdyLi°In£π
 (
OS_TCB
 *
p_tcb
);

2102 
OS_RdyLi°In£πHód
 (
OS_TCB
 *
p_tcb
);

2104 
OS_RdyLi°In£πTaû
 (
OS_TCB
 *
p_tcb
);

2106 
OS_RdyLi°MoveHódToTaû
 (
OS_RDY_LIST
 *
p_rdy_li°
);

2108 
OS_RdyLi°Remove
 (
OS_TCB
 *
p_tcb
);

2112 
OS_PídD©aInô
 (
OS_TCB
 *
p_tcb
,

2113 
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

2114 
OS_OBJ_QTY
 
tbl_size
);

2116 #i‡
OS_CFG_DBG_EN
 > 0u

2117 
OS_PídDbgNameAdd
 (
OS_PEND_OBJ
 *
p_obj
,

2118 
OS_TCB
 *
p_tcb
);

2120 
OS_PídDbgNameRemove
 (
OS_PEND_OBJ
 *
p_obj
,

2121 
OS_TCB
 *
p_tcb
);

2124 
OS_PEND_LIST
 *
OS_PídLi°GëPå
 (
OS_PEND_OBJ
 *
p_obj
);

2126 
OS_PídLi°Inô
 (
OS_PEND_LIST
 *
p_≥nd_li°
);

2128 
OS_PídLi°In£πHód
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

2129 
OS_PEND_DATA
 *
p_≥nd_d©a
);

2131 
OS_PídLi°In£πPrio
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

2132 
OS_PEND_DATA
 *
p_≥nd_d©a
);

2134 
OS_PídLi°Ch™gePrio
 (
OS_TCB
 *
p_tcb
,

2135 
OS_PRIO
 
¥io_√w
);

2137 
OS_PídLi°Remove
 (
OS_TCB
 *
p_tcb
);

2139 
OS_PídLi°Remove1
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

2140 
OS_PEND_DATA
 *
p_≥nd_d©a
);

2144 
OS_TickLi°Inô
 ();

2146 
OS_TickLi°In£π
 (
OS_TCB
 *
p_tcb
,

2147 
OS_TICK
 
time
,

2148 
OS_OPT
 
›t
,

2149 
OS_ERR
 *
p_îr
);

2151 
OS_TickLi°Remove
 (
OS_TCB
 *
p_tcb
);

2153 
OS_TickLi°Re£tPók
 ();

2155 
OS_TickLi°Upd©e
 ();

2176 #i‚de‡
OS_CFG_APP_HOOKS_EN


2181 #i‚de‡
OS_CFG_ARG_CHK_EN


2186 #i‚de‡
OS_CFG_DBG_EN


2191 #i‚de‡
OS_CFG_CALLED_FROM_ISR_CHK_EN


2196 #i‚de‡
OS_CFG_OBJ_TYPE_CHK_EN


2201 #i‚de‡
OS_CFG_PEND_MULTI_EN


2206 #i‡ 
OS_CFG_PRIO_MAX
 < 8u

2211 #i‚de‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN


2214 #i‡ (
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u) && \

2215 (
	gOS_CFG_TS_EN
 < 1u)

2221 #i‚de‡
OS_CFG_SCHED_ROUND_ROBIN_EN


2226 #i‚de‡
OS_CFG_STK_SIZE_MIN


2230 #i‚de‡
OS_CFG_TS_EN


2233 #i‡ (
OS_CFG_TS_EN
 > 0u) && \

2234 (
	gCPU_CFG_TS_EN
 =
DEF_DISABLED
)

2245 #i‚de‡
OS_CFG_FLAG_EN


2248 #i‚de‡
OS_CFG_FLAG_DEL_EN


2252 #i‚de‡
OS_CFG_FLAG_MODE_CLR_EN


2256 #i‚de‡
OS_CFG_FLAG_PEND_ABORT_EN


2267 #i‚de‡
OS_CFG_MEM_EN


2277 #i‚de‡
OS_CFG_MUTEX_EN


2280 #i‚de‡
OS_CFG_MUTEX_DEL_EN


2284 #i‚de‡
OS_CFG_MUTEX_PEND_ABORT_EN


2295 #i‚de‡
OS_CFG_Q_EN


2298 #i‚de‡
OS_CFG_Q_DEL_EN


2302 #i‚de‡
OS_CFG_Q_FLUSH_EN


2306 #i‚de‡
OS_CFG_Q_PEND_ABORT_EN


2317 #i‚de‡
OS_CFG_SEM_EN


2320 #i‚de‡
OS_CFG_SEM_DEL_EN


2324 #i‚de‡
OS_CFG_SEM_PEND_ABORT_EN


2328 #i‚de‡
OS_CFG_SEM_SET_EN


2339 #i‚de‡
OS_CFG_STAT_TASK_EN


2343 #i‚de‡
OS_CFG_STAT_TASK_STK_CHK_EN


2347 #i‚de‡
OS_CFG_TASK_CHANGE_PRIO_EN


2351 #i‚de‡
OS_CFG_TASK_DEL_EN


2355 #i‚de‡
OS_CFG_TASK_Q_EN


2359 #i‚de‡
OS_CFG_TASK_Q_PEND_ABORT_EN


2363 #i‚de‡
OS_CFG_TASK_PROFILE_EN


2367 #i‚de‡
OS_CFG_TASK_REG_TBL_SIZE


2371 #i‚de‡
OS_CFG_TASK_SEM_PEND_ABORT_EN


2375 #i‚de‡
OS_CFG_TASK_SUSPEND_EN


2385 #i‚de‡
OS_CFG_TIME_DLY_HMSM_EN


2389 #i‚de‡
OS_CFG_TIME_DLY_RESUME_EN


2399 #i‚de‡
OS_CFG_TMR_EN


2402 #i‚de‡
OS_CFG_TMR_DEL_EN


2414 #i‡
LIB_VERSION
 < 126u

2420 #i‡
CPU_CORE_VERSION
 < 125u

2431 #ifde‡
__˝lu•lus


	@UCOSIII/uCOS-III/Source/os_cfg_app.c

35 
	#MICRIUM_SOURCE


	)

36 
	~<os_cfg_≠p.h
>

37 
	~<os.h
>

39 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


40 c⁄° 
CPU_CHAR
 *
	gos_cfg_≠p__c
 = "$Id: $";

43 
	#OS_CFG_IDLE_TASK_STK_LIMIT
 ((
OS_CFG_IDLE_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

44 
	#OS_CFG_INT_Q_TASK_STK_LIMIT
 ((
OS_CFG_INT_Q_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

45 
	#OS_CFG_STAT_TASK_STK_LIMIT
 ((
OS_CFG_STAT_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

46 
	#OS_CFG_TICK_TASK_STK_LIMIT
 ((
OS_CFG_TICK_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

47 
	#OS_CFG_TMR_TASK_STK_LIMIT
 ((
OS_CFG_TMR_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

55 
CPU_STK
 
	gOSCfg_IdÀTaskStk
 [
OS_CFG_IDLE_TASK_STK_SIZE
];

57 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

58 
OS_INT_Q
 
	gOSCfg_I¡Q
 [
OS_CFG_INT_Q_SIZE
];

59 
CPU_STK
 
	gOSCfg_I¡QTaskStk
 [
OS_CFG_INT_Q_TASK_STK_SIZE
];

62 #i‡(
OS_CFG_ISR_STK_SIZE
 > 0u)

63 
CPU_STK
 
	gOSCfg_ISRStk
 [
OS_CFG_ISR_STK_SIZE
];

66 #i‡(
OS_MSG_EN
 > 0u)

67 
OS_MSG
 
	gOSCfg_MsgPoﬁ
 [
OS_CFG_MSG_POOL_SIZE
];

70 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

71 
CPU_STK
 
	gOSCfg_SètTaskStk
 [
OS_CFG_STAT_TASK_STK_SIZE
];

74 
CPU_STK
 
	gOSCfg_TickTaskStk
 [
OS_CFG_TICK_TASK_STK_SIZE
];

75 
OS_TICK_SPOKE
 
	gOSCfg_TickWhìl
 [
OS_CFG_TICK_WHEEL_SIZE
];

77 #i‡(
OS_CFG_TMR_EN
 > 0u)

78 
CPU_STK
 
	gOSCfg_TmrTaskStk
 [
OS_CFG_TMR_TASK_STK_SIZE
];

79 
OS_TMR_SPOKE
 
	gOSCfg_TmrWhìl
 [
OS_CFG_TMR_WHEEL_SIZE
];

89 
CPU_STK
 * c⁄° 
	gOSCfg_IdÀTaskStkBa£På
 = (CPU_STK *)&
OSCfg_IdÀTaskStk
[0];

90 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_IdÀTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_IDLE_TASK_STK_LIMIT
;

91 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_IdÀTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_IDLE_TASK_STK_SIZE
;

92 
CPU_INT32U
 c⁄° 
	gOSCfg_IdÀTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_IdÀTaskStk
);

95 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

96 
OS_INT_Q
 * c⁄° 
	gOSCfg_I¡QBa£På
 = (OS_INT_Q *)&
OSCfg_I¡Q
[0];

97 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_I¡QSize
 = (OS_OBJ_QTY )
OS_CFG_INT_Q_SIZE
;

98 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QSizeRAM
 = (CPU_INT32U )(
OSCfg_I¡Q
);

99 
CPU_STK
 * c⁄° 
	gOSCfg_I¡QTaskStkBa£På
 = (CPU_STK *)&
OSCfg_I¡QTaskStk
[0];

100 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_INT_Q_TASK_STK_LIMIT
;

101 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_INT_Q_TASK_STK_SIZE
;

102 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_I¡QTaskStk
);

104 
OS_INT_Q
 * c⁄° 
	gOSCfg_I¡QBa£På
 = (OS_INT_Q *)0;

105 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_I¡QSize
 = (OS_OBJ_QTY )0;

106 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QSizeRAM
 = (CPU_INT32U )0;

107 
CPU_STK
 * c⁄° 
	gOSCfg_I¡QTaskStkBa£På
 = (CPU_STK *)0;

108 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkLimô
 = (CPU_STK_SIZE)0;

109 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkSize
 = (CPU_STK_SIZE)0;

110 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QTaskStkSizeRAM
 = (CPU_INT32U )0;

114 #i‡(
OS_CFG_ISR_STK_SIZE
 > 0u)

115 
CPU_STK
 * c⁄° 
	gOSCfg_ISRStkBa£På
 = (CPU_STK *)&
OSCfg_ISRStk
[0];

116 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_ISRStkSize
 = (CPU_STK_SIZE)
OS_CFG_ISR_STK_SIZE
;

117 
CPU_INT32U
 c⁄° 
	gOSCfg_ISRStkSizeRAM
 = (CPU_INT32U )(
OSCfg_ISRStk
);

119 
CPU_STK
 * c⁄° 
	gOSCfg_ISRStkBa£På
 = (CPU_STK *)0;

120 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_ISRStkSize
 = (CPU_STK_SIZE)0;

121 
CPU_INT32U
 c⁄° 
	gOSCfg_ISRStkSizeRAM
 = (CPU_INT32U )0;

125 #i‡(
OS_MSG_EN
 > 0u)

126 
OS_MSG_SIZE
 c⁄° 
	gOSCfg_MsgPoﬁSize
 = (OS_MSG_SIZE)
OS_CFG_MSG_POOL_SIZE
;

127 
CPU_INT32U
 c⁄° 
	gOSCfg_MsgPoﬁSizeRAM
 = (CPU_INT32U )(
OSCfg_MsgPoﬁ
);

128 
OS_MSG
 * c⁄° 
	gOSCfg_MsgPoﬁBa£På
 = (OS_MSG *)&
OSCfg_MsgPoﬁ
[0];

130 
OS_MSG_SIZE
 c⁄° 
	gOSCfg_MsgPoﬁSize
 = (OS_MSG_SIZE)0;

131 
CPU_INT32U
 c⁄° 
	gOSCfg_MsgPoﬁSizeRAM
 = (CPU_INT32U )0;

132 
OS_MSG
 * c⁄° 
	gOSCfg_MsgPoﬁBa£På
 = (OS_MSG *)0;

136 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

137 
OS_PRIO
 c⁄° 
	gOSCfg_SètTaskPrio
 = (OS_PRIO )
OS_CFG_STAT_TASK_PRIO
;

138 
OS_RATE_HZ
 c⁄° 
	gOSCfg_SètTaskR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_STAT_TASK_RATE_HZ
;

139 
CPU_STK
 * c⁄° 
	gOSCfg_SètTaskStkBa£På
 = (CPU_STK *)&
OSCfg_SètTaskStk
[0];

140 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_STAT_TASK_STK_LIMIT
;

141 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_STAT_TASK_STK_SIZE
;

142 
CPU_INT32U
 c⁄° 
	gOSCfg_SètTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_SètTaskStk
);

144 
OS_PRIO
 c⁄° 
	gOSCfg_SètTaskPrio
 = (OS_PRIO )0;

145 
OS_RATE_HZ
 c⁄° 
	gOSCfg_SètTaskR©e_Hz
 = (OS_RATE_HZ )0;

146 
CPU_STK
 * c⁄° 
	gOSCfg_SètTaskStkBa£På
 = (CPU_STK *)0;

147 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkLimô
 = (CPU_STK_SIZE)0;

148 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkSize
 = (CPU_STK_SIZE)0;

149 
CPU_INT32U
 c⁄° 
	gOSCfg_SètTaskStkSizeRAM
 = (CPU_INT32U )0;

153 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_StkSizeMö
 = (CPU_STK_SIZE)
OS_CFG_STK_SIZE_MIN
;

156 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TickR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_TICK_RATE_HZ
;

157 
OS_PRIO
 c⁄° 
	gOSCfg_TickTaskPrio
 = (OS_PRIO )
OS_CFG_TICK_TASK_PRIO
;

158 
CPU_STK
 * c⁄° 
	gOSCfg_TickTaskStkBa£På
 = (CPU_STK *)&
OSCfg_TickTaskStk
[0];

159 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TickTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_TICK_TASK_STK_LIMIT
;

160 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TickTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_TICK_TASK_STK_SIZE
;

161 
CPU_INT32U
 c⁄° 
	gOSCfg_TickTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_TickTaskStk
);

162 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_TickWhìlSize
 = (OS_OBJ_QTY )
OS_CFG_TICK_WHEEL_SIZE
;

163 
CPU_INT32U
 c⁄° 
	gOSCfg_TickWhìlSizeRAM
 = (CPU_INT32U )(
OSCfg_TickWhìl
);

166 #i‡(
OS_CFG_TMR_EN
 > 0u)

167 
OS_PRIO
 c⁄° 
	gOSCfg_TmrTaskPrio
 = (OS_PRIO )
OS_CFG_TMR_TASK_PRIO
;

168 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TmrTaskR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_TMR_TASK_RATE_HZ
;

169 
CPU_STK
 * c⁄° 
	gOSCfg_TmrTaskStkBa£På
 = (CPU_STK *)&
OSCfg_TmrTaskStk
[0];

170 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_TMR_TASK_STK_LIMIT
;

171 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_TMR_TASK_STK_SIZE
;

172 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_TmrTaskStk
);

173 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_TmrWhìlSize
 = (OS_OBJ_QTY )
OS_CFG_TMR_WHEEL_SIZE
;

174 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrWhìlSizeRAM
 = (CPU_INT32U )(
OSCfg_TmrWhìl
);

176 
OS_PRIO
 c⁄° 
	gOSCfg_TmrTaskPrio
 = (OS_PRIO )0;

177 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TmrTaskR©e_Hz
 = (OS_RATE_HZ )0;

178 
CPU_STK
 * c⁄° 
	gOSCfg_TmrTaskStkBa£På
 = (CPU_STK *)0;

179 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkLimô
 = (CPU_STK_SIZE)0;

180 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkSize
 = (CPU_STK_SIZE)0;

181 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrTaskStkSizeRAM
 = (CPU_INT32U )0;

182 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_TmrWhìlSize
 = (OS_OBJ_QTY )0;

183 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrWhìlSizeRAM
 = (CPU_INT32U )0;

194 
CPU_INT32U
 c⁄° 
	gOSCfg_D©aSizeRAM
 = (
OSCfg_IdÀTaskStk
)

196 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

197 + (
OSCfg_I¡Q
)

198 + (
OSCfg_I¡QTaskStk
)

201 #i‡(
OS_MSG_EN
 > 0u)

202 + (
OSCfg_MsgPoﬁ
)

205 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

206 + (
OSCfg_SètTaskStk
)

209 #i‡(
OS_CFG_TMR_EN
 > 0u)

210 + (
OSCfg_TmrTaskStk
)

211 + (
OSCfg_TmrWhìl
)

214 #i‡(
OS_CFG_ISR_STK_SIZE
 > 0u)

215 + (
OSCfg_ISRStk
)

217 + (
OSCfg_TickTaskStk
)

218 + (
OSCfg_TickWhìl
);

240 
	$OSCfg_Inô
 ()

242 c⁄° *
p_ãmp
;

245 
p_ãmp
 = (c⁄° *)&
OSCfg_D©aSizeRAM
;

247 
p_ãmp
 = (c⁄° *)&
OSCfg_IdÀTaskStkBa£På
;

248 
p_ãmp
 = (c⁄° *)&
OSCfg_IdÀTaskStkLimô
;

249 
p_ãmp
 = (c⁄° *)&
OSCfg_IdÀTaskStkSize
;

250 
p_ãmp
 = (c⁄° *)&
OSCfg_IdÀTaskStkSizeRAM
;

252 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

253 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QBa£På
;

254 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QSize
;

255 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QSizeRAM
;

256 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QTaskStkBa£På
;

257 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QTaskStkLimô
;

258 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QTaskStkSize
;

259 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QTaskStkSizeRAM
;

262 
p_ãmp
 = (c⁄° *)&
OSCfg_ISRStkBa£På
;

263 
p_ãmp
 = (c⁄° *)&
OSCfg_ISRStkSize
;

264 
p_ãmp
 = (c⁄° *)&
OSCfg_ISRStkSizeRAM
;

266 #i‡(
OS_MSG_EN
 > 0u)

267 
p_ãmp
 = (c⁄° *)&
OSCfg_MsgPoﬁSize
;

268 
p_ãmp
 = (c⁄° *)&
OSCfg_MsgPoﬁSizeRAM
;

269 
p_ãmp
 = (c⁄° *)&
OSCfg_MsgPoﬁBa£På
;

272 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

273 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskPrio
;

274 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskR©e_Hz
;

275 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskStkBa£På
;

276 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskStkLimô
;

277 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskStkSize
;

278 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskStkSizeRAM
;

281 
p_ãmp
 = (c⁄° *)&
OSCfg_StkSizeMö
;

283 
p_ãmp
 = (c⁄° *)&
OSCfg_TickR©e_Hz
;

284 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskPrio
;

285 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskStkBa£På
;

286 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskStkLimô
;

287 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskStkSize
;

288 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskStkSizeRAM
;

289 
p_ãmp
 = (c⁄° *)&
OSCfg_TickWhìlSize
;

290 
p_ãmp
 = (c⁄° *)&
OSCfg_TickWhìlSizeRAM
;

292 #i‡(
OS_CFG_TMR_EN
 > 0u)

293 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskPrio
;

294 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskR©e_Hz
;

295 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskStkBa£På
;

296 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskStkLimô
;

297 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskStkSize
;

298 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskStkSizeRAM
;

299 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrWhìlSize
;

300 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrWhìlSizeRAM
;

302 
p_ãmp
 =Ö_temp;

303 
	}
}

	@UCOSIII/uCOS-III/Source/os_core.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_c‹e__c
 = "$Id: $";

55 
	$OSInô
 (
OS_ERR
 *
p_îr
)

57 
CPU_STK
 *
p_°k
;

58 
CPU_STK_SIZE
 
size
;

62 #ifde‡
OS_SAFETY_CRITICAL


63 i‡(
p_îr
 =(
OS_ERR
 *)0) {

64 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

69 
	`OSInôHook
();

71 
OSI¡Ne°ögCå
 = (
OS_NESTING_CTR
)0;

73 
OSRu¬ög
 = 
OS_STATE_OS_STOPPED
;

75 
OSSchedLockNe°ögCå
 = (
OS_NESTING_CTR
)0;

77 
OSTCBCurPå
 = (
OS_TCB
 *)0;

78 
OSTCBHighRdyPå
 = (
OS_TCB
 *)0;

80 
OSPrioCur
 = (
OS_PRIO
)0;

81 
OSPrioHighRdy
 = (
OS_PRIO
)0;

82 
OSPrioSaved
 = (
OS_PRIO
)0;

84 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

85 
OSSchedLockTimeBegö
 = (
CPU_TS
)0;

86 
OSSchedLockTimeMax
 = (
CPU_TS
)0;

87 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

90 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


91 
OSSa„tyCrôiˇlSèπFœg
 = 
DEF_FALSE
;

94 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

95 
OSSchedRoundRoböEn
 = 
DEF_FALSE
;

96 
OSSchedRoundRoböDÊtTimeQu™è
 = 
OSCfg_TickR©e_Hz
 / 10u;

99 i‡(
OSCfg_ISRStkSize
 > (
CPU_STK_SIZE
)0) {

100 
p_°k
 = 
OSCfg_ISRStkBa£På
;

101 i‡(
p_°k
 !(
CPU_STK
 *)0) {

102 
size
 = 
OSCfg_ISRStkSize
;

103 
size
 > (
CPU_STK_SIZE
)0) {

104 
size
--;

105 *
p_°k
 = (
CPU_STK
)0;

106 
p_°k
++;

111 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

112 
OS_AµTaskCª©eHookPå
 = (
OS_APP_HOOK_TCB
 )0;

113 
OS_AµTaskDñHookPå
 = (
OS_APP_HOOK_TCB
 )0;

114 
OS_AµTaskRëu∫HookPå
 = (
OS_APP_HOOK_TCB
 )0;

116 
OS_AµIdÀTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

117 
OS_AµSètTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

118 
OS_AµTaskSwHookPå
 = (
OS_APP_HOOK_VOID
)0;

119 
OS_AµTimeTickHookPå
 = (
OS_APP_HOOK_VOID
)0;

122 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

123 
OSTaskRegNextAvaûID
 = (
OS_REG_ID
)0;

126 
	`OS_PrioInô
();

128 
	`OS_RdyLi°Inô
();

131 #i‡
OS_CFG_FLAG_EN
 > 0u

132 
	`OS_FœgInô
(
p_îr
);

133 i‡(*
p_îr
 !
OS_ERR_NONE
) {

139 #i‡
OS_CFG_MEM_EN
 > 0u

140 
	`OS_MemInô
(
p_îr
);

141 i‡(*
p_îr
 !
OS_ERR_NONE
) {

147 #i‡(
OS_MSG_EN
) > 0u

148 
	`OS_MsgPoﬁInô
(
p_îr
);

149 i‡(*
p_îr
 !
OS_ERR_NONE
) {

155 #i‡
OS_CFG_MUTEX_EN
 > 0u

156 
	`OS_MuãxInô
(
p_îr
);

157 i‡(*
p_îr
 !
OS_ERR_NONE
) {

163 #i‡
OS_CFG_Q_EN
 > 0u

164 
	`OS_QInô
(
p_îr
);

165 i‡(*
p_îr
 !
OS_ERR_NONE
) {

171 #i‡
OS_CFG_SEM_EN
 > 0u

172 
	`OS_SemInô
(
p_îr
);

173 i‡(*
p_îr
 !
OS_ERR_NONE
) {

179 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

180 
	`OS_TLS_Inô
(
p_îr
);

181 i‡(*
p_îr
 !
OS_ERR_NONE
) {

187 
	`OS_TaskInô
(
p_îr
);

188 i‡(*
p_îr
 !
OS_ERR_NONE
) {

193 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

194 
	`OS_I¡QTaskInô
(
p_îr
);

195 i‡(*
p_îr
 !
OS_ERR_NONE
) {

201 
	`OS_IdÀTaskInô
(
p_îr
);

202 i‡(*
p_îr
 !
OS_ERR_NONE
) {

207 
	`OS_TickTaskInô
(
p_îr
);

208 i‡(*
p_îr
 !
OS_ERR_NONE
) {

213 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

214 
	`OS_SètTaskInô
(
p_îr
);

215 i‡(*
p_îr
 !
OS_ERR_NONE
) {

221 #i‡
OS_CFG_TMR_EN
 > 0u

222 
	`OS_TmrInô
(
p_îr
);

223 i‡(*
p_îr
 !
OS_ERR_NONE
) {

229 #i‡
OS_CFG_DBG_EN
 > 0u

230 
	`OS_Dbg_Inô
();

234 
	`OSCfg_Inô
();

235 
	}
}

266 
	$OSI¡E¡î
 ()

268 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

272 i‡(
OSI¡Ne°ögCå
 >(
OS_NESTING_CTR
)250u) {

276 
OSI¡Ne°ögCå
++;

277 
	}
}

300 
	$OSI¡Exô
 ()

302 
	`CPU_SR_ALLOC
();

306 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

310 
	`CPU_INT_DIS
();

311 i‡(
OSI¡Ne°ögCå
 =(
OS_NESTING_CTR
)0) {

312 
	`CPU_INT_EN
();

315 
OSI¡Ne°ögCå
--;

316 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

317 
	`CPU_INT_EN
();

321 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

322 
	`CPU_INT_EN
();

326 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

327 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

328 i‡(
OSTCBHighRdyPå
 =
OSTCBCurPå
) {

329 
	`CPU_INT_EN
();

333 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

334 
OSTCBHighRdyPå
->
CtxSwCå
++;

336 
OSTaskCtxSwCå
++;

338 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

339 
	`OS_TLS_TaskSw
();

342 
	`OSI¡CtxSw
();

343 
	`CPU_INT_EN
();

344 
	}
}

362 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


363 
	$OSSa„tyCrôiˇlSèπ
 ()

365 
OSSa„tyCrôiˇlSèπFœg
 = 
DEF_TRUE
;

366 
	}
}

387 
	$OSSched
 ()

389 
	`CPU_SR_ALLOC
();

393 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

397 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

401 
	`CPU_INT_DIS
();

402 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

403 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

404 i‡(
OSTCBHighRdyPå
 =
OSTCBCurPå
) {

405 
	`CPU_INT_EN
();

409 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

410 
OSTCBHighRdyPå
->
CtxSwCå
++;

412 
OSTaskCtxSwCå
++;

414 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

415 
	`OS_TLS_TaskSw
();

418 
	`OS_TASK_SW
();

419 
	`CPU_INT_EN
();

420 
	}
}

444 
	$OSSchedLock
 (
OS_ERR
 *
p_îr
)

446 
	`CPU_SR_ALLOC
();

450 #ifde‡
OS_SAFETY_CRITICAL


451 i‡(
p_îr
 =(
OS_ERR
 *)0) {

452 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

457 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

458 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

459 *
p_îr
 = 
OS_ERR_SCHED_LOCK_ISR
;

464 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

465 *
p_îr
 = 
OS_ERR_OS_NOT_RUNNING
;

469 i‡(
OSSchedLockNe°ögCå
 >(
OS_NESTING_CTR
)250u) {

470 *
p_îr
 = 
OS_ERR_LOCK_NESTING_OVF
;

474 
	`CPU_CRITICAL_ENTER
();

475 
OSSchedLockNe°ögCå
++;

476 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

477 
	`OS_SchedLockTimeMósSèπ
();

479 
	`CPU_CRITICAL_EXIT
();

480 *
p_îr
 = 
OS_ERR_NONE
;

481 
	}
}

505 
	$OSSchedU∆ock
 (
OS_ERR
 *
p_îr
)

507 
	`CPU_SR_ALLOC
();

511 #ifde‡
OS_SAFETY_CRITICAL


512 i‡(
p_îr
 =(
OS_ERR
 *)0) {

513 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

518 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

519 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

520 *
p_îr
 = 
OS_ERR_SCHED_UNLOCK_ISR
;

525 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

526 *
p_îr
 = 
OS_ERR_OS_NOT_RUNNING
;

530 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) {

531 *
p_îr
 = 
OS_ERR_SCHED_NOT_LOCKED
;

535 
	`CPU_CRITICAL_ENTER
();

536 
OSSchedLockNe°ögCå
--;

537 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

538 
	`CPU_CRITICAL_EXIT
();

539 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

543 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

544 
	`OS_SchedLockTimeMósSt›
();

547 
	`CPU_CRITICAL_EXIT
();

548 
	`OSSched
();

549 *
p_îr
 = 
OS_ERR_NONE
;

550 
	}
}

571 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

572 
	$OSSchedRoundRoböCfg
 (
CPU_BOOLEAN
 
í
,

573 
OS_TICK
 
dÊt_time_qu™è
,

574 
OS_ERR
 *
p_îr
)

576 
	`CPU_SR_ALLOC
();

580 #ifde‡
OS_SAFETY_CRITICAL


581 i‡(
p_îr
 =(
OS_ERR
 *)0) {

582 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

587 
	`CPU_CRITICAL_ENTER
();

588 i‡(
í
 !
DEF_ENABLED
) {

589 
OSSchedRoundRoböEn
 = 
DEF_DISABLED
;

591 
OSSchedRoundRoböEn
 = 
DEF_ENABLED
;

594 i‡(
dÊt_time_qu™è
 > (
OS_TICK
)0) {

595 
OSSchedRoundRoböDÊtTimeQu™è
 = 
dÊt_time_qu™è
;

597 
OSSchedRoundRoböDÊtTimeQu™è
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

599 
	`CPU_CRITICAL_EXIT
();

600 *
p_îr
 = 
OS_ERR_NONE
;

601 
	}
}

625 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

626 
	$OSSchedRoundRoböYõld
 (
OS_ERR
 *
p_îr
)

628 
OS_RDY_LIST
 *
p_rdy_li°
;

629 
OS_TCB
 *
p_tcb
;

630 
	`CPU_SR_ALLOC
();

634 #ifde‡
OS_SAFETY_CRITICAL


635 i‡(
p_îr
 =(
OS_ERR
 *)0) {

636 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

641 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

642 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

643 *
p_îr
 = 
OS_ERR_YIELD_ISR
;

648 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

649 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

653 i‡(
OSSchedRoundRoböEn
 !
DEF_TRUE
) {

654 *
p_îr
 = 
OS_ERR_ROUND_ROBIN_DISABLED
;

658 
	`CPU_CRITICAL_ENTER
();

659 
p_rdy_li°
 = &
OSRdyLi°
[
OSPrioCur
];

660 i‡(
p_rdy_li°
->
NbrE¡rõs
 < (
OS_OBJ_QTY
)2) {

661 
	`CPU_CRITICAL_EXIT
();

662 *
p_îr
 = 
OS_ERR_ROUND_ROBIN_1
;

666 
	`OS_RdyLi°MoveHódToTaû
(
p_rdy_li°
);

667 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

668 i‡(
p_tcb
->
TimeQu™è
 =(
OS_TICK
)0) {

669 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

671 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

674 
	`CPU_CRITICAL_EXIT
();

676 
	`OSSched
();

677 *
p_îr
 = 
OS_ERR_NONE
;

678 
	}
}

706 
	$OSSèπ
 (
OS_ERR
 *
p_îr
)

708 #ifde‡
OS_SAFETY_CRITICAL


709 i‡(
p_îr
 =(
OS_ERR
 *)0) {

710 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

715 i‡(
OSRu¬ög
 =
OS_STATE_OS_STOPPED
) {

716 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

717 
OSPrioCur
 = 
OSPrioHighRdy
;

718 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

719 
OSTCBCurPå
 = 
OSTCBHighRdyPå
;

720 
OSRu¬ög
 = 
OS_STATE_OS_RUNNING
;

721 
	`OSSèπHighRdy
();

722 *
p_îr
 = 
OS_ERR_FATAL_RETURN
;

724 *
p_îr
 = 
OS_ERR_OS_RUNNING
;

726 
	}
}

745 
CPU_INT16U
 
	$OSVîsi⁄
 (
OS_ERR
 *
p_îr
)

747 #ifde‡
OS_SAFETY_CRITICAL


748 i‡(
p_îr
 =(
OS_ERR
 *)0) {

749 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

750  ((
CPU_INT16U
)0u);

754 *
p_îr
 = 
OS_ERR_NONE
;

755  (
OS_VERSION
);

756 
	}
}

781 
	$OS_IdÀTask
 (*
p_¨g
)

783 
	`CPU_SR_ALLOC
();

787 
p_¨g
 =Ö_arg;

789 
DEF_ON
) {

790 
	`CPU_CRITICAL_ENTER
();

791 
OSIdÀTaskCå
++;

792 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

793 
OSSètTaskCå
++;

795 
	`CPU_CRITICAL_EXIT
();

797 
	`OSIdÀTaskHook
();

799 
	}
}

816 
	$OS_IdÀTaskInô
 (
OS_ERR
 *
p_îr
)

818 #ifde‡
OS_SAFETY_CRITICAL


819 i‡(
p_îr
 =(
OS_ERR
 *)0) {

820 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

825 
OSIdÀTaskCå
 = (
OS_IDLE_CTR
)0;

827 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSIdÀTaskTCB
,

828 (
CPU_CHAR
 *)((*)"uC/OS-III Idle Task"),

829 (
OS_TASK_PTR
)
OS_IdÀTask
,

831 (
OS_PRIO
 )(
OS_CFG_PRIO_MAX
 - 1u),

832 (
CPU_STK
 *)
OSCfg_IdÀTaskStkBa£På
,

833 (
CPU_STK_SIZE
)
OSCfg_IdÀTaskStkLimô
,

834 (
CPU_STK_SIZE
)
OSCfg_IdÀTaskStkSize
,

835 (
OS_MSG_QTY
 )0u,

836 (
OS_TICK
 )0u,

838 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

839 (
OS_ERR
 *)
p_îr
);

840 
	}
}

873 
	$OS_Píd
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

874 
OS_PEND_OBJ
 *
p_obj
,

875 
OS_STATE
 
≥ndög_⁄
,

876 
OS_TICK
 
timeout
)

878 
OS_PEND_LIST
 *
p_≥nd_li°
;

882 
OSTCBCurPå
->
PídOn
 = 
≥ndög_⁄
;

883 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

885 
	`OS_TaskBlock
(
OSTCBCurPå
,

886 
timeout
);

888 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

889 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

890 
p_≥nd_d©a
->
PídObjPå
 = 
p_obj
;

891 
	`OS_PídD©aInô
((
OS_TCB
 *)
OSTCBCurPå
,

892 (
OS_PEND_DATA
 *)
p_≥nd_d©a
,

893 (
OS_OBJ_QTY
 )1);

894 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

895 
p_≥nd_d©a
);

897 
OSTCBCurPå
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0;

898 
OSTCBCurPå
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

900 #i‡
OS_CFG_DBG_EN
 > 0u

901 
	`OS_PídDbgNameAdd
(
p_obj
,

902 
OSTCBCurPå
);

904 
	}
}

927 
	$OS_PídAb‹t
 (
OS_PEND_OBJ
 *
p_obj
,

928 
OS_TCB
 *
p_tcb
,

929 
CPU_TS
 
ts
)

931 
p_tcb
->
TaskSèã
) {

932 
OS_TASK_STATE_RDY
:

933 
OS_TASK_STATE_DLY
:

934 
OS_TASK_STATE_SUSPENDED
:

935 
OS_TASK_STATE_DLY_SUSPENDED
:

938 
OS_TASK_STATE_PEND
:

939 
OS_TASK_STATE_PEND_TIMEOUT
:

940 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

941 
	`OS_PídAb‹t1
(
p_obj
,

942 
p_tcb
,

943 
ts
);

945 #i‡(
OS_MSG_EN
 > 0u)

946 
p_tcb
->
MsgPå
 = (*)0;

947 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

949 
p_tcb
->
TS
 = 
ts
;

950 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

951 
	`OS_PídLi°Remove
(
p_tcb
);

953 
	`OS_TaskRdy
(
p_tcb
);

954 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

955 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_ABORT
;

956 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

959 
OS_TASK_STATE_PEND_SUSPENDED
:

960 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

961 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

962 
	`OS_PídAb‹t1
(
p_obj
,

963 
p_tcb
,

964 
ts
);

966 #i‡(
OS_MSG_EN
 > 0u)

967 
p_tcb
->
MsgPå
 = (*)0;

968 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

970 
p_tcb
->
TS
 = 
ts
;

971 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

972 
	`OS_PídLi°Remove
(
p_tcb
);

974 
	`OS_TickLi°Remove
(
p_tcb
);

975 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

976 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_ABORT
;

977 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

983 
	}
}

1033 
	$OS_PídAb‹t1
 (
OS_PEND_OBJ
 *
p_obj
,

1034 
OS_TCB
 *
p_tcb
,

1035 
CPU_TS
 
ts
)

1037 
OS_OBJ_QTY
 
n_≥nd_li°
;

1038 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1042 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1043 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1045 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1046 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1047 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1048 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1051 
p_≥nd_d©a
++;

1052 
n_≥nd_li°
--;

1054 
	}
}

1098 
	$OS_PídD©aInô
 (
OS_TCB
 *
p_tcb
,

1099 
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1100 
OS_OBJ_QTY
 
tbl_size
)

1102 
OS_OBJ_QTY
 
i
;

1106 
p_tcb
->
PídD©aTblE¡rõs
 = 
tbl_size
;

1107 
p_tcb
->
PídD©aTblPå
 = 
p_≥nd_d©a_tbl
;

1109 
i
 = 0u; i < 
tbl_size
; i++) {

1110 
p_≥nd_d©a_tbl
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1111 
p_≥nd_d©a_tbl
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1112 
p_≥nd_d©a_tbl
->
RdyObjPå
 = (
OS_PEND_OBJ
 *)0;

1113 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = (*)0;

1114 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = (
OS_MSG_SIZE
 )0;

1115 
p_≥nd_d©a_tbl
->
RdyTS
 = (
CPU_TS
 )0;

1116 
p_≥nd_d©a_tbl
->
TCBPå
 = 
p_tcb
;

1117 
p_≥nd_d©a_tbl
++;

1119 
	}
}

1140 #i‡
OS_CFG_DBG_EN
 > 0u

1141 
	$OS_PídDbgNameAdd
 (
OS_PEND_OBJ
 *
p_obj
,

1142 
OS_TCB
 *
p_tcb
)

1144 
OS_PEND_LIST
 *
p_≥nd_li°
;

1145 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1146 
OS_TCB
 *
p_tcb1
;

1149 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1150 
p_tcb
->
DbgNamePå
 = 
p_obj
->
NamePå
;

1151 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1152 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1153 
p_tcb1
 = 
p_≥nd_d©a
->
TCBPå
;

1154 
p_obj
->
DbgNamePå
 = 
p_tcb1
->
NamePå
;

1156 
p_tcb
->
PídOn
) {

1157 
OS_TASK_PEND_ON_TASK_Q
:

1158 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)"Task Q");

1161 
OS_TASK_PEND_ON_TASK_SEM
:

1162 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)"Task Sem");

1166 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1170 
	}
}

1174 
	$OS_PídDbgNameRemove
 (
OS_PEND_OBJ
 *
p_obj
,

1175 
OS_TCB
 *
p_tcb
)

1177 
OS_PEND_LIST
 *
p_≥nd_li°
;

1178 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1179 
OS_TCB
 *
p_tcb1
;

1182 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1183 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1184 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1185 i‡(
p_≥nd_d©a
 !(
OS_PEND_DATA
 *)0) {

1186 
p_tcb1
 = 
p_≥nd_d©a
->
TCBPå
;

1187 
p_obj
->
DbgNamePå
 = 
p_tcb1
->
NamePå
;

1189 
p_obj
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1191 
	}
}

1276 
	$OS_PídLi°Ch™gePrio
 (
OS_TCB
 *
p_tcb
,

1277 
OS_PRIO
 
¥io_√w
)

1279 
OS_OBJ_QTY
 
n_≥nd_li°
;

1280 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1281 
OS_PEND_LIST
 *
p_≥nd_li°
;

1282 
OS_PEND_OBJ
 *
p_obj
;

1285 
p_tcb
->
Prio
 = 
¥io_√w
;

1286 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1287 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1289 
n_≥nd_li°
 > 0u) {

1290 
p_obj
 = 
p_≥nd_d©a
->
PídObjPå
;

1291 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1292 i‡(
p_≥nd_li°
->
NbrE¡rõs
 > 1u) {

1293 
	`OS_PídLi°Remove1
(
p_≥nd_li°
,

1294 
p_≥nd_d©a
);

1295 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

1296 
p_≥nd_d©a
);

1298 
p_≥nd_d©a
++;

1299 
n_≥nd_li°
--;

1301 
	}
}

1319 
	$OS_PídLi°Inô
 (
OS_PEND_LIST
 *
p_≥nd_li°
)

1321 
p_≥nd_li°
->
HódPå
 = (
OS_PEND_DATA
 *)0;

1322 
p_≥nd_li°
->
TaûPå
 = (
OS_PEND_DATA
 *)0;

1323 
p_≥nd_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
 )0;

1324 
	}
}

1373 
	$OS_PídLi°In£πHód
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1374 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1376 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1380 
p_≥nd_li°
->
NbrE¡rõs
++;

1381 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_li°
->
HódPå
;

1382 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1383 
p_≥nd_d©a_√xt
 = 
p_≥nd_li°
->
HódPå
;

1384 i‡(
p_≥nd_d©a_√xt
 !(
OS_PEND_DATA
 *)0) {

1385 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1387 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1388 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 1u) {

1389 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1391 
	}
}

1461 
	$OS_PídLi°In£πPrio
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1462 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1464 
OS_PRIO
 
¥io
;

1465 
OS_TCB
 *
p_tcb
;

1466 
OS_TCB
 *
p_tcb_√xt
;

1467 
OS_PEND_DATA
 *
p_≥nd_d©a_¥ev
;

1468 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1472 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1473 
¥io
 = 
p_tcb
->
Prio
;

1474 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

1475 
p_≥nd_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

1476 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1477 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1478 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1479 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1481 
p_≥nd_li°
->
NbrE¡rõs
++;

1482 
p_≥nd_d©a_√xt
 = 
p_≥nd_li°
->
HódPå
;

1483 
p_≥nd_d©a_√xt
 !(
OS_PEND_DATA
 *)0) {

1484 
p_tcb_√xt
 = 
p_≥nd_d©a_√xt
->
TCBPå
;

1485 i‡(
¥io
 < 
p_tcb_√xt
->
Prio
) {

1488 
p_≥nd_d©a_√xt
 =Ö_≥nd_d©a_√xt->
NextPå
;

1491 i‡(
p_≥nd_d©a_√xt
 =(
OS_PEND_DATA
 *)0) {

1492 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1493 
p_≥nd_d©a_¥ev
 = 
p_≥nd_li°
->
TaûPå
;

1494 
p_≥nd_d©a
->
PªvPå
 = 
p_≥nd_d©a_¥ev
;

1495 
p_≥nd_d©a_¥ev
->
NextPå
 = 
p_≥nd_d©a
;

1496 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1498 i‡(
p_≥nd_d©a_√xt
->
PªvPå
 =(
OS_PEND_DATA
 *)0) {

1499 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1500 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1501 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_d©a_√xt
;

1502 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1504 
p_≥nd_d©a_¥ev
 = 
p_≥nd_d©a_√xt
->
PªvPå
;

1505 
p_≥nd_d©a
->
PªvPå
 = 
p_≥nd_d©a_¥ev
;

1506 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_d©a_√xt
;

1507 
p_≥nd_d©a_¥ev
->
NextPå
 = 
p_≥nd_d©a
;

1508 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1512 
	}
}

1564 
	$OS_PídLi°Remove
 (
OS_TCB
 *
p_tcb
)

1566 
OS_OBJ_QTY
 
n_≥nd_li°
;

1567 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1568 
OS_PEND_LIST
 *
p_≥nd_li°
;

1569 
OS_PEND_OBJ
 *
p_obj
;

1573 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1574 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1576 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1577 
p_obj
 = 
p_≥nd_d©a
->
PídObjPå
;

1578 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1579 
	`OS_PídLi°Remove1
(
p_≥nd_li°
,

1580 
p_≥nd_d©a
);

1581 
p_≥nd_d©a
++;

1582 
n_≥nd_li°
--;

1584 
p_tcb
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0;

1585 
p_tcb
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

1586 
	}
}

1639 
	$OS_PídLi°Remove1
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1640 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1642 
OS_PEND_DATA
 *
p_¥ev
;

1643 
OS_PEND_DATA
 *
p_√xt
;

1647 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 1u) {

1648 
p_≥nd_li°
->
HódPå
 = (
OS_PEND_DATA
 *)0;

1649 
p_≥nd_li°
->
TaûPå
 = (
OS_PEND_DATA
 *)0;

1651 } i‡(
p_≥nd_d©a
->
PªvPå
 =(
OS_PEND_DATA
 *)0) {

1652 
p_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1653 
p_√xt
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1654 
p_≥nd_li°
->
HódPå
 = 
p_√xt
;

1656 } i‡(
p_≥nd_d©a
->
NextPå
 =(
OS_PEND_DATA
 *)0) {

1657 
p_¥ev
 = 
p_≥nd_d©a
->
PªvPå
;

1658 
p_¥ev
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1659 
p_≥nd_li°
->
TaûPå
 = 
p_¥ev
;

1662 
p_¥ev
 = 
p_≥nd_d©a
->
PªvPå
;

1663 
p_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1664 
p_¥ev
->
NextPå
 = 
p_√xt
;

1665 
p_√xt
->
PªvPå
 = 
p_¥ev
;

1667 
p_≥nd_li°
->
NbrE¡rõs
--;

1668 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1669 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1670 
	}
}

1693 
	$OS_PídObjDñ
 (
OS_PEND_OBJ
 *
p_obj
,

1694 
OS_TCB
 *
p_tcb
,

1695 
CPU_TS
 
ts
)

1697 
p_tcb
->
TaskSèã
) {

1698 
OS_TASK_STATE_RDY
:

1699 
OS_TASK_STATE_DLY
:

1700 
OS_TASK_STATE_SUSPENDED
:

1701 
OS_TASK_STATE_DLY_SUSPENDED
:

1704 
OS_TASK_STATE_PEND
:

1705 
OS_TASK_STATE_PEND_TIMEOUT
:

1706 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1707 
	`OS_PídObjDñ1
(
p_obj
,

1708 
p_tcb
,

1709 
ts
);

1711 #i‡(
OS_MSG_EN
 > 0u)

1712 
p_tcb
->
MsgPå
 = (*)0;

1713 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

1715 
p_tcb
->
TS
 = 
ts
;

1716 
	`OS_PídLi°Remove
(
p_tcb
);

1717 
	`OS_TaskRdy
(
p_tcb
);

1718 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1719 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_DEL
;

1720 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1723 
OS_TASK_STATE_PEND_SUSPENDED
:

1724 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1725 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1726 
	`OS_PídObjDñ1
(
p_obj
,

1727 
p_tcb
,

1728 
ts
);

1730 #i‡(
OS_MSG_EN
 > 0u)

1731 
p_tcb
->
MsgPå
 = (*)0;

1732 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

1734 
p_tcb
->
TS
 = 
ts
;

1735 
	`OS_TickLi°Remove
(
p_tcb
);

1736 
	`OS_PídLi°Remove
(
p_tcb
);

1737 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1738 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_DEL
;

1739 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1745 
	}
}

1795 
	$OS_PídObjDñ1
 (
OS_PEND_OBJ
 *
p_obj
,

1796 
OS_TCB
 *
p_tcb
,

1797 
CPU_TS
 
ts
)

1799 
OS_OBJ_QTY
 
n_≥nd_li°
;

1800 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1804 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1805 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1807 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1808 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1809 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1810 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1813 
p_≥nd_d©a
++;

1814 
n_≥nd_li°
--;

1816 
	}
}

1844 
	$OS_Po°
 (
OS_PEND_OBJ
 *
p_obj
,

1845 
OS_TCB
 *
p_tcb
,

1846 *
p_void
,

1847 
OS_MSG_SIZE
 
msg_size
,

1848 
CPU_TS
 
ts
)

1850 
p_tcb
->
TaskSèã
) {

1851 
OS_TASK_STATE_RDY
:

1852 
OS_TASK_STATE_DLY
:

1853 
OS_TASK_STATE_SUSPENDED
:

1854 
OS_TASK_STATE_DLY_SUSPENDED
:

1857 
OS_TASK_STATE_PEND
:

1858 
OS_TASK_STATE_PEND_TIMEOUT
:

1859 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1860 
	`OS_Po°1
(
p_obj
,

1861 
p_tcb
,

1862 
p_void
,

1863 
msg_size
,

1864 
ts
);

1866 #i‡(
OS_MSG_EN
 > 0u)

1867 
p_tcb
->
MsgPå
 = 
p_void
;

1868 
p_tcb
->
MsgSize
 = 
msg_size
;

1870 
p_tcb
->
TS
 = 
ts
;

1872 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1873 
	`OS_PídLi°Remove
(
p_tcb
);

1874 #i‡
OS_CFG_DBG_EN
 > 0u

1875 
	`OS_PídDbgNameRemove
(
p_obj
,

1876 
p_tcb
);

1879 
	`OS_TaskRdy
(
p_tcb
);

1880 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1881 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1882 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1885 
OS_TASK_STATE_PEND_SUSPENDED
:

1886 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1887 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1888 
	`OS_Po°1
(
p_obj
,

1889 
p_tcb
,

1890 
p_void
,

1891 
msg_size
,

1892 
ts
);

1894 #i‡(
OS_MSG_EN
 > 0u)

1895 
p_tcb
->
MsgPå
 = 
p_void
;

1896 
p_tcb
->
MsgSize
 = 
msg_size
;

1898 
p_tcb
->
TS
 = 
ts
;

1900 
	`OS_TickLi°Remove
(
p_tcb
);

1901 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1902 
	`OS_PídLi°Remove
(
p_tcb
);

1903 #i‡
OS_CFG_DBG_EN
 > 0u

1904 
	`OS_PídDbgNameRemove
(
p_obj
,

1905 
p_tcb
);

1908 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1909 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1910 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1916 
	}
}

1970 
	$OS_Po°1
 (
OS_PEND_OBJ
 *
p_obj
,

1971 
OS_TCB
 *
p_tcb
,

1972 *
p_void
,

1973 
OS_MSG_SIZE
 
msg_size
,

1974 
CPU_TS
 
ts
)

1976 
OS_OBJ_QTY
 
n_≥nd_li°
;

1977 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1981 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1982 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1984 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1985 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1986 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1987 
p_≥nd_d©a
->
RdyMsgPå
 = 
p_void
;

1988 
p_≥nd_d©a
->
RdyMsgSize
 = 
msg_size
;

1989 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1992 
p_≥nd_d©a
++;

1993 
n_≥nd_li°
--;

1995 
	}
}

2040 
	$OS_RdyLi°Inô
 ()

2042 
OS_PRIO
 
i
;

2043 
OS_RDY_LIST
 *
p_rdy_li°
;

2047 
i
 = 0u; i < 
OS_CFG_PRIO_MAX
; i++) {

2048 
p_rdy_li°
 = &
OSRdyLi°
[
i
];

2049 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

2050 
p_rdy_li°
->
HódPå
 = (
OS_TCB
 *)0;

2051 
p_rdy_li°
->
TaûPå
 = (
OS_TCB
 *)0;

2053 
	}
}

2074 
	$OS_RdyLi°In£π
 (
OS_TCB
 *
p_tcb
)

2076 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

2077 i‡(
p_tcb
->
Prio
 =
OSPrioCur
) {

2078 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

2080 
	`OS_RdyLi°In£πHód
(
p_tcb
);

2082 
	}
}

2141 
	$OS_RdyLi°In£πHód
 (
OS_TCB
 *
p_tcb
)

2143 
OS_RDY_LIST
 *
p_rdy_li°
;

2144 
OS_TCB
 *
p_tcb2
;

2148 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2149 i‡(
p_rdy_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

2150 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

2151 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2152 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2153 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

2154 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

2156 
p_rdy_li°
->
NbrE¡rõs
++;

2157 
p_tcb
->
NextPå
 = 
p_rdy_li°
->
HódPå
;

2158 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2159 
p_tcb2
 = 
p_rdy_li°
->
HódPå
;

2160 
p_tcb2
->
PªvPå
 = 
p_tcb
;

2161 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

2163 
	}
}

2222 
	$OS_RdyLi°In£πTaû
 (
OS_TCB
 *
p_tcb
)

2224 
OS_RDY_LIST
 *
p_rdy_li°
;

2225 
OS_TCB
 *
p_tcb2
;

2229 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2230 i‡(
p_rdy_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

2231 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

2232 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2233 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2234 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

2235 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

2237 
p_rdy_li°
->
NbrE¡rõs
++;

2238 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2239 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2240 
p_tcb
->
PªvPå
 = 
p_tcb2
;

2241 
p_tcb2
->
NextPå
 = 
p_tcb
;

2242 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

2244 
	}
}

2299 
	$OS_RdyLi°MoveHódToTaû
 (
OS_RDY_LIST
 *
p_rdy_li°
)

2301 
OS_TCB
 *
p_tcb1
;

2302 
OS_TCB
 *
p_tcb2
;

2303 
OS_TCB
 *
p_tcb3
;

2307 
p_rdy_li°
->
NbrE¡rõs
) {

2313 
p_tcb1
 = 
p_rdy_li°
->
HódPå
;

2314 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2315 
p_tcb1
->
PªvPå
 = 
p_tcb2
;

2316 
p_tcb1
->
NextPå
 = (
OS_TCB
 *)0;

2317 
p_tcb2
->
PªvPå
 = (
OS_TCB
 *)0;

2318 
p_tcb2
->
NextPå
 = 
p_tcb1
;

2319 
p_rdy_li°
->
HódPå
 = 
p_tcb2
;

2320 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2324 
p_tcb1
 = 
p_rdy_li°
->
HódPå
;

2325 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2326 
p_tcb3
 = 
p_tcb1
->
NextPå
;

2327 
p_tcb3
->
PªvPå
 = (
OS_TCB
 *)0;

2328 
p_tcb1
->
NextPå
 = (
OS_TCB
 *)0;

2329 
p_tcb1
->
PªvPå
 = 
p_tcb2
;

2330 
p_tcb2
->
NextPå
 = 
p_tcb1
;

2331 
p_rdy_li°
->
HódPå
 = 
p_tcb3
;

2332 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2335 
	}
}

2386 
	$OS_RdyLi°Remove
 (
OS_TCB
 *
p_tcb
)

2388 
OS_RDY_LIST
 *
p_rdy_li°
;

2389 
OS_TCB
 *
p_tcb1
;

2390 
OS_TCB
 *
p_tcb2
;

2394 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2395 
p_tcb1
 = 
p_tcb
->
PªvPå
;

2396 
p_tcb2
 = 
p_tcb
->
NextPå
;

2397 i‡(
p_tcb1
 =(
OS_TCB
 *)0) {

2398 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

2399 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

2400 
p_rdy_li°
->
HódPå
 = (
OS_TCB
 *)0;

2401 
p_rdy_li°
->
TaûPå
 = (
OS_TCB
 *)0;

2402 
	`OS_PrioRemove
(
p_tcb
->
Prio
);

2404 
p_rdy_li°
->
NbrE¡rõs
--;

2405 
p_tcb2
->
PªvPå
 = (
OS_TCB
 *)0;

2406 
p_rdy_li°
->
HódPå
 = 
p_tcb2
;

2409 
p_rdy_li°
->
NbrE¡rõs
--;

2410 
p_tcb1
->
NextPå
 = 
p_tcb2
;

2411 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

2412 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2414 
p_tcb2
->
PªvPå
 = 
p_tcb1
;

2417 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2418 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2419 
	}
}

2437 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

2438 
	$OS_Sched0
 ()

2440 
	`CPU_SR_ALLOC
();

2444 
	`CPU_INT_DIS
();

2445 
OSPrioHighRdy
 = (
OS_PRIO
)0;

2446 
OSTCBHighRdyPå
 = &
OSI¡QTaskTCB
;

2447 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2448 
OSTCBHighRdyPå
->
CtxSwCå
++;

2450 
OSTaskCtxSwCå
++;

2451 
	`OS_TASK_SW
();

2452 
	`CPU_INT_EN
();

2453 
	}
}

2478 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

2479 
	$OS_SchedLockTimeMósSèπ
 ()

2481 i‡(
OSSchedLockNe°ögCå
 == 1u) {

2482 
OSSchedLockTimeBegö
 = 
	`CPU_TS_TmrRd
();

2484 
	}
}

2489 
	$OS_SchedLockTimeMósSt›
 ()

2491 
CPU_TS_TMR
 
dñè
;

2494 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) {

2495 
dñè
 = 
	`CPU_TS_TmrRd
()

2496 - 
OSSchedLockTimeBegö
;

2497 i‡(
OSSchedLockTimeMax
 < 
dñè
) {

2498 
OSSchedLockTimeMax
 = 
dñè
;

2500 i‡(
OSSchedLockTimeMaxCur
 < 
dñè
) {

2501 
OSSchedLockTimeMaxCur
 = 
dñè
;

2504 
	}
}

2524 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

2525 
	$OS_SchedRoundRobö
 (
OS_RDY_LIST
 *
p_rdy_li°
)

2527 
OS_TCB
 *
p_tcb
;

2528 
	`CPU_SR_ALLOC
();

2532 i‡(
OSSchedRoundRoböEn
 !
DEF_TRUE
) {

2536 
	`CPU_CRITICAL_ENTER
();

2537 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

2539 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2540 
	`CPU_CRITICAL_EXIT
();

2544 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

2545 
	`CPU_CRITICAL_EXIT
();

2549 i‡(
p_tcb
->
TimeQu™èCå
 > (
OS_TICK
)0) {

2550 
p_tcb
->
TimeQu™èCå
--;

2553 i‡(
p_tcb
->
TimeQu™èCå
 > (
OS_TICK
)0) {

2554 
	`CPU_CRITICAL_EXIT
();

2558 i‡(
p_rdy_li°
->
NbrE¡rõs
 < (
OS_OBJ_QTY
)2) {

2559 
	`CPU_CRITICAL_EXIT
();

2563 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

2564 
	`CPU_CRITICAL_EXIT
();

2568 
	`OS_RdyLi°MoveHódToTaû
(
p_rdy_li°
);

2569 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

2570 i‡(
p_tcb
->
TimeQu™è
 =(
OS_TICK
)0) {

2571 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

2573 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

2575 
	`CPU_CRITICAL_EXIT
();

2576 
	}
}

2598 
	$OS_TaskBlock
 (
OS_TCB
 *
p_tcb
,

2599 
OS_TICK
 
timeout
)

2601 
OS_ERR
 
îr
;

2604 i‡(
timeout
 > (
OS_TICK
)0) {

2605 
	`OS_TickLi°In£π
(
p_tcb
,

2606 
timeout
,

2607 
OS_OPT_TIME_TIMEOUT
,

2608 &
îr
);

2609 i‡(
îr
 =
OS_ERR_NONE
) {

2610 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT
;

2612 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

2615 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

2617 
	`OS_RdyLi°Remove
(
p_tcb
);

2618 
	}
}

2636 
	$OS_TaskRdy
 (
OS_TCB
 *
p_tcb
)

2638 
	`OS_TickLi°Remove
(
p_tcb
);

2639 i‡((
p_tcb
->
TaskSèã
 & 
OS_TASK_STATE_BIT_SUSPENDED
Ë=(
OS_STATE
)0) {

2640 
	`OS_RdyLi°In£π
(
p_tcb
);

2642 
	}
}

	@UCOSIII/uCOS-III/Source/os_dbg.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_dbg__c
 = "$Id: $";

40 
CPU_INT16U
 c⁄° 
	gOSDbg_DbgEn
 = 
OS_CFG_DBG_EN
;

42 #i‡
OS_CFG_DBG_EN
 > 0u

50 
CPU_INT08U
 c⁄° 
	gOSDbg_ArgChkEn
 = 
OS_CFG_ARG_CHK_EN
;

51 
CPU_INT08U
 c⁄° 
	gOSDbg_AµHooksEn
 = 
OS_CFG_APP_HOOKS_EN
;

53 
CPU_INT32U
 c⁄° 
	gOSDbg_Endü¬essTe°
 = 0x12345678LU;

55 
CPU_INT08U
 c⁄° 
	gOSDbg_CÆÀdFromISRChkEn
 = 
OS_CFG_CALLED_FROM_ISR_CHK_EN
;

57 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgEn
 = 
OS_CFG_FLAG_EN
;

58 
OS_FLAG_GRP
 c⁄° 
	gOSDbg_FœgGΩ
 = { 0u };

59 #i‡
OS_CFG_FLAG_EN
 > 0u

60 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgDñEn
 = 
OS_CFG_FLAG_DEL_EN
;

61 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgModeCÃEn
 = 
OS_CFG_FLAG_MODE_CLR_EN
;

62 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgPídAb‹tEn
 = 
OS_CFG_FLAG_PEND_ABORT_EN
;

63 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgGΩSize
 = (
OS_FLAG_GRP
);

64 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgWidth
 = (
OS_FLAGS
);

66 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgDñEn
 = 0u;

67 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgModeCÃEn
 = 0u;

68 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgPídAb‹tEn
 = 0u;

69 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgGΩSize
 = 0u;

70 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgWidth
 = 0u;

73 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

74 
CPU_INT16U
 c⁄° 
	gOSDbg_I¡Q
 = (
OS_INT_Q
);

76 
CPU_INT16U
 c⁄° 
	gOSDbg_I¡Q
 = 0u;

79 
CPU_INT08U
 c⁄° 
	gOSDbg_ISRPo°De„ºedEn
 = 
OS_CFG_ISR_POST_DEFERRED_EN
;

81 
OS_MEM
 c⁄° 
	gOSDbg_Mem
 = { 0u };

82 
CPU_INT08U
 c⁄° 
	gOSDbg_MemEn
 = 
OS_CFG_MEM_EN
;

83 #i‡
OS_CFG_MEM_EN
 > 0u

84 
CPU_INT16U
 c⁄° 
	gOSDbg_MemSize
 = (
OS_MEM
);

86 
CPU_INT16U
 c⁄° 
	gOSDbg_MemSize
 = 0u;

90 
CPU_INT08U
 c⁄° 
	gOSDbg_MsgEn
 = 
OS_MSG_EN
;

91 #i‡(
OS_MSG_EN
) > 0u

92 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgSize
 = (
OS_MSG
);

93 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgPoﬁSize
 = (
OS_MSG_POOL
);

94 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgQSize
 = (
OS_MSG_Q
);

96 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgSize
 = 0u;

97 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgPoﬁSize
 = 0u;

98 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgQSize
 = 0u;

102 
OS_MUTEX
 c⁄° 
	gOSDbg_Muãx
 = { 0u };

103 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxEn
 = 
OS_CFG_MUTEX_EN
;

104 #i‡
OS_CFG_MUTEX_EN
 > 0u

105 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxDñEn
 = 
OS_CFG_MUTEX_DEL_EN
;

106 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxPídAb‹tEn
 = 
OS_CFG_MUTEX_PEND_ABORT_EN
;

107 
CPU_INT16U
 c⁄° 
	gOSDbg_MuãxSize
 = (
OS_MUTEX
);

109 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxDñEn
 = 0u;

110 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxPídAb‹tEn
 = 0u;

111 
CPU_INT16U
 c⁄° 
	gOSDbg_MuãxSize
 = 0u;

114 
CPU_INT08U
 c⁄° 
	gOSDbg_ObjTy≥ChkEn
 = 
OS_CFG_OBJ_TYPE_CHK_EN
;

117 
CPU_INT08U
 c⁄° 
	gOSDbg_PídMu…iEn
 = 
OS_CFG_PEND_MULTI_EN
;

118 
CPU_INT16U
 c⁄° 
	gOSDbg_PídD©aSize
 = (
OS_PEND_DATA
);

119 
CPU_INT16U
 c⁄° 
	gOSDbg_PídLi°Size
 = (
OS_PEND_LIST
);

120 
CPU_INT16U
 c⁄° 
	gOSDbg_PídObjSize
 = (
OS_PEND_OBJ
);

123 
CPU_INT16U
 c⁄° 
	gOSDbg_PrioMax
 = 
OS_CFG_PRIO_MAX
;

124 
CPU_INT16U
 c⁄° 
	gOSDbg_PrioTblSize
 = (
OSPrioTbl
);

126 
CPU_INT16U
 c⁄° 
	gOSDbg_PåSize
 = (*);

129 
OS_Q
 c⁄° 
	gOSDbg_Q
 = { 0u };

130 
CPU_INT08U
 c⁄° 
	gOSDbg_QEn
 = 
OS_CFG_Q_EN
;

131 #i‡
OS_CFG_Q_EN
 > 0u

132 
CPU_INT08U
 c⁄° 
	gOSDbg_QDñEn
 = 
OS_CFG_Q_DEL_EN
;

133 
CPU_INT08U
 c⁄° 
	gOSDbg_QFlushEn
 = 
OS_CFG_Q_FLUSH_EN
;

134 
CPU_INT08U
 c⁄° 
	gOSDbg_QPídAb‹tEn
 = 
OS_CFG_Q_PEND_ABORT_EN
;

135 
CPU_INT16U
 c⁄° 
	gOSDbg_QSize
 = (
OS_Q
);

137 
CPU_INT08U
 c⁄° 
	gOSDbg_QDñEn
 = 0u;

138 
CPU_INT08U
 c⁄° 
	gOSDbg_QFlushEn
 = 0u;

139 
CPU_INT08U
 c⁄° 
	gOSDbg_QPídAb‹tEn
 = 0u;

140 
CPU_INT16U
 c⁄° 
	gOSDbg_QSize
 = 0u;

144 
CPU_INT08U
 c⁄° 
	gOSDbg_SchedRoundRoböEn
 = 
OS_CFG_SCHED_ROUND_ROBIN_EN
;

147 
OS_SEM
 c⁄° 
	gOSDbg_Sem
 = { 0u };

148 
CPU_INT08U
 c⁄° 
	gOSDbg_SemEn
 = 
OS_CFG_SEM_EN
;

149 #i‡
OS_CFG_SEM_EN
 > 0u

150 
CPU_INT08U
 c⁄° 
	gOSDbg_SemDñEn
 = 
OS_CFG_SEM_DEL_EN
;

151 
CPU_INT08U
 c⁄° 
	gOSDbg_SemPídAb‹tEn
 = 
OS_CFG_SEM_PEND_ABORT_EN
;

152 
CPU_INT08U
 c⁄° 
	gOSDbg_SemSëEn
 = 
OS_CFG_SEM_SET_EN
;

153 
CPU_INT16U
 c⁄° 
	gOSDbg_SemSize
 = (
OS_SEM
);

155 
CPU_INT08U
 c⁄° 
	gOSDbg_SemDñEn
 = 0u;

156 
CPU_INT08U
 c⁄° 
	gOSDbg_SemPídAb‹tEn
 = 0u;

157 
CPU_INT08U
 c⁄° 
	gOSDbg_SemSëEn
 = 0u;

158 
CPU_INT16U
 c⁄° 
	gOSDbg_SemSize
 = 0u;

162 
CPU_INT16U
 c⁄° 
	gOSDbg_RdyLi°
 = (
OS_RDY_LIST
);

163 
CPU_INT32U
 c⁄° 
	gOSDbg_RdyLi°Size
 = (
OSRdyLi°
);

165 
CPU_INT08U
 c⁄° 
	gOSDbg_StkWidth
 = (
CPU_STK
);

167 
CPU_INT08U
 c⁄° 
	gOSDbg_SètTaskEn
 = 
OS_CFG_STAT_TASK_EN
;

168 
CPU_INT08U
 c⁄° 
	gOSDbg_SètTaskStkChkEn
 = 
OS_CFG_STAT_TASK_STK_CHK_EN
;

170 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskCh™gePrioEn
 = 
OS_CFG_TASK_CHANGE_PRIO_EN
;

171 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskDñEn
 = 
OS_CFG_TASK_DEL_EN
;

172 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskQEn
 = 
OS_CFG_TASK_Q_EN
;

173 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskQPídAb‹tEn
 = 
OS_CFG_TASK_Q_PEND_ABORT_EN
;

174 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskProfûeEn
 = 
OS_CFG_TASK_PROFILE_EN
;

175 
CPU_INT16U
 c⁄° 
	gOSDbg_TaskRegTblSize
 = 
OS_CFG_TASK_REG_TBL_SIZE
;

176 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskSemPídAb‹tEn
 = 
OS_CFG_TASK_SEM_PEND_ABORT_EN
;

177 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskSu•ídEn
 = 
OS_CFG_TASK_SUSPEND_EN
;

180 
CPU_INT16U
 c⁄° 
	gOSDbg_TCBSize
 = (
OS_TCB
);

182 
CPU_INT16U
 c⁄° 
	gOSDbg_TickSpokeSize
 = (
OS_TICK_SPOKE
);

184 
CPU_INT08U
 c⁄° 
	gOSDbg_TimeDlyHMSMEn
 = 
OS_CFG_TIME_DLY_HMSM_EN
;

185 
CPU_INT08U
 c⁄° 
	gOSDbg_TimeDlyResumeEn
 = 
OS_CFG_TIME_DLY_RESUME_EN
;

187 #i‡
deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

188 
CPU_INT16U
 c⁄° 
	gOSDbg_TLS_TblSize
 = 
OS_CFG_TLS_TBL_SIZE
 * (
OS_TLS
);

190 
CPU_INT16U
 c⁄° 
	gOSDbg_TLS_TblSize
 = 0u;

194 
OS_TMR
 c⁄° 
	gOSDbg_Tmr
 = { 0u };

195 
CPU_INT08U
 c⁄° 
	gOSDbg_TmrEn
 = 
OS_CFG_TMR_EN
;

196 #i‡
OS_CFG_TMR_EN
 > 0u

197 
CPU_INT08U
 c⁄° 
	gOSDbg_TmrDñEn
 = 
OS_CFG_TMR_DEL_EN
;

198 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSize
 = (
OS_TMR
);

199 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSpokeSize
 = (
OS_TMR_SPOKE
);

201 
CPU_INT08U
 c⁄° 
	gOSDbg_TmrDñEn
 = 0u;

202 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSize
 = 0u;

203 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSpokeSize
 = 0u;

206 
CPU_INT16U
 c⁄° 
	gOSDbg_Vîsi⁄Nbr
 = 
OS_VERSION
;

216 
CPU_INT32U
 c⁄° 
	gOSDbg_D©aSize
 = (
OSI¡Ne°ögCå
)

218 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

219 + (
OS_AµTaskCª©eHookPå
)

220 + (
OS_AµTaskDñHookPå
)

221 + (
OS_AµTaskRëu∫HookPå
)

223 + (
OS_AµIdÀTaskHookPå
)

224 + (
OS_AµSètTaskHookPå
)

225 + (
OS_AµTaskSwHookPå
)

226 + (
OS_AµTimeTickHookPå
)

229 + (
OSIdÀTaskCå
)

230 + (
OSIdÀTaskTCB
)

232 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


233 + (
OSI¡DisTimeMax
)

236 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

237 + (
OSI¡QInPå
)

238 + (
OSI¡QOutPå
)

239 + (
OSI¡QNbrE¡rõs
)

240 + (
OSI¡QNbrE¡rõsMax
)

241 + (
OSI¡QOvfCå
)

242 + (
OSI¡QTaskTCB
)

243 + (
OSI¡QTaskTimeMax
)

246 + (
OSRu¬ög
)

248 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


249 + (
OSSa„tyCrôiˇlSèπFœg
)

252 #i‡
OS_CFG_FLAG_EN
 > 0u

253 + (
OSFœgDbgLi°På
)

254 + (
OSFœgQty
)

257 #i‡
OS_CFG_MEM_EN
 > 0u

258 #i‡
OS_CFG_DBG_EN
 > 0u

259 + (
OSMemDbgLi°På
)

261 + (
OSMemQty
)

264 #i‡
OS_MSG_EN
 > 0u

265 + (
OSMsgPoﬁ
)

268 #i‡
OS_CFG_MUTEX_EN
 > 0u

269 #i‡
OS_CFG_DBG_EN
 > 0u

270 + (
OSMuãxDbgLi°På
)

272 + (
OSMuãxQty
)

275 + (
OSPrioCur
)

276 + (
OSPrioHighRdy
)

277 + (
OSPrioSaved
)

278 + (
OSPrioTbl
)

280 #i‡
OS_CFG_Q_EN
 > 0u

281 #i‡
OS_CFG_DBG_EN
 > 0u

282 + (
OSQDbgLi°På
)

284 + (
OSQQty
)

287 + (
OSRdyLi°
)

289 + (
OSSchedLockNe°ögCå
)

291 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

292 + (
OSSchedLockTimeBegö
)

293 + (
OSSchedLockTimeMax
)

294 + (
OSSchedLockTimeMaxCur
)

297 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN


298 + (
OSSchedRoundRoböDÊtTimeQu™è
)

299 + (
OSSchedRoundRoböEn
)

302 #i‡
OS_CFG_SEM_EN
 > 0u

303 #i‡
OS_CFG_DBG_EN
 > 0u

304 + (
OSSemDbgLi°På
)

306 + (
OSSemQty
)

308 + (
OSTaskCtxSwCå
)

309 #i‡
OS_CFG_DBG_EN
 > 0u

310 + (
OSTaskDbgLi°På
)

312 + (
OSTaskQty
)

314 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

315 + (
OSSètRe£tFœg
)

316 + (
OSSètTaskCPUUßge
)

317 + (
OSSètTaskCPUUßgeMax
)

318 + (
OSSètTaskCå
)

319 + (
OSSètTaskCåMax
)

320 + (
OSSètTaskCåRun
)

321 + (
OSSètTaskRdy
)

322 + (
OSSètTaskTCB
)

323 + (
OSSètTaskTimeMax
)

326 + (
OSTickCå
)

327 + (
OSTickTaskTCB
)

328 + (
OSTickTaskTimeMax
)

330 #i‡
OS_CFG_TMR_EN
 > 0u

331 #i‡
OS_CFG_DBG_EN
 > 0u

332 + (
OSTmrDbgLi°På
)

334 + (
OSTmrQty
)

335 + (
OSTmrTaskTCB
)

336 + (
OSTmrTaskTimeMax
)

337 + (
OSTmrTickCå
)

338 + (
OSTmrUpd©eC¡
)

339 + (
OSTmrUpd©eCå
)

342 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

343 + (
OSTaskRegNextAvaûID
)

346 + (
OSTCBCurPå
)

347 + (
OSTCBHighRdyPå
);

369 
	$OS_Dbg_Inô
 ()

371 c⁄° *
p_ãmp
;

374 
p_ãmp
 = (c⁄° *)&
OSDbg_DbgEn
;

376 
p_ãmp
 = (c⁄° *)&
OSDbg_D©aSize
;

378 
p_ãmp
 = (c⁄° *)&
OSDbg_ArgChkEn
;

379 
p_ãmp
 = (c⁄° *)&
OSDbg_AµHooksEn
;

381 
p_ãmp
 = (c⁄° *)&
OSDbg_Endü¬essTe°
;

383 
p_ãmp
 = (c⁄° *)&
OSDbg_CÆÀdFromISRChkEn
;

385 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgGΩ
;

386 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgEn
;

387 #i‡
OS_CFG_FLAG_EN
 > 0u

388 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgDñEn
;

389 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgModeCÃEn
;

390 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgPídAb‹tEn
;

391 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgGΩSize
;

392 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgWidth
;

395 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

396 
p_ãmp
 = (c⁄° *)&
OSDbg_I¡Q
;

399 
p_ãmp
 = (c⁄° *)&
OSDbg_ISRPo°De„ºedEn
;

401 
p_ãmp
 = (c⁄° *)&
OSDbg_Mem
;

402 
p_ãmp
 = (c⁄° *)&
OSDbg_MemEn
;

403 #i‡
OS_CFG_MEM_EN
 > 0u

404 
p_ãmp
 = (c⁄° *)&
OSDbg_MemSize
;

407 
p_ãmp
 = (c⁄° *)&
OSDbg_MsgEn
;

408 #i‡(
OS_MSG_EN
) > 0u

409 
p_ãmp
 = (c⁄° *)&
OSDbg_MsgSize
;

410 
p_ãmp
 = (c⁄° *)&
OSDbg_MsgPoﬁSize
;

411 
p_ãmp
 = (c⁄° *)&
OSDbg_MsgQSize
;

414 
p_ãmp
 = (c⁄° *)&
OSDbg_Muãx
;

415 
p_ãmp
 = (c⁄° *)&
OSDbg_MuãxEn
;

416 #i‡(
OS_CFG_MUTEX_EN
) > 0u

417 
p_ãmp
 = (c⁄° *)&
OSDbg_MuãxDñEn
;

418 
p_ãmp
 = (c⁄° *)&
OSDbg_MuãxPídAb‹tEn
;

419 
p_ãmp
 = (c⁄° *)&
OSDbg_MuãxSize
;

422 
p_ãmp
 = (c⁄° *)&
OSDbg_ObjTy≥ChkEn
;

424 
p_ãmp
 = (c⁄° *)&
OSDbg_PídMu…iEn
;

425 
p_ãmp
 = (c⁄° *)&
OSDbg_PídD©aSize
;

426 
p_ãmp
 = (c⁄° *)&
OSDbg_PídLi°Size
;

427 
p_ãmp
 = (c⁄° *)&
OSDbg_PídObjSize
;

429 
p_ãmp
 = (c⁄° *)&
OSDbg_PrioMax
;

430 
p_ãmp
 = (c⁄° *)&
OSDbg_PrioTblSize
;

432 
p_ãmp
 = (c⁄° *)&
OSDbg_PåSize
;

434 
p_ãmp
 = (c⁄° *)&
OSDbg_Q
;

435 
p_ãmp
 = (c⁄° *)&
OSDbg_QEn
;

436 #i‡(
OS_CFG_Q_EN
) > 0u

437 
p_ãmp
 = (c⁄° *)&
OSDbg_QDñEn
;

438 
p_ãmp
 = (c⁄° *)&
OSDbg_QFlushEn
;

439 
p_ãmp
 = (c⁄° *)&
OSDbg_QPídAb‹tEn
;

440 
p_ãmp
 = (c⁄° *)&
OSDbg_QSize
;

443 
p_ãmp
 = (c⁄° *)&
OSDbg_SchedRoundRoböEn
;

445 
p_ãmp
 = (c⁄° *)&
OSDbg_Sem
;

446 
p_ãmp
 = (c⁄° *)&
OSDbg_SemEn
;

447 #i‡(
OS_CFG_SEM_EN
) > 0u

448 
p_ãmp
 = (c⁄° *)&
OSDbg_SemDñEn
;

449 
p_ãmp
 = (c⁄° *)&
OSDbg_SemPídAb‹tEn
;

450 
p_ãmp
 = (c⁄° *)&
OSDbg_SemSëEn
;

451 
p_ãmp
 = (c⁄° *)&
OSDbg_SemSize
;

454 
p_ãmp
 = (c⁄° *)&
OSDbg_RdyLi°
;

455 
p_ãmp
 = (c⁄° *)&
OSDbg_RdyLi°Size
;

457 
p_ãmp
 = (c⁄° *)&
OSDbg_StkWidth
;

459 
p_ãmp
 = (c⁄° *)&
OSDbg_SètTaskEn
;

460 
p_ãmp
 = (c⁄° *)&
OSDbg_SètTaskStkChkEn
;

462 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskCh™gePrioEn
;

463 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskDñEn
;

464 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskQEn
;

465 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskQPídAb‹tEn
;

466 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskProfûeEn
;

467 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskRegTblSize
;

468 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskSemPídAb‹tEn
;

469 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskSu•ídEn
;

471 
p_ãmp
 = (c⁄° *)&
OSDbg_TCBSize
;

473 
p_ãmp
 = (c⁄° *)&
OSDbg_TickSpokeSize
;

475 
p_ãmp
 = (c⁄° *)&
OSDbg_TimeDlyHMSMEn
;

476 
p_ãmp
 = (c⁄° *)&
OSDbg_TimeDlyResumeEn
;

479 
p_ãmp
 = (c⁄° *)&
OSDbg_Tmr
;

480 
p_ãmp
 = (c⁄° *)&
OSDbg_TmrEn
;

481 #i‡(
OS_CFG_TMR_EN
) > 0u

482 
p_ãmp
 = (c⁄° *)&
OSDbg_TmrDñEn
;

483 
p_ãmp
 = (c⁄° *)&
OSDbg_TmrSize
;

484 
p_ãmp
 = (c⁄° *)&
OSDbg_TmrSpokeSize
;

487 
p_ãmp
 = (c⁄° *)&
OSDbg_Vîsi⁄Nbr
;

489 
p_ãmp
 =Ö_temp;

490 
	}
}

	@UCOSIII/uCOS-III/Source/os_flag.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_Êag__c
 = "$Id: $";

41 #i‡
OS_CFG_FLAG_EN
 > 0u

70 
	$OSFœgCª©e
 (
OS_FLAG_GRP
 *
p_gΩ
,

71 
CPU_CHAR
 *
p_«me
,

72 
OS_FLAGS
 
Êags
,

73 
OS_ERR
 *
p_îr
)

75 
	`CPU_SR_ALLOC
();

79 #ifde‡
OS_SAFETY_CRITICAL


80 i‡(
p_îr
 =(
OS_ERR
 *)0) {

81 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

86 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


87 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

88 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

93 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

94 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

95 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

100 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

101 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

102 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

107 
	`OS_CRITICAL_ENTER
();

108 
p_gΩ
->
Ty≥
 = 
OS_OBJ_TYPE_FLAG
;

109 
p_gΩ
->
NamePå
 = 
p_«me
;

110 
p_gΩ
->
Fœgs
 = 
Êags
;

111 
p_gΩ
->
TS
 = (
CPU_TS
)0;

112 
	`OS_PídLi°Inô
(&
p_gΩ
->
PídLi°
);

114 #i‡
OS_CFG_DBG_EN
 > 0u

115 
	`OS_FœgDbgLi°Add
(
p_gΩ
);

117 
OSFœgQty
++;

119 
	`OS_CRITICAL_EXIT_NO_SCHED
();

120 *
p_îr
 = 
OS_ERR_NONE
;

121 
	}
}

155 #i‡
OS_CFG_FLAG_DEL_EN
 > 0u

156 
OS_OBJ_QTY
 
	$OSFœgDñ
 (
OS_FLAG_GRP
 *
p_gΩ
,

157 
OS_OPT
 
›t
,

158 
OS_ERR
 *
p_îr
)

160 
OS_OBJ_QTY
 
˙t
;

161 
OS_OBJ_QTY
 
nbr_èsks
;

162 
OS_PEND_DATA
 *
p_≥nd_d©a
;

163 
OS_PEND_LIST
 *
p_≥nd_li°
;

164 
OS_TCB
 *
p_tcb
;

165 
CPU_TS
 
ts
;

166 
	`CPU_SR_ALLOC
();

170 #ifde‡
OS_SAFETY_CRITICAL


171 i‡(
p_îr
 =(
OS_ERR
 *)0) {

172 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

173  ((
OS_OBJ_QTY
)0);

177 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

178 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

179 *
p_îr
 = 
OS_ERR_DEL_ISR
;

180  ((
OS_OBJ_QTY
)0);

184 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

185 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

186 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

187  ((
OS_OBJ_QTY
)0);

189 
›t
) {

190 
OS_OPT_DEL_NO_PEND
:

191 
OS_OPT_DEL_ALWAYS
:

195 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

196  ((
OS_OBJ_QTY
)0);

200 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

201 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

202 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

203  ((
OS_OBJ_QTY
)0);

206 
	`OS_CRITICAL_ENTER
();

207 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

208 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

209 
nbr_èsks
 = 
˙t
;

210 
›t
) {

211 
OS_OPT_DEL_NO_PEND
:

212 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

213 #i‡
OS_CFG_DBG_EN
 > 0u

214 
	`OS_FœgDbgLi°Remove
(
p_gΩ
);

216 
OSFœgQty
--;

217 
	`OS_FœgCÃ
(
p_gΩ
);

219 
	`OS_CRITICAL_EXIT
();

220 *
p_îr
 = 
OS_ERR_NONE
;

222 
	`OS_CRITICAL_EXIT
();

223 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

227 
OS_OPT_DEL_ALWAYS
:

228 
ts
 = 
	`OS_TS_GET
();

229 
˙t
 > 0u) {

230 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

231 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

232 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_gΩ
),

233 
p_tcb
,

234 
ts
);

235 
˙t
--;

237 #i‡
OS_CFG_DBG_EN
 > 0u

238 
	`OS_FœgDbgLi°Remove
(
p_gΩ
);

240 
OSFœgQty
--;

241 
	`OS_FœgCÃ
(
p_gΩ
);

242 
	`OS_CRITICAL_EXIT_NO_SCHED
();

243 
	`OSSched
();

244 *
p_îr
 = 
OS_ERR_NONE
;

248 
	`OS_CRITICAL_EXIT
();

249 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

252  (
nbr_èsks
);

253 
	}
}

315 
OS_FLAGS
 
	$OSFœgPíd
 (
OS_FLAG_GRP
 *
p_gΩ
,

316 
OS_FLAGS
 
Êags
,

317 
OS_TICK
 
timeout
,

318 
OS_OPT
 
›t
,

319 
CPU_TS
 *
p_ts
,

320 
OS_ERR
 *
p_îr
)

322 
CPU_BOOLEAN
 
c⁄sume
;

323 
OS_FLAGS
 
Êags_rdy
;

324 
OS_OPT
 
mode
;

325 
OS_PEND_DATA
 
≥nd_d©a
;

326 
	`CPU_SR_ALLOC
();

330 #ifde‡
OS_SAFETY_CRITICAL


331 i‡(
p_îr
 =(
OS_ERR
 *)0) {

332 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

333  ((
OS_FLAGS
)0);

337 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

338 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

339 *
p_îr
 = 
OS_ERR_PEND_ISR
;

340  ((
OS_FLAGS
)0);

344 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

345 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

346 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

347  ((
OS_FLAGS
)0);

349 
›t
) {

350 
OS_OPT_PEND_FLAG_CLR_ALL
:

351 
OS_OPT_PEND_FLAG_CLR_ANY
:

352 
OS_OPT_PEND_FLAG_SET_ALL
:

353 
OS_OPT_PEND_FLAG_SET_ANY
:

354 
OS_OPT_PEND_FLAG_CLR_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
:

355 
OS_OPT_PEND_FLAG_CLR_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
:

356 
OS_OPT_PEND_FLAG_SET_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
:

357 
OS_OPT_PEND_FLAG_SET_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
:

358 
OS_OPT_PEND_FLAG_CLR_ALL
 | 
OS_OPT_PEND_NON_BLOCKING
:

359 
OS_OPT_PEND_FLAG_CLR_ANY
 | 
OS_OPT_PEND_NON_BLOCKING
:

360 
OS_OPT_PEND_FLAG_SET_ALL
 | 
OS_OPT_PEND_NON_BLOCKING
:

361 
OS_OPT_PEND_FLAG_SET_ANY
 | 
OS_OPT_PEND_NON_BLOCKING
:

362 
OS_OPT_PEND_FLAG_CLR_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

363 
OS_OPT_PEND_FLAG_CLR_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

364 
OS_OPT_PEND_FLAG_SET_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

365 
OS_OPT_PEND_FLAG_SET_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

369 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

370  ((
OS_OBJ_QTY
)0);

374 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

375 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

376 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

377  ((
OS_FLAGS
)0);

381 i‡((
›t
 & 
OS_OPT_PEND_FLAG_CONSUME
Ë!(
OS_OPT
)0) {

382 
c⁄sume
 = 
DEF_TRUE
;

384 
c⁄sume
 = 
DEF_FALSE
;

387 i‡(
p_ts
 !(
CPU_TS
 *)0) {

388 *
p_ts
 = (
CPU_TS
)0;

391 
mode
 = 
›t
 & 
OS_OPT_PEND_FLAG_MASK
;

392 
	`CPU_CRITICAL_ENTER
();

393 
mode
) {

394 
OS_OPT_PEND_FLAG_SET_ALL
:

395 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
Êags
);

396 i‡(
Êags_rdy
 =
Êags
) {

397 i‡(
c⁄sume
 =
DEF_TRUE
) {

398 
p_gΩ
->
Fœgs
 &~
Êags_rdy
;

400 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

401 i‡(
p_ts
 !(
CPU_TS
 *)0) {

402 *
p_ts
 = 
p_gΩ
->
TS
;

404 
	`CPU_CRITICAL_EXIT
();

405 *
p_îr
 = 
OS_ERR_NONE
;

406  (
Êags_rdy
);

408 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

409 
	`CPU_CRITICAL_EXIT
();

410 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

411  ((
OS_FLAGS
)0);

413 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

414 
	`CPU_CRITICAL_EXIT
();

415 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

416  ((
OS_FLAGS
)0);

420 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

421 
	`OS_FœgBlock
(&
≥nd_d©a
,

422 
p_gΩ
,

423 
Êags
,

424 
›t
,

425 
timeout
);

426 
	`OS_CRITICAL_EXIT_NO_SCHED
();

430 
OS_OPT_PEND_FLAG_SET_ANY
:

431 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
Êags
);

432 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

433 i‡(
c⁄sume
 =
DEF_TRUE
) {

434 
p_gΩ
->
Fœgs
 &~
Êags_rdy
;

436 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

437 i‡(
p_ts
 !(
CPU_TS
 *)0) {

438 *
p_ts
 = 
p_gΩ
->
TS
;

440 
	`CPU_CRITICAL_EXIT
();

441 *
p_îr
 = 
OS_ERR_NONE
;

442  (
Êags_rdy
);

444 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

445 
	`CPU_CRITICAL_EXIT
();

446 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

447  ((
OS_FLAGS
)0);

449 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

450 
	`CPU_CRITICAL_EXIT
();

451 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

452  ((
OS_FLAGS
)0);

456 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

457 
	`OS_FœgBlock
(&
≥nd_d©a
,

458 
p_gΩ
,

459 
Êags
,

460 
›t
,

461 
timeout
);

462 
	`OS_CRITICAL_EXIT_NO_SCHED
();

466 #i‡
OS_CFG_FLAG_MODE_CLR_EN
 > 0u

467 
OS_OPT_PEND_FLAG_CLR_ALL
:

468 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
Êags
);

469 i‡(
Êags_rdy
 =
Êags
) {

470 i‡(
c⁄sume
 =
DEF_TRUE
) {

471 
p_gΩ
->
Fœgs
 |
Êags_rdy
;

473 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

474 i‡(
p_ts
 !(
CPU_TS
 *)0) {

475 *
p_ts
 = 
p_gΩ
->
TS
;

477 
	`CPU_CRITICAL_EXIT
();

478 *
p_îr
 = 
OS_ERR_NONE
;

479  (
Êags_rdy
);

481 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

482 
	`CPU_CRITICAL_EXIT
();

483 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

484  ((
OS_FLAGS
)0);

486 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

487 
	`CPU_CRITICAL_EXIT
();

488 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

489  ((
OS_FLAGS
)0);

493 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

494 
	`OS_FœgBlock
(&
≥nd_d©a
,

495 
p_gΩ
,

496 
Êags
,

497 
›t
,

498 
timeout
);

499 
	`OS_CRITICAL_EXIT_NO_SCHED
();

503 
OS_OPT_PEND_FLAG_CLR_ANY
:

504 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
Êags
);

505 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

506 i‡(
c⁄sume
 =
DEF_TRUE
) {

507 
p_gΩ
->
Fœgs
 |
Êags_rdy
;

509 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

510 i‡(
p_ts
 !(
CPU_TS
 *)0) {

511 *
p_ts
 = 
p_gΩ
->
TS
;

513 
	`CPU_CRITICAL_EXIT
();

514 *
p_îr
 = 
OS_ERR_NONE
;

515  (
Êags_rdy
);

517 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

518 
	`CPU_CRITICAL_EXIT
();

519 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

520  ((
OS_FLAGS
)0);

522 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

523 
	`CPU_CRITICAL_EXIT
();

524 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

525  ((
OS_FLAGS
)0);

529 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

530 
	`OS_FœgBlock
(&
≥nd_d©a
,

531 
p_gΩ
,

532 
Êags
,

533 
›t
,

534 
timeout
);

535 
	`OS_CRITICAL_EXIT_NO_SCHED
();

541 
	`CPU_CRITICAL_EXIT
();

542 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

543  ((
OS_FLAGS
)0);

546 
	`OSSched
();

548 
	`CPU_CRITICAL_ENTER
();

549 
OSTCBCurPå
->
PídSètus
) {

550 
OS_STATUS_PEND_OK
:

551 i‡(
p_ts
 !(
CPU_TS
 *)0) {

552 *
p_ts
 = 
OSTCBCurPå
->
TS
;

554 *
p_îr
 = 
OS_ERR_NONE
;

557 
OS_STATUS_PEND_ABORT
:

558 i‡(
p_ts
 !(
CPU_TS
 *)0) {

559 *
p_ts
 = 
OSTCBCurPå
->
TS
;

561 
	`CPU_CRITICAL_EXIT
();

562 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

563  ((
OS_FLAGS
)0);

565 
OS_STATUS_PEND_TIMEOUT
:

566 i‡(
p_ts
 !(
CPU_TS
 *)0) {

567 *
p_ts
 = (
CPU_TS
 )0;

569 
	`CPU_CRITICAL_EXIT
();

570 *
p_îr
 = 
OS_ERR_TIMEOUT
;

571  ((
OS_FLAGS
)0);

573 
OS_STATUS_PEND_DEL
:

574 i‡(
p_ts
 !(
CPU_TS
 *)0) {

575 *
p_ts
 = 
OSTCBCurPå
->
TS
;

577 
	`CPU_CRITICAL_EXIT
();

578 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

579  ((
OS_FLAGS
)0);

582 
	`CPU_CRITICAL_EXIT
();

583 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

584  ((
OS_FLAGS
)0);

587 
Êags_rdy
 = 
OSTCBCurPå
->
FœgsRdy
;

588 i‡(
c⁄sume
 =
DEF_TRUE
) {

589 
mode
) {

590 
OS_OPT_PEND_FLAG_SET_ALL
:

591 
OS_OPT_PEND_FLAG_SET_ANY
:

592 
p_gΩ
->
Fœgs
 &~
Êags_rdy
;

595 #i‡
OS_CFG_FLAG_MODE_CLR_EN
 > 0u

596 
OS_OPT_PEND_FLAG_CLR_ALL
:

597 
OS_OPT_PEND_FLAG_CLR_ANY
:

598 
p_gΩ
->
Fœgs
 |
Êags_rdy
;

602 
	`CPU_CRITICAL_EXIT
();

603 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

604  ((
OS_FLAGS
)0);

607 
	`CPU_CRITICAL_EXIT
();

608 *
p_îr
 = 
OS_ERR_NONE
;

609  (
Êags_rdy
);

610 
	}
}

646 #i‡
OS_CFG_FLAG_PEND_ABORT_EN
 > 0u

647 
OS_OBJ_QTY
 
	$OSFœgPídAb‹t
 (
OS_FLAG_GRP
 *
p_gΩ
,

648 
OS_OPT
 
›t
,

649 
OS_ERR
 *
p_îr
)

651 
OS_PEND_LIST
 *
p_≥nd_li°
;

652 
OS_TCB
 *
p_tcb
;

653 
CPU_TS
 
ts
;

654 
OS_OBJ_QTY
 
nbr_èsks
;

655 
	`CPU_SR_ALLOC
();

659 #ifde‡
OS_SAFETY_CRITICAL


660 i‡(
p_îr
 =(
OS_ERR
 *)0) {

661 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

662  ((
OS_OBJ_QTY
)0u);

666 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

667 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

668 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

669  ((
OS_OBJ_QTY
)0u);

673 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

674 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

675 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

676  ((
OS_OBJ_QTY
)0u);

678 
›t
) {

679 
OS_OPT_PEND_ABORT_1
:

680 
OS_OPT_PEND_ABORT_ALL
:

681 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

682 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

686 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

687  ((
OS_OBJ_QTY
)0u);

691 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

692 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

693 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

694  ((
OS_OBJ_QTY
)0u);

698 
	`CPU_CRITICAL_ENTER
();

699 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

700 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

701 
	`CPU_CRITICAL_EXIT
();

702 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

703  ((
OS_OBJ_QTY
)0u);

706 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

707 
nbr_èsks
 = 0u;

708 
ts
 = 
	`OS_TS_GET
();

709 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

710 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

711 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_gΩ
),

712 
p_tcb
,

713 
ts
);

714 
nbr_èsks
++;

715 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

719 
	`OS_CRITICAL_EXIT_NO_SCHED
();

721 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

722 
	`OSSched
();

725 *
p_îr
 = 
OS_ERR_NONE
;

726  (
nbr_èsks
);

727 
	}
}

747 
OS_FLAGS
 
	$OSFœgPídGëFœgsRdy
 (
OS_ERR
 *
p_îr
)

749 
OS_FLAGS
 
Êags
;

750 
	`CPU_SR_ALLOC
();

754 #ifde‡
OS_SAFETY_CRITICAL


755 i‡(
p_îr
 =(
OS_ERR
 *)0) {

756 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

757  ((
OS_FLAGS
)0);

761 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

762 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

763 *
p_îr
 = 
OS_ERR_PEND_ISR
;

764  ((
OS_FLAGS
)0);

768 
	`CPU_CRITICAL_ENTER
();

769 
Êags
 = 
OSTCBCurPå
->
FœgsRdy
;

770 
	`CPU_CRITICAL_EXIT
();

771 *
p_îr
 = 
OS_ERR_NONE
;

772  (
Êags
);

773 
	}
}

817 
OS_FLAGS
 
	$OSFœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

818 
OS_FLAGS
 
Êags
,

819 
OS_OPT
 
›t
,

820 
OS_ERR
 *
p_îr
)

822 
OS_FLAGS
 
Êags_cur
;

823 
CPU_TS
 
ts
;

827 #ifde‡
OS_SAFETY_CRITICAL


828 i‡(
p_îr
 =(
OS_ERR
 *)0) {

829 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

830  ((
OS_FLAGS
)0);

834 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

835 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

836 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

837  ((
OS_FLAGS
)0);

839 
›t
) {

840 
OS_OPT_POST_FLAG_SET
:

841 
OS_OPT_POST_FLAG_CLR
:

842 
OS_OPT_POST_FLAG_SET
 | 
OS_OPT_POST_NO_SCHED
:

843 
OS_OPT_POST_FLAG_CLR
 | 
OS_OPT_POST_NO_SCHED
:

847 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

848  ((
OS_FLAGS
)0);

852 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

853 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

854 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

855  ((
OS_FLAGS
)0);

859 
ts
 = 
	`OS_TS_GET
();

860 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

861 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

862 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_FLAG
,

863 (*)
p_gΩ
,

865 (
OS_MSG_SIZE
)0,

866 (
OS_FLAGS
 )
Êags
,

867 (
OS_OPT
 )
›t
,

868 (
CPU_TS
 )
ts
,

869 (
OS_ERR
 *)
p_îr
);

870  ((
OS_FLAGS
)0);

874 
Êags_cur
 = 
	`OS_FœgPo°
(
p_gΩ
,

875 
Êags
,

876 
›t
,

877 
ts
,

878 
p_îr
);

880  (
Êags_cur
);

881 
	}
}

920 
	$OS_FœgBlock
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

921 
OS_FLAG_GRP
 *
p_gΩ
,

922 
OS_FLAGS
 
Êags
,

923 
OS_OPT
 
›t
,

924 
OS_TICK
 
timeout
)

926 
OSTCBCurPå
->
FœgsPíd
 = 
Êags
;

927 
OSTCBCurPå
->
FœgsO±
 = 
›t
;

928 
OSTCBCurPå
->
FœgsRdy
 = (
OS_FLAGS
)0;

930 
	`OS_Píd
(
p_≥nd_d©a
,

931 (
OS_PEND_OBJ
 *)((*)
p_gΩ
),

932 
OS_TASK_PEND_ON_FLAG
,

933 
timeout
);

934 
	}
}

953 
	$OS_FœgCÃ
 (
OS_FLAG_GRP
 *
p_gΩ
)

955 
OS_PEND_LIST
 *
p_≥nd_li°
;

959 
p_gΩ
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

960 
p_gΩ
->
NamePå
 = (
CPU_CHAR
 *)((*)"?FLAG");

961 
p_gΩ
->
Fœgs
 = (
OS_FLAGS
 )0;

962 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

963 
	`OS_PídLi°Inô
(
p_≥nd_li°
);

964 
	}
}

984 
	$OS_FœgInô
 (
OS_ERR
 *
p_îr
)

986 #ifde‡
OS_SAFETY_CRITICAL


987 i‡(
p_îr
 =(
OS_ERR
 *)0) {

988 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

993 #i‡
OS_CFG_DBG_EN
 > 0u

994 
OSFœgDbgLi°På
 = (
OS_FLAG_GRP
 *)0;

997 
OSFœgQty
 = (
OS_OBJ_QTY
 )0;

998 *
p_îr
 = 
OS_ERR_NONE
;

999 
	}
}

1017 #i‡
OS_CFG_DBG_EN
 > 0u

1018 
	$OS_FœgDbgLi°Add
 (
OS_FLAG_GRP
 *
p_gΩ
)

1020 
p_gΩ
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1021 
p_gΩ
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1022 i‡(
OSFœgDbgLi°På
 =(
OS_FLAG_GRP
 *)0) {

1023 
p_gΩ
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1025 
p_gΩ
->
DbgNextPå
 = 
OSFœgDbgLi°På
;

1026 
OSFœgDbgLi°På
->
DbgPªvPå
 = 
p_gΩ
;

1028 
OSFœgDbgLi°På
 = 
p_gΩ
;

1029 
	}
}

1033 
	$OS_FœgDbgLi°Remove
 (
OS_FLAG_GRP
 *
p_gΩ
)

1035 
OS_FLAG_GRP
 *
p_gΩ_√xt
;

1036 
OS_FLAG_GRP
 *
p_gΩ_¥ev
;

1039 
p_gΩ_¥ev
 = 
p_gΩ
->
DbgPªvPå
;

1040 
p_gΩ_√xt
 = 
p_gΩ
->
DbgNextPå
;

1042 i‡(
p_gΩ_¥ev
 =(
OS_FLAG_GRP
 *)0) {

1043 
OSFœgDbgLi°På
 = 
p_gΩ_√xt
;

1044 i‡(
p_gΩ_√xt
 !(
OS_FLAG_GRP
 *)0) {

1045 
p_gΩ_√xt
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1047 
p_gΩ
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1049 } i‡(
p_gΩ_√xt
 =(
OS_FLAG_GRP
 *)0) {

1050 
p_gΩ_¥ev
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1051 
p_gΩ
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1054 
p_gΩ_¥ev
->
DbgNextPå
 = 
p_gΩ_√xt
;

1055 
p_gΩ_√xt
->
DbgPªvPå
 = 
p_gΩ_¥ev
;

1056 
p_gΩ
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1057 
p_gΩ
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1059 
	}
}

1106 
OS_FLAGS
 
	$OS_FœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

1107 
OS_FLAGS
 
Êags
,

1108 
OS_OPT
 
›t
,

1109 
CPU_TS
 
ts
,

1110 
OS_ERR
 *
p_îr
)

1112 
OS_FLAGS
 
Êags_cur
;

1113 
OS_FLAGS
 
Êags_rdy
;

1114 
OS_OPT
 
mode
;

1115 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1116 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1117 
OS_PEND_LIST
 *
p_≥nd_li°
;

1118 
OS_TCB
 *
p_tcb
;

1119 
	`CPU_SR_ALLOC
();

1123 
	`CPU_CRITICAL_ENTER
();

1124 
›t
) {

1125 
OS_OPT_POST_FLAG_SET
:

1126 
OS_OPT_POST_FLAG_SET
 | 
OS_OPT_POST_NO_SCHED
:

1127 
p_gΩ
->
Fœgs
 |
Êags
;

1130 
OS_OPT_POST_FLAG_CLR
:

1131 
OS_OPT_POST_FLAG_CLR
 | 
OS_OPT_POST_NO_SCHED
:

1132 
p_gΩ
->
Fœgs
 &~
Êags
;

1136 
	`CPU_CRITICAL_EXIT
();

1137 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1138  ((
OS_FLAGS
)0);

1140 
p_gΩ
->
TS
 = 
ts
;

1141 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

1142 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 0u) {

1143 
	`CPU_CRITICAL_EXIT
();

1144 *
p_îr
 = 
OS_ERR_NONE
;

1145  (
p_gΩ
->
Fœgs
);

1148 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

1149 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1150 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1151 
p_tcb
 !(
OS_TCB
 *)0) {

1152 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1153 
mode
 = 
p_tcb
->
FœgsO±
 & 
OS_OPT_PEND_FLAG_MASK
;

1154 
mode
) {

1155 
OS_OPT_PEND_FLAG_SET_ALL
:

1156 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1157 i‡(
Êags_rdy
 =
p_tcb
->
FœgsPíd
) {

1158 
	`OS_FœgTaskRdy
(
p_tcb
,

1159 
Êags_rdy
,

1160 
ts
);

1164 
OS_OPT_PEND_FLAG_SET_ANY
:

1165 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1166 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

1167 
	`OS_FœgTaskRdy
(
p_tcb
,

1168 
Êags_rdy
,

1169 
ts
);

1173 #i‡
OS_CFG_FLAG_MODE_CLR_EN
 > 0u

1174 
OS_OPT_PEND_FLAG_CLR_ALL
:

1175 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1176 i‡(
Êags_rdy
 =
p_tcb
->
FœgsPíd
) {

1177 
	`OS_FœgTaskRdy
(
p_tcb
,

1178 
Êags_rdy
,

1179 
ts
);

1183 
OS_OPT_PEND_FLAG_CLR_ANY
:

1184 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1185 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

1186 
	`OS_FœgTaskRdy
(
p_tcb
,

1187 
Êags_rdy
,

1188 
ts
);

1193 
	`OS_CRITICAL_EXIT
();

1194 *
p_îr
 = 
OS_ERR_FLAG_PEND_OPT
;

1195  ((
OS_FLAGS
)0);

1197 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

1198 i‡(
p_≥nd_d©a
 !(
OS_PEND_DATA
 *)0) {

1199 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1201 
p_tcb
 = (
OS_TCB
 *)0;

1204 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1206 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

1207 
	`OSSched
();

1210 
	`CPU_CRITICAL_ENTER
();

1211 
Êags_cur
 = 
p_gΩ
->
Fœgs
;

1212 
	`CPU_CRITICAL_EXIT
();

1213 *
p_îr
 = 
OS_ERR_NONE
;

1214  (
Êags_cur
);

1215 
	}
}

1238 
	$OS_FœgTaskRdy
 (
OS_TCB
 *
p_tcb
,

1239 
OS_FLAGS
 
Êags_rdy
,

1240 
CPU_TS
 
ts
)

1242 
p_tcb
->
FœgsRdy
 = 
Êags_rdy
;

1243 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1244 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1245 
p_tcb
->
TS
 = 
ts
;

1246 
p_tcb
->
TaskSèã
) {

1247 
OS_TASK_STATE_RDY
:

1248 
OS_TASK_STATE_DLY
:

1249 
OS_TASK_STATE_DLY_SUSPENDED
:

1250 
OS_TASK_STATE_SUSPENDED
:

1253 
OS_TASK_STATE_PEND
:

1254 
OS_TASK_STATE_PEND_TIMEOUT
:

1255 
	`OS_TaskRdy
(
p_tcb
);

1256 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1259 
OS_TASK_STATE_PEND_SUSPENDED
:

1260 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1261 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1267 
	`OS_PídLi°Remove
(
p_tcb
);

1268 
	}
}

	@UCOSIII/uCOS-III/Source/os_int.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_öt__c
 = "$Id: $";

41 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

91 
	$OS_I¡QPo°
 (
OS_OBJ_TYPE
 
ty≥
,

92 *
p_obj
,

93 *
p_void
,

94 
OS_MSG_SIZE
 
msg_size
,

95 
OS_FLAGS
 
Êags
,

96 
OS_OPT
 
›t
,

97 
CPU_TS
 
ts
,

98 
OS_ERR
 *
p_îr
)

100 
	`CPU_SR_ALLOC
();

104 #ifde‡
OS_SAFETY_CRITICAL


105 i‡(
p_îr
 =(
OS_ERR
 *)0) {

106 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

111 
	`CPU_CRITICAL_ENTER
();

112 i‡(
OSI¡QNbrE¡rõs
 < 
OSCfg_I¡QSize
) {

113 
OSI¡QNbrE¡rõs
++;

115 i‡(
OSI¡QNbrE¡rõsMax
 < 
OSI¡QNbrE¡rõs
) {

116 
OSI¡QNbrE¡rõsMax
 = 
OSI¡QNbrE¡rõs
;

119 
OSI¡QInPå
->
Ty≥
 = 
ty≥
;

120 
OSI¡QInPå
->
ObjPå
 = 
p_obj
;

121 
OSI¡QInPå
->
MsgPå
 = 
p_void
;

122 
OSI¡QInPå
->
MsgSize
 = 
msg_size
;

123 
OSI¡QInPå
->
Fœgs
 = 
Êags
;

124 
OSI¡QInPå
->
O±
 = 
›t
;

125 
OSI¡QInPå
->
TS
 = 
ts
;

127 
OSI¡QInPå
 = OSI¡QInPå->
NextPå
;

129 
OSRdyLi°
[0].
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

130 
OSRdyLi°
[0].
HódPå
 = &
OSI¡QTaskTCB
;

131 
OSRdyLi°
[0].
TaûPå
 = &
OSI¡QTaskTCB
;

132 
	`OS_PrioIn£π
(0u);

133 i‡(
OSPrioCur
 != 0) {

134 
OSPrioSaved
 = 
OSPrioCur
;

137 *
p_îr
 = 
OS_ERR_NONE
;

139 
OSI¡QOvfCå
++;

140 *
p_îr
 = 
OS_ERR_INT_Q_FULL
;

142 
	`CPU_CRITICAL_EXIT
();

143 
	}
}

159 
	$OS_I¡QRePo°
 ()

161 
CPU_TS
 
ts
;

162 
OS_ERR
 
îr
;

165 
OSI¡QOutPå
->
Ty≥
) {

166 
OS_OBJ_TYPE_FLAG
:

167 #i‡
OS_CFG_FLAG_EN
 > 0u

168 ()
	`OS_FœgPo°
((
OS_FLAG_GRP
 *Ë
OSI¡QOutPå
->
ObjPå
,

169 (
OS_FLAGS
 ) 
OSI¡QOutPå
->
Fœgs
,

170 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

171 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

172 (
OS_ERR
 *)&
îr
);

176 
OS_OBJ_TYPE_Q
:

177 #i‡
OS_CFG_Q_EN
 > 0u

178 
	`OS_QPo°
((
OS_Q
 *Ë
OSI¡QOutPå
->
ObjPå
,

179 (*Ë
OSI¡QOutPå
->
MsgPå
,

180 (
OS_MSG_SIZE
Ë
OSI¡QOutPå
->
MsgSize
,

181 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

182 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

183 (
OS_ERR
 *)&
îr
);

187 
OS_OBJ_TYPE_SEM
:

188 #i‡
OS_CFG_SEM_EN
 > 0u

189 ()
	`OS_SemPo°
((
OS_SEM
 *Ë
OSI¡QOutPå
->
ObjPå
,

190 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

191 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

192 (
OS_ERR
 *)&
îr
);

196 
OS_OBJ_TYPE_TASK_MSG
:

197 #i‡
OS_CFG_TASK_Q_EN
 > 0u

198 
	`OS_TaskQPo°
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

199 (*Ë
OSI¡QOutPå
->
MsgPå
,

200 (
OS_MSG_SIZE
Ë
OSI¡QOutPå
->
MsgSize
,

201 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

202 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

203 (
OS_ERR
 *)&
îr
);

207 
OS_OBJ_TYPE_TASK_RESUME
:

208 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

209 ()
	`OS_TaskResume
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

210 (
OS_ERR
 *)&
îr
);

214 
OS_OBJ_TYPE_TASK_SIGNAL
:

215 ()
	`OS_TaskSemPo°
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

216 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

217 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

218 (
OS_ERR
 *)&
îr
);

221 
OS_OBJ_TYPE_TASK_SUSPEND
:

222 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

223 ()
	`OS_TaskSu•íd
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

224 (
OS_ERR
 *)&
îr
);

228 
OS_OBJ_TYPE_TICK
:

229 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

230 
	`OS_SchedRoundRobö
(&
OSRdyLi°
[
OSPrioSaved
]);

233 ()
	`OS_TaskSemPo°
((
OS_TCB
 *)&
OSTickTaskTCB
,

234 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

235 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

236 (
OS_ERR
 *)&
îr
);

237 #i‡
OS_CFG_TMR_EN
 > 0u

238 
OSTmrUpd©eCå
--;

239 i‡(
OSTmrUpd©eCå
 =(
OS_CTR
)0u) {

240 
OSTmrUpd©eCå
 = 
OSTmrUpd©eC¡
;

241 
ts
 = 
	`OS_TS_GET
();

242 ()
	`OS_TaskSemPo°
((
OS_TCB
 *)&
OSTmrTaskTCB
,

243 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

244 (
CPU_TS
 ) 
ts
,

245 (
OS_ERR
 *)&
îr
);

253 
	}
}

269 
	$OS_I¡QTask
 (*
p_¨g
)

271 
CPU_BOOLEAN
 
d⁄e
;

272 
CPU_TS
 
ts_°¨t
;

273 
CPU_TS
 
ts_íd
;

274 
	`CPU_SR_ALLOC
();

278 
p_¨g
 =Ö_arg;

279 
DEF_ON
) {

280 
d⁄e
 = 
DEF_FALSE
;

281 
d⁄e
 =
DEF_FALSE
) {

282 
	`CPU_CRITICAL_ENTER
();

283 i‡(
OSI¡QNbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

284 
OSRdyLi°
[0].
NbrE¡rõs
 = (
OS_OBJ_QTY
)0u;

285 
OSRdyLi°
[0].
HódPå
 = (
OS_TCB
 *)0;

286 
OSRdyLi°
[0].
TaûPå
 = (
OS_TCB
 *)0;

287 
	`OS_PrioRemove
(0u);

288 
	`CPU_CRITICAL_EXIT
();

289 
	`OSSched
();

290 
d⁄e
 = 
DEF_TRUE
;

292 
	`CPU_CRITICAL_EXIT
();

293 
ts_°¨t
 = 
	`OS_TS_GET
();

294 
	`OS_I¡QRePo°
();

295 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

296 i‡(
OSI¡QTaskTimeMax
 < 
ts_íd
) {

297 
OSI¡QTaskTimeMax
 = 
ts_íd
;

299 
	`CPU_CRITICAL_ENTER
();

300 
OSI¡QOutPå
 = OSI¡QOutPå->
NextPå
;

301 
OSI¡QNbrE¡rõs
--;

302 
	`CPU_CRITICAL_EXIT
();

306 
	}
}

331 
	$OS_I¡QTaskInô
 (
OS_ERR
 *
p_îr
)

333 
OS_INT_Q
 *
p_öt_q
;

334 
OS_INT_Q
 *
p_öt_q_√xt
;

335 
OS_OBJ_QTY
 
i
;

339 #ifde‡
OS_SAFETY_CRITICAL


340 i‡(
p_îr
 =(
OS_ERR
 *)0) {

341 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

346 
OSI¡QOvfCå
 = (
OS_QTY
)0u;

348 i‡(
OSCfg_I¡QBa£På
 =(
OS_INT_Q
 *)0) {

349 *
p_îr
 = 
OS_ERR_INT_Q
;

353 i‡(
OSCfg_I¡QSize
 < (
OS_OBJ_QTY
)2u) {

354 *
p_îr
 = 
OS_ERR_INT_Q_SIZE
;

358 
OSI¡QTaskTimeMax
 = (
CPU_TS
)0;

360 
p_öt_q
 = 
OSCfg_I¡QBa£På
;

361 
p_öt_q_√xt
 = 
p_öt_q
;

362 
p_öt_q_√xt
++;

363 
i
 = 0u; i < 
OSCfg_I¡QSize
; i++) {

364 
p_öt_q
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

365 
p_öt_q
->
ObjPå
 = (*)0;

366 
p_öt_q
->
MsgPå
 = (*)0;

367 
p_öt_q
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

368 
p_öt_q
->
Fœgs
 = (
OS_FLAGS
 )0u;

369 
p_öt_q
->
O±
 = (
OS_OPT
 )0u;

370 
p_öt_q
->
NextPå
 = 
p_öt_q_√xt
;

371 
p_öt_q
++;

372 
p_öt_q_√xt
++;

374 
p_öt_q
--;

375 
p_öt_q_√xt
 = 
OSCfg_I¡QBa£På
;

376 
p_öt_q
->
NextPå
 = 
p_öt_q_√xt
;

377 
OSI¡QInPå
 = 
p_öt_q_√xt
;

378 
OSI¡QOutPå
 = 
p_öt_q_√xt
;

379 
OSI¡QNbrE¡rõs
 = (
OS_OBJ_QTY
)0u;

380 
OSI¡QNbrE¡rõsMax
 = (
OS_OBJ_QTY
)0u;

383 i‡(
OSCfg_I¡QTaskStkBa£På
 =(
CPU_STK
 *)0) {

384 *
p_îr
 = 
OS_ERR_INT_Q_STK_INVALID
;

388 i‡(
OSCfg_I¡QTaskStkSize
 < 
OSCfg_StkSizeMö
) {

389 *
p_îr
 = 
OS_ERR_INT_Q_STK_SIZE_INVALID
;

393 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSI¡QTaskTCB
,

394 (
CPU_CHAR
 *)((*)"uC/OS-III ISR Queue Task"),

395 (
OS_TASK_PTR
 )
OS_I¡QTask
,

397 (
OS_PRIO
 )0u,

398 (
CPU_STK
 *)
OSCfg_I¡QTaskStkBa£På
,

399 (
CPU_STK_SIZE
)
OSCfg_I¡QTaskStkLimô
,

400 (
CPU_STK_SIZE
)
OSCfg_I¡QTaskStkSize
,

401 (
OS_MSG_QTY
 )0u,

402 (
OS_TICK
 )0u,

404 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
),

405 (
OS_ERR
 *)
p_îr
);

406 
	}
}

	@UCOSIII/uCOS-III/Source/os_mem.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_mem__c
 = "$Id: $";

41 #i‡
OS_CFG_MEM_EN
 > 0u

75 
	$OSMemCª©e
 (
OS_MEM
 *
p_mem
,

76 
CPU_CHAR
 *
p_«me
,

77 *
p_addr
,

78 
OS_MEM_QTY
 
n_blks
,

79 
OS_MEM_SIZE
 
blk_size
,

80 
OS_ERR
 *
p_îr
)

82 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

83 
CPU_DATA
 
Æign_msk
;

85 
OS_MEM_QTY
 
i
;

86 
OS_MEM_QTY
 
lo›s
;

87 
CPU_INT08U
 *
p_blk
;

88 **
p_lök
;

89 
	`CPU_SR_ALLOC
();

93 #ifde‡
OS_SAFETY_CRITICAL


94 i‡(
p_îr
 =(
OS_ERR
 *)0) {

95 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

100 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


101 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

102 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

107 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

108 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

109 *
p_îr
 = 
OS_ERR_MEM_CREATE_ISR
;

114 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

115 i‡(
p_addr
 == (*)0) {

116 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_ADDR
;

119 i‡(
n_blks
 < (
OS_MEM_QTY
)2) {

120 *
p_îr
 = 
OS_ERR_MEM_INVALID_BLKS
;

123 i‡(
blk_size
 < (*)) {

124 *
p_îr
 = 
OS_ERR_MEM_INVALID_SIZE
;

127 
Æign_msk
 = (*) - 1u;

128 i‡(
Æign_msk
 > 0) {

129 i‡(((
CPU_ADDR
)
p_addr
 & 
Æign_msk
) != 0u){

130 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_ADDR
;

133 i‡((
blk_size
 & 
Æign_msk
) != 0u) {

134 *
p_îr
 = 
OS_ERR_MEM_INVALID_SIZE
;

140 
p_lök
 = (**)
p_addr
;

141 
p_blk
 = (
CPU_INT08U
 *)
p_addr
;

142 
lo›s
 = 
n_blks
 - 1u;

143 
i
 = 0u; i < 
lo›s
; i++) {

144 
p_blk
 +
blk_size
;

145 *
p_lök
 = (*)
p_blk
;

146 
p_lök
 = (**)(*)
p_blk
;

148 *
p_lök
 = (*)0;

150 
	`OS_CRITICAL_ENTER
();

151 
p_mem
->
Ty≥
 = 
OS_OBJ_TYPE_MEM
;

152 
p_mem
->
NamePå
 = 
p_«me
;

153 
p_mem
->
AddrPå
 = 
p_addr
;

154 
p_mem
->
FªeLi°På
 = 
p_addr
;

155 
p_mem
->
NbrFªe
 = 
n_blks
;

156 
p_mem
->
NbrMax
 = 
n_blks
;

157 
p_mem
->
BlkSize
 = 
blk_size
;

159 #i‡
OS_CFG_DBG_EN
 > 0u

160 
	`OS_MemDbgLi°Add
(
p_mem
);

163 
OSMemQty
++;

165 
	`OS_CRITICAL_EXIT_NO_SCHED
();

166 *
p_îr
 = 
OS_ERR_NONE
;

167 
	}
}

190 *
	$OSMemGë
 (
OS_MEM
 *
p_mem
,

191 
OS_ERR
 *
p_îr
)

193 *
p_blk
;

194 
	`CPU_SR_ALLOC
();

198 #ifde‡
OS_SAFETY_CRITICAL


199 i‡(
p_îr
 =(
OS_ERR
 *)0) {

200 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

205 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

206 i‡(
p_mem
 =(
OS_MEM
 *)0) {

207 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_MEM
;

212 
	`CPU_CRITICAL_ENTER
();

213 i‡(
p_mem
->
NbrFªe
 =(
OS_MEM_QTY
)0) {

214 
	`CPU_CRITICAL_EXIT
();

215 *
p_îr
 = 
OS_ERR_MEM_NO_FREE_BLKS
;

218 
p_blk
 = 
p_mem
->
FªeLi°På
;

219 
p_mem
->
FªeLi°På
 = *(**)
p_blk
;

220 
p_mem
->
NbrFªe
--;

221 
	`CPU_CRITICAL_EXIT
();

222 *
p_îr
 = 
OS_ERR_NONE
;

223  (
p_blk
);

224 
	}
}

247 
	$OSMemPut
 (
OS_MEM
 *
p_mem
,

248 *
p_blk
,

249 
OS_ERR
 *
p_îr
)

251 
	`CPU_SR_ALLOC
();

255 #ifde‡
OS_SAFETY_CRITICAL


256 i‡(
p_îr
 =(
OS_ERR
 *)0) {

257 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

262 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

263 i‡(
p_mem
 =(
OS_MEM
 *)0) {

264 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_MEM
;

267 i‡(
p_blk
 == (*)0) {

268 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_BLK
;

273 
	`CPU_CRITICAL_ENTER
();

274 i‡(
p_mem
->
NbrFªe
 >p_mem->
NbrMax
) {

275 
	`CPU_CRITICAL_EXIT
();

276 *
p_îr
 = 
OS_ERR_MEM_FULL
;

279 *(**)
p_blk
 = 
p_mem
->
FªeLi°På
;

280 
p_mem
->
FªeLi°På
 = 
p_blk
;

281 
p_mem
->
NbrFªe
++;

282 
	`CPU_CRITICAL_EXIT
();

283 *
p_îr
 = 
OS_ERR_NONE
;

284 
	}
}

301 #i‡
OS_CFG_DBG_EN
 > 0u

302 
	$OS_MemDbgLi°Add
 (
OS_MEM
 *
p_mem
)

304 
p_mem
->
DbgPªvPå
 = (
OS_MEM
 *)0;

305 i‡(
OSMemDbgLi°På
 =(
OS_MEM
 *)0) {

306 
p_mem
->
DbgNextPå
 = (
OS_MEM
 *)0;

308 
p_mem
->
DbgNextPå
 = 
OSMemDbgLi°På
;

309 
OSMemDbgLi°På
->
DbgPªvPå
 = 
p_mem
;

311 
OSMemDbgLi°På
 = 
p_mem
;

312 
	}
}

331 
	$OS_MemInô
 (
OS_ERR
 *
p_îr
)

333 #ifde‡
OS_SAFETY_CRITICAL


334 i‡(
p_îr
 =(
OS_ERR
 *)0) {

335 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

340 #i‡
OS_CFG_DBG_EN
 > 0u

341 
OSMemDbgLi°På
 = (
OS_MEM
 *)0;

344 
OSMemQty
 = (
OS_OBJ_QTY
)0;

345 *
p_îr
 = 
OS_ERR_NONE
;

346 
	}
}

	@UCOSIII/uCOS-III/Source/os_msg.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_msg__c
 = "$Id: $";

41 #i‡
OS_MSG_EN
 > 0u

62 
	$OS_MsgPoﬁCª©e
 (
OS_MSG
 *
p_msg
,

63 
OS_MSG_QTY
 
size
)

65 
OS_MSG
 *
p_msg1
;

66 
OS_MSG
 *
p_msg2
;

67 
OS_MSG_QTY
 
i
;

68 
OS_MSG_QTY
 
lo›s
;

72 
p_msg1
 = 
p_msg
;

73 
p_msg2
 = 
p_msg
;

74 
p_msg2
++;

75 
lo›s
 = 
size
 - 1u;

76 
i
 = 0u; i < 
lo›s
; i++) {

77 
p_msg1
->
NextPå
 = 
p_msg2
;

78 
p_msg1
->
MsgPå
 = (*)0;

79 
p_msg1
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

80 
p_msg1
->
MsgTS
 = (
CPU_TS
 )0u;

81 
p_msg1
++;

82 
p_msg2
++;

84 
p_msg1
->
NextPå
 = (
OS_MSG
 *)0;

85 
p_msg1
->
MsgPå
 = (*)0;

86 
p_msg1
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

87 
p_msg1
->
MsgTS
 = (
CPU_TS
 )0u;

88 
	}
}

109 
	$OS_MsgPoﬁInô
 (
OS_ERR
 *
p_îr
)

111 #ifde‡
OS_SAFETY_CRITICAL


112 i‡(
p_îr
 =(
OS_ERR
 *)0) {

113 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

118 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

119 i‡(
OSCfg_MsgPoﬁBa£På
 =(
OS_MSG
 *)0) {

120 *
p_îr
 = 
OS_ERR_MSG_POOL_NULL_PTR
;

123 i‡(
OSCfg_MsgPoﬁSize
 =(
OS_MSG_QTY
)0) {

124 *
p_îr
 = 
OS_ERR_MSG_POOL_EMPTY
;

129 
	`OS_MsgPoﬁCª©e
(
OSCfg_MsgPoﬁBa£På
,

130 
OSCfg_MsgPoﬁSize
);

131 
OSMsgPoﬁ
.
NextPå
 = 
OSCfg_MsgPoﬁBa£På
;

132 
OSMsgPoﬁ
.
NbrFªe
 = 
OSCfg_MsgPoﬁSize
;

133 
OSMsgPoﬁ
.
NbrU£d
 = (
OS_MSG_QTY
)0;

134 
OSMsgPoﬁ
.
NbrU£dMax
 = (
OS_MSG_QTY
)0;

135 *
p_îr
 = 
OS_ERR_NONE
;

136 
	}
}

154 
OS_MSG_QTY
 
	$OS_MsgQFªeAŒ
 (
OS_MSG_Q
 *
p_msg_q
)

156 
OS_MSG
 *
p_msg
;

157 
OS_MSG_QTY
 
qty
;

161 
qty
 = 
p_msg_q
->
NbrE¡rõs
;

162 i‡(
p_msg_q
->
NbrE¡rõs
 > (
OS_MSG_QTY
)0) {

163 
p_msg
 = 
p_msg_q
->
InPå
;

164 
p_msg
->
NextPå
 = 
OSMsgPoﬁ
.NextPtr;

165 
OSMsgPoﬁ
.
NextPå
 = 
p_msg_q
->
OutPå
;

166 
OSMsgPoﬁ
.
NbrU£d
 -
p_msg_q
->
NbrE¡rõs
;

167 
OSMsgPoﬁ
.
NbrFªe
 +
p_msg_q
->
NbrE¡rõs
;

168 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

169 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
)0;

170 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

171 
p_msg_q
->
OutPå
 = (
OS_MSG
 *)0;

173  (
qty
);

174 
	}
}

194 
	$OS_MsgQInô
 (
OS_MSG_Q
 *
p_msg_q
,

195 
OS_MSG_QTY
 
size
)

197 
p_msg_q
->
NbrE¡rõsSize
 = (
OS_MSG_QTY
)
size
;

198 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

199 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
)0;

200 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

201 
p_msg_q
->
OutPå
 = (
OS_MSG
 *)0;

202 
	}
}

229 *
	$OS_MsgQGë
 (
OS_MSG_Q
 *
p_msg_q
,

230 
OS_MSG_SIZE
 *
p_msg_size
,

231 
CPU_TS
 *
p_ts
,

232 
OS_ERR
 *
p_îr
)

234 
OS_MSG
 *
p_msg
;

235 *
p_void
;

239 #ifde‡
OS_SAFETY_CRITICAL


240 i‡(
p_îr
 =(
OS_ERR
 *)0) {

241 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

246 i‡(
p_msg_q
->
NbrE¡rõs
 =(
OS_MSG_QTY
)0) {

247 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

248 i‡(
p_ts
 !(
CPU_TS
 *)0) {

249 *
p_ts
 = (
CPU_TS
 )0;

251 *
p_îr
 = 
OS_ERR_Q_EMPTY
;

255 
p_msg
 = 
p_msg_q
->
OutPå
;

256 
p_void
 = 
p_msg
->
MsgPå
;

257 *
p_msg_size
 = 
p_msg
->
MsgSize
;

258 i‡(
p_ts
 !(
CPU_TS
 *)0) {

259 *
p_ts
 = 
p_msg
->
MsgTS
;

261 
p_msg_q
->
OutPå
 = 
p_msg
->
NextPå
;

262 i‡(
p_msg_q
->
OutPå
 =(
OS_MSG
 *)0) {

263 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

264 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

266 
p_msg_q
->
NbrE¡rõs
--;

268 
p_msg
->
NextPå
 = 
OSMsgPoﬁ
.NextPtr;

269 
OSMsgPoﬁ
.
NextPå
 = 
p_msg
;

270 
OSMsgPoﬁ
.
NbrFªe
++;

271 
OSMsgPoﬁ
.
NbrU£d
--;

272 *
p_îr
 = 
OS_ERR_NONE
;

273  (
p_void
);

274 
	}
}

309 
	$OS_MsgQPut
 (
OS_MSG_Q
 *
p_msg_q
,

310 *
p_void
,

311 
OS_MSG_SIZE
 
msg_size
,

312 
OS_OPT
 
›t
,

313 
CPU_TS
 
ts
,

314 
OS_ERR
 *
p_îr
)

316 
OS_MSG
 *
p_msg
;

317 
OS_MSG
 *
p_msg_ö
;

321 #ifde‡
OS_SAFETY_CRITICAL


322 i‡(
p_îr
 =(
OS_ERR
 *)0) {

323 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

328 i‡(
p_msg_q
->
NbrE¡rõs
 >p_msg_q->
NbrE¡rõsSize
) {

329 *
p_îr
 = 
OS_ERR_Q_MAX
;

333 i‡(
OSMsgPoﬁ
.
NbrFªe
 =(
OS_MSG_QTY
)0) {

334 *
p_îr
 = 
OS_ERR_MSG_POOL_EMPTY
;

338 
p_msg
 = 
OSMsgPoﬁ
.
NextPå
;

339 
OSMsgPoﬁ
.
NextPå
 = 
p_msg
->NextPtr;

340 
OSMsgPoﬁ
.
NbrFªe
--;

341 
OSMsgPoﬁ
.
NbrU£d
++;

342 i‡(
OSMsgPoﬁ
.
NbrU£dMax
 < OSMsgPoﬁ.
NbrU£d
) {

343 
OSMsgPoﬁ
.
NbrU£dMax
 = OSMsgPoﬁ.
NbrU£d
;

345 i‡(
p_msg_q
->
NbrE¡rõs
 =(
OS_MSG_QTY
)0) {

346 
p_msg_q
->
InPå
 = 
p_msg
;

347 
p_msg_q
->
OutPå
 = 
p_msg
;

348 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)1;

350 i‡((
›t
 & 
OS_OPT_POST_LIFO
Ë=
OS_OPT_POST_FIFO
) {

351 
p_msg_ö
 = 
p_msg_q
->
InPå
;

352 
p_msg_ö
->
NextPå
 = 
p_msg
;

353 
p_msg
->
NextPå
 = (
OS_MSG
 *)0;

354 
p_msg_q
->
InPå
 = 
p_msg
;

356 
p_msg
->
NextPå
 = 
p_msg_q
->
OutPå
;

357 
p_msg_q
->
OutPå
 = 
p_msg
;

359 
p_msg_q
->
NbrE¡rõs
++;

361 i‡(
p_msg_q
->
NbrE¡rõsMax
 <Ö_msg_q->
NbrE¡rõs
) {

362 
p_msg_q
->
NbrE¡rõsMax
 =Ö_msg_q->
NbrE¡rõs
;

364 
p_msg
->
MsgPå
 = 
p_void
;

365 
p_msg
->
MsgSize
 = 
msg_size
;

366 
p_msg
->
MsgTS
 = 
ts
;

367 *
p_îr
 = 
OS_ERR_NONE
;

368 
	}
}

	@UCOSIII/uCOS-III/Source/os_mutex.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_muãx__c
 = "$Id: $";

41 #i‡
OS_CFG_MUTEX_EN
 > 0u

67 
	$OSMuãxCª©e
 (
OS_MUTEX
 *
p_muãx
,

68 
CPU_CHAR
 *
p_«me
,

69 
OS_ERR
 *
p_îr
)

71 
	`CPU_SR_ALLOC
();

75 #ifde‡
OS_SAFETY_CRITICAL


76 i‡(
p_îr
 =(
OS_ERR
 *)0) {

77 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

82 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


83 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

84 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

89 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

90 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

91 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

96 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

97 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

98 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

103 
	`OS_CRITICAL_ENTER
();

104 
p_muãx
->
Ty≥
 = 
OS_OBJ_TYPE_MUTEX
;

105 
p_muãx
->
NamePå
 = 
p_«me
;

106 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

107 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

108 
p_muãx
->
TS
 = (
CPU_TS
 )0;

109 
p_muãx
->
Ow√rOrigöÆPrio
 = 
OS_CFG_PRIO_MAX
;

110 
	`OS_PídLi°Inô
(&
p_muãx
->
PídLi°
);

112 #i‡
OS_CFG_DBG_EN
 > 0u

113 
	`OS_MuãxDbgLi°Add
(
p_muãx
);

115 
OSMuãxQty
++;

117 
	`OS_CRITICAL_EXIT_NO_SCHED
();

118 *
p_îr
 = 
OS_ERR_NONE
;

119 
	}
}

159 #i‡
OS_CFG_MUTEX_DEL_EN
 > 0u

160 
OS_OBJ_QTY
 
	$OSMuãxDñ
 (
OS_MUTEX
 *
p_muãx
,

161 
OS_OPT
 
›t
,

162 
OS_ERR
 *
p_îr
)

164 
OS_OBJ_QTY
 
˙t
;

165 
OS_OBJ_QTY
 
nbr_èsks
;

166 
OS_PEND_DATA
 *
p_≥nd_d©a
;

167 
OS_PEND_LIST
 *
p_≥nd_li°
;

168 
OS_TCB
 *
p_tcb
;

169 
OS_TCB
 *
p_tcb_ow√r
;

170 
CPU_TS
 
ts
;

171 
	`CPU_SR_ALLOC
();

175 #ifde‡
OS_SAFETY_CRITICAL


176 i‡(
p_îr
 =(
OS_ERR
 *)0) {

177 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

178  ((
OS_OBJ_QTY
)0);

182 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

183 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

184 *
p_îr
 = 
OS_ERR_DEL_ISR
;

185  ((
OS_OBJ_QTY
)0);

189 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

190 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

191 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

192  ((
OS_OBJ_QTY
)0);

194 
›t
) {

195 
OS_OPT_DEL_NO_PEND
:

196 
OS_OPT_DEL_ALWAYS
:

200 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

201  ((
OS_OBJ_QTY
)0);

205 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

206 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

207 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

208  ((
OS_OBJ_QTY
)0);

212 
	`OS_CRITICAL_ENTER
();

213 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

214 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

215 
nbr_èsks
 = 
˙t
;

216 
›t
) {

217 
OS_OPT_DEL_NO_PEND
:

218 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

219 #i‡
OS_CFG_DBG_EN
 > 0u

220 
	`OS_MuãxDbgLi°Remove
(
p_muãx
);

222 
OSMuãxQty
--;

223 
	`OS_MuãxCÃ
(
p_muãx
);

224 
	`OS_CRITICAL_EXIT
();

225 *
p_îr
 = 
OS_ERR_NONE
;

227 
	`OS_CRITICAL_EXIT
();

228 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

232 
OS_OPT_DEL_ALWAYS
:

233 
p_tcb_ow√r
 = 
p_muãx
->
Ow√rTCBPå
;

234 i‡((
p_tcb_ow√r
 !(
OS_TCB
 *)0) &&

235 (
p_tcb_ow√r
->
Prio
 !
p_muãx
->
Ow√rOrigöÆPrio
)) {

236 
p_tcb_ow√r
->
TaskSèã
) {

237 
OS_TASK_STATE_RDY
:

238 
	`OS_RdyLi°Remove
(
p_tcb_ow√r
);

239 
p_tcb_ow√r
->
Prio
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

240 
	`OS_PrioIn£π
(
p_tcb_ow√r
->
Prio
);

241 
	`OS_RdyLi°In£πTaû
(
p_tcb_ow√r
);

244 
OS_TASK_STATE_DLY
:

245 
OS_TASK_STATE_SUSPENDED
:

246 
OS_TASK_STATE_DLY_SUSPENDED
:

247 
p_tcb_ow√r
->
Prio
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

250 
OS_TASK_STATE_PEND
:

251 
OS_TASK_STATE_PEND_TIMEOUT
:

252 
OS_TASK_STATE_PEND_SUSPENDED
:

253 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

254 
	`OS_PídLi°Ch™gePrio
(
p_tcb_ow√r
,

255 
p_muãx
->
Ow√rOrigöÆPrio
);

259 
	`OS_CRITICAL_EXIT
();

260 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

261  ((
OS_OBJ_QTY
)0);

265 
ts
 = 
	`OS_TS_GET
();

266 
˙t
 > 0u) {

267 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

268 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

269 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

270 
p_tcb
,

271 
ts
);

272 
˙t
--;

274 #i‡
OS_CFG_DBG_EN
 > 0u

275 
	`OS_MuãxDbgLi°Remove
(
p_muãx
);

277 
OSMuãxQty
--;

278 
	`OS_MuãxCÃ
(
p_muãx
);

279 
	`OS_CRITICAL_EXIT_NO_SCHED
();

280 
	`OSSched
();

281 *
p_îr
 = 
OS_ERR_NONE
;

285 
	`OS_CRITICAL_EXIT
();

286 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

289  (
nbr_èsks
);

290 
	}
}

339 
	$OSMuãxPíd
 (
OS_MUTEX
 *
p_muãx
,

340 
OS_TICK
 
timeout
,

341 
OS_OPT
 
›t
,

342 
CPU_TS
 *
p_ts
,

343 
OS_ERR
 *
p_îr
)

345 
OS_PEND_DATA
 
≥nd_d©a
;

346 
OS_TCB
 *
p_tcb
;

347 
	`CPU_SR_ALLOC
();

351 #ifde‡
OS_SAFETY_CRITICAL


352 i‡(
p_îr
 =(
OS_ERR
 *)0) {

353 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

358 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

359 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

360 *
p_îr
 = 
OS_ERR_PEND_ISR
;

365 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

366 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

367 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

370 
›t
) {

371 
OS_OPT_PEND_BLOCKING
:

372 
OS_OPT_PEND_NON_BLOCKING
:

376 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

381 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

382 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

383 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

388 i‡(
p_ts
 !(
CPU_TS
 *)0) {

389 *
p_ts
 = (
CPU_TS
 )0;

392 
	`CPU_CRITICAL_ENTER
();

393 i‡(
p_muãx
->
Ow√rNe°ögCå
 =(
OS_NESTING_CTR
)0) {

394 
p_muãx
->
Ow√rTCBPå
 = 
OSTCBCurPå
;

395 
p_muãx
->
Ow√rOrigöÆPrio
 = 
OSTCBCurPå
->
Prio
;

396 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)1;

397 i‡(
p_ts
 !(
CPU_TS
 *)0) {

398 *
p_ts
 = 
p_muãx
->
TS
;

400 
	`CPU_CRITICAL_EXIT
();

401 *
p_îr
 = 
OS_ERR_NONE
;

405 i‡(
OSTCBCurPå
 =
p_muãx
->
Ow√rTCBPå
) {

406 
p_muãx
->
Ow√rNe°ögCå
++;

407 i‡(
p_ts
 !(
CPU_TS
 *)0) {

408 *
p_ts
 = 
p_muãx
->
TS
;

410 
	`CPU_CRITICAL_EXIT
();

411 *
p_îr
 = 
OS_ERR_MUTEX_OWNER
;

415 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

416 
	`CPU_CRITICAL_EXIT
();

417 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

420 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

421 
	`CPU_CRITICAL_EXIT
();

422 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

427 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

428 
p_tcb
 = 
p_muãx
->
Ow√rTCBPå
;

429 i‡(
p_tcb
->
Prio
 > 
OSTCBCurPå
->Prio) {

430 
p_tcb
->
TaskSèã
) {

431 
OS_TASK_STATE_RDY
:

432 
	`OS_RdyLi°Remove
(
p_tcb
);

433 
p_tcb
->
Prio
 = 
OSTCBCurPå
->Prio;

434 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

435 
	`OS_RdyLi°In£πHód
(
p_tcb
);

438 
OS_TASK_STATE_DLY
:

439 
OS_TASK_STATE_DLY_SUSPENDED
:

440 
OS_TASK_STATE_SUSPENDED
:

441 
p_tcb
->
Prio
 = 
OSTCBCurPå
->Prio;

444 
OS_TASK_STATE_PEND
:

445 
OS_TASK_STATE_PEND_TIMEOUT
:

446 
OS_TASK_STATE_PEND_SUSPENDED
:

447 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

448 
	`OS_PídLi°Ch™gePrio
(
p_tcb
,

449 
OSTCBCurPå
->
Prio
);

453 
	`OS_CRITICAL_EXIT
();

454 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

459 
	`OS_Píd
(&
≥nd_d©a
,

460 (
OS_PEND_OBJ
 *)((*)
p_muãx
),

461 
OS_TASK_PEND_ON_MUTEX
,

462 
timeout
);

464 
	`OS_CRITICAL_EXIT_NO_SCHED
();

466 
	`OSSched
();

468 
	`CPU_CRITICAL_ENTER
();

469 
OSTCBCurPå
->
PídSètus
) {

470 
OS_STATUS_PEND_OK
:

471 i‡(
p_ts
 !(
CPU_TS
 *)0) {

472 *
p_ts
 = 
OSTCBCurPå
->
TS
;

474 *
p_îr
 = 
OS_ERR_NONE
;

477 
OS_STATUS_PEND_ABORT
:

478 i‡(
p_ts
 !(
CPU_TS
 *)0) {

479 *
p_ts
 = 
OSTCBCurPå
->
TS
;

481 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

484 
OS_STATUS_PEND_TIMEOUT
:

485 i‡(
p_ts
 !(
CPU_TS
 *)0) {

486 *
p_ts
 = (
CPU_TS
 )0;

488 *
p_îr
 = 
OS_ERR_TIMEOUT
;

491 
OS_STATUS_PEND_DEL
:

492 i‡(
p_ts
 !(
CPU_TS
 *)0) {

493 *
p_ts
 = 
OSTCBCurPå
->
TS
;

495 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

499 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

502 
	`CPU_CRITICAL_EXIT
();

503 
	}
}

537 #i‡
OS_CFG_MUTEX_PEND_ABORT_EN
 > 0u

538 
OS_OBJ_QTY
 
	$OSMuãxPídAb‹t
 (
OS_MUTEX
 *
p_muãx
,

539 
OS_OPT
 
›t
,

540 
OS_ERR
 *
p_îr
)

542 
OS_PEND_LIST
 *
p_≥nd_li°
;

543 
OS_TCB
 *
p_tcb
;

544 
CPU_TS
 
ts
;

545 
OS_OBJ_QTY
 
nbr_èsks
;

546 
	`CPU_SR_ALLOC
();

550 #ifde‡
OS_SAFETY_CRITICAL


551 i‡(
p_îr
 =(
OS_ERR
 *)0) {

552 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

553  ((
OS_OBJ_QTY
)0u);

557 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

558 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

559 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

560  ((
OS_OBJ_QTY
)0u);

564 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

565 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

566 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

567  ((
OS_OBJ_QTY
)0u);

569 
›t
) {

570 
OS_OPT_PEND_ABORT_1
:

571 
OS_OPT_PEND_ABORT_ALL
:

572 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

573 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

577 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

578  ((
OS_OBJ_QTY
)0u);

582 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

583 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

584 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

585  ((
OS_OBJ_QTY
)0u);

589 
	`CPU_CRITICAL_ENTER
();

590 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

591 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

592 
	`CPU_CRITICAL_EXIT
();

593 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

594  ((
OS_OBJ_QTY
)0u);

597 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

598 
nbr_èsks
 = 0u;

599 
ts
 = 
	`OS_TS_GET
();

600 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

601 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

602 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

603 
p_tcb
,

604 
ts
);

605 
nbr_èsks
++;

606 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

610 
	`OS_CRITICAL_EXIT_NO_SCHED
();

612 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

613 
	`OSSched
();

616 *
p_îr
 = 
OS_ERR_NONE
;

617  (
nbr_èsks
);

618 
	}
}

648 
	$OSMuãxPo°
 (
OS_MUTEX
 *
p_muãx
,

649 
OS_OPT
 
›t
,

650 
OS_ERR
 *
p_îr
)

652 
OS_PEND_LIST
 *
p_≥nd_li°
;

653 
OS_TCB
 *
p_tcb
;

654 
CPU_TS
 
ts
;

655 
	`CPU_SR_ALLOC
();

659 #ifde‡
OS_SAFETY_CRITICAL


660 i‡(
p_îr
 =(
OS_ERR
 *)0) {

661 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

666 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

667 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

668 *
p_îr
 = 
OS_ERR_POST_ISR
;

673 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

674 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

675 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

678 
›t
) {

679 
OS_OPT_POST_NONE
:

680 
OS_OPT_POST_NO_SCHED
:

684 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

689 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

690 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

691 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

696 
	`CPU_CRITICAL_ENTER
();

697 i‡(
OSTCBCurPå
 !
p_muãx
->
Ow√rTCBPå
) {

698 
	`CPU_CRITICAL_EXIT
();

699 *
p_îr
 = 
OS_ERR_MUTEX_NOT_OWNER
;

703 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

704 
ts
 = 
	`OS_TS_GET
();

705 
p_muãx
->
TS
 = 
ts
;

706 
p_muãx
->
Ow√rNe°ögCå
--;

707 i‡(
p_muãx
->
Ow√rNe°ögCå
 > (
OS_NESTING_CTR
)0) {

708 
	`OS_CRITICAL_EXIT
();

709 *
p_îr
 = 
OS_ERR_MUTEX_NESTING
;

713 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

714 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

715 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

716 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

717 
	`OS_CRITICAL_EXIT
();

718 *
p_îr
 = 
OS_ERR_NONE
;

722 i‡(
OSTCBCurPå
->
Prio
 !
p_muãx
->
Ow√rOrigöÆPrio
) {

723 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

724 
OSTCBCurPå
->
Prio
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

725 
	`OS_PrioIn£π
(
OSTCBCurPå
->
Prio
);

726 
	`OS_RdyLi°In£πTaû
(
OSTCBCurPå
);

727 
OSPrioCur
 = 
OSTCBCurPå
->
Prio
;

730 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

731 
p_muãx
->
Ow√rTCBPå
 = 
p_tcb
;

732 
p_muãx
->
Ow√rOrigöÆPrio
 = 
p_tcb
->
Prio
;

733 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)1;

735 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

736 (
OS_TCB
 *)
p_tcb
,

738 (
OS_MSG_SIZE
 )0,

739 (
CPU_TS
 )
ts
);

741 
	`OS_CRITICAL_EXIT_NO_SCHED
();

743 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

744 
	`OSSched
();

747 *
p_îr
 = 
OS_ERR_NONE
;

748 
	}
}

767 
	$OS_MuãxCÃ
 (
OS_MUTEX
 *
p_muãx
)

769 
p_muãx
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

770 
p_muãx
->
NamePå
 = (
CPU_CHAR
 *)((*)"?MUTEX");

771 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

772 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

773 
p_muãx
->
TS
 = (
CPU_TS
 )0;

774 
p_muãx
->
Ow√rOrigöÆPrio
 = 
OS_CFG_PRIO_MAX
;

775 
	`OS_PídLi°Inô
(&
p_muãx
->
PídLi°
);

776 
	}
}

794 #i‡
OS_CFG_DBG_EN
 > 0u

795 
	$OS_MuãxDbgLi°Add
 (
OS_MUTEX
 *
p_muãx
)

797 
p_muãx
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

798 
p_muãx
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

799 i‡(
OSMuãxDbgLi°På
 =(
OS_MUTEX
 *)0) {

800 
p_muãx
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

802 
p_muãx
->
DbgNextPå
 = 
OSMuãxDbgLi°På
;

803 
OSMuãxDbgLi°På
->
DbgPªvPå
 = 
p_muãx
;

805 
OSMuãxDbgLi°På
 = 
p_muãx
;

806 
	}
}

810 
	$OS_MuãxDbgLi°Remove
 (
OS_MUTEX
 *
p_muãx
)

812 
OS_MUTEX
 *
p_muãx_√xt
;

813 
OS_MUTEX
 *
p_muãx_¥ev
;

816 
p_muãx_¥ev
 = 
p_muãx
->
DbgPªvPå
;

817 
p_muãx_√xt
 = 
p_muãx
->
DbgNextPå
;

819 i‡(
p_muãx_¥ev
 =(
OS_MUTEX
 *)0) {

820 
OSMuãxDbgLi°På
 = 
p_muãx_√xt
;

821 i‡(
p_muãx_√xt
 !(
OS_MUTEX
 *)0) {

822 
p_muãx_√xt
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

824 
p_muãx
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

826 } i‡(
p_muãx_√xt
 =(
OS_MUTEX
 *)0) {

827 
p_muãx_¥ev
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

828 
p_muãx
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

831 
p_muãx_¥ev
->
DbgNextPå
 = 
p_muãx_√xt
;

832 
p_muãx_√xt
->
DbgPªvPå
 = 
p_muãx_¥ev
;

833 
p_muãx
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

834 
p_muãx
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

836 
	}
}

857 
	$OS_MuãxInô
 (
OS_ERR
 *
p_îr
)

859 #ifde‡
OS_SAFETY_CRITICAL


860 i‡(
p_îr
 =(
OS_ERR
 *)0) {

861 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

866 #i‡
OS_CFG_DBG_EN
 > 0u

867 
OSMuãxDbgLi°På
 = (
OS_MUTEX
 *)0;

870 
OSMuãxQty
 = (
OS_OBJ_QTY
)0;

871 *
p_îr
 = 
OS_ERR_NONE
;

872 
	}
}

	@UCOSIII/uCOS-III/Source/os_pend_multi.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_≥nd_mu…i__c
 = "$Id: $";

41 #i‡(((
OS_CFG_Q_EN
 > 0uË|| (
OS_CFG_SEM_EN
 > 0u)Ë&& (
OS_CFG_PEND_MULTI_EN
 > 0u))

121 
OS_OBJ_QTY
 
	$OSPídMu…i
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

122 
OS_OBJ_QTY
 
tbl_size
,

123 
OS_TICK
 
timeout
,

124 
OS_OPT
 
›t
,

125 
OS_ERR
 *
p_îr
)

127 
CPU_BOOLEAN
 
vÆid
;

128 
OS_OBJ_QTY
 
nbr_obj_rdy
;

129 
	`CPU_SR_ALLOC
();

133 #ifde‡
OS_SAFETY_CRITICAL


134 i‡(
p_îr
 =(
OS_ERR
 *)0) {

135 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

136  ((
OS_OBJ_QTY
)0);

140 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

141 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

142 *
p_îr
 = 
OS_ERR_PEND_ISR
;

143  ((
OS_OBJ_QTY
)0);

147 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

148 i‡(
p_≥nd_d©a_tbl
 =(
OS_PEND_DATA
 *)0) {

149 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

150  ((
OS_OBJ_QTY
)0);

152 i‡(
tbl_size
 =(
OS_OBJ_QTY
)0) {

153 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

154  ((
OS_OBJ_QTY
)0);

156 
›t
) {

157 
OS_OPT_PEND_BLOCKING
:

158 
OS_OPT_PEND_NON_BLOCKING
:

162 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

163  ((
OS_OBJ_QTY
)0);

167 
vÆid
 = 
	`OS_PídMu…iVÆid©e
(
p_≥nd_d©a_tbl
,

168 
tbl_size
);

169 i‡(
vÆid
 =
DEF_FALSE
) {

170 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

171  ((
OS_OBJ_QTY
)0);

175 
	`CPU_CRITICAL_ENTER
();

176 
nbr_obj_rdy
 = 
	`OS_PídMu…iGëRdy
(
p_≥nd_d©a_tbl
,

177 
tbl_size
);

178 i‡(
nbr_obj_rdy
 > (
OS_OBJ_QTY
)0) {

179 
	`CPU_CRITICAL_EXIT
();

180 *
p_îr
 = 
OS_ERR_NONE
;

181  ((
OS_OBJ_QTY
)
nbr_obj_rdy
);

184 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

185 
	`CPU_CRITICAL_EXIT
();

186 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

187  ((
OS_OBJ_QTY
)0);

189 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

190 
	`CPU_CRITICAL_EXIT
();

191 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

192  ((
OS_OBJ_QTY
)0);

195 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

197 
	`OS_PídMu…iWaô
(
p_≥nd_d©a_tbl
,

198 
tbl_size
,

199 
timeout
);

201 
	`OS_CRITICAL_EXIT_NO_SCHED
();

203 
	`OSSched
();

205 
	`CPU_CRITICAL_ENTER
();

206 
OSTCBCurPå
->
PídSètus
) {

207 
OS_STATUS_PEND_OK
:

208 *
p_îr
 = 
OS_ERR_NONE
;

211 
OS_STATUS_PEND_ABORT
:

212 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

215 
OS_STATUS_PEND_TIMEOUT
:

216 *
p_îr
 = 
OS_ERR_TIMEOUT
;

219 
OS_STATUS_PEND_DEL
:

220 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

224 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

228 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

229 
	`CPU_CRITICAL_EXIT
();

231  ((
OS_OBJ_QTY
)1);

232 
	}
}

253 
OS_OBJ_QTY
 
	$OS_PídMu…iGëRdy
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

254 
OS_OBJ_QTY
 
tbl_size
)

256 
OS_OBJ_QTY
 
i
;

257 
OS_OBJ_QTY
 
nbr_obj_rdy
;

258 #i‡
OS_CFG_Q_EN
 > 0u

259 
OS_ERR
 
îr
;

260 
OS_MSG_SIZE
 
msg_size
;

261 
OS_Q
 *
p_q
;

262 *
p_void
;

263 
CPU_TS
 
ts
;

265 #i‡
OS_CFG_SEM_EN
 > 0u

266 
OS_SEM
 *
p_£m
;

271 
nbr_obj_rdy
 = (
OS_OBJ_QTY
)0;

272 
i
 = 0u; i < 
tbl_size
; i++) {

273 
p_≥nd_d©a_tbl
->
RdyObjPå
 = (
OS_PEND_OBJ
 *)0;

274 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = (*)0;

275 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = (
OS_MSG_SIZE
 )0;

276 
p_≥nd_d©a_tbl
->
RdyTS
 = (
CPU_TS
 )0;

277 
p_≥nd_d©a_tbl
->
NextPå
 = (
OS_PEND_DATA
 *)0;

278 
p_≥nd_d©a_tbl
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

279 
p_≥nd_d©a_tbl
->
TCBPå
 = (
OS_TCB
 *)0;

280 #i‡
OS_CFG_Q_EN
 > 0u

281 
p_q
 = (
OS_Q
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

282 i‡(
p_q
->
Ty≥
 =
OS_OBJ_TYPE_Q
) {

283 
p_void
 = 
	`OS_MsgQGë
(&
p_q
->
MsgQ
,

284 &
msg_size
,

285 &
ts
,

286 &
îr
);

287 i‡(
îr
 =
OS_ERR_NONE
) {

288 
p_≥nd_d©a_tbl
->
RdyObjPå
 =Ö_≥nd_d©a_tbl->
PídObjPå
;

289 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = 
p_void
;

290 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = 
msg_size
;

291 
p_≥nd_d©a_tbl
->
RdyTS
 = 
ts
;

292 
nbr_obj_rdy
++;

297 #i‡
OS_CFG_SEM_EN
 > 0u

298 
p_£m
 = (
OS_SEM
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

299 i‡(
p_£m
->
Ty≥
 =
OS_OBJ_TYPE_SEM
) {

300 i‡(
p_£m
->
Cå
 > 0u) {

301 
p_£m
->
Cå
--;

302 
p_≥nd_d©a_tbl
->
RdyObjPå
 =Ö_≥nd_d©a_tbl->
PídObjPå
;

303 
p_≥nd_d©a_tbl
->
RdyTS
 = 
p_£m
->
TS
;

304 
nbr_obj_rdy
++;

309 
p_≥nd_d©a_tbl
++;

311  (
nbr_obj_rdy
);

312 
	}
}

334 
CPU_BOOLEAN
 
	$OS_PídMu…iVÆid©e
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

335 
OS_OBJ_QTY
 
tbl_size
)

337 
OS_OBJ_QTY
 
i
;

338 
OS_OBJ_QTY
 
˘r
;

339 #i‡
OS_CFG_SEM_EN
 > 0u

340 
OS_SEM
 *
p_£m
;

342 #i‡
OS_CFG_Q_EN
 > 0u

343 
OS_Q
 *
p_q
;

347 
i
 = 0u; i < 
tbl_size
; i++) {

348 i‡(
p_≥nd_d©a_tbl
->
PídObjPå
 =(
OS_PEND_OBJ
 *)0) {

349  (
DEF_FALSE
);

352 
˘r
 = 0u;

353 #i‡
OS_CFG_SEM_EN
 > 0u

354 
p_£m
 = (
OS_SEM
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

355 i‡(
p_£m
->
Ty≥
 =
OS_OBJ_TYPE_SEM
) {

356 
˘r
++;

360 #i‡
OS_CFG_Q_EN
 > 0u

361 
p_q
 = (
OS_Q
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

362 i‡(
p_q
->
Ty≥
 =
OS_OBJ_TYPE_Q
) {

363 
˘r
++;

367 i‡(
˘r
 =(
OS_OBJ_QTY
)0) {

368  (
DEF_FALSE
);

370 
p_≥nd_d©a_tbl
++;

372  (
DEF_TRUE
);

373 
	}
}

396 
	$OS_PídMu…iWaô
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

397 
OS_OBJ_QTY
 
tbl_size
,

398 
OS_TICK
 
timeout
)

400 
OS_OBJ_QTY
 
i
;

401 
OS_PEND_LIST
 *
p_≥nd_li°
;

403 #i‡
OS_CFG_Q_EN
 > 0u

404 
OS_Q
 *
p_q
;

407 #i‡
OS_CFG_SEM_EN
 > 0u

408 
OS_SEM
 *
p_£m
;

413 
OSTCBCurPå
->
PídOn
 = 
OS_TASK_PEND_ON_MULTI
;

414 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

415 
OSTCBCurPå
->
PídD©aTblE¡rõs
 = 
tbl_size
;

416 
OSTCBCurPå
->
PídD©aTblPå
 = 
p_≥nd_d©a_tbl
;

418 
	`OS_TaskBlock
(
OSTCBCurPå
,

419 
timeout
);

421 
i
 = 0u; i < 
tbl_size
; i++) {

422 
p_≥nd_d©a_tbl
->
TCBPå
 = 
OSTCBCurPå
;

424 #i‡
OS_CFG_SEM_EN
 > 0u

425 
p_£m
 = (
OS_SEM
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

426 i‡(
p_£m
->
Ty≥
 =
OS_OBJ_TYPE_SEM
) {

427 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

428 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

429 
p_≥nd_d©a_tbl
);

433 #i‡
OS_CFG_Q_EN
 > 0u

434 
p_q
 = (
OS_Q
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

435 i‡(
p_q
->
Ty≥
 =
OS_OBJ_TYPE_Q
) {

436 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

437 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

438 
p_≥nd_d©a_tbl
);

442 
p_≥nd_d©a_tbl
++;

444 
	}
}

	@UCOSIII/uCOS-III/Source/os_prio.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_¥io__c
 = "$Id: $";

41 
CPU_DATA
 
	gOSPrioTbl
[
OS_PRIO_TBL_SIZE
];

59 
	$OS_PrioInô
 ()

61 
CPU_DATA
 
i
;

65 
i
 = 0u; i < 
OS_PRIO_TBL_SIZE
; i++) {

66 
OSPrioTbl
[
i
] = (
CPU_DATA
)0;

68 
	}
}

85 
OS_PRIO
 
	$OS_PrioGëHighe°
 ()

87 
CPU_DATA
 *
p_tbl
;

88 
OS_PRIO
 
¥io
;

91 
¥io
 = (
OS_PRIO
)0;

92 
p_tbl
 = &
OSPrioTbl
[0];

93 *
p_tbl
 =(
CPU_DATA
)0) {

94 
¥io
 +
DEF_INT_CPU_NBR_BITS
;

95 
p_tbl
++;

97 
¥io
 +(
OS_PRIO
)
	`CPU_C¡LódZîos
(*
p_tbl
);

98  (
¥io
);

99 
	}
}

115 
	$OS_PrioIn£π
 (
OS_PRIO
 
¥io
)

117 
CPU_DATA
 
bô
;

118 
CPU_DATA
 
bô_nbr
;

119 
OS_PRIO
 
ix
;

122 
ix
 = 
¥io
 / 
DEF_INT_CPU_NBR_BITS
;

123 
bô_nbr
 = (
CPU_DATA
)
¥io
 & (
DEF_INT_CPU_NBR_BITS
 - 1u);

124 
bô
 = 1u;

125 
bô
 <<(
DEF_INT_CPU_NBR_BITS
 - 1uË- 
bô_nbr
;

126 
OSPrioTbl
[
ix
] |
bô
;

127 
	}
}

143 
	$OS_PrioRemove
 (
OS_PRIO
 
¥io
)

145 
CPU_DATA
 
bô
;

146 
CPU_DATA
 
bô_nbr
;

147 
OS_PRIO
 
ix
;

150 
ix
 = 
¥io
 / 
DEF_INT_CPU_NBR_BITS
;

151 
bô_nbr
 = (
CPU_DATA
)
¥io
 & (
DEF_INT_CPU_NBR_BITS
 - 1u);

152 
bô
 = 1u;

153 
bô
 <<(
DEF_INT_CPU_NBR_BITS
 - 1uË- 
bô_nbr
;

154 
OSPrioTbl
[
ix
] &~
bô
;

155 
	}
}

	@UCOSIII/uCOS-III/Source/os_q.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_q__c
 = "$Id: $";

41 #i‡
OS_CFG_Q_EN
 > 0u

71 
	$OSQCª©e
 (
OS_Q
 *
p_q
,

72 
CPU_CHAR
 *
p_«me
,

73 
OS_MSG_QTY
 
max_qty
,

74 
OS_ERR
 *
p_îr
)

77 
	`CPU_SR_ALLOC
();

81 #ifde‡
OS_SAFETY_CRITICAL


82 i‡(
p_îr
 =(
OS_ERR
 *)0) {

83 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

88 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


89 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

90 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

95 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

96 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

97 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

102 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

103 i‡(
p_q
 =(
OS_Q
 *)0) {

104 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

107 i‡(
max_qty
 =(
OS_MSG_QTY
)0) {

108 *
p_îr
 = 
OS_ERR_Q_SIZE
;

113 
	`OS_CRITICAL_ENTER
();

114 
p_q
->
Ty≥
 = 
OS_OBJ_TYPE_Q
;

115 
p_q
->
NamePå
 = 
p_«me
;

116 
	`OS_MsgQInô
(&
p_q
->
MsgQ
,

117 
max_qty
);

118 
	`OS_PídLi°Inô
(&
p_q
->
PídLi°
);

120 #i‡
OS_CFG_DBG_EN
 > 0u

121 
	`OS_QDbgLi°Add
(
p_q
);

123 
OSQQty
++;

125 
	`OS_CRITICAL_EXIT_NO_SCHED
();

126 *
p_îr
 = 
OS_ERR_NONE
;

127 
	}
}

166 #i‡
OS_CFG_Q_DEL_EN
 > 0u

167 
OS_OBJ_QTY
 
	$OSQDñ
 (
OS_Q
 *
p_q
,

168 
OS_OPT
 
›t
,

169 
OS_ERR
 *
p_îr
)

171 
OS_OBJ_QTY
 
˙t
;

172 
OS_OBJ_QTY
 
nbr_èsks
;

173 
OS_PEND_DATA
 *
p_≥nd_d©a
;

174 
OS_PEND_LIST
 *
p_≥nd_li°
;

175 
OS_TCB
 *
p_tcb
;

176 
CPU_TS
 
ts
;

177 
	`CPU_SR_ALLOC
();

181 #ifde‡
OS_SAFETY_CRITICAL


182 i‡(
p_îr
 =(
OS_ERR
 *)0) {

183 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

184  ((
OS_OBJ_QTY
)0);

188 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

189 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

190 *
p_îr
 = 
OS_ERR_DEL_ISR
;

191  ((
OS_OBJ_QTY
)0);

195 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

196 i‡(
p_q
 =(
OS_Q
 *)0) {

197 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

198  ((
OS_OBJ_QTY
)0u);

200 
›t
) {

201 
OS_OPT_DEL_NO_PEND
:

202 
OS_OPT_DEL_ALWAYS
:

206 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

207  ((
OS_OBJ_QTY
)0u);

211 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

212 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

213 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

214  ((
OS_OBJ_QTY
)0);

218 
	`CPU_CRITICAL_ENTER
();

219 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

220 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

221 
nbr_èsks
 = 
˙t
;

222 
›t
) {

223 
OS_OPT_DEL_NO_PEND
:

224 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

225 #i‡
OS_CFG_DBG_EN
 > 0u

226 
	`OS_QDbgLi°Remove
(
p_q
);

228 
OSQQty
--;

229 
	`OS_QCÃ
(
p_q
);

230 
	`CPU_CRITICAL_EXIT
();

231 *
p_îr
 = 
OS_ERR_NONE
;

233 
	`CPU_CRITICAL_EXIT
();

234 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

238 
OS_OPT_DEL_ALWAYS
:

239 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

240 
ts
 = 
	`OS_TS_GET
();

241 
˙t
 > 0u) {

242 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

243 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

244 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_q
),

245 
p_tcb
,

246 
ts
);

247 
˙t
--;

249 #i‡
OS_CFG_DBG_EN
 > 0u

250 
	`OS_QDbgLi°Remove
(
p_q
);

252 
OSQQty
--;

253 
	`OS_QCÃ
(
p_q
);

254 
	`OS_CRITICAL_EXIT_NO_SCHED
();

255 
	`OSSched
();

256 *
p_îr
 = 
OS_ERR_NONE
;

260 
	`CPU_CRITICAL_EXIT
();

261 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

264  (
nbr_èsks
);

265 
	}
}

293 #i‡
OS_CFG_Q_FLUSH_EN
 > 0u

294 
OS_MSG_QTY
 
	$OSQFlush
 (
OS_Q
 *
p_q
,

295 
OS_ERR
 *
p_îr
)

297 
OS_MSG_QTY
 
íåõs
;

298 
	`CPU_SR_ALLOC
();

302 #ifde‡
OS_SAFETY_CRITICAL


303 i‡(
p_îr
 =(
OS_ERR
 *)0) {

304 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

305  ((
OS_MSG_QTY
)0);

309 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

310 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

311 *
p_îr
 = 
OS_ERR_FLUSH_ISR
;

312  ((
OS_MSG_QTY
)0);

316 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

317 i‡(
p_q
 =(
OS_Q
 *)0) {

318 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

319  ((
OS_MSG_QTY
)0);

323 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

324 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

325 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

326  ((
OS_MSG_QTY
)0);

330 
	`OS_CRITICAL_ENTER
();

331 
íåõs
 = 
	`OS_MsgQFªeAŒ
(&
p_q
->
MsgQ
);

332 
	`OS_CRITICAL_EXIT
();

333 *
p_îr
 = 
OS_ERR_NONE
;

334  ((
OS_MSG_QTY
)
íåõs
);

335 
	}
}

384 *
	$OSQPíd
 (
OS_Q
 *
p_q
,

385 
OS_TICK
 
timeout
,

386 
OS_OPT
 
›t
,

387 
OS_MSG_SIZE
 *
p_msg_size
,

388 
CPU_TS
 *
p_ts
,

389 
OS_ERR
 *
p_îr
)

391 
OS_PEND_DATA
 
≥nd_d©a
;

392 *
p_void
;

393 
	`CPU_SR_ALLOC
();

397 #ifde‡
OS_SAFETY_CRITICAL


398 i‡(
p_îr
 =(
OS_ERR
 *)0) {

399 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

404 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

405 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

406 *
p_îr
 = 
OS_ERR_PEND_ISR
;

411 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

412 i‡(
p_q
 =(
OS_Q
 *)0) {

413 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

416 i‡(
p_msg_size
 =(
OS_MSG_SIZE
 *)0) {

417 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

420 
›t
) {

421 
OS_OPT_PEND_BLOCKING
:

422 
OS_OPT_PEND_NON_BLOCKING
:

426 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

431 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

432 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

433 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

438 i‡(
p_ts
 !(
CPU_TS
 *)0) {

439 *
p_ts
 = (
CPU_TS
 )0;

442 
	`CPU_CRITICAL_ENTER
();

443 
p_void
 = 
	`OS_MsgQGë
(&
p_q
->
MsgQ
,

444 
p_msg_size
,

445 
p_ts
,

446 
p_îr
);

447 i‡(*
p_îr
 =
OS_ERR_NONE
) {

448 
	`CPU_CRITICAL_EXIT
();

449  (
p_void
);

452 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

453 
	`CPU_CRITICAL_EXIT
();

454 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

457 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

458 
	`CPU_CRITICAL_EXIT
();

459 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

464 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

465 
	`OS_Píd
(&
≥nd_d©a
,

466 (
OS_PEND_OBJ
 *)((*)
p_q
),

467 
OS_TASK_PEND_ON_Q
,

468 
timeout
);

469 
	`OS_CRITICAL_EXIT_NO_SCHED
();

471 
	`OSSched
();

473 
	`CPU_CRITICAL_ENTER
();

474 
OSTCBCurPå
->
PídSètus
) {

475 
OS_STATUS_PEND_OK
:

476 
p_void
 = 
OSTCBCurPå
->
MsgPå
;

477 *
p_msg_size
 = 
OSTCBCurPå
->
MsgSize
;

478 i‡(
p_ts
 !(
CPU_TS
 *)0) {

479 *
p_ts
 = 
OSTCBCurPå
->
TS
;

481 *
p_îr
 = 
OS_ERR_NONE
;

484 
OS_STATUS_PEND_ABORT
:

485 
p_void
 = (*)0;

486 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

487 i‡(
p_ts
 !(
CPU_TS
 *)0) {

488 *
p_ts
 = 
OSTCBCurPå
->
TS
;

490 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

493 
OS_STATUS_PEND_TIMEOUT
:

494 
p_void
 = (*)0;

495 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

496 i‡(
p_ts
 !(
CPU_TS
 *)0) {

497 *
p_ts
 = (
CPU_TS
 )0;

499 *
p_îr
 = 
OS_ERR_TIMEOUT
;

502 
OS_STATUS_PEND_DEL
:

503 
p_void
 = (*)0;

504 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

505 i‡(
p_ts
 !(
CPU_TS
 *)0) {

506 *
p_ts
 = 
OSTCBCurPå
->
TS
;

508 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

512 
p_void
 = (*)0;

513 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

514 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

517 
	`CPU_CRITICAL_EXIT
();

518  (
p_void
);

519 
	}
}

554 #i‡
OS_CFG_Q_PEND_ABORT_EN
 > 0u

555 
OS_OBJ_QTY
 
	$OSQPídAb‹t
 (
OS_Q
 *
p_q
,

556 
OS_OPT
 
›t
,

557 
OS_ERR
 *
p_îr
)

559 
OS_PEND_LIST
 *
p_≥nd_li°
;

560 
OS_TCB
 *
p_tcb
;

561 
CPU_TS
 
ts
;

562 
OS_OBJ_QTY
 
nbr_èsks
;

563 
	`CPU_SR_ALLOC
();

567 #ifde‡
OS_SAFETY_CRITICAL


568 i‡(
p_îr
 =(
OS_ERR
 *)0) {

569 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

570  ((
OS_OBJ_QTY
)0u);

574 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

575 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

576 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

577  ((
OS_OBJ_QTY
)0u);

581 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

582 i‡(
p_q
 =(
OS_Q
 *)0) {

583 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

584  ((
OS_OBJ_QTY
)0u);

586 
›t
) {

587 
OS_OPT_PEND_ABORT_1
:

588 
OS_OPT_PEND_ABORT_ALL
:

589 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

590 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

594 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

595  ((
OS_OBJ_QTY
)0u);

599 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

600 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

601 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

602  ((
OS_OBJ_QTY
)0u);

606 
	`CPU_CRITICAL_ENTER
();

607 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

608 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

609 
	`CPU_CRITICAL_EXIT
();

610 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

611  ((
OS_OBJ_QTY
)0u);

614 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

615 
nbr_èsks
 = 0u;

616 
ts
 = 
	`OS_TS_GET
();

617 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

618 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

619 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_q
),

620 
p_tcb
,

621 
ts
);

622 
nbr_èsks
++;

623 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

627 
	`OS_CRITICAL_EXIT_NO_SCHED
();

629 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

630 
	`OSSched
();

633 *
p_îr
 = 
OS_ERR_NONE
;

634  (
nbr_èsks
);

635 
	}
}

688 
	$OSQPo°
 (
OS_Q
 *
p_q
,

689 *
p_void
,

690 
OS_MSG_SIZE
 
msg_size
,

691 
OS_OPT
 
›t
,

692 
OS_ERR
 *
p_îr
)

694 
CPU_TS
 
ts
;

698 #ifde‡
OS_SAFETY_CRITICAL


699 i‡(
p_îr
 =(
OS_ERR
 *)0) {

700 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

705 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

706 i‡(
p_q
 =(
OS_Q
 *)0) {

707 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

710 
›t
) {

711 
OS_OPT_POST_FIFO
:

712 
OS_OPT_POST_LIFO
:

713 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_ALL
:

714 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_ALL
:

715 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_NO_SCHED
:

716 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_NO_SCHED
:

717 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

718 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

722 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

727 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

728 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

729 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

734 
ts
 = 
	`OS_TS_GET
();

736 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

737 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

738 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_Q
,

739 (*)
p_q
,

740 (*)
p_void
,

741 (
OS_MSG_SIZE
)
msg_size
,

742 (
OS_FLAGS
 )0,

743 (
OS_OPT
 )
›t
,

744 (
CPU_TS
 )
ts
,

745 (
OS_ERR
 *)
p_îr
);

750 
	`OS_QPo°
(
p_q
,

751 
p_void
,

752 
msg_size
,

753 
›t
,

754 
ts
,

755 
p_îr
);

756 
	}
}

775 
	$OS_QCÃ
 (
OS_Q
 *
p_q
)

777 ()
	`OS_MsgQFªeAŒ
(&
p_q
->
MsgQ
);

778 
p_q
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

779 
p_q
->
NamePå
 = (
CPU_CHAR
 *)((*)"?Q");

780 
	`OS_MsgQInô
(&
p_q
->
MsgQ
,

782 
	`OS_PídLi°Inô
(&
p_q
->
PídLi°
);

783 
	}
}

802 #i‡
OS_CFG_DBG_EN
 > 0u

803 
	$OS_QDbgLi°Add
 (
OS_Q
 *
p_q
)

805 
p_q
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

806 
p_q
->
DbgPªvPå
 = (
OS_Q
 *)0;

807 i‡(
OSQDbgLi°På
 =(
OS_Q
 *)0) {

808 
p_q
->
DbgNextPå
 = (
OS_Q
 *)0;

810 
p_q
->
DbgNextPå
 = 
OSQDbgLi°På
;

811 
OSQDbgLi°På
->
DbgPªvPå
 = 
p_q
;

813 
OSQDbgLi°På
 = 
p_q
;

814 
	}
}

818 
	$OS_QDbgLi°Remove
 (
OS_Q
 *
p_q
)

820 
OS_Q
 *
p_q_√xt
;

821 
OS_Q
 *
p_q_¥ev
;

824 
p_q_¥ev
 = 
p_q
->
DbgPªvPå
;

825 
p_q_√xt
 = 
p_q
->
DbgNextPå
;

827 i‡(
p_q_¥ev
 =(
OS_Q
 *)0) {

828 
OSQDbgLi°På
 = 
p_q_√xt
;

829 i‡(
p_q_√xt
 !(
OS_Q
 *)0) {

830 
p_q_√xt
->
DbgPªvPå
 = (
OS_Q
 *)0;

832 
p_q
->
DbgNextPå
 = (
OS_Q
 *)0;

834 } i‡(
p_q_√xt
 =(
OS_Q
 *)0) {

835 
p_q_¥ev
->
DbgNextPå
 = (
OS_Q
 *)0;

836 
p_q
->
DbgPªvPå
 = (
OS_Q
 *)0;

839 
p_q_¥ev
->
DbgNextPå
 = 
p_q_√xt
;

840 
p_q_√xt
->
DbgPªvPå
 = 
p_q_¥ev
;

841 
p_q
->
DbgNextPå
 = (
OS_Q
 *)0;

842 
p_q
->
DbgPªvPå
 = (
OS_Q
 *)0;

844 
	}
}

865 
	$OS_QInô
 (
OS_ERR
 *
p_îr
)

867 #ifde‡
OS_SAFETY_CRITICAL


868 i‡(
p_îr
 =(
OS_ERR
 *)0) {

869 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

874 #i‡
OS_CFG_DBG_EN
 > 0u

875 
OSQDbgLi°På
 = (
OS_Q
 *)0;

878 
OSQQty
 = (
OS_OBJ_QTY
)0;

879 *
p_îr
 = 
OS_ERR_NONE
;

880 
	}
}

922 
	$OS_QPo°
 (
OS_Q
 *
p_q
,

923 *
p_void
,

924 
OS_MSG_SIZE
 
msg_size
,

925 
OS_OPT
 
›t
,

926 
CPU_TS
 
ts
,

927 
OS_ERR
 *
p_îr
)

929 
OS_OBJ_QTY
 
˙t
;

930 
OS_OPT
 
po°_ty≥
;

931 
OS_PEND_LIST
 *
p_≥nd_li°
;

932 
OS_PEND_DATA
 *
p_≥nd_d©a
;

933 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

934 
OS_TCB
 *
p_tcb
;

935 
	`CPU_SR_ALLOC
();

939 
	`OS_CRITICAL_ENTER
();

940 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

941 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

942 i‡((
›t
 & 
OS_OPT_POST_LIFO
Ë=(
OS_OPT
)0) {

943 
po°_ty≥
 = 
OS_OPT_POST_FIFO
;

945 
po°_ty≥
 = 
OS_OPT_POST_LIFO
;

947 
	`OS_MsgQPut
(&
p_q
->
MsgQ
,

948 
p_void
,

949 
msg_size
,

950 
po°_ty≥
,

951 
ts
,

952 
p_îr
);

953 
	`OS_CRITICAL_EXIT
();

957 i‡((
›t
 & 
OS_OPT_POST_ALL
Ë!(
OS_OPT
)0) {

958 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

960 
˙t
 = (
OS_OBJ_QTY
)1;

962 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

963 
˙t
 > 0u) {

964 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

965 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

966 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_q
),

967 
p_tcb
,

968 
p_void
,

969 
msg_size
,

970 
ts
);

971 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

972 
˙t
--;

974 
	`OS_CRITICAL_EXIT_NO_SCHED
();

975 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

976 
	`OSSched
();

978 *
p_îr
 = 
OS_ERR_NONE
;

979 
	}
}

	@UCOSIII/uCOS-III/Source/os_sem.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_£m__c
 = "$Id: $";

41 #i‡
OS_CFG_SEM_EN
 > 0u

73 
	$OSSemCª©e
 (
OS_SEM
 *
p_£m
,

74 
CPU_CHAR
 *
p_«me
,

75 
OS_SEM_CTR
 
˙t
,

76 
OS_ERR
 *
p_îr
)

78 
	`CPU_SR_ALLOC
();

82 #ifde‡
OS_SAFETY_CRITICAL


83 i‡(
p_îr
 =(
OS_ERR
 *)0) {

84 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

89 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


90 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

91 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

96 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

97 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

98 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

103 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

104 i‡(
p_£m
 =(
OS_SEM
 *)0) {

105 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

110 
	`OS_CRITICAL_ENTER
();

111 
p_£m
->
Ty≥
 = 
OS_OBJ_TYPE_SEM
;

112 
p_£m
->
Cå
 = 
˙t
;

113 
p_£m
->
TS
 = (
CPU_TS
)0;

114 
p_£m
->
NamePå
 = 
p_«me
;

115 
	`OS_PídLi°Inô
(&
p_£m
->
PídLi°
);

117 #i‡
OS_CFG_DBG_EN
 > 0u

118 
	`OS_SemDbgLi°Add
(
p_£m
);

120 
OSSemQty
++;

122 
	`OS_CRITICAL_EXIT_NO_SCHED
();

123 *
p_îr
 = 
OS_ERR_NONE
;

124 
	}
}

162 #i‡
OS_CFG_SEM_DEL_EN
 > 0u

163 
OS_OBJ_QTY
 
	$OSSemDñ
 (
OS_SEM
 *
p_£m
,

164 
OS_OPT
 
›t
,

165 
OS_ERR
 *
p_îr
)

167 
OS_OBJ_QTY
 
˙t
;

168 
OS_OBJ_QTY
 
nbr_èsks
;

169 
OS_PEND_DATA
 *
p_≥nd_d©a
;

170 
OS_PEND_LIST
 *
p_≥nd_li°
;

171 
OS_TCB
 *
p_tcb
;

172 
CPU_TS
 
ts
;

173 
	`CPU_SR_ALLOC
();

177 #ifde‡
OS_SAFETY_CRITICAL


178 i‡(
p_îr
 =(
OS_ERR
 *)0) {

179 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

180  ((
OS_OBJ_QTY
)0);

184 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

185 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

186 *
p_îr
 = 
OS_ERR_DEL_ISR
;

187  ((
OS_OBJ_QTY
)0);

191 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

192 i‡(
p_£m
 =(
OS_SEM
 *)0) {

193 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

194  ((
OS_OBJ_QTY
)0);

196 
›t
) {

197 
OS_OPT_DEL_NO_PEND
:

198 
OS_OPT_DEL_ALWAYS
:

202 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

203  ((
OS_OBJ_QTY
)0);

207 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

208 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

209 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

210  ((
OS_OBJ_QTY
)0);

214 
	`CPU_CRITICAL_ENTER
();

215 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

216 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

217 
nbr_èsks
 = 
˙t
;

218 
›t
) {

219 
OS_OPT_DEL_NO_PEND
:

220 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

221 #i‡
OS_CFG_DBG_EN
 > 0u

222 
	`OS_SemDbgLi°Remove
(
p_£m
);

224 
OSSemQty
--;

225 
	`OS_SemCÃ
(
p_£m
);

226 
	`CPU_CRITICAL_EXIT
();

227 *
p_îr
 = 
OS_ERR_NONE
;

229 
	`CPU_CRITICAL_EXIT
();

230 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

234 
OS_OPT_DEL_ALWAYS
:

235 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

236 
ts
 = 
	`OS_TS_GET
();

237 
˙t
 > 0u) {

238 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

239 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

240 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_£m
),

241 
p_tcb
,

242 
ts
);

243 
˙t
--;

245 #i‡
OS_CFG_DBG_EN
 > 0u

246 
	`OS_SemDbgLi°Remove
(
p_£m
);

248 
OSSemQty
--;

249 
	`OS_SemCÃ
(
p_£m
);

250 
	`OS_CRITICAL_EXIT_NO_SCHED
();

251 
	`OSSched
();

252 *
p_îr
 = 
OS_ERR_NONE
;

256 
	`CPU_CRITICAL_EXIT
();

257 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

260  ((
OS_OBJ_QTY
)
nbr_èsks
);

261 
	}
}

311 
OS_SEM_CTR
 
	$OSSemPíd
 (
OS_SEM
 *
p_£m
,

312 
OS_TICK
 
timeout
,

313 
OS_OPT
 
›t
,

314 
CPU_TS
 *
p_ts
,

315 
OS_ERR
 *
p_îr
)

317 
OS_SEM_CTR
 
˘r
;

318 
OS_PEND_DATA
 
≥nd_d©a
;

319 
	`CPU_SR_ALLOC
();

323 #ifde‡
OS_SAFETY_CRITICAL


324 i‡(
p_îr
 =(
OS_ERR
 *)0) {

325 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

326  ((
OS_SEM_CTR
)0);

330 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

331 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

332 *
p_îr
 = 
OS_ERR_PEND_ISR
;

333  ((
OS_SEM_CTR
)0);

337 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

338 i‡(
p_£m
 =(
OS_SEM
 *)0) {

339 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

340  ((
OS_SEM_CTR
)0);

342 
›t
) {

343 
OS_OPT_PEND_BLOCKING
:

344 
OS_OPT_PEND_NON_BLOCKING
:

348 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

349  ((
OS_SEM_CTR
)0);

353 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

354 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

355 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

356  ((
OS_SEM_CTR
)0);

360 i‡(
p_ts
 !(
CPU_TS
 *)0) {

361 *
p_ts
 = (
CPU_TS
)0;

363 
	`CPU_CRITICAL_ENTER
();

364 i‡(
p_£m
->
Cå
 > (
OS_SEM_CTR
)0) {

365 
p_£m
->
Cå
--;

366 i‡(
p_ts
 !(
CPU_TS
 *)0) {

367 *
p_ts
 = 
p_£m
->
TS
;

369 
˘r
 = 
p_£m
->
Cå
;

370 
	`CPU_CRITICAL_EXIT
();

371 *
p_îr
 = 
OS_ERR_NONE
;

372  (
˘r
);

375 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

376 
˘r
 = 
p_£m
->
Cå
;

377 
	`CPU_CRITICAL_EXIT
();

378 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

379  (
˘r
);

381 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

382 
	`CPU_CRITICAL_EXIT
();

383 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

384  ((
OS_SEM_CTR
)0);

388 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

389 
	`OS_Píd
(&
≥nd_d©a
,

390 (
OS_PEND_OBJ
 *)((*)
p_£m
),

391 
OS_TASK_PEND_ON_SEM
,

392 
timeout
);

394 
	`OS_CRITICAL_EXIT_NO_SCHED
();

396 
	`OSSched
();

398 
	`CPU_CRITICAL_ENTER
();

399 
OSTCBCurPå
->
PídSètus
) {

400 
OS_STATUS_PEND_OK
:

401 i‡(
p_ts
 !(
CPU_TS
 *)0) {

402 *
p_ts
 = 
OSTCBCurPå
->
TS
;

404 *
p_îr
 = 
OS_ERR_NONE
;

407 
OS_STATUS_PEND_ABORT
:

408 i‡(
p_ts
 !(
CPU_TS
 *)0) {

409 *
p_ts
 = 
OSTCBCurPå
->
TS
;

411 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

414 
OS_STATUS_PEND_TIMEOUT
:

415 i‡(
p_ts
 !(
CPU_TS
 *)0) {

416 *
p_ts
 = (
CPU_TS
 )0;

418 *
p_îr
 = 
OS_ERR_TIMEOUT
;

421 
OS_STATUS_PEND_DEL
:

422 i‡(
p_ts
 !(
CPU_TS
 *)0) {

423 *
p_ts
 = 
OSTCBCurPå
->
TS
;

425 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

429 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

430 
	`CPU_CRITICAL_EXIT
();

431  ((
OS_SEM_CTR
)0);

433 
˘r
 = 
p_£m
->
Cå
;

434 
	`CPU_CRITICAL_EXIT
();

435  (
˘r
);

436 
	}
}

470 #i‡
OS_CFG_SEM_PEND_ABORT_EN
 > 0u

471 
OS_OBJ_QTY
 
	$OSSemPídAb‹t
 (
OS_SEM
 *
p_£m
,

472 
OS_OPT
 
›t
,

473 
OS_ERR
 *
p_îr
)

475 
OS_PEND_LIST
 *
p_≥nd_li°
;

476 
OS_TCB
 *
p_tcb
;

477 
CPU_TS
 
ts
;

478 
OS_OBJ_QTY
 
nbr_èsks
;

479 
	`CPU_SR_ALLOC
();

483 #ifde‡
OS_SAFETY_CRITICAL


484 i‡(
p_îr
 =(
OS_ERR
 *)0) {

485 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

486  ((
OS_OBJ_QTY
)0u);

490 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

491 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

492 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

493  ((
OS_OBJ_QTY
)0u);

497 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

498 i‡(
p_£m
 =(
OS_SEM
 *)0) {

499 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

500  ((
OS_OBJ_QTY
)0u);

502 
›t
) {

503 
OS_OPT_PEND_ABORT_1
:

504 
OS_OPT_PEND_ABORT_ALL
:

505 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

506 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

510 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

511  ((
OS_OBJ_QTY
)0u);

515 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

516 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

517 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

518  ((
OS_OBJ_QTY
)0u);

522 
	`CPU_CRITICAL_ENTER
();

523 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

524 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

525 
	`CPU_CRITICAL_EXIT
();

526 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

527  ((
OS_OBJ_QTY
)0u);

530 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

531 
nbr_èsks
 = 0u;

532 
ts
 = 
	`OS_TS_GET
();

533 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

534 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

535 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_£m
),

536 
p_tcb
,

537 
ts
);

538 
nbr_èsks
++;

539 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

543 
	`OS_CRITICAL_EXIT_NO_SCHED
();

545 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

546 
	`OSSched
();

549 *
p_îr
 = 
OS_ERR_NONE
;

550  (
nbr_èsks
);

551 
	}
}

584 
OS_SEM_CTR
 
	$OSSemPo°
 (
OS_SEM
 *
p_£m
,

585 
OS_OPT
 
›t
,

586 
OS_ERR
 *
p_îr
)

588 
OS_SEM_CTR
 
˘r
;

589 
CPU_TS
 
ts
;

593 #ifde‡
OS_SAFETY_CRITICAL


594 i‡(
p_îr
 =(
OS_ERR
 *)0) {

595 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

596  ((
OS_SEM_CTR
)0);

600 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

601 i‡(
p_£m
 =(
OS_SEM
 *)0) {

602 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

603  ((
OS_SEM_CTR
)0);

605 
›t
) {

606 
OS_OPT_POST_1
:

607 
OS_OPT_POST_ALL
:

608 
OS_OPT_POST_1
 | 
OS_OPT_POST_NO_SCHED
:

609 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

613 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

614  ((
OS_SEM_CTR
)0u);

618 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

619 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

620 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

621  ((
OS_SEM_CTR
)0);

625 
ts
 = 
	`OS_TS_GET
();

627 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

628 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

629 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_SEM
,

630 (*)
p_£m
,

632 (
OS_MSG_SIZE
)0,

633 (
OS_FLAGS
 )0,

634 (
OS_OPT
 )
›t
,

635 (
CPU_TS
 )
ts
,

636 (
OS_ERR
 *)
p_îr
);

637  ((
OS_SEM_CTR
)0);

641 
˘r
 = 
	`OS_SemPo°
(
p_£m
,

642 
›t
,

643 
ts
,

644 
p_îr
);

646  (
˘r
);

647 
	}
}

675 #i‡
OS_CFG_SEM_SET_EN
 > 0u

676 
	$OSSemSë
 (
OS_SEM
 *
p_£m
,

677 
OS_SEM_CTR
 
˙t
,

678 
OS_ERR
 *
p_îr
)

680 
OS_PEND_LIST
 *
p_≥nd_li°
;

681 
	`CPU_SR_ALLOC
();

685 #ifde‡
OS_SAFETY_CRITICAL


686 i‡(
p_îr
 =(
OS_ERR
 *)0) {

687 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

692 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

693 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

694 *
p_îr
 = 
OS_ERR_SET_ISR
;

699 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

700 i‡(
p_£m
 =(
OS_SEM
 *)0) {

701 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

706 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

707 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

708 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

713 *
p_îr
 = 
OS_ERR_NONE
;

714 
	`CPU_CRITICAL_ENTER
();

715 i‡(
p_£m
->
Cå
 > (
OS_SEM_CTR
)0) {

716 
p_£m
->
Cå
 = 
˙t
;

718 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

719 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

720 
p_£m
->
Cå
 = 
˙t
;

722 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

725 
	`CPU_CRITICAL_EXIT
();

726 
	}
}

746 
	$OS_SemCÃ
 (
OS_SEM
 *
p_£m
)

748 
p_£m
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

749 
p_£m
->
Cå
 = (
OS_SEM_CTR
)0;

750 
p_£m
->
TS
 = (
CPU_TS
 )0;

751 
p_£m
->
NamePå
 = (
CPU_CHAR
 *)((*)"?SEM");

752 
	`OS_PídLi°Inô
(&
p_£m
->
PídLi°
);

753 
	}
}

771 #i‡
OS_CFG_DBG_EN
 > 0u

772 
	$OS_SemDbgLi°Add
 (
OS_SEM
 *
p_£m
)

774 
p_£m
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

775 
p_£m
->
DbgPªvPå
 = (
OS_SEM
 *)0;

776 i‡(
OSSemDbgLi°På
 =(
OS_SEM
 *)0) {

777 
p_£m
->
DbgNextPå
 = (
OS_SEM
 *)0;

779 
p_£m
->
DbgNextPå
 = 
OSSemDbgLi°På
;

780 
OSSemDbgLi°På
->
DbgPªvPå
 = 
p_£m
;

782 
OSSemDbgLi°På
 = 
p_£m
;

783 
	}
}

787 
	$OS_SemDbgLi°Remove
 (
OS_SEM
 *
p_£m
)

789 
OS_SEM
 *
p_£m_√xt
;

790 
OS_SEM
 *
p_£m_¥ev
;

793 
p_£m_¥ev
 = 
p_£m
->
DbgPªvPå
;

794 
p_£m_√xt
 = 
p_£m
->
DbgNextPå
;

796 i‡(
p_£m_¥ev
 =(
OS_SEM
 *)0) {

797 
OSSemDbgLi°På
 = 
p_£m_√xt
;

798 i‡(
p_£m_√xt
 !(
OS_SEM
 *)0) {

799 
p_£m_√xt
->
DbgPªvPå
 = (
OS_SEM
 *)0;

801 
p_£m
->
DbgNextPå
 = (
OS_SEM
 *)0;

803 } i‡(
p_£m_√xt
 =(
OS_SEM
 *)0) {

804 
p_£m_¥ev
->
DbgNextPå
 = (
OS_SEM
 *)0;

805 
p_£m
->
DbgPªvPå
 = (
OS_SEM
 *)0;

808 
p_£m_¥ev
->
DbgNextPå
 = 
p_£m_√xt
;

809 
p_£m_√xt
->
DbgPªvPå
 = 
p_£m_¥ev
;

810 
p_£m
->
DbgNextPå
 = (
OS_SEM
 *)0;

811 
p_£m
->
DbgPªvPå
 = (
OS_SEM
 *)0;

813 
	}
}

834 
	$OS_SemInô
 (
OS_ERR
 *
p_îr
)

836 #ifde‡
OS_SAFETY_CRITICAL


837 i‡(
p_îr
 =(
OS_ERR
 *)0) {

838 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

843 #i‡
OS_CFG_DBG_EN
 > 0u

844 
OSSemDbgLi°På
 = (
OS_SEM
 *)0;

847 
OSSemQty
 = (
OS_OBJ_QTY
)0;

848 *
p_îr
 = 
OS_ERR_NONE
;

849 
	}
}

884 
OS_SEM_CTR
 
	$OS_SemPo°
 (
OS_SEM
 *
p_£m
,

885 
OS_OPT
 
›t
,

886 
CPU_TS
 
ts
,

887 
OS_ERR
 *
p_îr
)

889 
OS_OBJ_QTY
 
˙t
;

890 
OS_SEM_CTR
 
˘r
;

891 
OS_PEND_LIST
 *
p_≥nd_li°
;

892 
OS_PEND_DATA
 *
p_≥nd_d©a
;

893 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

894 
OS_TCB
 *
p_tcb
;

895 
	`CPU_SR_ALLOC
();

899 
	`CPU_CRITICAL_ENTER
();

900 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

901 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

902 (
OS_SEM_CTR
)) {

904 i‡(
p_£m
->
Cå
 =
DEF_INT_08U_MAX_VAL
) {

905 
	`CPU_CRITICAL_EXIT
();

906 *
p_îr
 = 
OS_ERR_SEM_OVF
;

907  ((
OS_SEM_CTR
)0);

912 i‡(
p_£m
->
Cå
 =
DEF_INT_16U_MAX_VAL
) {

913 
	`CPU_CRITICAL_EXIT
();

914 *
p_îr
 = 
OS_ERR_SEM_OVF
;

915  ((
OS_SEM_CTR
)0);

920 i‡(
p_£m
->
Cå
 =
DEF_INT_32U_MAX_VAL
) {

921 
	`CPU_CRITICAL_EXIT
();

922 *
p_îr
 = 
OS_ERR_SEM_OVF
;

923  ((
OS_SEM_CTR
)0);

930 
p_£m
->
Cå
++;

931 
˘r
 = 
p_£m
->
Cå
;

932 
p_£m
->
TS
 = 
ts
;

933 
	`CPU_CRITICAL_EXIT
();

934 *
p_îr
 = 
OS_ERR_NONE
;

935  (
˘r
);

938 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

939 i‡((
›t
 & 
OS_OPT_POST_ALL
Ë!(
OS_OPT
)0) {

940 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

942 
˙t
 = (
OS_OBJ_QTY
)1;

944 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

945 
˙t
 > 0u) {

946 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

947 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

948 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_£m
),

949 
p_tcb
,

951 (
OS_MSG_SIZE
)0,

952 
ts
);

953 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

954 
˙t
--;

956 
˘r
 = 
p_£m
->
Cå
;

957 
	`OS_CRITICAL_EXIT_NO_SCHED
();

958 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

959 
	`OSSched
();

961 *
p_îr
 = 
OS_ERR_NONE
;

962  (
˘r
);

963 
	}
}

	@UCOSIII/uCOS-III/Source/os_stat.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_°©__c
 = "$Id: $";

41 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

57 
	$OSSètRe£t
 (
OS_ERR
 *
p_îr
)

59 #i‡(
OS_CFG_DBG_EN
 > 0u)

60 
OS_TCB
 *
p_tcb
;

61 #i‡(
OS_MSG_EN
 > 0u)

62 
OS_MSG_Q
 *
p_msg_q
;

64 #i‡(
OS_CFG_Q_EN
 > 0u)

65 
OS_Q
 *
p_q
;

67 
	`CPU_SR_ALLOC
();

72 #ifde‡
OS_SAFETY_CRITICAL


73 i‡(
p_îr
 =(
OS_ERR
 *)0) {

74 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

79 
	`CPU_CRITICAL_ENTER
();

80 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

81 
OSI¡QTaskTimeMax
 = (
CPU_TS
 )0;

82 
OSI¡QNbrE¡rõsMax
 = (
OS_OBJ_QTY
)0;

85 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

86 
OSSètTaskCPUUßgeMax
 = 0u;

87 
OSSètTaskTimeMax
 = (
CPU_TS
)0;

90 
OSTickTaskTimeMax
 = (
CPU_TS
)0;

92 #i‡
OS_CFG_TMR_EN
 > 0u

93 
OSTmrTaskTimeMax
 = (
CPU_TS
)0;

96 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


97 
OSI¡DisTimeMax
 = (
CPU_TS
)0;

100 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

101 
OSSchedLockTimeMax
 = (
CPU_TS
)0;

104 #i‡
OS_MSG_EN
 > 0u

105 
OSMsgPoﬁ
.
NbrU£dMax
 = 0;

107 
	`CPU_CRITICAL_EXIT
();

109 #i‡
OS_CFG_DBG_EN
 > 0u

110 
	`CPU_CRITICAL_ENTER
();

111 
p_tcb
 = 
OSTaskDbgLi°På
;

112 
	`CPU_CRITICAL_EXIT
();

113 
p_tcb
 !(
OS_TCB
 *)0) {

114 
	`CPU_CRITICAL_ENTER
();

116 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


117 
p_tcb
->
I¡DisTimeMax
 = (
CPU_TS
 )0;

120 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

121 
p_tcb
->
SchedLockTimeMax
 = (
CPU_TS
 )0;

124 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

125 #i‡
OS_CFG_TASK_Q_EN
 > 0u

126 
p_tcb
->
MsgQPídTimeMax
 = (
CPU_TS
 )0;

128 
p_tcb
->
SemPídTimeMax
 = (
CPU_TS
 )0;

129 
p_tcb
->
CtxSwCå
 = (
OS_CTR
 )0;

130 
p_tcb
->
CPUUßge
 = (
OS_CPU_USAGE
)0;

131 
p_tcb
->
CPUUßgeMax
 = (
OS_CPU_USAGE
)0;

132 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
 )0;

133 
p_tcb
->
Cy˛esTŸÆPªv
 = (
OS_CYCLES
 )0;

134 
p_tcb
->
Cy˛esSèπ
 = 
	`OS_TS_GET
();

137 #i‡
OS_CFG_TASK_Q_EN
 > 0u

138 
p_msg_q
 = &
p_tcb
->
MsgQ
;

139 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
 )0;

141 
p_tcb
 =Ö_tcb->
DbgNextPå
;

142 
	`CPU_CRITICAL_EXIT
();

146 #i‡(
OS_CFG_Q_EN
 > 0uË&& (
OS_CFG_DBG_EN
 > 0u)

147 
	`CPU_CRITICAL_ENTER
();

148 
p_q
 = 
OSQDbgLi°På
;

149 
	`CPU_CRITICAL_EXIT
();

150 
p_q
 !(
OS_Q
 *)0) {

151 
	`CPU_CRITICAL_ENTER
();

152 
p_msg_q
 = &
p_q
->
MsgQ
;

153 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
)0;

154 
p_q
 =Ö_q->
DbgNextPå
;

155 
	`CPU_CRITICAL_EXIT
();

159 
	`OS_TickLi°Re£tPók
();

161 #i‡
OS_CFG_TMR_EN
 > 0u

162 
	`OS_TmrRe£tPók
();

166 *
p_îr
 = 
OS_ERR_NONE
;

167 
	}
}

191 
	$OSSètTaskCPUUßgeInô
 (
OS_ERR
 *
p_îr
)

193 
OS_ERR
 
îr
;

194 
OS_TICK
 
dly
;

195 
	`CPU_SR_ALLOC
();

199 #ifde‡
OS_SAFETY_CRITICAL


200 i‡(
p_îr
 =(
OS_ERR
 *)0) {

201 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

206 #i‡(
OS_CFG_TMR_EN
 > 0u)

207 
	`OSTaskSu•íd
(&
OSTmrTaskTCB
, &
îr
);

208 i‡(
îr
 !
OS_ERR_NONE
) {

209 *
p_îr
 = 
îr
;

214 
	`OSTimeDly
((
OS_TICK
 )2,

215 (
OS_OPT
 )
OS_OPT_TIME_DLY
,

216 (
OS_ERR
 *)&
îr
);

217 i‡(
îr
 !
OS_ERR_NONE
) {

218 *
p_îr
 = 
îr
;

221 
	`CPU_CRITICAL_ENTER
();

222 
OSSètTaskCå
 = (
OS_TICK
)0;

223 
	`CPU_CRITICAL_EXIT
();

225 
dly
 = (
OS_TICK
)0;

226 i‡(
OSCfg_TickR©e_Hz
 > 
OSCfg_SètTaskR©e_Hz
) {

227 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / 
OSCfg_SètTaskR©e_Hz
);

229 i‡(
dly
 =(
OS_TICK
)0) {

230 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

233 
	`OSTimeDly
(
dly
,

234 
OS_OPT_TIME_DLY
,

235 &
îr
);

237 #i‡(
OS_CFG_TMR_EN
 > 0u)

238 
	`OSTaskResume
(&
OSTmrTaskTCB
, &
îr
);

239 i‡(
îr
 !
OS_ERR_NONE
) {

240 *
p_îr
 = 
îr
;

245 
	`CPU_CRITICAL_ENTER
();

246 
OSSètTaskTimeMax
 = (
CPU_TS
)0;

248 
OSSètTaskCåMax
 = 
OSSètTaskCå
;

249 
OSSètTaskRdy
 = 
OS_STATE_RDY
;

250 
	`CPU_CRITICAL_EXIT
();

251 *
p_îr
 = 
OS_ERR_NONE
;

252 
	}
}

281 
	$OS_SètTask
 (*
p_¨g
)

283 #i‡
OS_CFG_DBG_EN
 > 0u

284 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

285 
OS_CPU_USAGE
 
ußge
;

286 
OS_CYCLES
 
cy˛es_tŸÆ
;

287 
OS_CYCLES
 
cy˛es_div
;

288 
OS_CYCLES
 
cy˛es_mu…
;

289 
OS_CYCLES
 
cy˛es_max
;

291 
OS_TCB
 *
p_tcb
;

293 
OS_TICK
 
˘r_max
;

294 
OS_TICK
 
˘r_mu…
;

295 
OS_TICK
 
˘r_div
;

296 
OS_ERR
 
îr
;

297 
OS_TICK
 
dly
;

298 
CPU_TS
 
ts_°¨t
;

299 
CPU_TS
 
ts_íd
;

300 
	`CPU_SR_ALLOC
();

304 
p_¨g
 =Ö_arg;

305 
OSSètTaskRdy
 !
DEF_TRUE
) {

306 
	`OSTimeDly
(2u * 
OSCfg_SètTaskR©e_Hz
,

307 
OS_OPT_TIME_DLY
,

308 &
îr
);

310 
	`OSSètRe£t
(&
îr
);

312 
dly
 = (
OS_TICK
)0;

313 i‡(
OSCfg_TickR©e_Hz
 > 
OSCfg_SètTaskR©e_Hz
) {

314 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / 
OSCfg_SètTaskR©e_Hz
);

316 i‡(
dly
 =(
OS_TICK
)0) {

317 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

320 
DEF_ON
) {

321 
ts_°¨t
 = 
	`OS_TS_GET
();

322 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


323 
OSI¡DisTimeMax
 = 
	`CPU_I¡DisMósMaxGë
();

326 
	`CPU_CRITICAL_ENTER
();

327 
OSSètTaskCåRun
 = 
OSSètTaskCå
;

328 
OSSètTaskCå
 = (
OS_TICK
)0;

329 
	`CPU_CRITICAL_EXIT
();

331 i‡(
OSSètTaskCåMax
 > 
OSSètTaskCåRun
) {

332 i‡(
OSSètTaskCåMax
 < 400000u) {

333 
˘r_mu…
 = 10000u;

334 
˘r_div
 = 1u;

335 } i‡(
OSSètTaskCåMax
 < 4000000u) {

336 
˘r_mu…
 = 1000u;

337 
˘r_div
 = 10u;

338 } i‡(
OSSètTaskCåMax
 < 40000000u) {

339 
˘r_mu…
 = 100u;

340 
˘r_div
 = 100u;

341 } i‡(
OSSètTaskCåMax
 < 400000000u) {

342 
˘r_mu…
 = 10u;

343 
˘r_div
 = 1000u;

345 
˘r_mu…
 = 1u;

346 
˘r_div
 = 10000u;

348 
˘r_max
 = 
OSSètTaskCåMax
 / 
˘r_div
;

349 
OSSètTaskCPUUßge
 = (
OS_CPU_USAGE
)((
OS_TICK
)10000u - 
˘r_mu…
 * 
OSSètTaskCåRun
 / 
˘r_max
);

350 i‡(
OSSètTaskCPUUßgeMax
 < 
OSSètTaskCPUUßge
) {

351 
OSSètTaskCPUUßgeMax
 = 
OSSètTaskCPUUßge
;

354 
OSSètTaskCPUUßge
 = (
OS_CPU_USAGE
)10000u;

357 
	`OSSètTaskHook
();

360 #i‡
OS_CFG_DBG_EN
 > 0u

361 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

362 
cy˛es_tŸÆ
 = (
OS_CYCLES
)0;

364 
	`CPU_CRITICAL_ENTER
();

365 
p_tcb
 = 
OSTaskDbgLi°På
;

366 
	`CPU_CRITICAL_EXIT
();

367 
p_tcb
 !(
OS_TCB
 *)0) {

368 
	`OS_CRITICAL_ENTER
();

369 
p_tcb
->
Cy˛esTŸÆPªv
 =Ö_tcb->
Cy˛esTŸÆ
;

370 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
)0;

371 
	`OS_CRITICAL_EXIT
();

373 
cy˛es_tŸÆ
 +
p_tcb
->
Cy˛esTŸÆPªv
;

375 
	`CPU_CRITICAL_ENTER
();

376 
p_tcb
 =Ö_tcb->
DbgNextPå
;

377 
	`CPU_CRITICAL_EXIT
();

382 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

384 i‡(
cy˛es_tŸÆ
 > (
OS_CYCLES
)0u) {

385 i‡(
cy˛es_tŸÆ
 < 400000u) {

386 
cy˛es_mu…
 = 10000u;

387 
cy˛es_div
 = 1u;

388 } i‡(
cy˛es_tŸÆ
 < 4000000u) {

389 
cy˛es_mu…
 = 1000u;

390 
cy˛es_div
 = 10u;

391 } i‡(
cy˛es_tŸÆ
 < 40000000u) {

392 
cy˛es_mu…
 = 100u;

393 
cy˛es_div
 = 100u;

394 } i‡(
cy˛es_tŸÆ
 < 400000000u) {

395 
cy˛es_mu…
 = 10u;

396 
cy˛es_div
 = 1000u;

398 
cy˛es_mu…
 = 1u;

399 
cy˛es_div
 = 10000u;

401 
cy˛es_max
 = 
cy˛es_tŸÆ
 / 
cy˛es_div
;

403 
cy˛es_mu…
 = 0u;

404 
cy˛es_max
 = 1u;

407 
	`CPU_CRITICAL_ENTER
();

408 
p_tcb
 = 
OSTaskDbgLi°På
;

409 
	`CPU_CRITICAL_EXIT
();

410 
p_tcb
 !(
OS_TCB
 *)0) {

411 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

412 
ußge
 = (
OS_CPU_USAGE
)(
cy˛es_mu…
 * 
p_tcb
->
Cy˛esTŸÆPªv
 / 
cy˛es_max
);

413 i‡(
ußge
 > 10000u) {

414 
ußge
 = 10000u;

416 
p_tcb
->
CPUUßge
 = 
ußge
;

417 i‡(
p_tcb
->
CPUUßgeMax
 < 
ußge
) {

418 
p_tcb
->
CPUUßgeMax
 = 
ußge
;

422 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

423 
	`OSTaskStkChk
–
p_tcb
,

424 &
p_tcb
->
StkFªe
,

425 &
p_tcb
->
StkU£d
,

426 &
îr
);

429 
	`CPU_CRITICAL_ENTER
();

430 
p_tcb
 =Ö_tcb->
DbgNextPå
;

431 
	`CPU_CRITICAL_EXIT
();

435 i‡(
OSSètRe£tFœg
 =
DEF_TRUE
) {

436 
OSSètRe£tFœg
 = 
DEF_FALSE
;

437 
	`OSSètRe£t
(&
îr
);

440 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

441 i‡(
OSSètTaskTimeMax
 < 
ts_íd
) {

442 
OSSètTaskTimeMax
 = 
ts_íd
;

445 
	`OSTimeDly
(
dly
,

446 
OS_OPT_TIME_DLY
,

447 &
îr
);

449 
	}
}

472 
	$OS_SètTaskInô
 (
OS_ERR
 *
p_îr
)

474 #ifde‡
OS_SAFETY_CRITICAL


475 i‡(
p_îr
 =(
OS_ERR
 *)0) {

476 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

481 
OSSètTaskCå
 = (
OS_TICK
)0;

482 
OSSètTaskCåRun
 = (
OS_TICK
)0;

483 
OSSètTaskCåMax
 = (
OS_TICK
)0;

484 
OSSètTaskRdy
 = 
OS_STATE_NOT_RDY
;

485 
OSSètRe£tFœg
 = 
DEF_FALSE
;

488 i‡(
OSCfg_SètTaskStkBa£På
 =(
CPU_STK
 *)0) {

489 *
p_îr
 = 
OS_ERR_STAT_STK_INVALID
;

493 i‡(
OSCfg_SètTaskStkSize
 < 
OSCfg_StkSizeMö
) {

494 *
p_îr
 = 
OS_ERR_STAT_STK_SIZE_INVALID
;

498 i‡(
OSCfg_SètTaskPrio
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

499 *
p_îr
 = 
OS_ERR_STAT_PRIO_INVALID
;

503 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSSètTaskTCB
,

504 (
CPU_CHAR
 *)((*)"uC/OS-III Stat Task"),

505 (
OS_TASK_PTR
 )
OS_SètTask
,

507 (
OS_PRIO
 )
OSCfg_SètTaskPrio
,

508 (
CPU_STK
 *)
OSCfg_SètTaskStkBa£På
,

509 (
CPU_STK_SIZE
)
OSCfg_SètTaskStkLimô
,

510 (
CPU_STK_SIZE
)
OSCfg_SètTaskStkSize
,

511 (
OS_MSG_QTY
 )0,

512 (
OS_TICK
 )0,

514 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
),

515 (
OS_ERR
 *)
p_îr
);

516 
	}
}

	@UCOSIII/uCOS-III/Source/os_task.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_èsk__c
 = "$Id: $";

61 #i‡
OS_CFG_TASK_CHANGE_PRIO_EN
 > 0u

62 
	$OSTaskCh™gePrio
 (
OS_TCB
 *
p_tcb
,

63 
OS_PRIO
 
¥io_√w
,

64 
OS_ERR
 *
p_îr
)

66 
CPU_BOOLEAN
 
£lf
;

67 
	`CPU_SR_ALLOC
();

71 #ifde‡
OS_SAFETY_CRITICAL


72 i‡(
p_îr
 =(
OS_ERR
 *)0) {

73 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

78 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

79 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

80 *
p_îr
 = 
OS_ERR_TASK_CHANGE_PRIO_ISR
;

85 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

86 i‡(
¥io_√w
 == 0) {

87 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

92 i‡(
¥io_√w
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

93 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

97 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

98 
	`CPU_CRITICAL_ENTER
();

99 
p_tcb
 = 
OSTCBCurPå
;

100 
	`CPU_CRITICAL_EXIT
();

101 
£lf
 = 
DEF_TRUE
;

103 
£lf
 = 
DEF_FALSE
;

106 
	`OS_CRITICAL_ENTER
();

107 
p_tcb
->
TaskSèã
) {

108 
OS_TASK_STATE_RDY
:

109 
	`OS_RdyLi°Remove
(
p_tcb
);

110 
p_tcb
->
Prio
 = 
¥io_√w
;

111 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

112 i‡(
£lf
 =
DEF_TRUE
) {

113 
	`OS_RdyLi°In£πHód
(
p_tcb
);

115 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

119 
OS_TASK_STATE_DLY
:

120 
OS_TASK_STATE_SUSPENDED
:

121 
OS_TASK_STATE_DLY_SUSPENDED
:

122 
p_tcb
->
Prio
 = 
¥io_√w
;

125 
OS_TASK_STATE_PEND
:

126 
OS_TASK_STATE_PEND_TIMEOUT
:

127 
OS_TASK_STATE_PEND_SUSPENDED
:

128 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

129 
p_tcb
->
PídOn
) {

130 
OS_TASK_PEND_ON_TASK_Q
:

131 
OS_TASK_PEND_ON_TASK_SEM
:

132 
OS_TASK_PEND_ON_FLAG
:

133 
p_tcb
->
Prio
 = 
¥io_√w
;

136 
OS_TASK_PEND_ON_MUTEX
:

137 
OS_TASK_PEND_ON_MULTI
:

138 
OS_TASK_PEND_ON_Q
:

139 
OS_TASK_PEND_ON_SEM
:

140 
	`OS_PídLi°Ch™gePrio
(
p_tcb
,

141 
¥io_√w
);

150 
	`OS_CRITICAL_EXIT
();

151 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

155 
	`OS_CRITICAL_EXIT_NO_SCHED
();

157 
	`OSSched
();

159 *
p_îr
 = 
OS_ERR_NONE
;

160 
	}
}

249 
	$OSTaskCª©e
 (
OS_TCB
 *
p_tcb
,

250 
CPU_CHAR
 *
p_«me
,

251 
OS_TASK_PTR
 
p_èsk
,

252 *
p_¨g
,

253 
OS_PRIO
 
¥io
,

254 
CPU_STK
 *
p_°k_ba£
,

255 
CPU_STK_SIZE
 
°k_limô
,

256 
CPU_STK_SIZE
 
°k_size
,

257 
OS_MSG_QTY
 
q_size
,

258 
OS_TICK
 
time_qu™è
,

259 *
p_ext
,

260 
OS_OPT
 
›t
,

261 
OS_ERR
 *
p_îr
)

263 
CPU_STK_SIZE
 
i
;

264 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

265 
OS_REG_ID
 
ªg_nbr
;

267 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

268 
OS_TLS_ID
 
id
;

271 
CPU_STK
 *
p_•
;

272 
CPU_STK
 *
p_°k_limô
;

273 
	`CPU_SR_ALLOC
();

277 #ifde‡
OS_SAFETY_CRITICAL


278 i‡(
p_îr
 =(
OS_ERR
 *)0) {

279 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

284 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


285 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

286 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

291 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

292 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

293 *
p_îr
 = 
OS_ERR_TASK_CREATE_ISR
;

298 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

299 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

300 *
p_îr
 = 
OS_ERR_TCB_INVALID
;

303 i‡(
p_èsk
 =(
OS_TASK_PTR
)0) {

304 *
p_îr
 = 
OS_ERR_TASK_INVALID
;

307 i‡(
p_°k_ba£
 =(
CPU_STK
 *)0) {

308 *
p_îr
 = 
OS_ERR_STK_INVALID
;

311 i‡(
°k_size
 < 
OSCfg_StkSizeMö
) {

312 *
p_îr
 = 
OS_ERR_STK_SIZE_INVALID
;

315 i‡(
°k_limô
 >
°k_size
) {

316 *
p_îr
 = 
OS_ERR_STK_LIMIT_INVALID
;

319 i‡(
¥io
 >
OS_CFG_PRIO_MAX
) {

320 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

325 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

326 i‡(
¥io
 =(
OS_PRIO
)0) {

327 i‡(
p_tcb
 !&
OSI¡QTaskTCB
) {

328 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

334 i‡(
¥io
 =(
OS_CFG_PRIO_MAX
 - 1u)) {

335 i‡(
p_tcb
 !&
OSIdÀTaskTCB
) {

336 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

341 
	`OS_TaskInôTCB
(
p_tcb
);

343 *
p_îr
 = 
OS_ERR_NONE
;

345 i‡((
›t
 & 
OS_OPT_TASK_STK_CHK
Ë!(
OS_OPT
)0) {

346 i‡((
›t
 & 
OS_OPT_TASK_STK_CLR
Ë!(
OS_OPT
)0) {

347 
p_•
 = 
p_°k_ba£
;

348 
i
 = 0u; i < 
°k_size
; i++) {

349 *
p_•
 = (
CPU_STK
)0;

350 
p_•
++;

355 #i‡(
CPU_CFG_STK_GROWTH
 =
CPU_STK_GROWTH_HI_TO_LO
)

356 
p_°k_limô
 = 
p_°k_ba£
 + 
°k_limô
;

358 
p_°k_limô
 = 
p_°k_ba£
 + (
°k_size
 - 1uË- 
°k_limô
;

361 
p_•
 = 
	`OSTaskStkInô
(
p_èsk
,

362 
p_¨g
,

363 
p_°k_ba£
,

364 
p_°k_limô
,

365 
°k_size
,

366 
›t
);

369 
p_tcb
->
TaskE¡ryAddr
 = 
p_èsk
;

370 
p_tcb
->
TaskE¡ryArg
 = 
p_¨g
;

372 
p_tcb
->
NamePå
 = 
p_«me
;

374 
p_tcb
->
Prio
 = 
¥io
;

376 
p_tcb
->
StkPå
 = 
p_•
;

377 
p_tcb
->
StkLimôPå
 = 
p_°k_limô
;

379 
p_tcb
->
TimeQu™è
 = 
time_qu™è
;

380 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

381 i‡(
time_qu™è
 =(
OS_TICK
)0) {

382 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

384 
p_tcb
->
TimeQu™èCå
 = 
time_qu™è
;

387 
p_tcb
->
ExtPå
 = 
p_ext
;

388 
p_tcb
->
StkBa£På
 = 
p_°k_ba£
;

389 
p_tcb
->
StkSize
 = 
°k_size
;

390 
p_tcb
->
O±
 = 
›t
;

392 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

393 
ªg_nbr
 = 0u;Ñeg_nb∏< 
OS_CFG_TASK_REG_TBL_SIZE
;Ñeg_nbr++) {

394 
p_tcb
->
RegTbl
[
ªg_nbr
] = (
OS_REG
)0;

398 #i‡
OS_CFG_TASK_Q_EN
 > 0u

399 
	`OS_MsgQInô
(&
p_tcb
->
MsgQ
,

400 
q_size
);

402 ()&
q_size
;

405 
	`OSTaskCª©eHook
(
p_tcb
);

407 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

408 
id
 = 0u; id < 
OS_CFG_TLS_TBL_SIZE
; id++) {

409 
p_tcb
->
TLS_Tbl
[
id
] = (
OS_TLS
)0;

411 
	`OS_TLS_TaskCª©e
(
p_tcb
);

414 
	`OS_CRITICAL_ENTER
();

415 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

416 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

418 #i‡
OS_CFG_DBG_EN
 > 0u

419 
	`OS_TaskDbgLi°Add
(
p_tcb
);

422 
OSTaskQty
++;

424 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

425 
	`OS_CRITICAL_EXIT
();

429 
	`OS_CRITICAL_EXIT_NO_SCHED
();

431 
	`OSSched
();

432 
	}
}

459 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

460 
	$OSTaskDñ
 (
OS_TCB
 *
p_tcb
,

461 
OS_ERR
 *
p_îr
)

463 
	`CPU_SR_ALLOC
();

467 #ifde‡
OS_SAFETY_CRITICAL


468 i‡(
p_îr
 =(
OS_ERR
 *)0) {

469 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

474 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

475 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

476 *
p_îr
 = 
OS_ERR_TASK_DEL_ISR
;

481 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

482 *
p_îr
 = 
OS_ERR_TASK_DEL_IDLE
;

486 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

487 i‡(
p_tcb
 =&
OSI¡QTaskTCB
) {

488 *
p_îr
 = 
OS_ERR_TASK_DEL_INVALID
;

493 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

494 
	`CPU_CRITICAL_ENTER
();

495 
p_tcb
 = 
OSTCBCurPå
;

496 
	`CPU_CRITICAL_EXIT
();

499 
	`OS_CRITICAL_ENTER
();

500 
p_tcb
->
TaskSèã
) {

501 
OS_TASK_STATE_RDY
:

502 
	`OS_RdyLi°Remove
(
p_tcb
);

505 
OS_TASK_STATE_SUSPENDED
:

508 
OS_TASK_STATE_DLY
:

509 
OS_TASK_STATE_DLY_SUSPENDED
:

510 
	`OS_TickLi°Remove
(
p_tcb
);

513 
OS_TASK_STATE_PEND
:

514 
OS_TASK_STATE_PEND_SUSPENDED
:

515 
OS_TASK_STATE_PEND_TIMEOUT
:

516 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

517 
	`OS_TickLi°Remove
(
p_tcb
);

518 
p_tcb
->
PídOn
) {

519 
OS_TASK_PEND_ON_NOTHING
:

520 
OS_TASK_PEND_ON_TASK_Q
:

521 
OS_TASK_PEND_ON_TASK_SEM
:

524 
OS_TASK_PEND_ON_FLAG
:

525 
OS_TASK_PEND_ON_MULTI
:

526 
OS_TASK_PEND_ON_MUTEX
:

527 
OS_TASK_PEND_ON_Q
:

528 
OS_TASK_PEND_ON_SEM
:

529 
	`OS_PídLi°Remove
(
p_tcb
);

538 
	`OS_CRITICAL_EXIT
();

539 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

543 #i‡
OS_CFG_TASK_Q_EN
 > 0u

544 ()
	`OS_MsgQFªeAŒ
(&
p_tcb
->
MsgQ
);

547 
	`OSTaskDñHook
(
p_tcb
);

549 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

550 
	`OS_TLS_TaskDñ
(
p_tcb
);

553 #i‡
OS_CFG_DBG_EN
 > 0u

554 
	`OS_TaskDbgLi°Remove
(
p_tcb
);

556 
OSTaskQty
--;

558 
	`OS_TaskInôTCB
(
p_tcb
);

559 
p_tcb
->
TaskSèã
 = (
OS_STATE
)
OS_TASK_STATE_DEL
;

561 
	`OS_CRITICAL_EXIT_NO_SCHED
();

563 *
p_îr
 = 
OS_ERR_NONE
;

565 
	`OSSched
();

566 
	}
}

593 #i‡
OS_CFG_TASK_Q_EN
 > 0u

594 
OS_MSG_QTY
 
	$OSTaskQFlush
 (
OS_TCB
 *
p_tcb
,

595 
OS_ERR
 *
p_îr
)

597 
OS_MSG_QTY
 
íåõs
;

598 
	`CPU_SR_ALLOC
();

602 #ifde‡
OS_SAFETY_CRITICAL


603 i‡(
p_îr
 =(
OS_ERR
 *)0) {

604 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

605  ((
OS_MSG_QTY
)0);

609 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

610 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

611 *
p_îr
 = 
OS_ERR_FLUSH_ISR
;

612  ((
OS_MSG_QTY
)0);

616 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

617 
	`CPU_CRITICAL_ENTER
();

618 
p_tcb
 = 
OSTCBCurPå
;

619 
	`CPU_CRITICAL_EXIT
();

622 
	`OS_CRITICAL_ENTER
();

623 
íåõs
 = 
	`OS_MsgQFªeAŒ
(&
p_tcb
->
MsgQ
);

624 
	`OS_CRITICAL_EXIT
();

625 *
p_îr
 = 
OS_ERR_NONE
;

626  (
íåõs
);

627 
	}
}

671 #i‡
OS_CFG_TASK_Q_EN
 > 0u

672 *
	$OSTaskQPíd
 (
OS_TICK
 
timeout
,

673 
OS_OPT
 
›t
,

674 
OS_MSG_SIZE
 *
p_msg_size
,

675 
CPU_TS
 *
p_ts
,

676 
OS_ERR
 *
p_îr
)

678 
OS_MSG_Q
 *
p_msg_q
;

679 *
p_void
;

680 
	`CPU_SR_ALLOC
();

684 #ifde‡
OS_SAFETY_CRITICAL


685 i‡(
p_îr
 =(
OS_ERR
 *)0) {

686 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

691 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

692 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

693 *
p_îr
 = 
OS_ERR_PEND_ISR
;

698 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

699 i‡(
p_msg_size
 =(
OS_MSG_SIZE
 *)0) {

700 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

703 
›t
) {

704 
OS_OPT_PEND_BLOCKING
:

705 
OS_OPT_PEND_NON_BLOCKING
:

709 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

714 i‡(
p_ts
 !(
CPU_TS
 *)0) {

715 *
p_ts
 = (
CPU_TS
 )0;

718 
	`CPU_CRITICAL_ENTER
();

719 
p_msg_q
 = &
OSTCBCurPå
->
MsgQ
;

720 
p_void
 = 
	`OS_MsgQGë
(
p_msg_q
,

721 
p_msg_size
,

722 
p_ts
,

723 
p_îr
);

724 i‡(*
p_îr
 =
OS_ERR_NONE
) {

725 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

726 i‡(
p_ts
 !(
CPU_TS
 *)0) {

727 
OSTCBCurPå
->
MsgQPídTime
 = 
	`OS_TS_GET
(Ë- *
p_ts
;

728 i‡(
OSTCBCurPå
->
MsgQPídTimeMax
 < OSTCBCurPå->
MsgQPídTime
) {

729 
OSTCBCurPå
->
MsgQPídTimeMax
 = OSTCBCurPå->
MsgQPídTime
;

733 
	`CPU_CRITICAL_EXIT
();

734  (
p_void
);

737 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

738 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

739 
	`CPU_CRITICAL_EXIT
();

742 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

743 
	`CPU_CRITICAL_EXIT
();

744 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

749 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

750 
	`OS_Píd
((
OS_PEND_DATA
 *)0,

751 (
OS_PEND_OBJ
 *)0,

752 (
OS_STATE
 )
OS_TASK_PEND_ON_TASK_Q
,

753 (
OS_TICK
 )
timeout
);

754 
	`OS_CRITICAL_EXIT_NO_SCHED
();

756 
	`OSSched
();

758 
	`CPU_CRITICAL_ENTER
();

759 
OSTCBCurPå
->
PídSètus
) {

760 
OS_STATUS_PEND_OK
:

761 
p_void
 = 
OSTCBCurPå
->
MsgPå
;

762 *
p_msg_size
 = 
OSTCBCurPå
->
MsgSize
;

763 i‡(
p_ts
 !(
CPU_TS
 *)0) {

764 *
p_ts
 = 
OSTCBCurPå
->
TS
;

765 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

766 
OSTCBCurPå
->
MsgQPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

767 i‡(
OSTCBCurPå
->
MsgQPídTimeMax
 < OSTCBCurPå->
MsgQPídTime
) {

768 
OSTCBCurPå
->
MsgQPídTimeMax
 = OSTCBCurPå->
MsgQPídTime
;

772 *
p_îr
 = 
OS_ERR_NONE
;

775 
OS_STATUS_PEND_ABORT
:

776 
p_void
 = (*)0;

777 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

778 i‡(
p_ts
 !(
CPU_TS
 *)0) {

779 *
p_ts
 = (
CPU_TS
 )0;

781 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

784 
OS_STATUS_PEND_TIMEOUT
:

786 
p_void
 = (*)0;

787 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

788 i‡(
p_ts
 !(
CPU_TS
 *)0) {

789 *
p_ts
 = 
OSTCBCurPå
->
TS
;

791 *
p_îr
 = 
OS_ERR_TIMEOUT
;

794 
	`CPU_CRITICAL_EXIT
();

795  (
p_void
);

796 
	}
}

827 #i‡(
OS_CFG_TASK_Q_EN
 > 0uË&& (
OS_CFG_TASK_Q_PEND_ABORT_EN
 > 0u)

828 
CPU_BOOLEAN
 
	$OSTaskQPídAb‹t
 (
OS_TCB
 *
p_tcb
,

829 
OS_OPT
 
›t
,

830 
OS_ERR
 *
p_îr
)

832 
CPU_TS
 
ts
;

833 
	`CPU_SR_ALLOC
();

837 #ifde‡
OS_SAFETY_CRITICAL


838 i‡(
p_îr
 =(
OS_ERR
 *)0) {

839 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

840  (
DEF_FALSE
);

844 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

845 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

846 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

847  (
DEF_FALSE
);

851 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

852 
›t
) {

853 
OS_OPT_POST_NONE
:

854 
OS_OPT_POST_NO_SCHED
:

858 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

859  (
DEF_FALSE
);

863 
	`CPU_CRITICAL_ENTER
();

864 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

865 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

866 (
p_tcb
 =
OSTCBCurPå
)) {

867 
	`CPU_CRITICAL_EXIT
();

868 *
p_îr
 = 
OS_ERR_PEND_ABORT_SELF
;

869  (
DEF_FALSE
);

873 i‡(
p_tcb
->
PídOn
 !
OS_TASK_PEND_ON_TASK_Q
) {

874 
	`CPU_CRITICAL_EXIT
();

875 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

876  (
DEF_FALSE
);

879 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

880 
ts
 = 
	`OS_TS_GET
();

881 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)0,

882 
p_tcb
,

883 
ts
);

884 
	`OS_CRITICAL_EXIT_NO_SCHED
();

885 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

886 
	`OSSched
();

888 *
p_îr
 = 
OS_ERR_NONE
;

889  (
DEF_TRUE
);

890 
	}
}

929 #i‡
OS_CFG_TASK_Q_EN
 > 0u

930 
	$OSTaskQPo°
 (
OS_TCB
 *
p_tcb
,

931 *
p_void
,

932 
OS_MSG_SIZE
 
msg_size
,

933 
OS_OPT
 
›t
,

934 
OS_ERR
 *
p_îr
)

936 
CPU_TS
 
ts
;

940 #ifde‡
OS_SAFETY_CRITICAL


941 i‡(
p_îr
 =(
OS_ERR
 *)0) {

942 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

947 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

948 
›t
) {

949 
OS_OPT_POST_FIFO
:

950 
OS_OPT_POST_LIFO
:

951 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_NO_SCHED
:

952 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_NO_SCHED
:

956 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

961 
ts
 = 
	`OS_TS_GET
();

963 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

964 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

965 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_MSG
,

966 (*)
p_tcb
,

967 (*)
p_void
,

968 (
OS_MSG_SIZE
)
msg_size
,

969 (
OS_FLAGS
 )0,

970 (
OS_OPT
 )
›t
,

971 (
CPU_TS
 )
ts
,

972 (
OS_ERR
 *)
p_îr
);

977 
	`OS_TaskQPo°
(
p_tcb
,

978 
p_void
,

979 
msg_size
,

980 
›t
,

981 
ts
,

982 
p_îr
);

983 
	}
}

1010 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1011 
OS_REG
 
	$OSTaskRegGë
 (
OS_TCB
 *
p_tcb
,

1012 
OS_REG_ID
 
id
,

1013 
OS_ERR
 *
p_îr
)

1015 
OS_REG
 
vÆue
;

1016 
	`CPU_SR_ALLOC
();

1020 #ifde‡
OS_SAFETY_CRITICAL


1021 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1022 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1023  ((
OS_REG
)0);

1027 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1028 i‡(
id
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

1029 *
p_îr
 = 
OS_ERR_REG_ID_INVALID
;

1030  ((
OS_REG
)0);

1034 
	`CPU_CRITICAL_ENTER
();

1035 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1036 
p_tcb
 = 
OSTCBCurPå
;

1038 
vÆue
 = 
p_tcb
->
RegTbl
[
id
];

1039 
	`CPU_CRITICAL_EXIT
();

1040 *
p_îr
 = 
OS_ERR_NONE
;

1041  ((
OS_REG
)
vÆue
);

1042 
	}
}

1063 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1064 
OS_REG_ID
 
	$OSTaskRegGëID
 (
OS_ERR
 *
p_îr
)

1066 
OS_REG_ID
 
id
;

1067 
	`CPU_SR_ALLOC
();

1071 #ifde‡
OS_SAFETY_CRITICAL


1072 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1073 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1074  ((
OS_REG_ID
)
OS_CFG_TASK_REG_TBL_SIZE
);

1078 
	`CPU_CRITICAL_ENTER
();

1079 i‡(
OSTaskRegNextAvaûID
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

1080 *
p_îr
 = 
OS_ERR_NO_MORE_ID_AVAIL
;

1081 
	`CPU_CRITICAL_EXIT
();

1082  ((
OS_REG_ID
)
OS_CFG_TASK_REG_TBL_SIZE
);

1085 
id
 = 
OSTaskRegNextAvaûID
;

1086 
OSTaskRegNextAvaûID
++;

1087 
	`CPU_CRITICAL_EXIT
();

1088 *
p_îr
 = 
OS_ERR_NONE
;

1089  (
id
);

1090 
	}
}

1119 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1120 
	$OSTaskRegSë
 (
OS_TCB
 *
p_tcb
,

1121 
OS_REG_ID
 
id
,

1122 
OS_REG
 
vÆue
,

1123 
OS_ERR
 *
p_îr
)

1125 
	`CPU_SR_ALLOC
();

1129 #ifde‡
OS_SAFETY_CRITICAL


1130 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1131 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1136 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1137 i‡(
id
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

1138 *
p_îr
 = 
OS_ERR_REG_ID_INVALID
;

1143 
	`CPU_CRITICAL_ENTER
();

1144 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1145 
p_tcb
 = 
OSTCBCurPå
;

1147 
p_tcb
->
RegTbl
[
id
] = 
vÆue
;

1148 
	`CPU_CRITICAL_EXIT
();

1149 *
p_îr
 = 
OS_ERR_NONE
;

1150 
	}
}

1175 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1176 
	$OSTaskResume
 (
OS_TCB
 *
p_tcb
,

1177 
OS_ERR
 *
p_îr
)

1179 
	`CPU_SR_ALLOC
();

1183 #ifde‡
OS_SAFETY_CRITICAL


1184 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1185 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1190 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 == 0u) && \

1191 (
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u)

1192 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1193 *
p_îr
 = 
OS_ERR_TASK_RESUME_ISR
;

1199 
	`CPU_CRITICAL_ENTER
();

1200 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1201 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

1202 (
p_tcb
 =
OSTCBCurPå
)) {

1203 
	`CPU_CRITICAL_EXIT
();

1204 *
p_îr
 = 
OS_ERR_TASK_RESUME_SELF
;

1208 
	`CPU_CRITICAL_EXIT
();

1210 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1211 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1212 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_RESUME
,

1213 (*)
p_tcb
,

1215 (
OS_MSG_SIZE
)0,

1216 (
OS_FLAGS
 )0,

1217 (
OS_OPT
 )0,

1218 (
CPU_TS
 )0,

1219 (
OS_ERR
 *)
p_îr
);

1224 
	`OS_TaskResume
(
p_tcb
, 
p_îr
);

1225 
	}
}

1262 
OS_SEM_CTR
 
	$OSTaskSemPíd
 (
OS_TICK
 
timeout
,

1263 
OS_OPT
 
›t
,

1264 
CPU_TS
 *
p_ts
,

1265 
OS_ERR
 *
p_îr
)

1267 
OS_SEM_CTR
 
˘r
;

1268 
	`CPU_SR_ALLOC
();

1272 #ifde‡
OS_SAFETY_CRITICAL


1273 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1274 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1275  ((
OS_SEM_CTR
)0);

1279 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1280 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1281 *
p_îr
 = 
OS_ERR_PEND_ISR
;

1282  ((
OS_SEM_CTR
)0);

1286 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1287 
›t
) {

1288 
OS_OPT_PEND_BLOCKING
:

1289 
OS_OPT_PEND_NON_BLOCKING
:

1293 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1294  ((
OS_SEM_CTR
)0);

1298 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1299 *
p_ts
 = (
CPU_TS
 )0;

1302 
	`CPU_CRITICAL_ENTER
();

1303 i‡(
OSTCBCurPå
->
SemCå
 > (
OS_SEM_CTR
)0) {

1304 
OSTCBCurPå
->
SemCå
--;

1305 
˘r
 = 
OSTCBCurPå
->
SemCå
;

1306 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1307 *
p_ts
 = 
OSTCBCurPå
->
TS
;

1309 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1310 
OSTCBCurPå
->
SemPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

1311 i‡(
OSTCBCurPå
->
SemPídTimeMax
 < OSTCBCurPå->
SemPídTime
) {

1312 
OSTCBCurPå
->
SemPídTimeMax
 = OSTCBCurPå->
SemPídTime
;

1315 
	`CPU_CRITICAL_EXIT
();

1316 *
p_îr
 = 
OS_ERR_NONE
;

1317  (
˘r
);

1320 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

1321 
	`CPU_CRITICAL_EXIT
();

1322 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

1323  ((
OS_SEM_CTR
)0);

1325 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

1326 
	`CPU_CRITICAL_EXIT
();

1327 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

1328  ((
OS_SEM_CTR
)0);

1332 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

1333 
	`OS_Píd
((
OS_PEND_DATA
 *)0,

1334 (
OS_PEND_OBJ
 *)0,

1335 (
OS_STATE
 )
OS_TASK_PEND_ON_TASK_SEM
,

1336 (
OS_TICK
 )
timeout
);

1337 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1339 
	`OSSched
();

1341 
	`CPU_CRITICAL_ENTER
();

1342 
OSTCBCurPå
->
PídSètus
) {

1343 
OS_STATUS_PEND_OK
:

1344 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1345 *
p_ts
 = 
OSTCBCurPå
->
TS
;

1346 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1347 
OSTCBCurPå
->
SemPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

1348 i‡(
OSTCBCurPå
->
SemPídTimeMax
 < OSTCBCurPå->
SemPídTime
) {

1349 
OSTCBCurPå
->
SemPídTimeMax
 = OSTCBCurPå->
SemPídTime
;

1353 *
p_îr
 = 
OS_ERR_NONE
;

1356 
OS_STATUS_PEND_ABORT
:

1357 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1358 *
p_ts
 = 
OSTCBCurPå
->
TS
;

1360 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

1363 
OS_STATUS_PEND_TIMEOUT
:

1364 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1365 *
p_ts
 = (
CPU_TS
 )0;

1367 *
p_îr
 = 
OS_ERR_TIMEOUT
;

1371 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

1374 
˘r
 = 
OSTCBCurPå
->
SemCå
;

1375 
	`CPU_CRITICAL_EXIT
();

1376  (
˘r
);

1377 
	}
}

1408 #i‡
OS_CFG_TASK_SEM_PEND_ABORT_EN
 > 0u

1409 
CPU_BOOLEAN
 
	$OSTaskSemPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1410 
OS_OPT
 
›t
,

1411 
OS_ERR
 *
p_îr
)

1413 
CPU_TS
 
ts
;

1414 
	`CPU_SR_ALLOC
();

1418 #ifde‡
OS_SAFETY_CRITICAL


1419 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1420 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1421  (
DEF_FALSE
);

1425 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1426 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1427 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

1428  (
DEF_FALSE
);

1432 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1433 
›t
) {

1434 
OS_OPT_POST_NONE
:

1435 
OS_OPT_POST_NO_SCHED
:

1439 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1440  (
DEF_FALSE
);

1444 
	`CPU_CRITICAL_ENTER
();

1445 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

1446 (
p_tcb
 =
OSTCBCurPå
)) {

1447 
	`CPU_CRITICAL_EXIT
();

1448 *
p_îr
 = 
OS_ERR_PEND_ABORT_SELF
;

1449  (
DEF_FALSE
);

1452 i‡(
p_tcb
->
PídOn
 !
OS_TASK_PEND_ON_TASK_SEM
) {

1453 
	`CPU_CRITICAL_EXIT
();

1454 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

1455  (
DEF_FALSE
);

1457 
	`CPU_CRITICAL_EXIT
();

1459 
	`OS_CRITICAL_ENTER
();

1460 
ts
 = 
	`OS_TS_GET
();

1461 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)0,

1462 
p_tcb
,

1463 
ts
);

1464 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1465 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

1466 
	`OSSched
();

1468 *
p_îr
 = 
OS_ERR_NONE
;

1469  (
DEF_TRUE
);

1470 
	}
}

1497 
OS_SEM_CTR
 
	$OSTaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1498 
OS_OPT
 
›t
,

1499 
OS_ERR
 *
p_îr
)

1501 
OS_SEM_CTR
 
˘r
;

1502 
CPU_TS
 
ts
;

1506 #ifde‡
OS_SAFETY_CRITICAL


1507 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1508 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1509  ((
OS_SEM_CTR
)0);

1513 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1514 
›t
) {

1515 
OS_OPT_POST_NONE
:

1516 
OS_OPT_POST_NO_SCHED
:

1520 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1521  ((
OS_SEM_CTR
)0u);

1525 
ts
 = 
	`OS_TS_GET
();

1527 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1528 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1529 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_SIGNAL
,

1530 (*)
p_tcb
,

1532 (
OS_MSG_SIZE
)0,

1533 (
OS_FLAGS
 )0,

1534 (
OS_OPT
 )0,

1535 (
CPU_TS
 )
ts
,

1536 (
OS_ERR
 *)
p_îr
);

1537  ((
OS_SEM_CTR
)0);

1541 
˘r
 = 
	`OS_TaskSemPo°
(
p_tcb
,

1542 
›t
,

1543 
ts
,

1544 
p_îr
);

1546  (
˘r
);

1547 
	}
}

1570 
OS_SEM_CTR
 
	$OSTaskSemSë
 (
OS_TCB
 *
p_tcb
,

1571 
OS_SEM_CTR
 
˙t
,

1572 
OS_ERR
 *
p_îr
)

1574 
OS_SEM_CTR
 
˘r
;

1575 
	`CPU_SR_ALLOC
();

1579 #ifde‡
OS_SAFETY_CRITICAL


1580 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1581 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1582  ((
OS_SEM_CTR
)0);

1586 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1587 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1588 *
p_îr
 = 
OS_ERR_SET_ISR
;

1589  ((
OS_SEM_CTR
)0);

1593 
	`CPU_CRITICAL_ENTER
();

1594 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1595 
p_tcb
 = 
OSTCBCurPå
;

1597 
˘r
 = 
p_tcb
->
SemCå
;

1598 
p_tcb
->
SemCå
 = (
OS_SEM_CTR
)
˙t
;

1599 
	`CPU_CRITICAL_EXIT
();

1600 *
p_îr
 = 
OS_ERR_NONE
;

1601  (
˘r
);

1602 
	}
}

1629 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1630 
	$OSTaskStkChk
 (
OS_TCB
 *
p_tcb
,

1631 
CPU_STK_SIZE
 *
p_‰ì
,

1632 
CPU_STK_SIZE
 *
p_u£d
,

1633 
OS_ERR
 *
p_îr
)

1635 
CPU_STK_SIZE
 
‰ì_°k
;

1636 
CPU_STK
 *
p_°k
;

1637 
	`CPU_SR_ALLOC
();

1641 #ifde‡
OS_SAFETY_CRITICAL


1642 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1643 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1648 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1649 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1650 *
p_îr
 = 
OS_ERR_TASK_STK_CHK_ISR
;

1655 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1656 i‡(
p_‰ì
 =(
CPU_STK_SIZE
*)0) {

1657 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

1661 i‡(
p_u£d
 =(
CPU_STK_SIZE
*)0) {

1662 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

1667 
	`CPU_CRITICAL_ENTER
();

1668 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1669 
p_tcb
 = 
OSTCBCurPå
;

1672 i‡(
p_tcb
->
StkPå
 =(
CPU_STK
*)0) {

1673 
	`CPU_CRITICAL_EXIT
();

1674 *
p_‰ì
 = (
CPU_STK_SIZE
)0;

1675 *
p_u£d
 = (
CPU_STK_SIZE
)0;

1676 *
p_îr
 = 
OS_ERR_TASK_NOT_EXIST
;

1680 i‡((
p_tcb
->
O±
 & 
OS_OPT_TASK_STK_CHK
Ë=(
OS_OPT
)0) {

1681 
	`CPU_CRITICAL_EXIT
();

1682 *
p_‰ì
 = (
CPU_STK_SIZE
)0;

1683 *
p_u£d
 = (
CPU_STK_SIZE
)0;

1684 *
p_îr
 = 
OS_ERR_TASK_OPT
;

1687 
	`CPU_CRITICAL_EXIT
();

1689 
‰ì_°k
 = 0u;

1690 #i‡
CPU_CFG_STK_GROWTH
 =
CPU_STK_GROWTH_HI_TO_LO


1691 
p_°k
 = 
p_tcb
->
StkBa£På
;

1692 *
p_°k
 =(
CPU_STK
)0) {

1693 
p_°k
++;

1694 
‰ì_°k
++;

1697 
p_°k
 = 
p_tcb
->
StkBa£På
 +Ö_tcb->
StkSize
 - 1u;

1698 *
p_°k
 =(
CPU_STK
)0) {

1699 
‰ì_°k
++;

1700 
p_°k
--;

1703 *
p_‰ì
 = 
‰ì_°k
;

1704 *
p_u£d
 = (
p_tcb
->
StkSize
 - 
‰ì_°k
);

1705 *
p_îr
 = 
OS_ERR_NONE
;

1706 
	}
}

1737 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1738 
	$OSTaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1739 
OS_ERR
 *
p_îr
)

1741 #ifde‡
OS_SAFETY_CRITICAL


1742 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1743 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1748 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 == 0u) && \

1749 (
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u)

1750 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1751 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_ISR
;

1756 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

1757 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_IDLE
;

1761 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1762 i‡(
p_tcb
 =&
OSI¡QTaskTCB
) {

1763 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_INT_HANDLER
;

1767 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1768 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_SUSPEND
,

1769 (*)
p_tcb
,

1771 (
OS_MSG_SIZE
)0,

1772 (
OS_FLAGS
 )0,

1773 (
OS_OPT
 )0,

1774 (
CPU_TS
 )0,

1775 (
OS_ERR
 *)
p_îr
);

1780 
	`OS_TaskSu•íd
(
p_tcb
, 
p_îr
);

1781 
	}
}

1805 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1806 
	$OSTaskTimeQu™èSë
 (
OS_TCB
 *
p_tcb
,

1807 
OS_TICK
 
time_qu™è
,

1808 
OS_ERR
 *
p_îr
)

1810 
	`CPU_SR_ALLOC
();

1814 #ifde‡
OS_SAFETY_CRITICAL


1815 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1816 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1821 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1822 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1823 *
p_îr
 = 
OS_ERR_SET_ISR
;

1828 
	`CPU_CRITICAL_ENTER
();

1829 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1830 
p_tcb
 = 
OSTCBCurPå
;

1833 i‡(
time_qu™è
 == 0u) {

1834 
p_tcb
->
TimeQu™è
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

1836 
p_tcb
->
TimeQu™è
 = 
time_qu™è
;

1838 i‡(
p_tcb
->
TimeQu™è
 >Ö_tcb->
TimeQu™èCå
) {

1839 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

1841 
	`CPU_CRITICAL_EXIT
();

1842 *
p_îr
 = 
OS_ERR_NONE
;

1843 
	}
}

1861 #i‡
OS_CFG_DBG_EN
 > 0u

1862 
	$OS_TaskDbgLi°Add
 (
OS_TCB
 *
p_tcb
)

1864 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

1865 i‡(
OSTaskDbgLi°På
 =(
OS_TCB
 *)0) {

1866 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

1868 
p_tcb
->
DbgNextPå
 = 
OSTaskDbgLi°På
;

1869 
OSTaskDbgLi°På
->
DbgPªvPå
 = 
p_tcb
;

1871 
OSTaskDbgLi°På
 = 
p_tcb
;

1872 
	}
}

1876 
	$OS_TaskDbgLi°Remove
 (
OS_TCB
 *
p_tcb
)

1878 
OS_TCB
 *
p_tcb_√xt
;

1879 
OS_TCB
 *
p_tcb_¥ev
;

1882 
p_tcb_¥ev
 = 
p_tcb
->
DbgPªvPå
;

1883 
p_tcb_√xt
 = 
p_tcb
->
DbgNextPå
;

1885 i‡(
p_tcb_¥ev
 =(
OS_TCB
 *)0) {

1886 
OSTaskDbgLi°På
 = 
p_tcb_√xt
;

1887 i‡(
p_tcb_√xt
 !(
OS_TCB
 *)0) {

1888 
p_tcb_√xt
->
DbgPªvPå
 = (
OS_TCB
 *)0;

1890 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

1892 } i‡(
p_tcb_√xt
 =(
OS_TCB
 *)0) {

1893 
p_tcb_¥ev
->
DbgNextPå
 = (
OS_TCB
 *)0;

1894 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

1897 
p_tcb_¥ev
->
DbgNextPå
 = 
p_tcb_√xt
;

1898 
p_tcb_√xt
->
DbgPªvPå
 = 
p_tcb_¥ev
;

1899 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

1900 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

1902 
	}
}

1923 
	$OS_TaskInô
 (
OS_ERR
 *
p_îr
)

1925 #ifde‡
OS_SAFETY_CRITICAL


1926 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1927 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1932 #i‡
OS_CFG_DBG_EN
 > 0u

1933 
OSTaskDbgLi°På
 = (
OS_TCB
 *)0;

1936 
OSTaskQty
 = (
OS_OBJ_QTY
 )0;

1937 
OSTaskCtxSwCå
 = (
OS_CTX_SW_CTR
)0;

1939 *
p_îr
 = 
OS_ERR_NONE
;

1940 
	}
}

1957 
	$OS_TaskInôTCB
 (
OS_TCB
 *
p_tcb
)

1959 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1960 
OS_REG_ID
 
ªg_id
;

1962 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

1963 
OS_TLS_ID
 
id
;

1965 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1966 
CPU_TS
 
ts
;

1970 
p_tcb
->
StkPå
 = (
CPU_STK
 *)0;

1971 
p_tcb
->
StkLimôPå
 = (
CPU_STK
 *)0;

1973 
p_tcb
->
ExtPå
 = (*)0;

1975 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

1976 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

1978 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

1979 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

1980 
p_tcb
->
TickSpokePå
 = (
OS_TICK_SPOKE
 *)0;

1982 
p_tcb
->
NamePå
 = (
CPU_CHAR
 *)((*)"?Task");

1984 
p_tcb
->
StkBa£På
 = (
CPU_STK
 *)0;

1986 
p_tcb
->
TaskE¡ryAddr
 = (
OS_TASK_PTR
 )0;

1987 
p_tcb
->
TaskE¡ryArg
 = (*)0;

1989 #i‡(
OS_CFG_PEND_MULTI_EN
 > 0u)

1990 
p_tcb
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

1991 
p_tcb
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0u;

1994 
p_tcb
->
TS
 = (
CPU_TS
 )0u;

1996 #i‡(
OS_MSG_EN
 > 0u)

1997 
p_tcb
->
MsgPå
 = (*)0;

1998 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
 )0u;

2001 #i‡
OS_CFG_TASK_Q_EN
 > 0u

2002 
	`OS_MsgQInô
(&
p_tcb
->
MsgQ
,

2003 (
OS_MSG_QTY
)0u);

2004 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2005 
p_tcb
->
MsgQPídTime
 = (
CPU_TS
 )0u;

2006 
p_tcb
->
MsgQPídTimeMax
 = (
CPU_TS
 )0u;

2010 #i‡
OS_CFG_FLAG_EN
 > 0u

2011 
p_tcb
->
FœgsPíd
 = (
OS_FLAGS
 )0u;

2012 
p_tcb
->
FœgsO±
 = (
OS_OPT
 )0u;

2013 
p_tcb
->
FœgsRdy
 = (
OS_FLAGS
 )0u;

2016 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

2017 
ªg_id
 = 0u;Ñeg_id < 
OS_CFG_TASK_REG_TBL_SIZE
;Ñeg_id++) {

2018 
p_tcb
->
RegTbl
[
ªg_id
] = (
OS_REG
)0u;

2022 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

2023 
id
 = 0u; id < 
OS_CFG_TLS_TBL_SIZE
; id++) {

2024 
p_tcb
->
TLS_Tbl
[
id
] = (
OS_TLS
)0;

2028 
p_tcb
->
SemCå
 = (
OS_SEM_CTR
 )0u;

2029 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2030 
p_tcb
->
SemPídTime
 = (
CPU_TS
 )0u;

2031 
p_tcb
->
SemPídTimeMax
 = (
CPU_TS
 )0u;

2034 
p_tcb
->
StkSize
 = (
CPU_STK_SIZE
 )0u;

2037 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

2038 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
 )0u;

2041 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

2042 
p_tcb
->
StkFªe
 = (
CPU_STK_SIZE
 )0u;

2043 
p_tcb
->
StkU£d
 = (
CPU_STK_SIZE
 )0u;

2046 
p_tcb
->
O±
 = (
OS_OPT
 )0u;

2048 
p_tcb
->
TickCåPªv
 = (
OS_TICK
 )
OS_TICK_TH_INIT
;

2049 
p_tcb
->
TickCåM©ch
 = (
OS_TICK
 )0u;

2050 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

2052 
p_tcb
->
TimeQu™è
 = (
OS_TICK
 )0u;

2053 
p_tcb
->
TimeQu™èCå
 = (
OS_TICK
 )0u;

2055 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2056 
p_tcb
->
CPUUßge
 = (
OS_CPU_USAGE
 )0u;

2057 
p_tcb
->
CPUUßgeMax
 = (
OS_CPU_USAGE
 )0u;

2058 
p_tcb
->
CtxSwCå
 = (
OS_CTX_SW_CTR
 )0u;

2059 
p_tcb
->
Cy˛esDñè
 = (
CPU_TS
 )0u;

2060 
ts
 = 
	`OS_TS_GET
();

2061 
p_tcb
->
Cy˛esSèπ
 = 
ts
;

2062 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
 )0u;

2064 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


2065 
p_tcb
->
I¡DisTimeMax
 = (
CPU_TS
 )0u;

2067 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

2068 
p_tcb
->
SchedLockTimeMax
 = (
CPU_TS
 )0u;

2071 
p_tcb
->
PídOn
 = (
OS_STATE
 )
OS_TASK_PEND_ON_NOTHING
;

2072 
p_tcb
->
PídSètus
 = (
OS_STATUS
 )
OS_STATUS_PEND_OK
;

2073 
p_tcb
->
TaskSèã
 = (
OS_STATE
 )
OS_TASK_STATE_RDY
;

2075 
p_tcb
->
Prio
 = (
OS_PRIO
 )
OS_PRIO_INIT
;

2077 #i‡
OS_CFG_DBG_EN
 > 0u

2078 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

2079 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

2080 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

2082 
	}
}

2126 #i‡
OS_CFG_TASK_Q_EN
 > 0u

2127 
	$OS_TaskQPo°
 (
OS_TCB
 *
p_tcb
,

2128 *
p_void
,

2129 
OS_MSG_SIZE
 
msg_size
,

2130 
OS_OPT
 
›t
,

2131 
CPU_TS
 
ts
,

2132 
OS_ERR
 *
p_îr
)

2134 
	`CPU_SR_ALLOC
();

2138 
	`OS_CRITICAL_ENTER
();

2139 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2140 
p_tcb
 = 
OSTCBCurPå
;

2142 *
p_îr
 = 
OS_ERR_NONE
;

2143 
p_tcb
->
TaskSèã
) {

2144 
OS_TASK_STATE_RDY
:

2145 
OS_TASK_STATE_DLY
:

2146 
OS_TASK_STATE_SUSPENDED
:

2147 
OS_TASK_STATE_DLY_SUSPENDED
:

2148 
	`OS_MsgQPut
(&
p_tcb
->
MsgQ
,

2149 
p_void
,

2150 
msg_size
,

2151 
›t
,

2152 
ts
,

2153 
p_îr
);

2154 
	`OS_CRITICAL_EXIT
();

2157 
OS_TASK_STATE_PEND
:

2158 
OS_TASK_STATE_PEND_TIMEOUT
:

2159 
OS_TASK_STATE_PEND_SUSPENDED
:

2160 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2161 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_TASK_Q
) {

2162 
	`OS_Po°
((
OS_PEND_OBJ
 *)0,

2163 
p_tcb
,

2164 
p_void
,

2165 
msg_size
,

2166 
ts
);

2167 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2168 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

2169 
	`OSSched
();

2172 
	`OS_MsgQPut
(&
p_tcb
->
MsgQ
,

2173 
p_void
,

2174 
msg_size
,

2175 
›t
,

2176 
ts
,

2177 
p_îr
);

2178 
	`OS_CRITICAL_EXIT
();

2183 
	`OS_CRITICAL_EXIT
();

2184 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2187 
	}
}

2214 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

2215 
	$OS_TaskResume
 (
OS_TCB
 *
p_tcb
,

2216 
OS_ERR
 *
p_îr
)

2218 
	`CPU_SR_ALLOC
();

2221 
	`CPU_CRITICAL_ENTER
();

2222 *
p_îr
 = 
OS_ERR_NONE
;

2223 
p_tcb
->
TaskSèã
) {

2224 
OS_TASK_STATE_RDY
:

2225 
OS_TASK_STATE_DLY
:

2226 
OS_TASK_STATE_PEND
:

2227 
OS_TASK_STATE_PEND_TIMEOUT
:

2228 
	`CPU_CRITICAL_EXIT
();

2229 *
p_îr
 = 
OS_ERR_TASK_NOT_SUSPENDED
;

2232 
OS_TASK_STATE_SUSPENDED
:

2233 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

2234 
p_tcb
->
Su•ídCå
--;

2235 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2236 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

2237 
	`OS_TaskRdy
(
p_tcb
);

2239 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2242 
OS_TASK_STATE_DLY_SUSPENDED
:

2243 
p_tcb
->
Su•ídCå
--;

2244 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2245 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

2247 
	`CPU_CRITICAL_EXIT
();

2250 
OS_TASK_STATE_PEND_SUSPENDED
:

2251 
p_tcb
->
Su•ídCå
--;

2252 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2253 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

2255 
	`CPU_CRITICAL_EXIT
();

2258 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2259 
p_tcb
->
Su•ídCå
--;

2260 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2261 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT
;

2263 
	`CPU_CRITICAL_EXIT
();

2267 
	`CPU_CRITICAL_EXIT
();

2268 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2272 
	`OSSched
();

2273 
	}
}

2292 
	$OS_TaskRëu∫
 ()

2294 
OS_ERR
 
îr
;

2298 
	`OSTaskRëu∫Hook
(
OSTCBCurPå
);

2299 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

2300 
	`OSTaskDñ
((
OS_TCB
 *)0,

2301 (
OS_ERR
 *)&
îr
);

2304 
	`OSTimeDly
((
OS_TICK
 )
OSCfg_TickR©e_Hz
,

2305 (
OS_OPT
 )
OS_OPT_TIME_DLY
,

2306 (
OS_ERR
 *)&
îr
);

2309 
	}
}

2342 
OS_SEM_CTR
 
	$OS_TaskSemPo°
 (
OS_TCB
 *
p_tcb
,

2343 
OS_OPT
 
›t
,

2344 
CPU_TS
 
ts
,

2345 
OS_ERR
 *
p_îr
)

2347 
OS_SEM_CTR
 
˘r
;

2348 
	`CPU_SR_ALLOC
();

2352 
	`OS_CRITICAL_ENTER
();

2353 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2354 
p_tcb
 = 
OSTCBCurPå
;

2356 
p_tcb
->
TS
 = 
ts
;

2357 *
p_îr
 = 
OS_ERR_NONE
;

2358 
p_tcb
->
TaskSèã
) {

2359 
OS_TASK_STATE_RDY
:

2360 
OS_TASK_STATE_DLY
:

2361 
OS_TASK_STATE_SUSPENDED
:

2362 
OS_TASK_STATE_DLY_SUSPENDED
:

2363 (
OS_SEM_CTR
)) {

2365 i‡(
p_tcb
->
SemCå
 =
DEF_INT_08U_MAX_VAL
) {

2366 
	`OS_CRITICAL_EXIT
();

2367 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2368  ((
OS_SEM_CTR
)0);

2373 i‡(
p_tcb
->
SemCå
 =
DEF_INT_16U_MAX_VAL
) {

2374 
	`OS_CRITICAL_EXIT
();

2375 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2376  ((
OS_SEM_CTR
)0);

2381 i‡(
p_tcb
->
SemCå
 =
DEF_INT_32U_MAX_VAL
) {

2382 
	`OS_CRITICAL_EXIT
();

2383 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2384  ((
OS_SEM_CTR
)0);

2391 
p_tcb
->
SemCå
++;

2392 
˘r
 = 
p_tcb
->
SemCå
;

2393 
	`OS_CRITICAL_EXIT
();

2396 
OS_TASK_STATE_PEND
:

2397 
OS_TASK_STATE_PEND_TIMEOUT
:

2398 
OS_TASK_STATE_PEND_SUSPENDED
:

2399 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2400 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_TASK_SEM
) {

2401 
	`OS_Po°
((
OS_PEND_OBJ
 *)0,

2402 (
OS_TCB
 *)
p_tcb
,

2404 (
OS_MSG_SIZE
 )0u,

2405 (
CPU_TS
 )
ts
);

2406 
˘r
 = 
p_tcb
->
SemCå
;

2407 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2408 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

2409 
	`OSSched
();

2412 (
OS_SEM_CTR
)) {

2414 i‡(
p_tcb
->
SemCå
 =
DEF_INT_08U_MAX_VAL
) {

2415 
	`OS_CRITICAL_EXIT
();

2416 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2417  ((
OS_SEM_CTR
)0);

2422 i‡(
p_tcb
->
SemCå
 =
DEF_INT_16U_MAX_VAL
) {

2423 
	`OS_CRITICAL_EXIT
();

2424 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2425  ((
OS_SEM_CTR
)0);

2430 i‡(
p_tcb
->
SemCå
 =
DEF_INT_32U_MAX_VAL
) {

2431 
	`OS_CRITICAL_EXIT
();

2432 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2433  ((
OS_SEM_CTR
)0);

2440 
p_tcb
->
SemCå
++;

2441 
˘r
 = 
p_tcb
->
SemCå
;

2442 
	`OS_CRITICAL_EXIT
();

2447 
	`OS_CRITICAL_EXIT
();

2448 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2449 
˘r
 = (
OS_SEM_CTR
)0;

2452  (
˘r
);

2453 
	}
}

2485 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

2486 
	$OS_TaskSu•íd
 (
OS_TCB
 *
p_tcb
,

2487 
OS_ERR
 *
p_îr
)

2489 
	`CPU_SR_ALLOC
();

2493 
	`CPU_CRITICAL_ENTER
();

2494 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2495 
p_tcb
 = 
OSTCBCurPå
;

2498 i‡(
p_tcb
 =
OSTCBCurPå
) {

2499 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

2500 
	`CPU_CRITICAL_EXIT
();

2501 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

2506 *
p_îr
 = 
OS_ERR_NONE
;

2507 
p_tcb
->
TaskSèã
) {

2508 
OS_TASK_STATE_RDY
:

2509 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

2510 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

2511 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2512 
	`OS_RdyLi°Remove
(
p_tcb
);

2513 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2516 
OS_TASK_STATE_DLY
:

2517 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY_SUSPENDED
;

2518 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2519 
	`CPU_CRITICAL_EXIT
();

2522 
OS_TASK_STATE_PEND
:

2523 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_SUSPENDED
;

2524 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2525 
	`CPU_CRITICAL_EXIT
();

2528 
OS_TASK_STATE_PEND_TIMEOUT
:

2529 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
;

2530 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2531 
	`CPU_CRITICAL_EXIT
();

2534 
OS_TASK_STATE_SUSPENDED
:

2535 
OS_TASK_STATE_DLY_SUSPENDED
:

2536 
OS_TASK_STATE_PEND_SUSPENDED
:

2537 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2538 
p_tcb
->
Su•ídCå
++;

2539 
	`CPU_CRITICAL_EXIT
();

2543 
	`CPU_CRITICAL_EXIT
();

2544 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2548 
	`OSSched
();

2549 
	}
}

	@UCOSIII/uCOS-III/Source/os_tick.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_tick__c
 = "$Id: $";

61 
	$OS_TickTask
 (*
p_¨g
)

63 
OS_ERR
 
îr
;

64 
CPU_TS
 
ts
;

67 
p_¨g
 =Ö_arg;

69 
DEF_ON
) {

70 ()
	`OSTaskSemPíd
((
OS_TICK
 )0,

71 (
OS_OPT
 )
OS_OPT_PEND_BLOCKING
,

72 (
CPU_TS
 *)&
ts
,

73 (
OS_ERR
 *)&
îr
);

74 i‡(
îr
 =
OS_ERR_NONE
) {

75 i‡(
OSRu¬ög
 =
OS_STATE_OS_RUNNING
) {

76 
	`OS_TickLi°Upd©e
();

80 
	}
}

104 
	$OS_TickTaskInô
 (
OS_ERR
 *
p_îr
)

106 #ifde‡
OS_SAFETY_CRITICAL


107 i‡(
p_îr
 =(
OS_ERR
 *)0) {

108 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

113 
OSTickCå
 = (
OS_TICK
)0u;

115 
OSTickTaskTimeMax
 = (
CPU_TS
)0u;

118 
	`OS_TickLi°Inô
();

121 i‡(
OSCfg_TickTaskStkBa£På
 =(
CPU_STK
 *)0) {

122 *
p_îr
 = 
OS_ERR_TICK_STK_INVALID
;

126 i‡(
OSCfg_TickTaskStkSize
 < 
OSCfg_StkSizeMö
) {

127 *
p_îr
 = 
OS_ERR_TICK_STK_SIZE_INVALID
;

131 i‡(
OSCfg_TickTaskPrio
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

132 *
p_îr
 = 
OS_ERR_TICK_PRIO_INVALID
;

136 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSTickTaskTCB
,

137 (
CPU_CHAR
 *)((*)"uC/OS-III Tick Task"),

138 (
OS_TASK_PTR
 )
OS_TickTask
,

140 (
OS_PRIO
 )
OSCfg_TickTaskPrio
,

141 (
CPU_STK
 *)
OSCfg_TickTaskStkBa£På
,

142 (
CPU_STK_SIZE
)
OSCfg_TickTaskStkLimô
,

143 (
CPU_STK_SIZE
)
OSCfg_TickTaskStkSize
,

144 (
OS_MSG_QTY
 )0u,

145 (
OS_TICK
 )0u,

147 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

148 (
OS_ERR
 *)
p_îr
);

149 
	}
}

166 
	$OS_TickLi°Inô
 ()

168 
OS_TICK_SPOKE_IX
 
i
;

169 
OS_TICK_SPOKE
 *
p_•oke
;

173 
i
 = 0u; i < 
OSCfg_TickWhìlSize
; i++) {

174 
p_•oke
 = (
OS_TICK_SPOKE
 *)&
OSCfg_TickWhìl
[
i
];

175 
p_•oke
->
Fú°På
 = (
OS_TCB
 *)0;

176 
p_•oke
->
NbrE¡rõs
 = (
OS_OBJ_QTY
 )0u;

177 
p_•oke
->
NbrE¡rõsMax
 = (
OS_OBJ_QTY
 )0u;

179 
	}
}

220 
	$OS_TickLi°In£π
 (
OS_TCB
 *
p_tcb
,

221 
OS_TICK
 
time
,

222 
OS_OPT
 
›t
,

223 
OS_ERR
 *
p_îr
)

225 
OS_TICK
 
tick_dñè
;

226 
OS_TICK
 
tick_√xt
;

227 
OS_TICK_SPOKE
 *
p_•oke
;

228 
OS_TCB
 *
p_tcb0
;

229 
OS_TCB
 *
p_tcb1
;

230 
OS_TICK_SPOKE_IX
 
•oke
;

234 i‡(
›t
 =
OS_OPT_TIME_MATCH
) {

235 
tick_dñè
 = 
time
 - 
OSTickCå
 - 1u;

236 i‡(
tick_dñè
 > 
OS_TICK_TH_RDY
) {

237 
p_tcb
->
TickCåM©ch
 = (
OS_TICK
 )0u;

238 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

239 
p_tcb
->
TickSpokePå
 = (
OS_TICK_SPOKE
 *)0;

240 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

243 
p_tcb
->
TickCåM©ch
 = 
time
;

244 
p_tcb
->
TickRemaö
 = 
tick_dñè
 + 1u;

246 } i‡(
time
 > (
OS_TICK
)0u) {

247 i‡(
›t
 =
OS_OPT_TIME_PERIODIC
) {

248 
tick_√xt
 = 
p_tcb
->
TickCåPªv
 + 
time
;

249 
tick_dñè
 = 
tick_√xt
 - 
OSTickCå
 - 1u;

250 i‡(
tick_dñè
 < 
time
) {

251 
p_tcb
->
TickCåM©ch
 = 
tick_√xt
;

253 
p_tcb
->
TickCåM©ch
 = 
OSTickCå
 + 
time
;

255 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch
 - 
OSTickCå
;

256 
p_tcb
->
TickCåPªv
 =Ö_tcb->
TickCåM©ch
;

259 
p_tcb
->
TickCåM©ch
 = 
OSTickCå
 + 
time
;

260 
p_tcb
->
TickRemaö
 = 
time
;

264 
p_tcb
->
TickCåM©ch
 = (
OS_TICK
 )0u;

265 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

266 
p_tcb
->
TickSpokePå
 = (
OS_TICK_SPOKE
 *)0;

267 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

272 
•oke
 = (
OS_TICK_SPOKE_IX
)(
p_tcb
->
TickCåM©ch
 % 
OSCfg_TickWhìlSize
);

273 
p_•oke
 = &
OSCfg_TickWhìl
[
•oke
];

275 i‡(
p_•oke
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

276 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

277 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

278 
p_•oke
->
Fú°På
 = 
p_tcb
;

279 
p_•oke
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1u;

281 
p_tcb1
 = 
p_•oke
->
Fú°På
;

282 
p_tcb1
 !(
OS_TCB
 *)0) {

283 
p_tcb1
->
TickRemaö
 =Ö_tcb1->
TickCåM©ch


284 - 
OSTickCå
;

285 i‡(
p_tcb
->
TickRemaö
 > 
p_tcb1
->TickRemain) {

286 i‡(
p_tcb1
->
TickNextPå
 !(
OS_TCB
 *)0) {

287 
p_tcb1
 =Ö_tcb1->
TickNextPå
;

289 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

290 
p_tcb
->
TickPªvPå
 = 
p_tcb1
;

291 
p_tcb1
->
TickNextPå
 = 
p_tcb
;

292 
p_tcb1
 = (
OS_TCB
 *)0;

295 i‡(
p_tcb1
->
TickPªvPå
 =(
OS_TCB
 *)0) {

296 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

297 
p_tcb
->
TickNextPå
 = 
p_tcb1
;

298 
p_tcb1
->
TickPªvPå
 = 
p_tcb
;

299 
p_•oke
->
Fú°På
 = 
p_tcb
;

301 
p_tcb0
 = 
p_tcb1
->
TickPªvPå
;

302 
p_tcb
->
TickPªvPå
 = 
p_tcb0
;

303 
p_tcb
->
TickNextPå
 = 
p_tcb1
;

304 
p_tcb0
->
TickNextPå
 = 
p_tcb
;

305 
p_tcb1
->
TickPªvPå
 = 
p_tcb
;

307 
p_tcb1
 = (
OS_TCB
 *)0;

310 
p_•oke
->
NbrE¡rõs
++;

312 i‡(
p_•oke
->
NbrE¡rõsMax
 <Ö_•oke->
NbrE¡rõs
) {

313 
p_•oke
->
NbrE¡rõsMax
 =Ö_•oke->
NbrE¡rõs
;

315 
p_tcb
->
TickSpokePå
 = 
p_•oke
;

316 *
p_îr
 = 
OS_ERR_NONE
;

317 
	}
}

337 
	$OS_TickLi°Remove
 (
OS_TCB
 *
p_tcb
)

339 
OS_TICK_SPOKE
 *
p_•oke
;

340 
OS_TCB
 *
p_tcb1
;

341 
OS_TCB
 *
p_tcb2
;

345 
p_•oke
 = 
p_tcb
->
TickSpokePå
;

346 i‡(
p_•oke
 !(
OS_TICK_SPOKE
 *)0) {

347 
p_tcb
->
TickRemaö
 = (
OS_TICK
)0u;

348 i‡(
p_•oke
->
Fú°På
 =
p_tcb
) {

349 
p_tcb1
 = (
OS_TCB
 *)
p_tcb
->
TickNextPå
;

350 
p_•oke
->
Fú°På
 = 
p_tcb1
;

351 i‡(
p_tcb1
 !(
OS_TCB
 *)0) {

352 
p_tcb1
->
TickPªvPå
 = (
OS_TCB
 *)0;

355 
p_tcb1
 = 
p_tcb
->
TickPªvPå
;

356 
p_tcb2
 = 
p_tcb
->
TickNextPå
;

357 
p_tcb1
->
TickNextPå
 = 
p_tcb2
;

358 i‡(
p_tcb2
 !(
OS_TCB
 *)0) {

359 
p_tcb2
->
TickPªvPå
 = 
p_tcb1
;

362 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

363 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

364 
p_tcb
->
TickSpokePå
 = (
OS_TICK_SPOKE
 *)0;

365 
p_tcb
->
TickCåM©ch
 = (
OS_TICK
 )0u;

366 
p_•oke
->
NbrE¡rõs
--;

368 
	}
}

386 
	$OS_TickLi°Re£tPók
 ()

388 
OS_TICK_SPOKE_IX
 
i
;

389 
OS_TICK_SPOKE
 *
p_•oke
;

393 
i
 = 0u; i < 
OSCfg_TickWhìlSize
; i++) {

394 
p_•oke
 = (
OS_TICK_SPOKE
 *)&
OSCfg_TickWhìl
[
i
];

395 
p_•oke
->
NbrE¡rõsMax
 = (
OS_OBJ_QTY
 )0u;

397 
	}
}

415 
	$OS_TickLi°Upd©e
 ()

417 
CPU_BOOLEAN
 
d⁄e
;

418 
OS_TICK_SPOKE
 *
p_•oke
;

419 
OS_TCB
 *
p_tcb
;

420 
OS_TCB
 *
p_tcb_√xt
;

421 
OS_TICK_SPOKE_IX
 
•oke
;

422 
CPU_TS
 
ts_°¨t
;

423 
CPU_TS
 
ts_íd
;

424 
	`CPU_SR_ALLOC
();

427 
	`OS_CRITICAL_ENTER
();

428 
ts_°¨t
 = 
	`OS_TS_GET
();

429 
OSTickCå
++;

430 
•oke
 = (
OS_TICK_SPOKE_IX
)(
OSTickCå
 % 
OSCfg_TickWhìlSize
);

431 
p_•oke
 = &
OSCfg_TickWhìl
[
•oke
];

432 
p_tcb
 = 
p_•oke
->
Fú°På
;

433 
d⁄e
 = 
DEF_FALSE
;

434 
d⁄e
 =
DEF_FALSE
) {

435 i‡(
p_tcb
 !(
OS_TCB
 *)0) {

436 
p_tcb_√xt
 = 
p_tcb
->
TickNextPå
;

437 
p_tcb
->
TaskSèã
) {

438 
OS_TASK_STATE_RDY
:

439 
OS_TASK_STATE_PEND
:

440 
OS_TASK_STATE_SUSPENDED
:

441 
OS_TASK_STATE_PEND_SUSPENDED
:

444 
OS_TASK_STATE_DLY
:

445 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch


446 - 
OSTickCå
;

447 i‡(
OSTickCå
 =
p_tcb
->
TickCåM©ch
) {

448 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

449 
	`OS_TaskRdy
(
p_tcb
);

451 
d⁄e
 = 
DEF_TRUE
;

455 
OS_TASK_STATE_PEND_TIMEOUT
:

456 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch


457 - 
OSTickCå
;

458 i‡(
OSTickCå
 =
p_tcb
->
TickCåM©ch
) {

459 #i‡(
OS_MSG_EN
 > 0u)

460 
p_tcb
->
MsgPå
 = (*)0;

461 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

463 
p_tcb
->
TS
 = 
	`OS_TS_GET
();

464 
	`OS_PídLi°Remove
(
p_tcb
);

465 
	`OS_TaskRdy
(
p_tcb
);

466 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

467 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_TIMEOUT
;

468 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

470 
d⁄e
 = 
DEF_TRUE
;

474 
OS_TASK_STATE_DLY_SUSPENDED
:

475 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch


476 - 
OSTickCå
;

477 i‡(
OSTickCå
 =
p_tcb
->
TickCåM©ch
) {

478 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

479 
	`OS_TickLi°Remove
(
p_tcb
);

481 
d⁄e
 = 
DEF_TRUE
;

485 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

486 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch


487 - 
OSTickCå
;

488 i‡(
OSTickCå
 =
p_tcb
->
TickCåM©ch
) {

489 #i‡(
OS_MSG_EN
 > 0u)

490 
p_tcb
->
MsgPå
 = (*)0;

491 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

493 
p_tcb
->
TS
 = 
	`OS_TS_GET
();

494 
	`OS_PídLi°Remove
(
p_tcb
);

495 
	`OS_TickLi°Remove
(
p_tcb
);

496 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

497 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_TIMEOUT
;

498 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

500 
d⁄e
 = 
DEF_TRUE
;

507 
p_tcb
 = 
p_tcb_√xt
;

509 
d⁄e
 = 
DEF_TRUE
;

512 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

513 i‡(
OSTickTaskTimeMax
 < 
ts_íd
) {

514 
OSTickTaskTimeMax
 = 
ts_íd
;

516 
	`OS_CRITICAL_EXIT
();

517 
	}
}

	@UCOSIII/uCOS-III/Source/os_time.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_time__c
 = "$Id: $";

80 
	$OSTimeDly
 (
OS_TICK
 
dly
,

81 
OS_OPT
 
›t
,

82 
OS_ERR
 *
p_îr
)

84 
	`CPU_SR_ALLOC
();

88 #ifde‡
OS_SAFETY_CRITICAL


89 i‡(
p_îr
 =(
OS_ERR
 *)0) {

90 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

95 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

96 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

97 *
p_îr
 = 
OS_ERR_TIME_DLY_ISR
;

102 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0u) {

103 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

107 
›t
) {

108 
OS_OPT_TIME_DLY
:

109 
OS_OPT_TIME_TIMEOUT
:

110 
OS_OPT_TIME_PERIODIC
:

111 i‡(
dly
 =(
OS_TICK
)0u) {

112 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

117 
OS_OPT_TIME_MATCH
:

121 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

125 
	`OS_CRITICAL_ENTER
();

126 
OSTCBCurPå
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

127 
	`OS_TickLi°In£π
(
OSTCBCurPå
,

128 
dly
,

129 
›t
,

130 
p_îr
);

131 i‡(*
p_îr
 !
OS_ERR_NONE
) {

132 
	`OS_CRITICAL_EXIT_NO_SCHED
();

135 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

136 
	`OS_CRITICAL_EXIT_NO_SCHED
();

137 
	`OSSched
();

138 *
p_îr
 = 
OS_ERR_NONE
;

139 
	}
}

199 #i‡
OS_CFG_TIME_DLY_HMSM_EN
 > 0u

200 
	$OSTimeDlyHMSM
 (
CPU_INT16U
 
hours
,

201 
CPU_INT16U
 
möuãs
,

202 
CPU_INT16U
 
£c⁄ds
,

203 
CPU_INT32U
 
mûli
,

204 
OS_OPT
 
›t
,

205 
OS_ERR
 *
p_îr
)

207 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

208 
CPU_BOOLEAN
 
›t_övÆid
;

209 
CPU_BOOLEAN
 
›t_n⁄_°ri˘
;

211 
OS_OPT
 
›t_time
;

212 
OS_RATE_HZ
 
tick_øã
;

213 
OS_TICK
 
ticks
;

214 
	`CPU_SR_ALLOC
();

218 #ifde‡
OS_SAFETY_CRITICAL


219 i‡(
p_îr
 =(
OS_ERR
 *)0) {

220 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

225 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

226 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

227 *
p_îr
 = 
OS_ERR_TIME_DLY_ISR
;

232 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0u) {

233 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

237 
›t_time
 = 
›t
 & 
OS_OPT_TIME_MASK
;

238 
›t_time
) {

239 
OS_OPT_TIME_DLY
:

240 
OS_OPT_TIME_TIMEOUT
:

241 
OS_OPT_TIME_PERIODIC
:

242 i‡(
mûli
 =(
CPU_INT32U
)0u) {

243 i‡(
£c⁄ds
 =(
CPU_INT16U
)0u) {

244 i‡(
möuãs
 =(
CPU_INT16U
)0u) {

245 i‡(
hours
 =(
CPU_INT16U
)0u) {

246 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

254 
OS_OPT_TIME_MATCH
:

258 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

262 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

263 
›t_övÆid
 = 
	`DEF_BIT_IS_SET_ANY
(
›t
, ~
OS_OPT_TIME_OPTS_MASK
);

264 i‡(
›t_övÆid
 =
DEF_YES
) {

265 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

269 
›t_n⁄_°ri˘
 = 
	`DEF_BIT_IS_SET
(
›t
, 
OS_OPT_TIME_HMSM_NON_STRICT
);

270 i‡(
›t_n⁄_°ri˘
 !
DEF_YES
) {

271 i‡(
mûli
 > (
CPU_INT32U
)999u) {

272 *
p_îr
 = 
OS_ERR_TIME_INVALID_MILLISECONDS
;

275 i‡(
£c⁄ds
 > (
CPU_INT16U
)59u) {

276 *
p_îr
 = 
OS_ERR_TIME_INVALID_SECONDS
;

279 i‡(
möuãs
 > (
CPU_INT16U
)59u) {

280 *
p_îr
 = 
OS_ERR_TIME_INVALID_MINUTES
;

283 i‡(
hours
 > (
CPU_INT16U
)99u) {

284 *
p_îr
 = 
OS_ERR_TIME_INVALID_HOURS
;

288 i‡(
möuãs
 > (
CPU_INT16U
)9999u) {

289 *
p_îr
 = 
OS_ERR_TIME_INVALID_MINUTES
;

292 i‡(
hours
 > (
CPU_INT16U
)999u) {

293 *
p_îr
 = 
OS_ERR_TIME_INVALID_HOURS
;

301 
tick_øã
 = 
OSCfg_TickR©e_Hz
;

302 
ticks
 = ((
OS_TICK
)
hours
 * (OS_TICK)3600u + (OS_TICK)
möuãs
 * (OS_TICK)60u + (OS_TICK)
£c⁄ds
Ë* 
tick_øã


303 + (
tick_øã
 * ((
OS_TICK
)
mûli
 + (OS_TICK)500u /Åick_rate)) / (OS_TICK)1000u;

305 i‡(
ticks
 > (
OS_TICK
)0u) {

306 
	`OS_CRITICAL_ENTER
();

307 
OSTCBCurPå
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

308 
	`OS_TickLi°In£π
(
OSTCBCurPå
,

309 
ticks
,

310 
›t_time
,

311 
p_îr
);

312 i‡(*
p_îr
 !
OS_ERR_NONE
) {

313 
	`OS_CRITICAL_EXIT_NO_SCHED
();

316 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

317 
	`OS_CRITICAL_EXIT_NO_SCHED
();

318 
	`OSSched
();

319 *
p_îr
 = 
OS_ERR_NONE
;

321 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

323 
	}
}

348 #i‡
OS_CFG_TIME_DLY_RESUME_EN
 > 0u

349 
	$OSTimeDlyResume
 (
OS_TCB
 *
p_tcb
,

350 
OS_ERR
 *
p_îr
)

352 
	`CPU_SR_ALLOC
();

356 #ifde‡
OS_SAFETY_CRITICAL


357 i‡(
p_îr
 =(
OS_ERR
 *)0) {

358 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

363 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

364 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

365 *
p_îr
 = 
OS_ERR_TIME_DLY_RESUME_ISR
;

370 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

371 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

372 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

377 
	`CPU_CRITICAL_ENTER
();

378 i‡(
p_tcb
 =
OSTCBCurPå
) {

379 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

380 
	`CPU_CRITICAL_EXIT
();

384 
p_tcb
->
TaskSèã
) {

385 
OS_TASK_STATE_RDY
:

386 
	`CPU_CRITICAL_EXIT
();

387 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

390 
OS_TASK_STATE_DLY
:

391 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

392 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

393 
	`OS_TickLi°Remove
(
p_tcb
);

394 
	`OS_RdyLi°In£π
(
p_tcb
);

395 
	`OS_CRITICAL_EXIT_NO_SCHED
();

396 *
p_îr
 = 
OS_ERR_NONE
;

399 
OS_TASK_STATE_PEND
:

400 
	`CPU_CRITICAL_EXIT
();

401 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

404 
OS_TASK_STATE_PEND_TIMEOUT
:

405 
	`CPU_CRITICAL_EXIT
();

406 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

409 
OS_TASK_STATE_SUSPENDED
:

410 
	`CPU_CRITICAL_EXIT
();

411 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

414 
OS_TASK_STATE_DLY_SUSPENDED
:

415 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

416 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

417 
	`OS_TickLi°Remove
(
p_tcb
);

418 
	`OS_CRITICAL_EXIT_NO_SCHED
();

419 *
p_îr
 = 
OS_ERR_TASK_SUSPENDED
;

422 
OS_TASK_STATE_PEND_SUSPENDED
:

423 
	`CPU_CRITICAL_EXIT
();

424 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

427 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

428 
	`CPU_CRITICAL_EXIT
();

429 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

433 
	`CPU_CRITICAL_EXIT
();

434 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

438 
	`OSSched
();

439 
	}
}

457 
OS_TICK
 
	$OSTimeGë
 (
OS_ERR
 *
p_îr
)

459 
OS_TICK
 
ticks
;

460 
	`CPU_SR_ALLOC
();

464 #ifde‡
OS_SAFETY_CRITICAL


465 i‡(
p_îr
 =(
OS_ERR
 *)0) {

466 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

467  ((
OS_TICK
)0);

471 
	`CPU_CRITICAL_ENTER
();

472 
ticks
 = 
OSTickCå
;

473 
	`CPU_CRITICAL_EXIT
();

474 *
p_îr
 = 
OS_ERR_NONE
;

475  (
ticks
);

476 
	}
}

494 
	$OSTimeSë
 (
OS_TICK
 
ticks
,

495 
OS_ERR
 *
p_îr
)

497 
	`CPU_SR_ALLOC
();

501 #ifde‡
OS_SAFETY_CRITICAL


502 i‡(
p_îr
 =(
OS_ERR
 *)0) {

503 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

508 
	`CPU_CRITICAL_ENTER
();

509 
OSTickCå
 = 
ticks
;

510 
	`CPU_CRITICAL_EXIT
();

511 *
p_îr
 = 
OS_ERR_NONE
;

512 
	}
}

528 
	$OSTimeTick
 ()

530 
OS_ERR
 
îr
;

531 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

532 
CPU_TS
 
ts
;

536 
	`OSTimeTickHook
();

538 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

540 
ts
 = 
	`OS_TS_GET
();

541 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
Ë
OS_OBJ_TYPE_TICK
,

542 (*)&
OSRdyLi°
[
OSPrioCur
],

544 (
OS_MSG_SIZE
) 0u,

545 (
OS_FLAGS
 ) 0u,

546 (
OS_OPT
 ) 0u,

547 (
CPU_TS
 ) 
ts
,

548 (
OS_ERR
 *)&
îr
);

552 ()
	`OSTaskSemPo°
((
OS_TCB
 *)&
OSTickTaskTCB
,

553 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

554 (
OS_ERR
 *)&
îr
);

557 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

558 
	`OS_SchedRoundRobö
(&
OSRdyLi°
[
OSPrioCur
]);

561 #i‡
OS_CFG_TMR_EN
 > 0u

562 
OSTmrUpd©eCå
--;

563 i‡(
OSTmrUpd©eCå
 =(
OS_CTR
)0u) {

564 
OSTmrUpd©eCå
 = 
OSTmrUpd©eC¡
;

565 
	`OSTaskSemPo°
((
OS_TCB
 *)&
OSTmrTaskTCB
,

566 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

567 (
OS_ERR
 *)&
îr
);

572 
	}
}

	@UCOSIII/uCOS-III/Source/os_tmr.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_tmr__c
 = "$Id: $";

41 #i‡
OS_CFG_TMR_EN
 > 0u

48 
	#OS_OPT_LINK_DLY
 (
OS_OPT
)(0u)

	)

49 
	#OS_OPT_LINK_PERIODIC
 (
OS_OPT
)(1u)

	)

104 
	$OSTmrCª©e
 (
OS_TMR
 *
p_tmr
,

105 
CPU_CHAR
 *
p_«me
,

106 
OS_TICK
 
dly
,

107 
OS_TICK
 
≥riod
,

108 
OS_OPT
 
›t
,

109 
OS_TMR_CALLBACK_PTR
 
p_ˇŒback
,

110 *
p_ˇŒback_¨g
,

111 
OS_ERR
 *
p_îr
)

113 
	`CPU_SR_ALLOC
();

117 #ifde‡
OS_SAFETY_CRITICAL


118 i‡(
p_îr
 =(
OS_ERR
 *)0) {

119 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

124 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


125 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

126 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

131 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

132 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

133 *
p_îr
 = 
OS_ERR_TMR_ISR
;

138 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

139 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

140 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

144 
›t
) {

145 
OS_OPT_TMR_PERIODIC
:

146 i‡(
≥riod
 =(
OS_TICK
)0) {

147 *
p_îr
 = 
OS_ERR_TMR_INVALID_PERIOD
;

152 
OS_OPT_TMR_ONE_SHOT
:

153 i‡(
dly
 =(
OS_TICK
)0) {

154 *
p_îr
 = 
OS_ERR_TMR_INVALID_DLY
;

160 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

165 
	`OS_CRITICAL_ENTER
();

166 
p_tmr
->
Sèã
 = (
OS_STATE
 )
OS_TMR_STATE_STOPPED
;

167 
p_tmr
->
Ty≥
 = (
OS_OBJ_TYPE
 )
OS_OBJ_TYPE_TMR
;

168 
p_tmr
->
NamePå
 = (
CPU_CHAR
 *)
p_«me
;

169 
p_tmr
->
Dly
 = (
OS_TICK
 )
dly
;

170 
p_tmr
->
M©ch
 = (
OS_TICK
 )0;

171 
p_tmr
->
Remaö
 = (
OS_TICK
 )0;

172 
p_tmr
->
Pîiod
 = (
OS_TICK
 )
≥riod
;

173 
p_tmr
->
O±
 = (
OS_OPT
 )
›t
;

174 
p_tmr
->
CÆlbackPå
 = (
OS_TMR_CALLBACK_PTR
)
p_ˇŒback
;

175 
p_tmr
->
CÆlbackPåArg
 = (*)
p_ˇŒback_¨g
;

176 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

177 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

179 #i‡
OS_CFG_DBG_EN
 > 0u

180 
	`OS_TmrDbgLi°Add
(
p_tmr
);

182 
OSTmrQty
++;

184 
	`OS_CRITICAL_EXIT_NO_SCHED
();

185 *
p_îr
 = 
OS_ERR_NONE
;

186 
	}
}

211 #i‡
OS_CFG_TMR_DEL_EN
 > 0u

212 
CPU_BOOLEAN
 
	$OSTmrDñ
 (
OS_TMR
 *
p_tmr
,

213 
OS_ERR
 *
p_îr
)

215 
OS_ERR
 
îr
;

219 #ifde‡
OS_SAFETY_CRITICAL


220 i‡(
p_îr
 =(
OS_ERR
 *)0) {

221 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

222  (
DEF_FALSE
);

226 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

227 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

228 *
p_îr
 = 
OS_ERR_TMR_ISR
;

229  (
DEF_FALSE
);

233 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

234 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

235 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

236  (
DEF_FALSE
);

240 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

241 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

242 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

243  (
DEF_FALSE
);

247 
	`OSSchedLock
(&
îr
);

248 #i‡
OS_CFG_DBG_EN
 > 0u

249 
	`OS_TmrDbgLi°Remove
(
p_tmr
);

251 
OSTmrQty
--;

253 
p_tmr
->
Sèã
) {

254 
OS_TMR_STATE_RUNNING
:

255 
	`OS_TmrU∆ök
(
p_tmr
);

256 
	`OS_TmrCÃ
(
p_tmr
);

257 
	`OSSchedU∆ock
(&
îr
);

258 *
p_îr
 = 
OS_ERR_NONE
;

259  (
DEF_TRUE
);

261 
OS_TMR_STATE_STOPPED
:

262 
OS_TMR_STATE_COMPLETED
:

263 
	`OS_TmrCÃ
(
p_tmr
);

264 
	`OSSchedU∆ock
(&
îr
);

265 *
p_îr
 = 
OS_ERR_NONE
;

266  (
DEF_TRUE
);

268 
OS_TMR_STATE_UNUSED
:

269 
	`OSSchedU∆ock
(&
îr
);

270 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

271  (
DEF_FALSE
);

274 
	`OSSchedU∆ock
(&
îr
);

275 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

276  (
DEF_FALSE
);

278 
	}
}

305 
OS_TICK
 
	$OSTmrRemaöGë
 (
OS_TMR
 *
p_tmr
,

306 
OS_ERR
 *
p_îr
)

308 
OS_TICK
 
ªmaö
;

309 
OS_ERR
 
îr
;

313 #ifde‡
OS_SAFETY_CRITICAL


314 i‡(
p_îr
 =(
OS_ERR
 *)0) {

315 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

316  ((
OS_TICK
)0);

320 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

321 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

322 *
p_îr
 = 
OS_ERR_TMR_ISR
;

323  ((
OS_TICK
)0);

327 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

328 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

329 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

330  ((
OS_TICK
)0);

334 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

335 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

336 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

337  ((
OS_TICK
)0);

341 
	`OSSchedLock
(&
îr
);

342 
p_tmr
->
Sèã
) {

343 
OS_TMR_STATE_RUNNING
:

344 
ªmaö
 = 
p_tmr
->
M©ch


345 - 
OSTmrTickCå
;

346 
p_tmr
->
Remaö
 = 
ªmaö
;

347 
	`OSSchedU∆ock
(&
îr
);

348 *
p_îr
 = 
OS_ERR_NONE
;

349  (
ªmaö
);

351 
OS_TMR_STATE_STOPPED
:

352 i‡(
p_tmr
->
O±
 =
OS_OPT_TMR_PERIODIC
) {

353 i‡(
p_tmr
->
Dly
 == 0u) {

354 
ªmaö
 = 
p_tmr
->
Pîiod
;

356 
ªmaö
 = 
p_tmr
->
Dly
;

359 
ªmaö
 = 
p_tmr
->
Dly
;

361 
p_tmr
->
Remaö
 = 
ªmaö
;

362 
	`OSSchedU∆ock
(&
îr
);

363 *
p_îr
 = 
OS_ERR_NONE
;

364  (
ªmaö
);

366 
OS_TMR_STATE_COMPLETED
:

367 
	`OSSchedU∆ock
(&
îr
);

368 *
p_îr
 = 
OS_ERR_NONE
;

369  ((
OS_TICK
)0);

371 
OS_TMR_STATE_UNUSED
:

372 
	`OSSchedU∆ock
(&
îr
);

373 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

374  ((
OS_TICK
)0);

377 
	`OSSchedU∆ock
(&
îr
);

378 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

379  ((
OS_TICK
)0);

381 
	}
}

411 
CPU_BOOLEAN
 
	$OSTmrSèπ
 (
OS_TMR
 *
p_tmr
,

412 
OS_ERR
 *
p_îr
)

414 
OS_ERR
 
îr
;

418 #ifde‡
OS_SAFETY_CRITICAL


419 i‡(
p_îr
 =(
OS_ERR
 *)0) {

420 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

421  (
DEF_FALSE
);

425 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

426 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

427 *
p_îr
 = 
OS_ERR_TMR_ISR
;

428  (
DEF_FALSE
);

432 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

433 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

434 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

435  (
DEF_FALSE
);

439 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

440 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

441 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

442  (
DEF_FALSE
);

446 
	`OSSchedLock
(&
îr
);

447 
p_tmr
->
Sèã
) {

448 
OS_TMR_STATE_RUNNING
:

449 
	`OS_TmrU∆ök
(
p_tmr
);

450 
	`OS_TmrLök
(
p_tmr
, 
OS_OPT_LINK_DLY
);

451 
	`OSSchedU∆ock
(&
îr
);

452 *
p_îr
 = 
OS_ERR_NONE
;

453  (
DEF_TRUE
);

455 
OS_TMR_STATE_STOPPED
:

456 
OS_TMR_STATE_COMPLETED
:

457 
	`OS_TmrLök
(
p_tmr
, 
OS_OPT_LINK_DLY
);

458 
	`OSSchedU∆ock
(&
îr
);

459 *
p_îr
 = 
OS_ERR_NONE
;

460  (
DEF_TRUE
);

462 
OS_TMR_STATE_UNUSED
:

463 
	`OSSchedU∆ock
(&
îr
);

464 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

465  (
DEF_FALSE
);

468 
	`OSSchedU∆ock
(&
îr
);

469 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

470  (
DEF_FALSE
);

472 
	}
}

500 
OS_STATE
 
	$OSTmrSèãGë
 (
OS_TMR
 *
p_tmr
,

501 
OS_ERR
 *
p_îr
)

503 
OS_STATE
 
°©e
;

504 
	`CPU_SR_ALLOC
();

508 #ifde‡
OS_SAFETY_CRITICAL


509 i‡(
p_îr
 =(
OS_ERR
 *)0) {

510 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

511  (
OS_TMR_STATE_UNUSED
);

515 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

516 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

517 *
p_îr
 = 
OS_ERR_TMR_ISR
;

518  (
OS_TMR_STATE_UNUSED
);

522 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

523 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

524 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

525  (
OS_TMR_STATE_UNUSED
);

529 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

530 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

531 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

532  (
OS_TMR_STATE_UNUSED
);

536 
	`CPU_CRITICAL_ENTER
();

537 
°©e
 = 
p_tmr
->
Sèã
;

538 
°©e
) {

539 
OS_TMR_STATE_UNUSED
:

540 
OS_TMR_STATE_STOPPED
:

541 
OS_TMR_STATE_COMPLETED
:

542 
OS_TMR_STATE_RUNNING
:

543 *
p_îr
 = 
OS_ERR_NONE
;

547 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

550 
	`CPU_CRITICAL_EXIT
();

551  (
°©e
);

552 
	}
}

591 
CPU_BOOLEAN
 
	$OSTmrSt›
 (
OS_TMR
 *
p_tmr
,

592 
OS_OPT
 
›t
,

593 *
p_ˇŒback_¨g
,

594 
OS_ERR
 *
p_îr
)

596 
OS_TMR_CALLBACK_PTR
 
p_‚˘
;

597 
OS_ERR
 
îr
;

601 #ifde‡
OS_SAFETY_CRITICAL


602 i‡(
p_îr
 =(
OS_ERR
 *)0) {

603 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

604  (
DEF_FALSE
);

608 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

609 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

610 *
p_îr
 = 
OS_ERR_TMR_ISR
;

611  (
DEF_FALSE
);

615 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

616 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

617 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

618  (
DEF_FALSE
);

622 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

623 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

624 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

625  (
DEF_FALSE
);

629 
	`OSSchedLock
(&
îr
);

630 
p_tmr
->
Sèã
) {

631 
OS_TMR_STATE_RUNNING
:

632 
	`OS_TmrU∆ök
(
p_tmr
);

633 *
p_îr
 = 
OS_ERR_NONE
;

634 
›t
) {

635 
OS_OPT_TMR_CALLBACK
:

636 
p_‚˘
 = 
p_tmr
->
CÆlbackPå
;

637 i‡(
p_‚˘
 !(
OS_TMR_CALLBACK_PTR
)0) {

638 (*
p_‚˘
)((*)
p_tmr
,Ö_tmr->
CÆlbackPåArg
);

640 *
p_îr
 = 
OS_ERR_TMR_NO_CALLBACK
;

644 
OS_OPT_TMR_CALLBACK_ARG
:

645 
p_‚˘
 = 
p_tmr
->
CÆlbackPå
;

646 i‡(
p_‚˘
 !(
OS_TMR_CALLBACK_PTR
)0) {

647 (*
p_‚˘
)((*)
p_tmr
, 
p_ˇŒback_¨g
);

649 *
p_îr
 = 
OS_ERR_TMR_NO_CALLBACK
;

653 
OS_OPT_TMR_NONE
:

657 
	`OSSchedU∆ock
(&
îr
);

658 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

659  (
DEF_FALSE
);

661 
	`OSSchedU∆ock
(&
îr
);

662  (
DEF_TRUE
);

664 
OS_TMR_STATE_COMPLETED
:

665 
OS_TMR_STATE_STOPPED
:

666 
	`OSSchedU∆ock
(&
îr
);

667 *
p_îr
 = 
OS_ERR_TMR_STOPPED
;

668  (
DEF_TRUE
);

670 
OS_TMR_STATE_UNUSED
:

671 
	`OSSchedU∆ock
(&
îr
);

672 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

673  (
DEF_FALSE
);

676 
	`OSSchedU∆ock
(&
îr
);

677 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

678  (
DEF_FALSE
);

680 
	}
}

698 
	$OS_TmrCÃ
 (
OS_TMR
 *
p_tmr
)

700 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_UNUSED
;

701 
p_tmr
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

702 
p_tmr
->
NamePå
 = (
CPU_CHAR
 *)((*)"?TMR");

703 
p_tmr
->
Dly
 = (
OS_TICK
 )0;

704 
p_tmr
->
M©ch
 = (
OS_TICK
 )0;

705 
p_tmr
->
Remaö
 = (
OS_TICK
 )0;

706 
p_tmr
->
Pîiod
 = (
OS_TICK
 )0;

707 
p_tmr
->
O±
 = (
OS_OPT
 )0;

708 
p_tmr
->
CÆlbackPå
 = (
OS_TMR_CALLBACK_PTR
)0;

709 
p_tmr
->
CÆlbackPåArg
 = (*)0;

710 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

711 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

712 
	}
}

730 #i‡
OS_CFG_DBG_EN
 > 0u

731 
	$OS_TmrDbgLi°Add
 (
OS_TMR
 *
p_tmr
)

733 
p_tmr
->
DbgPªvPå
 = (
OS_TMR
 *)0;

734 i‡(
OSTmrDbgLi°På
 =(
OS_TMR
 *)0) {

735 
p_tmr
->
DbgNextPå
 = (
OS_TMR
 *)0;

737 
p_tmr
->
DbgNextPå
 = 
OSTmrDbgLi°På
;

738 
OSTmrDbgLi°På
->
DbgPªvPå
 = 
p_tmr
;

740 
OSTmrDbgLi°På
 = 
p_tmr
;

741 
	}
}

745 
	$OS_TmrDbgLi°Remove
 (
OS_TMR
 *
p_tmr
)

747 
OS_TMR
 *
p_tmr_√xt
;

748 
OS_TMR
 *
p_tmr_¥ev
;

751 
p_tmr_¥ev
 = 
p_tmr
->
DbgPªvPå
;

752 
p_tmr_√xt
 = 
p_tmr
->
DbgNextPå
;

754 i‡(
p_tmr_¥ev
 =(
OS_TMR
 *)0) {

755 
OSTmrDbgLi°På
 = 
p_tmr_√xt
;

756 i‡(
p_tmr_√xt
 !(
OS_TMR
 *)0) {

757 
p_tmr_√xt
->
DbgPªvPå
 = (
OS_TMR
 *)0;

759 
p_tmr
->
DbgNextPå
 = (
OS_TMR
 *)0;

761 } i‡(
p_tmr_√xt
 =(
OS_TMR
 *)0) {

762 
p_tmr_¥ev
->
DbgNextPå
 = (
OS_TMR
 *)0;

763 
p_tmr
->
DbgPªvPå
 = (
OS_TMR
 *)0;

766 
p_tmr_¥ev
->
DbgNextPå
 = 
p_tmr_√xt
;

767 
p_tmr_√xt
->
DbgPªvPå
 = 
p_tmr_¥ev
;

768 
p_tmr
->
DbgNextPå
 = (
OS_TMR
 *)0;

769 
p_tmr
->
DbgPªvPå
 = (
OS_TMR
 *)0;

771 
	}
}

795 
	$OS_TmrInô
 (
OS_ERR
 *
p_îr
)

797 
OS_TMR_SPOKE_IX
 
i
;

798 
OS_TMR_SPOKE
 *
p_•oke
;

802 #ifde‡
OS_SAFETY_CRITICAL


803 i‡(
p_îr
 =(
OS_ERR
 *)0) {

804 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

809 #i‡
OS_CFG_DBG_EN
 > 0u

810 
OSTmrDbgLi°På
 = (
OS_TMR
 *)0;

813 i‡(
OSCfg_TmrTaskR©e_Hz
 > (
OS_RATE_HZ
)0) {

814 
OSTmrUpd©eC¡
 = 
OSCfg_TickR©e_Hz
 / 
OSCfg_TmrTaskR©e_Hz
;

816 
OSTmrUpd©eC¡
 = 
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10;

818 
OSTmrUpd©eCå
 = 
OSTmrUpd©eC¡
;

820 
OSTmrTickCå
 = (
OS_TICK
)0;

822 
OSTmrTaskTimeMax
 = (
CPU_TS
)0;

824 
i
 = 0u; i < 
OSCfg_TmrWhìlSize
; i++) {

825 
p_•oke
 = &
OSCfg_TmrWhìl
[
i
];

826 
p_•oke
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

827 
p_•oke
->
NbrE¡rõsMax
 = (
OS_OBJ_QTY
)0;

828 
p_•oke
->
Fú°På
 = (
OS_TMR
 *)0;

832 i‡(
OSCfg_TmrTaskStkBa£På
 =(
CPU_STK
*)0) {

833 *
p_îr
 = 
OS_ERR_TMR_STK_INVALID
;

837 i‡(
OSCfg_TmrTaskStkSize
 < 
OSCfg_StkSizeMö
) {

838 *
p_îr
 = 
OS_ERR_TMR_STK_SIZE_INVALID
;

842 i‡(
OSCfg_TmrTaskPrio
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

843 *
p_îr
 = 
OS_ERR_TMR_PRIO_INVALID
;

847 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSTmrTaskTCB
,

848 (
CPU_CHAR
 *)((*)"uC/OS-III Timer Task"),

849 (
OS_TASK_PTR
 )
OS_TmrTask
,

851 (
OS_PRIO
 )
OSCfg_TmrTaskPrio
,

852 (
CPU_STK
 *)
OSCfg_TmrTaskStkBa£På
,

853 (
CPU_STK_SIZE
)
OSCfg_TmrTaskStkLimô
,

854 (
CPU_STK_SIZE
)
OSCfg_TmrTaskStkSize
,

855 (
OS_MSG_QTY
 )0,

856 (
OS_TICK
 )0,

858 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

859 (
OS_ERR
 *)
p_îr
);

860 
	}
}

884 
	$OS_TmrLök
 (
OS_TMR
 *
p_tmr
,

885 
OS_OPT
 
›t
)

887 
OS_TMR_SPOKE
 *
p_•oke
;

888 
OS_TMR
 *
p_tmr0
;

889 
OS_TMR
 *
p_tmr1
;

890 
OS_TMR_SPOKE_IX
 
•oke
;

894 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_RUNNING
;

895 i‡(
›t
 =
OS_OPT_LINK_PERIODIC
) {

896 
p_tmr
->
M©ch
 =Ö_tmr->
Pîiod
 + 
OSTmrTickCå
;

898 i‡(
p_tmr
->
Dly
 =(
OS_TICK
)0) {

899 
p_tmr
->
M©ch
 =Ö_tmr->
Pîiod
 + 
OSTmrTickCå
;

901 
p_tmr
->
M©ch
 =Ö_tmr->
Dly
 + 
OSTmrTickCå
;

904 
•oke
 = (
OS_TMR_SPOKE_IX
)(
p_tmr
->
M©ch
 % 
OSCfg_TmrWhìlSize
);

905 
p_•oke
 = &
OSCfg_TmrWhìl
[
•oke
];

907 i‡(
p_•oke
->
Fú°På
 =(
OS_TMR
 *)0) {

908 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

909 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

910 
p_•oke
->
Fú°På
 = 
p_tmr
;

911 
p_•oke
->
NbrE¡rõs
 = 1u;

913 
p_tmr
->
Remaö
 =Ö_tmr->
M©ch


914 - 
OSTmrTickCå
;

915 
p_tmr1
 = 
p_•oke
->
Fú°På
;

916 
p_tmr1
 !(
OS_TMR
 *)0) {

917 
p_tmr1
->
Remaö
 =Ö_tmr1->
M©ch


918 - 
OSTmrTickCå
;

919 i‡(
p_tmr
->
Remaö
 > 
p_tmr1
->Remain) {

920 i‡(
p_tmr1
->
NextPå
 !(
OS_TMR
 *)0) {

921 
p_tmr1
 =Ö_tmr1->
NextPå
;

923 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

924 
p_tmr
->
PªvPå
 = 
p_tmr1
;

925 
p_tmr1
->
NextPå
 = 
p_tmr
;

926 
p_tmr1
 = (
OS_TMR
 *)0;

929 i‡(
p_tmr1
->
PªvPå
 =(
OS_TMR
 *)0) {

930 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

931 
p_tmr
->
NextPå
 = 
p_tmr1
;

932 
p_tmr1
->
PªvPå
 = 
p_tmr
;

933 
p_•oke
->
Fú°På
 = 
p_tmr
;

935 
p_tmr0
 = 
p_tmr1
->
PªvPå
;

936 
p_tmr
->
PªvPå
 = 
p_tmr0
;

937 
p_tmr
->
NextPå
 = 
p_tmr1
;

938 
p_tmr0
->
NextPå
 = 
p_tmr
;

939 
p_tmr1
->
PªvPå
 = 
p_tmr
;

941 
p_tmr1
 = (
OS_TMR
 *)0;

944 
p_•oke
->
NbrE¡rõs
++;

946 i‡(
p_•oke
->
NbrE¡rõsMax
 <Ö_•oke->
NbrE¡rõs
) {

947 
p_•oke
->
NbrE¡rõsMax
 =Ö_•oke->
NbrE¡rõs
;

949 
	}
}

966 
	$OS_TmrRe£tPók
 ()

968 
OS_TMR_SPOKE
 *
p_•oke
;

969 
OS_TMR_SPOKE_IX
 
i
;

973 
i
 = 0u; i < 
OSCfg_TmrWhìlSize
; i++) {

974 
p_•oke
 = (
OS_TMR_SPOKE
 *)&
OSCfg_TmrWhìl
[
i
];

975 
p_•oke
->
NbrE¡rõsMax
 = (
OS_OBJ_QTY
 )0u;

977 
	}
}

995 
	$OS_TmrU∆ök
 (
OS_TMR
 *
p_tmr
)

997 
OS_TMR_SPOKE
 *
p_•oke
;

998 
OS_TMR
 *
p_tmr1
;

999 
OS_TMR
 *
p_tmr2
;

1000 
OS_TMR_SPOKE_IX
 
•oke
;

1004 
•oke
 = (
OS_TMR_SPOKE_IX
)(
p_tmr
->
M©ch
 % 
OSCfg_TmrWhìlSize
);

1005 
p_•oke
 = &
OSCfg_TmrWhìl
[
•oke
];

1007 i‡(
p_•oke
->
Fú°På
 =
p_tmr
) {

1008 
p_tmr1
 = (
OS_TMR
 *)
p_tmr
->
NextPå
;

1009 
p_•oke
->
Fú°På
 = (
OS_TMR
 *)
p_tmr1
;

1010 i‡(
p_tmr1
 !(
OS_TMR
 *)0) {

1011 
p_tmr1
->
PªvPå
 = (
OS_TMR
 *)0;

1014 
p_tmr1
 = (
OS_TMR
 *)
p_tmr
->
PªvPå
;

1015 
p_tmr2
 = (
OS_TMR
 *)
p_tmr
->
NextPå
;

1016 
p_tmr1
->
NextPå
 = 
p_tmr2
;

1017 i‡(
p_tmr2
 !(
OS_TMR
 *)0) {

1018 
p_tmr2
->
PªvPå
 = (
OS_TMR
 *)
p_tmr1
;

1021 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_STOPPED
;

1022 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

1023 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

1024 
p_•oke
->
NbrE¡rõs
--;

1025 
	}
}

1042 
	$OS_TmrTask
 (*
p_¨g
)

1044 
CPU_BOOLEAN
 
d⁄e
;

1045 
OS_ERR
 
îr
;

1046 
OS_TMR_CALLBACK_PTR
 
p_‚˘
;

1047 
OS_TMR_SPOKE
 *
p_•oke
;

1048 
OS_TMR
 *
p_tmr
;

1049 
OS_TMR
 *
p_tmr_√xt
;

1050 
OS_TMR_SPOKE_IX
 
•oke
;

1051 
CPU_TS
 
ts
;

1052 
CPU_TS
 
ts_°¨t
;

1053 
CPU_TS
 
ts_íd
;

1057 
p_¨g
 =Ö_arg;

1058 
DEF_ON
) {

1059 ()
	`OSTaskSemPíd
((
OS_TICK
 )0,

1060 (
OS_OPT
 )
OS_OPT_PEND_BLOCKING
,

1061 (
CPU_TS
 *)&
ts
,

1062 (
OS_ERR
 *)&
îr
);

1064 
	`OSSchedLock
(&
îr
);

1065 
ts_°¨t
 = 
	`OS_TS_GET
();

1066 
OSTmrTickCå
++;

1067 
•oke
 = (
OS_TMR_SPOKE_IX
)(
OSTmrTickCå
 % 
OSCfg_TmrWhìlSize
);

1068 
p_•oke
 = &
OSCfg_TmrWhìl
[
•oke
];

1069 
p_tmr
 = 
p_•oke
->
Fú°På
;

1070 
d⁄e
 = 
DEF_FALSE
;

1071 
d⁄e
 =
DEF_FALSE
) {

1072 i‡(
p_tmr
 !(
OS_TMR
 *)0) {

1073 
p_tmr_√xt
 = (
OS_TMR
 *)
p_tmr
->
NextPå
;

1075 i‡(
OSTmrTickCå
 =
p_tmr
->
M©ch
) {

1076 
	`OS_TmrU∆ök
(
p_tmr
);

1077 i‡(
p_tmr
->
O±
 =
OS_OPT_TMR_PERIODIC
) {

1078 
	`OS_TmrLök
(
p_tmr
,

1079 
OS_OPT_LINK_PERIODIC
);

1081 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_COMPLETED
;

1083 
p_‚˘
 = 
p_tmr
->
CÆlbackPå
;

1084 i‡(
p_‚˘
 !(
OS_TMR_CALLBACK_PTR
)0) {

1085 (*
p_‚˘
)((*)
p_tmr
,

1086 
p_tmr
->
CÆlbackPåArg
);

1088 
p_tmr
 = 
p_tmr_√xt
;

1090 
d⁄e
 = 
DEF_TRUE
;

1093 
d⁄e
 = 
DEF_TRUE
;

1096 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

1097 
	`OSSchedU∆ock
(&
îr
);

1098 i‡(
OSTmrTaskTimeMax
 < 
ts_íd
) {

1099 
OSTmrTaskTimeMax
 = 
ts_íd
;

1102 
	}
}

	@UCOSIII/uCOS-III/Source/os_type.h

31 #i‚de‡ 
OS_TYPE_H


32 
	#OS_TYPE_H


	)

34 #ifde‡ 
VSC_INCLUDE_H_FILE_NAMES


35 c⁄° 
CPU_CHAR
 *
	gos_ty≥__h
 = "$Id: $";

48 
CPU_INT16U
 
	tOS_CPU_USAGE
;

50 
CPU_INT32U
 
	tOS_CTR
;

52 
CPU_INT32U
 
	tOS_CTX_SW_CTR
;

54 
CPU_INT32U
 
	tOS_CYCLES
;

56 
CPU_INT32U
 
	tOS_FLAGS
;

58 
CPU_INT32U
 
	tOS_IDLE_CTR
;

60 
CPU_INT16U
 
	tOS_MEM_QTY
;

61 
CPU_INT16U
 
	tOS_MEM_SIZE
;

63 
CPU_INT16U
 
	tOS_MSG_QTY
;

64 
CPU_INT16U
 
	tOS_MSG_SIZE
;

66 
CPU_INT08U
 
	tOS_NESTING_CTR
;

68 
CPU_INT16U
 
	tOS_OBJ_QTY
;

69 
CPU_INT32U
 
	tOS_OBJ_TYPE
;

71 
CPU_INT16U
 
	tOS_OPT
;

73 
CPU_INT08U
 
	tOS_PRIO
;

75 
CPU_INT16U
 
	tOS_QTY
;

77 
CPU_INT32U
 
	tOS_RATE_HZ
;

79 
CPU_INT32U
 
	tOS_REG
;

80 
CPU_INT08U
 
	tOS_REG_ID
;

82 
CPU_INT32U
 
	tOS_SEM_CTR
;

84 
CPU_INT08U
 
	tOS_STATE
;

86 
CPU_INT08U
 
	tOS_STATUS
;

88 
CPU_INT32U
 
	tOS_TICK
;

89 
CPU_INT16U
 
	tOS_TICK_SPOKE_IX
;

91 
CPU_INT16U
 
	tOS_TMR_SPOKE_IX
;

	@UCOSIII/uCOS-III/Source/os_var.c

33 
	#OS_GLOBALS


	)

35 
	#MICRIUM_SOURCE


	)

36 
	~<os.h
>

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_v¨__c
 = "$Id: $";

	@UCOSIII/uCOS_CONFIG/app_cfg.h

1 #i‚de‡ 
APP_CFG_MODULE_PRESENT


2 
	#APP_CFG_MODULE_PRESENT


	)

6 
	#APP_CFG_TASK_START_PRIO
 2u

	)

9 
	#APP_CFG_TASK_START_STK_SIZE
 128u

	)

10 
	#APP_CFG_TASK_BLINKY_STK_SIZE
 128u

	)

13 
	#APP_CFG_TASK_START_STK_SIZE_PCT_FULL
 90u

	)

14 
	#APP_CFG_TASK_START_STK_SIZE_LIMIT
 (
APP_CFG_TASK_START_STK_SIZE
 * (100u - 
APP_CFG_TASK_START_STK_SIZE_PCT_FULL
)Ë/ 100u

	)

16 
	#APP_CFG_TASK_BLINKY_STK_SIZE_LIMIT
 (
APP_CFG_TASK_BLINKY_STK_SIZE
 * (100u - 
APP_CFG_TASK_START_STK_SIZE_PCT_FULL
)Ë/ 100u

	)

19 #i‚de‡ 
TRACE_LEVEL_OFF


20 
	#TRACE_LEVEL_OFF
 0

	)

23 #i‚de‡ 
TRACE_LEVEL_INFO


24 
	#TRACE_LEVEL_INFO
 1

	)

27 #i‚de‡ 
TRACE_LEVEL_DBG


28 
	#TRACE_LEVEL_DBG
 2

	)

31 
	#APP_CFG_TRACE_LEVEL
 
TRACE_LEVEL_OFF


	)

32 
	#APP_CFG_TRACE
 
¥ötf


	)

34 
	#BSP_CFG_TRACE_LEVEL
 
TRACE_LEVEL_OFF


	)

35 
	#BSP_CFG_TRACE
 
¥ötf


	)

37 
	#APP_TRACE_INFO
(
x
Ë((
APP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_INFO
Ë? ()(
APP_CFG_TRACE
 xË: ()0)

	)

38 
	#APP_TRACE_DBG
(
x
Ë((
APP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_DBG
Ë? ()(
APP_CFG_TRACE
 xË: ()0)

	)

40 
	#BSP_TRACE_INFO
(
x
Ë((
BSP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_INFO
Ë? ()(
BSP_CFG_TRACE
 xË: ()0)

	)

41 
	#BSP_TRACE_DBG
(
x
Ë((
BSP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_DBG
Ë? ()(
BSP_CFG_TRACE
 xË: ()0)

	)

	@UCOSIII/uCOS_CONFIG/cpu_cfg.h

43 #i‚de‡ 
CPU_CFG_MODULE_PRESENT


44 
	#CPU_CFG_MODULE_PRESENT


	)

64 
	#CPU_CFG_NAME_EN
 
DEF_ENABLED


	)

69 
	#CPU_CFG_NAME_SIZE
 16

	)

99 
	#CPU_CFG_TS_32_EN
 
DEF_ENABLED


	)

100 
	#CPU_CFG_TS_64_EN
 
DEF_DISABLED


	)

106 
	#CPU_CFG_TS_TMR_SIZE
 
CPU_WORD_SIZE_32


	)

135 
	#CPU_CFG_INT_DIS_MEAS_EN


	)

139 
	#CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
 1

	)

161 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

	@UCOSIII/uCOS_CONFIG/includes.h

30 #i‚de‡ 
INCLUDES_MODULES_PRESENT


31 
	#INCLUDES_MODULES_PRESENT


	)

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<˘y≥.h
>

44 
	~<°dlib.h
>

45 
	~<°d¨g.h
>

46 
	~<m©h.h
>

55 
	~<os.h
>

64 
	~<˝u.h
>

65 
	~<lib_def.h
>

66 
	~<lib_ascii.h
>

67 
	~<lib_m©h.h
>

68 
	~<lib_mem.h
>

69 
	~<lib_°r.h
>

77 
	~<≠p_cfg.h
>

78 
	~<b•.h
>

	@UCOSIII/uCOS_CONFIG/lib_cfg.h

42 #i‚de‡ 
LIB_CFG_MODULE_PRESENT


43 
	#LIB_CFG_MODULE_PRESENT


	)

71 
	#LIB_MEM_CFG_ARG_CHK_EXT_EN
 
DEF_DISABLED


	)

85 
	#LIB_MEM_CFG_OPTIMIZE_ASM_EN
 
DEF_ENABLED


	)

110 
	#LIB_MEM_CFG_ALLOC_EN
 
DEF_ENABLED


	)

115 
	#LIB_MEM_CFG_HEAP_SIZE
 (1u * 1024uË

	)

118 
	#LIB_MEM_CFG_HEAP_BASE_ADDR
 0x00000000u

	)

145 
	#LIB_STR_CFG_FP_EN
 
DEF_DISABLED


	)

151 
	#LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
 
LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT


	)

	@UCOSIII/uCOS_CONFIG/os_app_hooks.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

35 
	~<os_≠p_hooks.h
>

50 
	$Aµ_OS_SëAŒHooks
 ()

52 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

53 
	`CPU_SR_ALLOC
();

56 
	`CPU_CRITICAL_ENTER
();

57 
OS_AµTaskCª©eHookPå
 = 
Aµ_OS_TaskCª©eHook
;

58 
OS_AµTaskDñHookPå
 = 
Aµ_OS_TaskDñHook
;

59 
OS_AµTaskRëu∫HookPå
 = 
Aµ_OS_TaskRëu∫Hook
;

61 
OS_AµIdÀTaskHookPå
 = 
Aµ_OS_IdÀTaskHook
;

62 
OS_AµSètTaskHookPå
 = 
Aµ_OS_SètTaskHook
;

63 
OS_AµTaskSwHookPå
 = 
Aµ_OS_TaskSwHook
;

64 
OS_AµTimeTickHookPå
 = 
Aµ_OS_TimeTickHook
;

65 
	`CPU_CRITICAL_EXIT
();

67 
	}
}

82 
	$Aµ_OS_CÃAŒHooks
 ()

84 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

85 
	`CPU_SR_ALLOC
();

88 
	`CPU_CRITICAL_ENTER
();

89 
OS_AµTaskCª©eHookPå
 = (
OS_APP_HOOK_TCB
)0;

90 
OS_AµTaskDñHookPå
 = (
OS_APP_HOOK_TCB
)0;

91 
OS_AµTaskRëu∫HookPå
 = (
OS_APP_HOOK_TCB
)0;

93 
OS_AµIdÀTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

94 
OS_AµSètTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

95 
OS_AµTaskSwHookPå
 = (
OS_APP_HOOK_VOID
)0;

96 
OS_AµTimeTickHookPå
 = (
OS_APP_HOOK_VOID
)0;

97 
	`CPU_CRITICAL_EXIT
();

99 
	}
}

114 
	$Aµ_OS_TaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

116 ()&
p_tcb
;

117 
	}
}

132 
	$Aµ_OS_TaskDñHook
 (
OS_TCB
 *
p_tcb
)

134 ()&
p_tcb
;

135 
	}
}

151 
	$Aµ_OS_TaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

153 ()&
p_tcb
;

154 
	}
}

170 
	$Aµ_OS_IdÀTaskHook
 ()

173 
	}
}

188 
	$Aµ_OS_InôHook
 ()

191 
	}
}

207 
	$Aµ_OS_SètTaskHook
 ()

210 
	}
}

229 
	$Aµ_OS_TaskSwHook
 ()

232 
	}
}

247 
	$Aµ_OS_TimeTickHook
 ()

250 
	}
}

	@UCOSIII/uCOS_CONFIG/os_app_hooks.h

33 #i‚de‡ 
OS_APP_HOOKS_H


34 
	#OS_APP_HOOKS_H


	)

37 #ifde‡ 
OS_APP_HOOKS_H_GLOBALS


38 
	#OS_APP_HOOKS_H_EXT


	)

40 
	#OS_APP_HOOKS_H_EXT
 

	)

49 
	~<os.h
>

57 
Aµ_OS_SëAŒHooks
 ();

58 
Aµ_OS_CÃAŒHooks
 ();

62 
Aµ_OS_TaskCª©eHook
(
OS_TCB
 *
p_tcb
);

63 
Aµ_OS_TaskDñHook
 (
OS_TCB
 *
p_tcb
);

64 
Aµ_OS_TaskRëu∫Hook
(
OS_TCB
 *
p_tcb
);

66 
Aµ_OS_IdÀTaskHook
 ();

67 
Aµ_OS_InôHook
 ();

68 
Aµ_OS_SètTaskHook
 ();

69 
Aµ_OS_TaskSwHook
 ();

70 
Aµ_OS_TimeTickHook
 ();

	@UCOSIII/uCOS_CONFIG/os_cfg.h

33 #i‚de‡
OS_CFG_H


34 
	#OS_CFG_H


	)

38 
	#OS_CFG_APP_HOOKS_EN
 1u

	)

39 
	#OS_CFG_ARG_CHK_EN
 1u

	)

40 
	#OS_CFG_CALLED_FROM_ISR_CHK_EN
 1u

	)

41 
	#OS_CFG_DBG_EN
 1u

	)

42 
	#OS_CFG_ISR_POST_DEFERRED_EN
 1u

	)

43 
	#OS_CFG_OBJ_TYPE_CHK_EN
 1u

	)

44 
	#OS_CFG_TS_EN
 1u

	)

46 
	#OS_CFG_PEND_MULTI_EN
 0u

	)

48 
	#OS_CFG_PRIO_MAX
 64u

	)

50 
	#OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 1u

	)

51 
	#OS_CFG_SCHED_ROUND_ROBIN_EN
 1u

	)

52 
	#OS_CFG_STK_SIZE_MIN
 64u

	)

56 
	#OS_CFG_FLAG_EN
 1u

	)

57 
	#OS_CFG_FLAG_DEL_EN
 1u

	)

58 
	#OS_CFG_FLAG_MODE_CLR_EN
 1u

	)

59 
	#OS_CFG_FLAG_PEND_ABORT_EN
 1u

	)

63 
	#OS_CFG_MEM_EN
 1u

	)

67 
	#OS_CFG_MUTEX_EN
 1u

	)

68 
	#OS_CFG_MUTEX_DEL_EN
 1u

	)

69 
	#OS_CFG_MUTEX_PEND_ABORT_EN
 1u

	)

73 
	#OS_CFG_Q_EN
 1u

	)

74 
	#OS_CFG_Q_DEL_EN
 1u

	)

75 
	#OS_CFG_Q_FLUSH_EN
 1u

	)

76 
	#OS_CFG_Q_PEND_ABORT_EN
 1u

	)

80 
	#OS_CFG_SEM_EN
 1u

	)

81 
	#OS_CFG_SEM_DEL_EN
 1u

	)

82 
	#OS_CFG_SEM_PEND_ABORT_EN
 1u

	)

83 
	#OS_CFG_SEM_SET_EN
 1u

	)

87 
	#OS_CFG_STAT_TASK_EN
 1u

	)

88 
	#OS_CFG_STAT_TASK_STK_CHK_EN
 1u

	)

90 
	#OS_CFG_TASK_CHANGE_PRIO_EN
 1u

	)

91 
	#OS_CFG_TASK_DEL_EN
 1u

	)

92 
	#OS_CFG_TASK_Q_EN
 1u

	)

93 
	#OS_CFG_TASK_Q_PEND_ABORT_EN
 1u

	)

94 
	#OS_CFG_TASK_PROFILE_EN
 1u

	)

95 
	#OS_CFG_TASK_REG_TBL_SIZE
 1u

	)

96 
	#OS_CFG_TASK_SEM_PEND_ABORT_EN
 1u

	)

97 
	#OS_CFG_TASK_SUSPEND_EN
 1u

	)

101 
	#OS_CFG_TIME_DLY_HMSM_EN
 1u

	)

102 
	#OS_CFG_TIME_DLY_RESUME_EN
 1u

	)

106 
	#OS_CFG_TLS_TBL_SIZE
 0u

	)

110 
	#OS_CFG_TMR_EN
 1u

	)

111 
	#OS_CFG_TMR_DEL_EN
 1u

	)

	@UCOSIII/uCOS_CONFIG/os_cfg_app.h

33 #i‚de‡
OS_CFG_APP_H


34 
	#OS_CFG_APP_H


	)

43 
	#OS_CFG_MSG_POOL_SIZE
 100u

	)

44 
	#OS_CFG_ISR_STK_SIZE
 128u

	)

45 
	#OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
 10u

	)

49 
	#OS_CFG_IDLE_TASK_STK_SIZE
 128u

	)

53 
	#OS_CFG_INT_Q_SIZE
 10u

	)

54 
	#OS_CFG_INT_Q_TASK_STK_SIZE
 128u

	)

57 
	#OS_CFG_STAT_TASK_PRIO
 (
OS_CFG_PRIO_MAX
-2uË

	)

58 
	#OS_CFG_STAT_TASK_RATE_HZ
 10u

	)

59 
	#OS_CFG_STAT_TASK_STK_SIZE
 128u

	)

63 
	#OS_CFG_TICK_RATE_HZ
 200u

	)

64 
	#OS_CFG_TICK_TASK_PRIO
 1u

	)

65 
	#OS_CFG_TICK_TASK_STK_SIZE
 128u

	)

66 
	#OS_CFG_TICK_WHEEL_SIZE
 17u

	)

70 
	#OS_CFG_TMR_TASK_PRIO
 2u

	)

71 
	#OS_CFG_TMR_TASK_RATE_HZ
 100u

	)

72 
	#OS_CFG_TMR_TASK_STK_SIZE
 128u

	)

73 
	#OS_CFG_TMR_WHEEL_SIZE
 17u

	)

	@USER/main.c

1 
	~"°m32f10x.h
"

2 
	~"b•.h
"

3 
	~"°dio.h
"

4 
	~"ö˛udes.h
"

5 
	~"°¨t_èsk.h
"

7 
	$maö
()

9 
OS_ERR
 
îr
;

10 
	`CPU_SR_ALLOC
();

11 
	`BSP_Inô
();

12 
	`¥ötf
("Hello!!\r\n");

14 
	`OSInô
(&
îr
);

16 
	`OS_CRITICAL_ENTER
();

17 
	`OSTaskCª©e
((
OS_TCB
 *)&
SèπTaskTCB
,

18 (
CPU_CHAR
 *)"Start Task",

19 (
OS_TASK_PTR
 )
°¨t_èsk
,

21 (
OS_PRIO
 )
START_TASK_PRIO
,

22 (
CPU_STK
 *)&
START_TASK_STK
[0],

23 (
CPU_STK_SIZE
)
START_STK_SIZE
/10,

24 (
CPU_STK_SIZE
)
START_STK_SIZE
,

25 (
OS_MSG_QTY
 )0,

26 (
OS_TICK
 )0,

28 (
OS_OPT
 )
OS_OPT_TASK_STK_CHK
|
OS_OPT_TASK_STK_CLR
,

29 (
OS_ERR
 * )&
îr
);

30 
	`OS_CRITICAL_EXIT
();

31 
	`OSSèπ
(&
îr
);

36 
	}
}

	@USER/stm32f10x.h

50 #i‚de‡
__STM32F10x_H


51 
	#__STM32F10x_H


	)

53 #ifde‡
__˝lu•lus


65 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

95 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

99 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


115 #i‡!
deföed
 
HSE_VALUE


116 #ifde‡
STM32F10X_CL


117 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

119 
	#HSE_VALUE
 ((
uöt32_t
)12000000Ë

	)

128 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

130 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

135 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03Ë

	)

136 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x05Ë

	)

137 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

138 
	#__STM32F10X_STDPERIPH_VERSION_RC
 (0x00Ë

	)

139 
	#__STM32F10X_STDPERIPH_VERSION
 ( (
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 24)\

140 |(
__STM32F10X_STDPERIPH_VERSION_SUB1
 << 16)\

141 |(
__STM32F10X_STDPERIPH_VERSION_SUB2
 << 8)\

142 |(
__STM32F10X_STDPERIPH_VERSION_RC
))

	)

155 #ifde‡
STM32F10X_XL


156 
	#__MPU_PRESENT
 1

	)

158 
	#__MPU_PRESENT
 0

	)

160 
	#__NVIC_PRIO_BITS
 4

	)

161 
	#__Víd‹_SysTickC⁄fig
 0

	)

167 
	eIRQn


170 
N⁄MaskabÀI¡_IRQn
 = -14,

171 
Mem‹yM™agemít_IRQn
 = -12,

172 
BusFau…_IRQn
 = -11,

173 
UßgeFau…_IRQn
 = -10,

174 
SVCÆl_IRQn
 = -5,

175 
DebugM⁄ô‹_IRQn
 = -4,

176 
PídSV_IRQn
 = -2,

177 
SysTick_IRQn
 = -1,

180 
WWDG_IRQn
 = 0,

181 
PVD_IRQn
 = 1,

182 
TAMPER_IRQn
 = 2,

183 
RTC_IRQn
 = 3,

184 
FLASH_IRQn
 = 4,

185 
RCC_IRQn
 = 5,

186 
EXTI0_IRQn
 = 6,

187 
EXTI1_IRQn
 = 7,

188 
EXTI2_IRQn
 = 8,

189 
EXTI3_IRQn
 = 9,

190 
EXTI4_IRQn
 = 10,

191 
DMA1_Ch™√l1_IRQn
 = 11,

192 
DMA1_Ch™√l2_IRQn
 = 12,

193 
DMA1_Ch™√l3_IRQn
 = 13,

194 
DMA1_Ch™√l4_IRQn
 = 14,

195 
DMA1_Ch™√l5_IRQn
 = 15,

196 
DMA1_Ch™√l6_IRQn
 = 16,

197 
DMA1_Ch™√l7_IRQn
 = 17,

199 #ifde‡
STM32F10X_LD


200 
ADC1_2_IRQn
 = 18,

201 
USB_HP_CAN1_TX_IRQn
 = 19,

202 
USB_LP_CAN1_RX0_IRQn
 = 20,

203 
CAN1_RX1_IRQn
 = 21,

204 
CAN1_SCE_IRQn
 = 22,

205 
EXTI9_5_IRQn
 = 23,

206 
TIM1_BRK_IRQn
 = 24,

207 
TIM1_UP_IRQn
 = 25,

208 
TIM1_TRG_COM_IRQn
 = 26,

209 
TIM1_CC_IRQn
 = 27,

210 
TIM2_IRQn
 = 28,

211 
TIM3_IRQn
 = 29,

212 
I2C1_EV_IRQn
 = 31,

213 
I2C1_ER_IRQn
 = 32,

214 
SPI1_IRQn
 = 35,

215 
USART1_IRQn
 = 37,

216 
USART2_IRQn
 = 38,

217 
EXTI15_10_IRQn
 = 40,

218 
RTCAœrm_IRQn
 = 41,

219 
USBWakeUp_IRQn
 = 42

222 #ifde‡
STM32F10X_LD_VL


223 
ADC1_IRQn
 = 18,

224 
EXTI9_5_IRQn
 = 23,

225 
TIM1_BRK_TIM15_IRQn
 = 24,

226 
TIM1_UP_TIM16_IRQn
 = 25,

227 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

228 
TIM1_CC_IRQn
 = 27,

229 
TIM2_IRQn
 = 28,

230 
TIM3_IRQn
 = 29,

231 
I2C1_EV_IRQn
 = 31,

232 
I2C1_ER_IRQn
 = 32,

233 
SPI1_IRQn
 = 35,

234 
USART1_IRQn
 = 37,

235 
USART2_IRQn
 = 38,

236 
EXTI15_10_IRQn
 = 40,

237 
RTCAœrm_IRQn
 = 41,

238 
CEC_IRQn
 = 42,

239 
TIM6_DAC_IRQn
 = 54,

240 
TIM7_IRQn
 = 55

243 #ifde‡
STM32F10X_MD


244 
ADC1_2_IRQn
 = 18,

245 
USB_HP_CAN1_TX_IRQn
 = 19,

246 
USB_LP_CAN1_RX0_IRQn
 = 20,

247 
CAN1_RX1_IRQn
 = 21,

248 
CAN1_SCE_IRQn
 = 22,

249 
EXTI9_5_IRQn
 = 23,

250 
TIM1_BRK_IRQn
 = 24,

251 
TIM1_UP_IRQn
 = 25,

252 
TIM1_TRG_COM_IRQn
 = 26,

253 
TIM1_CC_IRQn
 = 27,

254 
TIM2_IRQn
 = 28,

255 
TIM3_IRQn
 = 29,

256 
TIM4_IRQn
 = 30,

257 
I2C1_EV_IRQn
 = 31,

258 
I2C1_ER_IRQn
 = 32,

259 
I2C2_EV_IRQn
 = 33,

260 
I2C2_ER_IRQn
 = 34,

261 
SPI1_IRQn
 = 35,

262 
SPI2_IRQn
 = 36,

263 
USART1_IRQn
 = 37,

264 
USART2_IRQn
 = 38,

265 
USART3_IRQn
 = 39,

266 
EXTI15_10_IRQn
 = 40,

267 
RTCAœrm_IRQn
 = 41,

268 
USBWakeUp_IRQn
 = 42

271 #ifde‡
STM32F10X_MD_VL


272 
ADC1_IRQn
 = 18,

273 
EXTI9_5_IRQn
 = 23,

274 
TIM1_BRK_TIM15_IRQn
 = 24,

275 
TIM1_UP_TIM16_IRQn
 = 25,

276 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

277 
TIM1_CC_IRQn
 = 27,

278 
TIM2_IRQn
 = 28,

279 
TIM3_IRQn
 = 29,

280 
TIM4_IRQn
 = 30,

281 
I2C1_EV_IRQn
 = 31,

282 
I2C1_ER_IRQn
 = 32,

283 
I2C2_EV_IRQn
 = 33,

284 
I2C2_ER_IRQn
 = 34,

285 
SPI1_IRQn
 = 35,

286 
SPI2_IRQn
 = 36,

287 
USART1_IRQn
 = 37,

288 
USART2_IRQn
 = 38,

289 
USART3_IRQn
 = 39,

290 
EXTI15_10_IRQn
 = 40,

291 
RTCAœrm_IRQn
 = 41,

292 
CEC_IRQn
 = 42,

293 
TIM6_DAC_IRQn
 = 54,

294 
TIM7_IRQn
 = 55

297 #ifde‡
STM32F10X_HD


298 
ADC1_2_IRQn
 = 18,

299 
USB_HP_CAN1_TX_IRQn
 = 19,

300 
USB_LP_CAN1_RX0_IRQn
 = 20,

301 
CAN1_RX1_IRQn
 = 21,

302 
CAN1_SCE_IRQn
 = 22,

303 
EXTI9_5_IRQn
 = 23,

304 
TIM1_BRK_IRQn
 = 24,

305 
TIM1_UP_IRQn
 = 25,

306 
TIM1_TRG_COM_IRQn
 = 26,

307 
TIM1_CC_IRQn
 = 27,

308 
TIM2_IRQn
 = 28,

309 
TIM3_IRQn
 = 29,

310 
TIM4_IRQn
 = 30,

311 
I2C1_EV_IRQn
 = 31,

312 
I2C1_ER_IRQn
 = 32,

313 
I2C2_EV_IRQn
 = 33,

314 
I2C2_ER_IRQn
 = 34,

315 
SPI1_IRQn
 = 35,

316 
SPI2_IRQn
 = 36,

317 
USART1_IRQn
 = 37,

318 
USART2_IRQn
 = 38,

319 
USART3_IRQn
 = 39,

320 
EXTI15_10_IRQn
 = 40,

321 
RTCAœrm_IRQn
 = 41,

322 
USBWakeUp_IRQn
 = 42,

323 
TIM8_BRK_IRQn
 = 43,

324 
TIM8_UP_IRQn
 = 44,

325 
TIM8_TRG_COM_IRQn
 = 45,

326 
TIM8_CC_IRQn
 = 46,

327 
ADC3_IRQn
 = 47,

328 
FSMC_IRQn
 = 48,

329 
SDIO_IRQn
 = 49,

330 
TIM5_IRQn
 = 50,

331 
SPI3_IRQn
 = 51,

332 
UART4_IRQn
 = 52,

333 
UART5_IRQn
 = 53,

334 
TIM6_IRQn
 = 54,

335 
TIM7_IRQn
 = 55,

336 
DMA2_Ch™√l1_IRQn
 = 56,

337 
DMA2_Ch™√l2_IRQn
 = 57,

338 
DMA2_Ch™√l3_IRQn
 = 58,

339 
DMA2_Ch™√l4_5_IRQn
 = 59

342 #ifde‡
STM32F10X_HD_VL


343 
ADC1_IRQn
 = 18,

344 
EXTI9_5_IRQn
 = 23,

345 
TIM1_BRK_TIM15_IRQn
 = 24,

346 
TIM1_UP_TIM16_IRQn
 = 25,

347 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

348 
TIM1_CC_IRQn
 = 27,

349 
TIM2_IRQn
 = 28,

350 
TIM3_IRQn
 = 29,

351 
TIM4_IRQn
 = 30,

352 
I2C1_EV_IRQn
 = 31,

353 
I2C1_ER_IRQn
 = 32,

354 
I2C2_EV_IRQn
 = 33,

355 
I2C2_ER_IRQn
 = 34,

356 
SPI1_IRQn
 = 35,

357 
SPI2_IRQn
 = 36,

358 
USART1_IRQn
 = 37,

359 
USART2_IRQn
 = 38,

360 
USART3_IRQn
 = 39,

361 
EXTI15_10_IRQn
 = 40,

362 
RTCAœrm_IRQn
 = 41,

363 
CEC_IRQn
 = 42,

364 
TIM12_IRQn
 = 43,

365 
TIM13_IRQn
 = 44,

366 
TIM14_IRQn
 = 45,

367 
TIM5_IRQn
 = 50,

368 
SPI3_IRQn
 = 51,

369 
UART4_IRQn
 = 52,

370 
UART5_IRQn
 = 53,

371 
TIM6_DAC_IRQn
 = 54,

372 
TIM7_IRQn
 = 55,

373 
DMA2_Ch™√l1_IRQn
 = 56,

374 
DMA2_Ch™√l2_IRQn
 = 57,

375 
DMA2_Ch™√l3_IRQn
 = 58,

376 
DMA2_Ch™√l4_5_IRQn
 = 59,

377 
DMA2_Ch™√l5_IRQn
 = 60

382 #ifde‡
STM32F10X_XL


383 
ADC1_2_IRQn
 = 18,

384 
USB_HP_CAN1_TX_IRQn
 = 19,

385 
USB_LP_CAN1_RX0_IRQn
 = 20,

386 
CAN1_RX1_IRQn
 = 21,

387 
CAN1_SCE_IRQn
 = 22,

388 
EXTI9_5_IRQn
 = 23,

389 
TIM1_BRK_TIM9_IRQn
 = 24,

390 
TIM1_UP_TIM10_IRQn
 = 25,

391 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

392 
TIM1_CC_IRQn
 = 27,

393 
TIM2_IRQn
 = 28,

394 
TIM3_IRQn
 = 29,

395 
TIM4_IRQn
 = 30,

396 
I2C1_EV_IRQn
 = 31,

397 
I2C1_ER_IRQn
 = 32,

398 
I2C2_EV_IRQn
 = 33,

399 
I2C2_ER_IRQn
 = 34,

400 
SPI1_IRQn
 = 35,

401 
SPI2_IRQn
 = 36,

402 
USART1_IRQn
 = 37,

403 
USART2_IRQn
 = 38,

404 
USART3_IRQn
 = 39,

405 
EXTI15_10_IRQn
 = 40,

406 
RTCAœrm_IRQn
 = 41,

407 
USBWakeUp_IRQn
 = 42,

408 
TIM8_BRK_TIM12_IRQn
 = 43,

409 
TIM8_UP_TIM13_IRQn
 = 44,

410 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

411 
TIM8_CC_IRQn
 = 46,

412 
ADC3_IRQn
 = 47,

413 
FSMC_IRQn
 = 48,

414 
SDIO_IRQn
 = 49,

415 
TIM5_IRQn
 = 50,

416 
SPI3_IRQn
 = 51,

417 
UART4_IRQn
 = 52,

418 
UART5_IRQn
 = 53,

419 
TIM6_IRQn
 = 54,

420 
TIM7_IRQn
 = 55,

421 
DMA2_Ch™√l1_IRQn
 = 56,

422 
DMA2_Ch™√l2_IRQn
 = 57,

423 
DMA2_Ch™√l3_IRQn
 = 58,

424 
DMA2_Ch™√l4_5_IRQn
 = 59

427 #ifde‡
STM32F10X_CL


428 
ADC1_2_IRQn
 = 18,

429 
CAN1_TX_IRQn
 = 19,

430 
CAN1_RX0_IRQn
 = 20,

431 
CAN1_RX1_IRQn
 = 21,

432 
CAN1_SCE_IRQn
 = 22,

433 
EXTI9_5_IRQn
 = 23,

434 
TIM1_BRK_IRQn
 = 24,

435 
TIM1_UP_IRQn
 = 25,

436 
TIM1_TRG_COM_IRQn
 = 26,

437 
TIM1_CC_IRQn
 = 27,

438 
TIM2_IRQn
 = 28,

439 
TIM3_IRQn
 = 29,

440 
TIM4_IRQn
 = 30,

441 
I2C1_EV_IRQn
 = 31,

442 
I2C1_ER_IRQn
 = 32,

443 
I2C2_EV_IRQn
 = 33,

444 
I2C2_ER_IRQn
 = 34,

445 
SPI1_IRQn
 = 35,

446 
SPI2_IRQn
 = 36,

447 
USART1_IRQn
 = 37,

448 
USART2_IRQn
 = 38,

449 
USART3_IRQn
 = 39,

450 
EXTI15_10_IRQn
 = 40,

451 
RTCAœrm_IRQn
 = 41,

452 
OTG_FS_WKUP_IRQn
 = 42,

453 
TIM5_IRQn
 = 50,

454 
SPI3_IRQn
 = 51,

455 
UART4_IRQn
 = 52,

456 
UART5_IRQn
 = 53,

457 
TIM6_IRQn
 = 54,

458 
TIM7_IRQn
 = 55,

459 
DMA2_Ch™√l1_IRQn
 = 56,

460 
DMA2_Ch™√l2_IRQn
 = 57,

461 
DMA2_Ch™√l3_IRQn
 = 58,

462 
DMA2_Ch™√l4_IRQn
 = 59,

463 
DMA2_Ch™√l5_IRQn
 = 60,

464 
ETH_IRQn
 = 61,

465 
ETH_WKUP_IRQn
 = 62,

466 
CAN2_TX_IRQn
 = 63,

467 
CAN2_RX0_IRQn
 = 64,

468 
CAN2_RX1_IRQn
 = 65,

469 
CAN2_SCE_IRQn
 = 66,

470 
OTG_FS_IRQn
 = 67

472 } 
	tIRQn_Ty≥
;

478 
	~"c‹e_cm3.h
"

479 
	~"sy°em_°m32f10x.h
"

480 
	~<°döt.h
>

487 
öt32_t
 
	ts32
;

488 
öt16_t
 
	ts16
;

489 
öt8_t
 
	ts8
;

491 c⁄° 
	töt32_t
 
	tsc32
;

492 c⁄° 
	töt16_t
 
	tsc16
;

493 c⁄° 
	töt8_t
 
	tsc8
;

495 
__IO
 
	töt32_t
 
	tvs32
;

496 
__IO
 
	töt16_t
 
	tvs16
;

497 
__IO
 
	töt8_t
 
	tvs8
;

499 
__I
 
	töt32_t
 
	tvsc32
;

500 
__I
 
	töt16_t
 
	tvsc16
;

501 
__I
 
	töt8_t
 
	tvsc8
;

503 
uöt32_t
 
	tu32
;

504 
uöt16_t
 
	tu16
;

505 
uöt8_t
 
	tu8
;

507 c⁄° 
	tuöt32_t
 
	tuc32
;

508 c⁄° 
	tuöt16_t
 
	tuc16
;

509 c⁄° 
	tuöt8_t
 
	tuc8
;

511 
__IO
 
	tuöt32_t
 
	tvu32
;

512 
__IO
 
	tuöt16_t
 
	tvu16
;

513 
__IO
 
	tuöt8_t
 
	tvu8
;

515 
__I
 
	tuöt32_t
 
	tvuc32
;

516 
__I
 
	tuöt16_t
 
	tvuc16
;

517 
__I
 
	tuöt8_t
 
	tvuc8
;

519 #i‚de‡
__˝lu•lus


520 íum {
FALSE
 = 0, 
TRUE
 = !FALSE} 
	tboﬁ
;

523 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

525 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

526 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

528 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

531 
	#HSESèπUp_TimeOut
 
HSE_STARTUP_TIMEOUT


	)

532 
	#HSE_VÆue
 
HSE_VALUE


	)

533 
	#HSI_VÆue
 
HSI_VALUE


	)

548 
__IO
 
uöt32_t
 
SR
;

549 
__IO
 
uöt32_t
 
CR1
;

550 
__IO
 
uöt32_t
 
CR2
;

551 
__IO
 
uöt32_t
 
SMPR1
;

552 
__IO
 
uöt32_t
 
SMPR2
;

553 
__IO
 
uöt32_t
 
JOFR1
;

554 
__IO
 
uöt32_t
 
JOFR2
;

555 
__IO
 
uöt32_t
 
JOFR3
;

556 
__IO
 
uöt32_t
 
JOFR4
;

557 
__IO
 
uöt32_t
 
HTR
;

558 
__IO
 
uöt32_t
 
LTR
;

559 
__IO
 
uöt32_t
 
SQR1
;

560 
__IO
 
uöt32_t
 
SQR2
;

561 
__IO
 
uöt32_t
 
SQR3
;

562 
__IO
 
uöt32_t
 
JSQR
;

563 
__IO
 
uöt32_t
 
JDR1
;

564 
__IO
 
uöt32_t
 
JDR2
;

565 
__IO
 
uöt32_t
 
JDR3
;

566 
__IO
 
uöt32_t
 
JDR4
;

567 
__IO
 
uöt32_t
 
DR
;

568 } 
	tADC_Ty≥Def
;

576 
uöt32_t
 
RESERVED0
;

577 
__IO
 
uöt16_t
 
DR1
;

578 
uöt16_t
 
RESERVED1
;

579 
__IO
 
uöt16_t
 
DR2
;

580 
uöt16_t
 
RESERVED2
;

581 
__IO
 
uöt16_t
 
DR3
;

582 
uöt16_t
 
RESERVED3
;

583 
__IO
 
uöt16_t
 
DR4
;

584 
uöt16_t
 
RESERVED4
;

585 
__IO
 
uöt16_t
 
DR5
;

586 
uöt16_t
 
RESERVED5
;

587 
__IO
 
uöt16_t
 
DR6
;

588 
uöt16_t
 
RESERVED6
;

589 
__IO
 
uöt16_t
 
DR7
;

590 
uöt16_t
 
RESERVED7
;

591 
__IO
 
uöt16_t
 
DR8
;

592 
uöt16_t
 
RESERVED8
;

593 
__IO
 
uöt16_t
 
DR9
;

594 
uöt16_t
 
RESERVED9
;

595 
__IO
 
uöt16_t
 
DR10
;

596 
uöt16_t
 
RESERVED10
;

597 
__IO
 
uöt16_t
 
RTCCR
;

598 
uöt16_t
 
RESERVED11
;

599 
__IO
 
uöt16_t
 
CR
;

600 
uöt16_t
 
RESERVED12
;

601 
__IO
 
uöt16_t
 
CSR
;

602 
uöt16_t
 
RESERVED13
[5];

603 
__IO
 
uöt16_t
 
DR11
;

604 
uöt16_t
 
RESERVED14
;

605 
__IO
 
uöt16_t
 
DR12
;

606 
uöt16_t
 
RESERVED15
;

607 
__IO
 
uöt16_t
 
DR13
;

608 
uöt16_t
 
RESERVED16
;

609 
__IO
 
uöt16_t
 
DR14
;

610 
uöt16_t
 
RESERVED17
;

611 
__IO
 
uöt16_t
 
DR15
;

612 
uöt16_t
 
RESERVED18
;

613 
__IO
 
uöt16_t
 
DR16
;

614 
uöt16_t
 
RESERVED19
;

615 
__IO
 
uöt16_t
 
DR17
;

616 
uöt16_t
 
RESERVED20
;

617 
__IO
 
uöt16_t
 
DR18
;

618 
uöt16_t
 
RESERVED21
;

619 
__IO
 
uöt16_t
 
DR19
;

620 
uöt16_t
 
RESERVED22
;

621 
__IO
 
uöt16_t
 
DR20
;

622 
uöt16_t
 
RESERVED23
;

623 
__IO
 
uöt16_t
 
DR21
;

624 
uöt16_t
 
RESERVED24
;

625 
__IO
 
uöt16_t
 
DR22
;

626 
uöt16_t
 
RESERVED25
;

627 
__IO
 
uöt16_t
 
DR23
;

628 
uöt16_t
 
RESERVED26
;

629 
__IO
 
uöt16_t
 
DR24
;

630 
uöt16_t
 
RESERVED27
;

631 
__IO
 
uöt16_t
 
DR25
;

632 
uöt16_t
 
RESERVED28
;

633 
__IO
 
uöt16_t
 
DR26
;

634 
uöt16_t
 
RESERVED29
;

635 
__IO
 
uöt16_t
 
DR27
;

636 
uöt16_t
 
RESERVED30
;

637 
__IO
 
uöt16_t
 
DR28
;

638 
uöt16_t
 
RESERVED31
;

639 
__IO
 
uöt16_t
 
DR29
;

640 
uöt16_t
 
RESERVED32
;

641 
__IO
 
uöt16_t
 
DR30
;

642 
uöt16_t
 
RESERVED33
;

643 
__IO
 
uöt16_t
 
DR31
;

644 
uöt16_t
 
RESERVED34
;

645 
__IO
 
uöt16_t
 
DR32
;

646 
uöt16_t
 
RESERVED35
;

647 
__IO
 
uöt16_t
 
DR33
;

648 
uöt16_t
 
RESERVED36
;

649 
__IO
 
uöt16_t
 
DR34
;

650 
uöt16_t
 
RESERVED37
;

651 
__IO
 
uöt16_t
 
DR35
;

652 
uöt16_t
 
RESERVED38
;

653 
__IO
 
uöt16_t
 
DR36
;

654 
uöt16_t
 
RESERVED39
;

655 
__IO
 
uöt16_t
 
DR37
;

656 
uöt16_t
 
RESERVED40
;

657 
__IO
 
uöt16_t
 
DR38
;

658 
uöt16_t
 
RESERVED41
;

659 
__IO
 
uöt16_t
 
DR39
;

660 
uöt16_t
 
RESERVED42
;

661 
__IO
 
uöt16_t
 
DR40
;

662 
uöt16_t
 
RESERVED43
;

663 
__IO
 
uöt16_t
 
DR41
;

664 
uöt16_t
 
RESERVED44
;

665 
__IO
 
uöt16_t
 
DR42
;

666 
uöt16_t
 
RESERVED45
;

667 } 
	tBKP_Ty≥Def
;

675 
__IO
 
uöt32_t
 
TIR
;

676 
__IO
 
uöt32_t
 
TDTR
;

677 
__IO
 
uöt32_t
 
TDLR
;

678 
__IO
 
uöt32_t
 
TDHR
;

679 } 
	tCAN_TxMaûBox_Ty≥Def
;

687 
__IO
 
uöt32_t
 
RIR
;

688 
__IO
 
uöt32_t
 
RDTR
;

689 
__IO
 
uöt32_t
 
RDLR
;

690 
__IO
 
uöt32_t
 
RDHR
;

691 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

699 
__IO
 
uöt32_t
 
FR1
;

700 
__IO
 
uöt32_t
 
FR2
;

701 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

709 
__IO
 
uöt32_t
 
MCR
;

710 
__IO
 
uöt32_t
 
MSR
;

711 
__IO
 
uöt32_t
 
TSR
;

712 
__IO
 
uöt32_t
 
RF0R
;

713 
__IO
 
uöt32_t
 
RF1R
;

714 
__IO
 
uöt32_t
 
IER
;

715 
__IO
 
uöt32_t
 
ESR
;

716 
__IO
 
uöt32_t
 
BTR
;

717 
uöt32_t
 
RESERVED0
[88];

718 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

719 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

720 
uöt32_t
 
RESERVED1
[12];

721 
__IO
 
uöt32_t
 
FMR
;

722 
__IO
 
uöt32_t
 
FM1R
;

723 
uöt32_t
 
RESERVED2
;

724 
__IO
 
uöt32_t
 
FS1R
;

725 
uöt32_t
 
RESERVED3
;

726 
__IO
 
uöt32_t
 
FFA1R
;

727 
uöt32_t
 
RESERVED4
;

728 
__IO
 
uöt32_t
 
FA1R
;

729 
uöt32_t
 
RESERVED5
[8];

730 #i‚de‡
STM32F10X_CL


731 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

733 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

735 } 
	tCAN_Ty≥Def
;

742 
__IO
 
uöt32_t
 
CFGR
;

743 
__IO
 
uöt32_t
 
OAR
;

744 
__IO
 
uöt32_t
 
PRES
;

745 
__IO
 
uöt32_t
 
ESR
;

746 
__IO
 
uöt32_t
 
CSR
;

747 
__IO
 
uöt32_t
 
TXD
;

748 
__IO
 
uöt32_t
 
RXD
;

749 } 
	tCEC_Ty≥Def
;

757 
__IO
 
uöt32_t
 
DR
;

758 
__IO
 
uöt8_t
 
IDR
;

759 
uöt8_t
 
RESERVED0
;

760 
uöt16_t
 
RESERVED1
;

761 
__IO
 
uöt32_t
 
CR
;

762 } 
	tCRC_Ty≥Def
;

770 
__IO
 
uöt32_t
 
CR
;

771 
__IO
 
uöt32_t
 
SWTRIGR
;

772 
__IO
 
uöt32_t
 
DHR12R1
;

773 
__IO
 
uöt32_t
 
DHR12L1
;

774 
__IO
 
uöt32_t
 
DHR8R1
;

775 
__IO
 
uöt32_t
 
DHR12R2
;

776 
__IO
 
uöt32_t
 
DHR12L2
;

777 
__IO
 
uöt32_t
 
DHR8R2
;

778 
__IO
 
uöt32_t
 
DHR12RD
;

779 
__IO
 
uöt32_t
 
DHR12LD
;

780 
__IO
 
uöt32_t
 
DHR8RD
;

781 
__IO
 
uöt32_t
 
DOR1
;

782 
__IO
 
uöt32_t
 
DOR2
;

783 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

784 
__IO
 
uöt32_t
 
SR
;

786 } 
	tDAC_Ty≥Def
;

794 
__IO
 
uöt32_t
 
IDCODE
;

795 
__IO
 
uöt32_t
 
CR
;

796 }
	tDBGMCU_Ty≥Def
;

804 
__IO
 
uöt32_t
 
CCR
;

805 
__IO
 
uöt32_t
 
CNDTR
;

806 
__IO
 
uöt32_t
 
CPAR
;

807 
__IO
 
uöt32_t
 
CMAR
;

808 } 
	tDMA_Ch™√l_Ty≥Def
;

812 
__IO
 
uöt32_t
 
ISR
;

813 
__IO
 
uöt32_t
 
IFCR
;

814 } 
	tDMA_Ty≥Def
;

822 
__IO
 
uöt32_t
 
MACCR
;

823 
__IO
 
uöt32_t
 
MACFFR
;

824 
__IO
 
uöt32_t
 
MACHTHR
;

825 
__IO
 
uöt32_t
 
MACHTLR
;

826 
__IO
 
uöt32_t
 
MACMIIAR
;

827 
__IO
 
uöt32_t
 
MACMIIDR
;

828 
__IO
 
uöt32_t
 
MACFCR
;

829 
__IO
 
uöt32_t
 
MACVLANTR
;

830 
uöt32_t
 
RESERVED0
[2];

831 
__IO
 
uöt32_t
 
MACRWUFFR
;

832 
__IO
 
uöt32_t
 
MACPMTCSR
;

833 
uöt32_t
 
RESERVED1
[2];

834 
__IO
 
uöt32_t
 
MACSR
;

835 
__IO
 
uöt32_t
 
MACIMR
;

836 
__IO
 
uöt32_t
 
MACA0HR
;

837 
__IO
 
uöt32_t
 
MACA0LR
;

838 
__IO
 
uöt32_t
 
MACA1HR
;

839 
__IO
 
uöt32_t
 
MACA1LR
;

840 
__IO
 
uöt32_t
 
MACA2HR
;

841 
__IO
 
uöt32_t
 
MACA2LR
;

842 
__IO
 
uöt32_t
 
MACA3HR
;

843 
__IO
 
uöt32_t
 
MACA3LR
;

844 
uöt32_t
 
RESERVED2
[40];

845 
__IO
 
uöt32_t
 
MMCCR
;

846 
__IO
 
uöt32_t
 
MMCRIR
;

847 
__IO
 
uöt32_t
 
MMCTIR
;

848 
__IO
 
uöt32_t
 
MMCRIMR
;

849 
__IO
 
uöt32_t
 
MMCTIMR
;

850 
uöt32_t
 
RESERVED3
[14];

851 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

852 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

853 
uöt32_t
 
RESERVED4
[5];

854 
__IO
 
uöt32_t
 
MMCTGFCR
;

855 
uöt32_t
 
RESERVED5
[10];

856 
__IO
 
uöt32_t
 
MMCRFCECR
;

857 
__IO
 
uöt32_t
 
MMCRFAECR
;

858 
uöt32_t
 
RESERVED6
[10];

859 
__IO
 
uöt32_t
 
MMCRGUFCR
;

860 
uöt32_t
 
RESERVED7
[334];

861 
__IO
 
uöt32_t
 
PTPTSCR
;

862 
__IO
 
uöt32_t
 
PTPSSIR
;

863 
__IO
 
uöt32_t
 
PTPTSHR
;

864 
__IO
 
uöt32_t
 
PTPTSLR
;

865 
__IO
 
uöt32_t
 
PTPTSHUR
;

866 
__IO
 
uöt32_t
 
PTPTSLUR
;

867 
__IO
 
uöt32_t
 
PTPTSAR
;

868 
__IO
 
uöt32_t
 
PTPTTHR
;

869 
__IO
 
uöt32_t
 
PTPTTLR
;

870 
uöt32_t
 
RESERVED8
[567];

871 
__IO
 
uöt32_t
 
DMABMR
;

872 
__IO
 
uöt32_t
 
DMATPDR
;

873 
__IO
 
uöt32_t
 
DMARPDR
;

874 
__IO
 
uöt32_t
 
DMARDLAR
;

875 
__IO
 
uöt32_t
 
DMATDLAR
;

876 
__IO
 
uöt32_t
 
DMASR
;

877 
__IO
 
uöt32_t
 
DMAOMR
;

878 
__IO
 
uöt32_t
 
DMAIER
;

879 
__IO
 
uöt32_t
 
DMAMFBOCR
;

880 
uöt32_t
 
RESERVED9
[9];

881 
__IO
 
uöt32_t
 
DMACHTDR
;

882 
__IO
 
uöt32_t
 
DMACHRDR
;

883 
__IO
 
uöt32_t
 
DMACHTBAR
;

884 
__IO
 
uöt32_t
 
DMACHRBAR
;

885 } 
	tETH_Ty≥Def
;

893 
__IO
 
uöt32_t
 
IMR
;

894 
__IO
 
uöt32_t
 
EMR
;

895 
__IO
 
uöt32_t
 
RTSR
;

896 
__IO
 
uöt32_t
 
FTSR
;

897 
__IO
 
uöt32_t
 
SWIER
;

898 
__IO
 
uöt32_t
 
PR
;

899 } 
	tEXTI_Ty≥Def
;

907 
__IO
 
uöt32_t
 
ACR
;

908 
__IO
 
uöt32_t
 
KEYR
;

909 
__IO
 
uöt32_t
 
OPTKEYR
;

910 
__IO
 
uöt32_t
 
SR
;

911 
__IO
 
uöt32_t
 
CR
;

912 
__IO
 
uöt32_t
 
AR
;

913 
__IO
 
uöt32_t
 
RESERVED
;

914 
__IO
 
uöt32_t
 
OBR
;

915 
__IO
 
uöt32_t
 
WRPR
;

916 #ifde‡
STM32F10X_XL


917 
uöt32_t
 
RESERVED1
[8];

918 
__IO
 
uöt32_t
 
KEYR2
;

919 
uöt32_t
 
RESERVED2
;

920 
__IO
 
uöt32_t
 
SR2
;

921 
__IO
 
uöt32_t
 
CR2
;

922 
__IO
 
uöt32_t
 
AR2
;

924 } 
	tFLASH_Ty≥Def
;

932 
__IO
 
uöt16_t
 
RDP
;

933 
__IO
 
uöt16_t
 
USER
;

934 
__IO
 
uöt16_t
 
D©a0
;

935 
__IO
 
uöt16_t
 
D©a1
;

936 
__IO
 
uöt16_t
 
WRP0
;

937 
__IO
 
uöt16_t
 
WRP1
;

938 
__IO
 
uöt16_t
 
WRP2
;

939 
__IO
 
uöt16_t
 
WRP3
;

940 } 
	tOB_Ty≥Def
;

948 
__IO
 
uöt32_t
 
BTCR
[8];

949 } 
	tFSMC_B™k1_Ty≥Def
;

957 
__IO
 
uöt32_t
 
BWTR
[7];

958 } 
	tFSMC_B™k1E_Ty≥Def
;

966 
__IO
 
uöt32_t
 
PCR2
;

967 
__IO
 
uöt32_t
 
SR2
;

968 
__IO
 
uöt32_t
 
PMEM2
;

969 
__IO
 
uöt32_t
 
PATT2
;

970 
uöt32_t
 
RESERVED0
;

971 
__IO
 
uöt32_t
 
ECCR2
;

972 } 
	tFSMC_B™k2_Ty≥Def
;

980 
__IO
 
uöt32_t
 
PCR3
;

981 
__IO
 
uöt32_t
 
SR3
;

982 
__IO
 
uöt32_t
 
PMEM3
;

983 
__IO
 
uöt32_t
 
PATT3
;

984 
uöt32_t
 
RESERVED0
;

985 
__IO
 
uöt32_t
 
ECCR3
;

986 } 
	tFSMC_B™k3_Ty≥Def
;

994 
__IO
 
uöt32_t
 
PCR4
;

995 
__IO
 
uöt32_t
 
SR4
;

996 
__IO
 
uöt32_t
 
PMEM4
;

997 
__IO
 
uöt32_t
 
PATT4
;

998 
__IO
 
uöt32_t
 
PIO4
;

999 } 
	tFSMC_B™k4_Ty≥Def
;

1007 
__IO
 
uöt32_t
 
CRL
;

1008 
__IO
 
uöt32_t
 
CRH
;

1009 
__IO
 
uöt32_t
 
IDR
;

1010 
__IO
 
uöt32_t
 
ODR
;

1011 
__IO
 
uöt32_t
 
BSRR
;

1012 
__IO
 
uöt32_t
 
BRR
;

1013 
__IO
 
uöt32_t
 
LCKR
;

1014 } 
	tGPIO_Ty≥Def
;

1022 
__IO
 
uöt32_t
 
EVCR
;

1023 
__IO
 
uöt32_t
 
MAPR
;

1024 
__IO
 
uöt32_t
 
EXTICR
[4];

1025 
uöt32_t
 
RESERVED0
;

1026 
__IO
 
uöt32_t
 
MAPR2
;

1027 } 
	tAFIO_Ty≥Def
;

1034 
__IO
 
uöt16_t
 
CR1
;

1035 
uöt16_t
 
RESERVED0
;

1036 
__IO
 
uöt16_t
 
CR2
;

1037 
uöt16_t
 
RESERVED1
;

1038 
__IO
 
uöt16_t
 
OAR1
;

1039 
uöt16_t
 
RESERVED2
;

1040 
__IO
 
uöt16_t
 
OAR2
;

1041 
uöt16_t
 
RESERVED3
;

1042 
__IO
 
uöt16_t
 
DR
;

1043 
uöt16_t
 
RESERVED4
;

1044 
__IO
 
uöt16_t
 
SR1
;

1045 
uöt16_t
 
RESERVED5
;

1046 
__IO
 
uöt16_t
 
SR2
;

1047 
uöt16_t
 
RESERVED6
;

1048 
__IO
 
uöt16_t
 
CCR
;

1049 
uöt16_t
 
RESERVED7
;

1050 
__IO
 
uöt16_t
 
TRISE
;

1051 
uöt16_t
 
RESERVED8
;

1052 } 
	tI2C_Ty≥Def
;

1060 
__IO
 
uöt32_t
 
KR
;

1061 
__IO
 
uöt32_t
 
PR
;

1062 
__IO
 
uöt32_t
 
RLR
;

1063 
__IO
 
uöt32_t
 
SR
;

1064 } 
	tIWDG_Ty≥Def
;

1072 
__IO
 
uöt32_t
 
CR
;

1073 
__IO
 
uöt32_t
 
CSR
;

1074 } 
	tPWR_Ty≥Def
;

1082 
__IO
 
uöt32_t
 
CR
;

1083 
__IO
 
uöt32_t
 
CFGR
;

1084 
__IO
 
uöt32_t
 
CIR
;

1085 
__IO
 
uöt32_t
 
APB2RSTR
;

1086 
__IO
 
uöt32_t
 
APB1RSTR
;

1087 
__IO
 
uöt32_t
 
AHBENR
;

1088 
__IO
 
uöt32_t
 
APB2ENR
;

1089 
__IO
 
uöt32_t
 
APB1ENR
;

1090 
__IO
 
uöt32_t
 
BDCR
;

1091 
__IO
 
uöt32_t
 
CSR
;

1093 #ifde‡
STM32F10X_CL


1094 
__IO
 
uöt32_t
 
AHBRSTR
;

1095 
__IO
 
uöt32_t
 
CFGR2
;

1098 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1099 
uöt32_t
 
RESERVED0
;

1100 
__IO
 
uöt32_t
 
CFGR2
;

1102 } 
	tRCC_Ty≥Def
;

1110 
__IO
 
uöt16_t
 
CRH
;

1111 
uöt16_t
 
RESERVED0
;

1112 
__IO
 
uöt16_t
 
CRL
;

1113 
uöt16_t
 
RESERVED1
;

1114 
__IO
 
uöt16_t
 
PRLH
;

1115 
uöt16_t
 
RESERVED2
;

1116 
__IO
 
uöt16_t
 
PRLL
;

1117 
uöt16_t
 
RESERVED3
;

1118 
__IO
 
uöt16_t
 
DIVH
;

1119 
uöt16_t
 
RESERVED4
;

1120 
__IO
 
uöt16_t
 
DIVL
;

1121 
uöt16_t
 
RESERVED5
;

1122 
__IO
 
uöt16_t
 
CNTH
;

1123 
uöt16_t
 
RESERVED6
;

1124 
__IO
 
uöt16_t
 
CNTL
;

1125 
uöt16_t
 
RESERVED7
;

1126 
__IO
 
uöt16_t
 
ALRH
;

1127 
uöt16_t
 
RESERVED8
;

1128 
__IO
 
uöt16_t
 
ALRL
;

1129 
uöt16_t
 
RESERVED9
;

1130 } 
	tRTC_Ty≥Def
;

1138 
__IO
 
uöt32_t
 
POWER
;

1139 
__IO
 
uöt32_t
 
CLKCR
;

1140 
__IO
 
uöt32_t
 
ARG
;

1141 
__IO
 
uöt32_t
 
CMD
;

1142 
__I
 
uöt32_t
 
RESPCMD
;

1143 
__I
 
uöt32_t
 
RESP1
;

1144 
__I
 
uöt32_t
 
RESP2
;

1145 
__I
 
uöt32_t
 
RESP3
;

1146 
__I
 
uöt32_t
 
RESP4
;

1147 
__IO
 
uöt32_t
 
DTIMER
;

1148 
__IO
 
uöt32_t
 
DLEN
;

1149 
__IO
 
uöt32_t
 
DCTRL
;

1150 
__I
 
uöt32_t
 
DCOUNT
;

1151 
__I
 
uöt32_t
 
STA
;

1152 
__IO
 
uöt32_t
 
ICR
;

1153 
__IO
 
uöt32_t
 
MASK
;

1154 
uöt32_t
 
RESERVED0
[2];

1155 
__I
 
uöt32_t
 
FIFOCNT
;

1156 
uöt32_t
 
RESERVED1
[13];

1157 
__IO
 
uöt32_t
 
FIFO
;

1158 } 
	tSDIO_Ty≥Def
;

1166 
__IO
 
uöt16_t
 
CR1
;

1167 
uöt16_t
 
RESERVED0
;

1168 
__IO
 
uöt16_t
 
CR2
;

1169 
uöt16_t
 
RESERVED1
;

1170 
__IO
 
uöt16_t
 
SR
;

1171 
uöt16_t
 
RESERVED2
;

1172 
__IO
 
uöt16_t
 
DR
;

1173 
uöt16_t
 
RESERVED3
;

1174 
__IO
 
uöt16_t
 
CRCPR
;

1175 
uöt16_t
 
RESERVED4
;

1176 
__IO
 
uöt16_t
 
RXCRCR
;

1177 
uöt16_t
 
RESERVED5
;

1178 
__IO
 
uöt16_t
 
TXCRCR
;

1179 
uöt16_t
 
RESERVED6
;

1180 
__IO
 
uöt16_t
 
I2SCFGR
;

1181 
uöt16_t
 
RESERVED7
;

1182 
__IO
 
uöt16_t
 
I2SPR
;

1183 
uöt16_t
 
RESERVED8
;

1184 } 
	tSPI_Ty≥Def
;

1192 
__IO
 
uöt16_t
 
CR1
;

1193 
uöt16_t
 
RESERVED0
;

1194 
__IO
 
uöt16_t
 
CR2
;

1195 
uöt16_t
 
RESERVED1
;

1196 
__IO
 
uöt16_t
 
SMCR
;

1197 
uöt16_t
 
RESERVED2
;

1198 
__IO
 
uöt16_t
 
DIER
;

1199 
uöt16_t
 
RESERVED3
;

1200 
__IO
 
uöt16_t
 
SR
;

1201 
uöt16_t
 
RESERVED4
;

1202 
__IO
 
uöt16_t
 
EGR
;

1203 
uöt16_t
 
RESERVED5
;

1204 
__IO
 
uöt16_t
 
CCMR1
;

1205 
uöt16_t
 
RESERVED6
;

1206 
__IO
 
uöt16_t
 
CCMR2
;

1207 
uöt16_t
 
RESERVED7
;

1208 
__IO
 
uöt16_t
 
CCER
;

1209 
uöt16_t
 
RESERVED8
;

1210 
__IO
 
uöt16_t
 
CNT
;

1211 
uöt16_t
 
RESERVED9
;

1212 
__IO
 
uöt16_t
 
PSC
;

1213 
uöt16_t
 
RESERVED10
;

1214 
__IO
 
uöt16_t
 
ARR
;

1215 
uöt16_t
 
RESERVED11
;

1216 
__IO
 
uöt16_t
 
RCR
;

1217 
uöt16_t
 
RESERVED12
;

1218 
__IO
 
uöt16_t
 
CCR1
;

1219 
uöt16_t
 
RESERVED13
;

1220 
__IO
 
uöt16_t
 
CCR2
;

1221 
uöt16_t
 
RESERVED14
;

1222 
__IO
 
uöt16_t
 
CCR3
;

1223 
uöt16_t
 
RESERVED15
;

1224 
__IO
 
uöt16_t
 
CCR4
;

1225 
uöt16_t
 
RESERVED16
;

1226 
__IO
 
uöt16_t
 
BDTR
;

1227 
uöt16_t
 
RESERVED17
;

1228 
__IO
 
uöt16_t
 
DCR
;

1229 
uöt16_t
 
RESERVED18
;

1230 
__IO
 
uöt16_t
 
DMAR
;

1231 
uöt16_t
 
RESERVED19
;

1232 } 
	tTIM_Ty≥Def
;

1240 
__IO
 
uöt16_t
 
SR
;

1241 
uöt16_t
 
RESERVED0
;

1242 
__IO
 
uöt16_t
 
DR
;

1243 
uöt16_t
 
RESERVED1
;

1244 
__IO
 
uöt16_t
 
BRR
;

1245 
uöt16_t
 
RESERVED2
;

1246 
__IO
 
uöt16_t
 
CR1
;

1247 
uöt16_t
 
RESERVED3
;

1248 
__IO
 
uöt16_t
 
CR2
;

1249 
uöt16_t
 
RESERVED4
;

1250 
__IO
 
uöt16_t
 
CR3
;

1251 
uöt16_t
 
RESERVED5
;

1252 
__IO
 
uöt16_t
 
GTPR
;

1253 
uöt16_t
 
RESERVED6
;

1254 } 
	tUSART_Ty≥Def
;

1262 
__IO
 
uöt32_t
 
CR
;

1263 
__IO
 
uöt32_t
 
CFR
;

1264 
__IO
 
uöt32_t
 
SR
;

1265 } 
	tWWDG_Ty≥Def
;

1276 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1277 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1278 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1280 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1281 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1283 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1286 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1287 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

1288 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

1290 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1291 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1292 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1293 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1294 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1295 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1296 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1297 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1298 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1299 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1300 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1301 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1302 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1303 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1304 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1305 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1306 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1307 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1308 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1309 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1310 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1311 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1312 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

1313 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1314 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1315 
	#CEC_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1317 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1318 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1319 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

1320 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

1321 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1322 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1323 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

1324 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

1325 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1326 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

1327 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

1328 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1329 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1330 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1331 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1332 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1333 
	#TIM15_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1334 
	#TIM16_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1335 
	#TIM17_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1336 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4C00)

	)

1337 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1338 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1340 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

1342 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

1343 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

1344 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

1345 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

1346 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

1347 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

1348 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

1349 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

1350 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

1351 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

1352 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

1353 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

1354 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

1355 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

1356 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

1357 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

1359 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

1360 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

1362 
	#ETH_BASE
 (
AHBPERIPH_BASE
 + 0x8000)

	)

1363 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1364 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1365 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1366 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1368 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

1369 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

1370 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

1371 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

1372 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

1374 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

1384 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1385 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1386 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1387 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1388 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1389 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1390 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1391 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1392 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1393 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1394 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1395 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1396 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1397 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1398 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1399 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1400 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1401 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1402 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1403 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1404 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1405 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1406 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

1407 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1408 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1409 
	#CEC
 ((
CEC_Ty≥Def
 *Ë
CEC_BASE
)

	)

1410 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

1411 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1412 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1413 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1414 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1415 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1416 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1417 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1418 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1419 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1420 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1421 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1422 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1423 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1424 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1425 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1426 
	#TIM15
 ((
TIM_Ty≥Def
 *Ë
TIM15_BASE
)

	)

1427 
	#TIM16
 ((
TIM_Ty≥Def
 *Ë
TIM16_BASE
)

	)

1428 
	#TIM17
 ((
TIM_Ty≥Def
 *Ë
TIM17_BASE
)

	)

1429 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1430 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1431 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1432 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1433 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1434 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1435 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1436 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1437 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1438 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1439 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1440 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1441 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1442 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1443 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1444 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1445 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1446 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1447 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1448 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1449 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1450 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1451 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1452 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1453 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1454 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1455 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1456 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1457 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1482 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1486 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1490 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1499 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1500 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1501 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1502 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1503 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1505 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1506 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1507 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1508 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1511 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1512 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1513 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1514 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1515 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1516 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1517 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1518 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1520 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1524 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1525 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1526 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1527 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1536 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1539 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1542 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1545 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1548 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1551 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1554 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1557 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1560 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1563 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1566 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1569 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1572 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1575 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1578 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1581 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1584 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1587 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1590 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1593 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1596 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1599 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1602 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1605 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1608 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1611 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1614 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1617 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1620 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1623 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1626 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1629 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1632 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1635 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1638 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1641 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1644 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1647 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1650 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1653 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1656 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1659 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1662 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1663 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1664 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1665 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1668 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1669 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1672 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1673 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1674 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1675 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1676 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1685 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1686 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1687 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1688 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1689 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1690 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1691 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1692 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1693 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1694 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1696 #ifde‡
STM32F10X_CL


1697 
	#RCC_CR_PLL2ON
 ((
uöt32_t
)0x04000000Ë

	)

1698 
	#RCC_CR_PLL2RDY
 ((
uöt32_t
)0x08000000Ë

	)

1699 
	#RCC_CR_PLL3ON
 ((
uöt32_t
)0x10000000Ë

	)

1700 
	#RCC_CR_PLL3RDY
 ((
uöt32_t
)0x20000000Ë

	)

1705 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1706 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1707 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1709 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1710 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1711 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1714 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1715 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1716 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1718 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1719 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1720 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1723 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1724 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1725 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1726 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1727 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1729 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1730 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1731 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1732 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1733 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1734 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1735 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1736 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1737 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1740 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1741 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1742 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1743 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1745 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1746 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1747 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1748 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1749 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1752 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1753 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1754 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1755 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1757 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1758 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1759 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1760 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1761 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1764 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1765 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1766 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1768 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1769 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1770 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1771 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1773 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1775 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1778 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1779 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1780 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1781 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1782 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1784 #ifde‡
STM32F10X_CL


1785 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1786 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1788 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1789 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1791 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1792 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1793 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1794 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1795 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1796 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1797 
	#RCC_CFGR_PLLMULL6_5
 ((
uöt32_t
)0x00340000Ë

	)

1799 
	#RCC_CFGR_OTGFSPRE
 ((
uöt32_t
)0x00400000Ë

	)

1802 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x0F000000Ë

	)

1803 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1804 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1805 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1806 
	#RCC_CFGR_MCO_3
 ((
uöt32_t
)0x08000000Ë

	)

1808 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1809 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1810 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1811 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1812 
	#RCC_CFGR_MCO_PLLCLK_Div2
 ((
uöt32_t
)0x07000000Ë

	)

1813 
	#RCC_CFGR_MCO_PLL2CLK
 ((
uöt32_t
)0x08000000Ë

	)

1814 
	#RCC_CFGR_MCO_PLL3CLK_Div2
 ((
uöt32_t
)0x09000000Ë

	)

1815 
	#RCC_CFGR_MCO_Ext_HSE
 ((
uöt32_t
)0x0A000000Ë

	)

1816 
	#RCC_CFGR_MCO_PLL3CLK
 ((
uöt32_t
)0x0B000000Ë

	)

1817 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1818 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1819 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1821 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1822 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1824 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1825 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1826 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1827 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1828 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1829 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1830 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1831 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1832 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1833 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1834 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1835 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1836 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1837 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1838 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1841 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1842 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1843 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1844 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1846 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1847 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1848 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1849 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1850 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1852 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1853 
	#RCC_CFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00010000Ë

	)

1855 
	#RCC_CFGR_PLLXTPRE_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1856 
	#RCC_CFGR_PLLXTPRE_HSE_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1858 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1859 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1860 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1861 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1862 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1863 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1864 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1865 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1866 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1867 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1868 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1869 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1870 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1871 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1872 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1873 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1876 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1877 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1878 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1879 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1881 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1882 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1883 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1884 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1885 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1889 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1890 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1891 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1892 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1893 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1894 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1895 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1896 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1897 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1898 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1899 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1900 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1901 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1902 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1903 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1904 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1905 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1907 #ifde‡
STM32F10X_CL


1908 
	#RCC_CIR_PLL2RDYF
 ((
uöt32_t
)0x00000020Ë

	)

1909 
	#RCC_CIR_PLL3RDYF
 ((
uöt32_t
)0x00000040Ë

	)

1910 
	#RCC_CIR_PLL2RDYIE
 ((
uöt32_t
)0x00002000Ë

	)

1911 
	#RCC_CIR_PLL3RDYIE
 ((
uöt32_t
)0x00004000Ë

	)

1912 
	#RCC_CIR_PLL2RDYC
 ((
uöt32_t
)0x00200000Ë

	)

1913 
	#RCC_CIR_PLL3RDYC
 ((
uöt32_t
)0x00400000Ë

	)

1917 
	#RCC_APB2RSTR_AFIORST
 ((
uöt32_t
)0x00000001Ë

	)

1918 
	#RCC_APB2RSTR_IOPARST
 ((
uöt32_t
)0x00000004Ë

	)

1919 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt32_t
)0x00000008Ë

	)

1920 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt32_t
)0x00000010Ë

	)

1921 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt32_t
)0x00000020Ë

	)

1922 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt32_t
)0x00000200Ë

	)

1924 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

1925 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt32_t
)0x00000400Ë

	)

1928 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000800Ë

	)

1929 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

1930 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

1932 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1933 
	#RCC_APB2RSTR_TIM15RST
 ((
uöt32_t
)0x00010000Ë

	)

1934 
	#RCC_APB2RSTR_TIM16RST
 ((
uöt32_t
)0x00020000Ë

	)

1935 
	#RCC_APB2RSTR_TIM17RST
 ((
uöt32_t
)0x00040000Ë

	)

1938 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1939 
	#RCC_APB2RSTR_IOPERST
 ((
uöt32_t
)0x00000040Ë

	)

1942 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1943 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1944 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1945 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00002000Ë

	)

1946 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt32_t
)0x00008000Ë

	)

1949 #i‡
deföed
 (
STM32F10X_HD_VL
)

1950 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1951 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1954 #ifde‡
STM32F10X_XL


1955 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00080000Ë

	)

1956 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00100000Ë

	)

1957 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00200000Ë

	)

1961 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1962 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1963 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1964 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1965 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1967 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

1968 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

1971 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1972 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1974 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1975 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1976 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1977 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1978 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1981 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
Ë|| deföed (
STM32F10X_XL
)

1982 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1985 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_XL
)

1986 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1987 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1988 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1989 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1990 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1991 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1992 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1995 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1996 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1997 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1998 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1999 
	#RCC_APB1RSTR_CECRST
 ((
uöt32_t
)0x40000000Ë

	)

2002 #i‡
deföed
 (
STM32F10X_HD_VL
)

2003 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

2004 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

2005 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

2006 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

2007 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

2008 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

2009 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

2012 #ifde‡
STM32F10X_CL


2013 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000Ë

	)

2016 #ifde‡
STM32F10X_XL


2017 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

2018 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

2019 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

2023 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

2024 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

2025 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

2026 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

2028 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_HD_VL
)

2029 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

2032 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

2033 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

2034 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

2037 #i‡
deföed
 (
STM32F10X_HD_VL
)

2038 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

2041 #ifde‡
STM32F10X_CL


2042 
	#RCC_AHBENR_OTGFSEN
 ((
uöt32_t
)0x00001000Ë

	)

2043 
	#RCC_AHBENR_ETHMACEN
 ((
uöt32_t
)0x00004000Ë

	)

2044 
	#RCC_AHBENR_ETHMACTXEN
 ((
uöt32_t
)0x00008000Ë

	)

2045 
	#RCC_AHBENR_ETHMACRXEN
 ((
uöt32_t
)0x00010000Ë

	)

2049 
	#RCC_APB2ENR_AFIOEN
 ((
uöt32_t
)0x00000001Ë

	)

2050 
	#RCC_APB2ENR_IOPAEN
 ((
uöt32_t
)0x00000004Ë

	)

2051 
	#RCC_APB2ENR_IOPBEN
 ((
uöt32_t
)0x00000008Ë

	)

2052 
	#RCC_APB2ENR_IOPCEN
 ((
uöt32_t
)0x00000010Ë

	)

2053 
	#RCC_APB2ENR_IOPDEN
 ((
uöt32_t
)0x00000020Ë

	)

2054 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000200Ë

	)

2056 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

2057 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000400Ë

	)

2060 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000800Ë

	)

2061 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

2062 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

2064 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2065 
	#RCC_APB2ENR_TIM15EN
 ((
uöt32_t
)0x00010000Ë

	)

2066 
	#RCC_APB2ENR_TIM16EN
 ((
uöt32_t
)0x00020000Ë

	)

2067 
	#RCC_APB2ENR_TIM17EN
 ((
uöt32_t
)0x00040000Ë

	)

2070 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2071 
	#RCC_APB2ENR_IOPEEN
 ((
uöt32_t
)0x00000040Ë

	)

2074 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

2075 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

2076 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

2077 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00002000Ë

	)

2078 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00008000Ë

	)

2081 #i‡
deföed
 (
STM32F10X_HD_VL
)

2082 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

2083 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

2086 #ifde‡
STM32F10X_XL


2087 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00080000Ë

	)

2088 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00100000Ë

	)

2089 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00200000Ë

	)

2093 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

2094 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

2095 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

2096 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

2097 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

2099 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

2100 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

2103 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

2104 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

2106 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2107 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

2108 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

2109 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

2110 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

2113 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
)

2114 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

2117 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

2118 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2119 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2120 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2121 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2122 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2123 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2124 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2127 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2128 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2129 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2130 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2131 
	#RCC_APB1ENR_CECEN
 ((
uöt32_t
)0x40000000Ë

	)

2134 #ifde‡
STM32F10X_HD_VL


2135 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2136 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2137 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2138 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2139 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2140 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2141 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2144 #ifde‡
STM32F10X_CL


2145 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000Ë

	)

2148 #ifde‡
STM32F10X_XL


2149 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2150 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2151 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2155 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

2156 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

2157 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

2159 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

2160 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

2161 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

2164 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

2165 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

2166 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

2167 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

2169 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

2170 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

2173 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

2174 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

2175 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

2176 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

2177 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

2178 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

2179 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

2180 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

2181 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

2183 #ifde‡
STM32F10X_CL


2185 
	#RCC_AHBRSTR_OTGFSRST
 ((
uöt32_t
)0x00001000Ë

	)

2186 
	#RCC_AHBRSTR_ETHMACRST
 ((
uöt32_t
)0x00004000Ë

	)

2190 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2191 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2192 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2193 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2194 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2196 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2197 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2198 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2199 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2200 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2201 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2202 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2203 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2204 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2205 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2206 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2207 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2208 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2209 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2210 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2211 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2214 
	#RCC_CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0Ë

	)

2215 
	#RCC_CFGR2_PREDIV2_0
 ((
uöt32_t
)0x00000010Ë

	)

2216 
	#RCC_CFGR2_PREDIV2_1
 ((
uöt32_t
)0x00000020Ë

	)

2217 
	#RCC_CFGR2_PREDIV2_2
 ((
uöt32_t
)0x00000040Ë

	)

2218 
	#RCC_CFGR2_PREDIV2_3
 ((
uöt32_t
)0x00000080Ë

	)

2220 
	#RCC_CFGR2_PREDIV2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2221 
	#RCC_CFGR2_PREDIV2_DIV2
 ((
uöt32_t
)0x00000010Ë

	)

2222 
	#RCC_CFGR2_PREDIV2_DIV3
 ((
uöt32_t
)0x00000020Ë

	)

2223 
	#RCC_CFGR2_PREDIV2_DIV4
 ((
uöt32_t
)0x00000030Ë

	)

2224 
	#RCC_CFGR2_PREDIV2_DIV5
 ((
uöt32_t
)0x00000040Ë

	)

2225 
	#RCC_CFGR2_PREDIV2_DIV6
 ((
uöt32_t
)0x00000050Ë

	)

2226 
	#RCC_CFGR2_PREDIV2_DIV7
 ((
uöt32_t
)0x00000060Ë

	)

2227 
	#RCC_CFGR2_PREDIV2_DIV8
 ((
uöt32_t
)0x00000070Ë

	)

2228 
	#RCC_CFGR2_PREDIV2_DIV9
 ((
uöt32_t
)0x00000080Ë

	)

2229 
	#RCC_CFGR2_PREDIV2_DIV10
 ((
uöt32_t
)0x00000090Ë

	)

2230 
	#RCC_CFGR2_PREDIV2_DIV11
 ((
uöt32_t
)0x000000A0Ë

	)

2231 
	#RCC_CFGR2_PREDIV2_DIV12
 ((
uöt32_t
)0x000000B0Ë

	)

2232 
	#RCC_CFGR2_PREDIV2_DIV13
 ((
uöt32_t
)0x000000C0Ë

	)

2233 
	#RCC_CFGR2_PREDIV2_DIV14
 ((
uöt32_t
)0x000000D0Ë

	)

2234 
	#RCC_CFGR2_PREDIV2_DIV15
 ((
uöt32_t
)0x000000E0Ë

	)

2235 
	#RCC_CFGR2_PREDIV2_DIV16
 ((
uöt32_t
)0x000000F0Ë

	)

2238 
	#RCC_CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00Ë

	)

2239 
	#RCC_CFGR2_PLL2MUL_0
 ((
uöt32_t
)0x00000100Ë

	)

2240 
	#RCC_CFGR2_PLL2MUL_1
 ((
uöt32_t
)0x00000200Ë

	)

2241 
	#RCC_CFGR2_PLL2MUL_2
 ((
uöt32_t
)0x00000400Ë

	)

2242 
	#RCC_CFGR2_PLL2MUL_3
 ((
uöt32_t
)0x00000800Ë

	)

2244 
	#RCC_CFGR2_PLL2MUL8
 ((
uöt32_t
)0x00000600Ë

	)

2245 
	#RCC_CFGR2_PLL2MUL9
 ((
uöt32_t
)0x00000700Ë

	)

2246 
	#RCC_CFGR2_PLL2MUL10
 ((
uöt32_t
)0x00000800Ë

	)

2247 
	#RCC_CFGR2_PLL2MUL11
 ((
uöt32_t
)0x00000900Ë

	)

2248 
	#RCC_CFGR2_PLL2MUL12
 ((
uöt32_t
)0x00000A00Ë

	)

2249 
	#RCC_CFGR2_PLL2MUL13
 ((
uöt32_t
)0x00000B00Ë

	)

2250 
	#RCC_CFGR2_PLL2MUL14
 ((
uöt32_t
)0x00000C00Ë

	)

2251 
	#RCC_CFGR2_PLL2MUL16
 ((
uöt32_t
)0x00000E00Ë

	)

2252 
	#RCC_CFGR2_PLL2MUL20
 ((
uöt32_t
)0x00000F00Ë

	)

2255 
	#RCC_CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000Ë

	)

2256 
	#RCC_CFGR2_PLL3MUL_0
 ((
uöt32_t
)0x00001000Ë

	)

2257 
	#RCC_CFGR2_PLL3MUL_1
 ((
uöt32_t
)0x00002000Ë

	)

2258 
	#RCC_CFGR2_PLL3MUL_2
 ((
uöt32_t
)0x00004000Ë

	)

2259 
	#RCC_CFGR2_PLL3MUL_3
 ((
uöt32_t
)0x00008000Ë

	)

2261 
	#RCC_CFGR2_PLL3MUL8
 ((
uöt32_t
)0x00006000Ë

	)

2262 
	#RCC_CFGR2_PLL3MUL9
 ((
uöt32_t
)0x00007000Ë

	)

2263 
	#RCC_CFGR2_PLL3MUL10
 ((
uöt32_t
)0x00008000Ë

	)

2264 
	#RCC_CFGR2_PLL3MUL11
 ((
uöt32_t
)0x00009000Ë

	)

2265 
	#RCC_CFGR2_PLL3MUL12
 ((
uöt32_t
)0x0000A000Ë

	)

2266 
	#RCC_CFGR2_PLL3MUL13
 ((
uöt32_t
)0x0000B000Ë

	)

2267 
	#RCC_CFGR2_PLL3MUL14
 ((
uöt32_t
)0x0000C000Ë

	)

2268 
	#RCC_CFGR2_PLL3MUL16
 ((
uöt32_t
)0x0000E000Ë

	)

2269 
	#RCC_CFGR2_PLL3MUL20
 ((
uöt32_t
)0x0000F000Ë

	)

2271 
	#RCC_CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000Ë

	)

2272 
	#RCC_CFGR2_PREDIV1SRC_PLL2
 ((
uöt32_t
)0x00010000Ë

	)

2273 
	#RCC_CFGR2_PREDIV1SRC_HSE
 ((
uöt32_t
)0x00000000Ë

	)

2274 
	#RCC_CFGR2_I2S2SRC
 ((
uöt32_t
)0x00020000Ë

	)

2275 
	#RCC_CFGR2_I2S3SRC
 ((
uöt32_t
)0x00040000Ë

	)

2278 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2281 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2282 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2283 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2284 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2285 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2287 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2288 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2289 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2290 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2291 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2292 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2293 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2294 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2295 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2296 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2297 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2298 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2299 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2300 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2301 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2302 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2312 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2314 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

2315 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

2316 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

2318 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

2319 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

2320 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

2322 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

2323 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

2324 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

2326 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

2327 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

2328 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

2330 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

2331 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

2332 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

2334 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

2335 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

2336 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

2338 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

2339 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

2340 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

2342 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

2343 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

2344 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

2346 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2348 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

2349 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

2350 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

2352 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

2353 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

2354 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

2356 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

2357 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

2358 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

2360 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

2361 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

2362 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

2364 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

2365 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

2366 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

2368 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

2369 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

2370 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

2372 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

2373 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

2374 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

2376 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

2377 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

2378 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

2381 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2383 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

2384 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

2385 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

2387 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

2388 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

2389 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

2391 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

2392 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

2393 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

2395 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

2396 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

2397 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

2399 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

2400 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

2401 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

2403 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

2404 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

2405 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

2407 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

2408 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

2409 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

2411 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

2412 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

2413 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

2415 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2417 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

2418 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

2419 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

2421 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

2422 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

2423 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

2425 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

2426 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

2427 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

2429 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

2430 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

2431 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

2433 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

2434 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

2435 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

2437 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

2438 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

2439 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

2441 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

2442 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

2443 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

2445 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

2446 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

2447 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

2450 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

2451 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

2452 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

2453 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

2454 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

2455 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

2456 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

2457 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

2458 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

2459 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

2460 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

2461 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

2462 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

2463 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

2464 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

2465 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

2468 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

2469 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

2470 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

2471 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

2472 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

2473 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

2474 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

2475 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

2476 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

2477 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

2478 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

2479 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

2480 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

2481 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

2482 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

2483 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

2486 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

2487 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

2488 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

2489 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

2490 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

2491 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

2492 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

2493 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

2494 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

2495 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

2496 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

2497 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

2498 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

2499 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

2500 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

2501 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

2503 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

2504 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

2505 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

2506 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

2507 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

2508 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

2509 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

2510 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

2511 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

2512 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

2513 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

2514 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

2515 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

2516 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

2517 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

2518 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

2521 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

2522 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

2523 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

2524 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

2525 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

2526 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

2527 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

2528 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

2529 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

2530 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

2531 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

2532 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

2533 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

2534 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

2535 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

2536 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

2539 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

2540 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

2541 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

2542 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

2543 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

2544 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

2545 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

2546 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

2547 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

2548 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

2549 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

2550 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

2551 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

2552 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

2553 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

2554 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

2555 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

2560 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

2561 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

2562 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

2563 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

2564 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

2567 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

2568 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

2569 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

2570 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

2571 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

2572 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

2573 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

2574 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

2575 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

2576 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

2577 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

2578 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

2579 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

2580 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

2581 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

2582 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

2584 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

2585 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

2586 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

2587 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

2590 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

2591 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

2592 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

2593 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

2594 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

2596 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

2599 
	#AFIO_MAPR_SPI1_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2600 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2601 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2602 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2604 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

2605 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

2606 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

2609 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2610 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

2611 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

2613 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2614 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

2615 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

2618 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2619 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

2620 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2622 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

2623 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

2624 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

2627 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2628 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

2629 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

2630 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

2632 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2633 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

2634 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

2637 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2638 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

2639 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2641 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2643 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

2644 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

2645 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

2648 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

2649 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

2650 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

2652 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

2653 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

2654 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

2655 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

2656 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

2657 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

2660 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

2661 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

2662 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

2663 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

2665 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

2666 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

2667 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

2668 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

2670 #ifde‡
STM32F10X_CL


2672 
	#AFIO_MAPR_ETH_REMAP
 ((
uöt32_t
)0x00200000Ë

	)

2675 
	#AFIO_MAPR_CAN2_REMAP
 ((
uöt32_t
)0x00400000Ë

	)

2678 
	#AFIO_MAPR_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

2681 
	#AFIO_MAPR_SPI3_REMAP
 ((
uöt32_t
)0x10000000Ë

	)

2684 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 ((
uöt32_t
)0x20000000Ë

	)

2687 
	#AFIO_MAPR_PTP_PPS_REMAP
 ((
uöt32_t
)0x40000000Ë

	)

2691 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

2692 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

2693 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

2694 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

2697 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

2698 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

2699 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

2700 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

2701 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

2702 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

2703 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

2706 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

2707 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

2708 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

2709 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

2710 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

2711 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

2712 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

2715 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

2716 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

2717 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

2718 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

2719 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

2720 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

2721 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

2724 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

2725 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

2726 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

2727 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

2728 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

2729 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

2730 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

2733 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

2734 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

2735 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

2736 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

2739 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

2740 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

2741 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

2742 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

2743 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

2744 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

2745 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

2748 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

2749 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

2750 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

2751 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

2752 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

2753 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

2754 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

2757 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

2758 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

2759 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

2760 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

2761 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

2762 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

2763 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

2766 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

2767 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

2768 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

2769 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

2770 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

2771 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

2772 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

2775 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

2776 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

2777 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

2778 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

2781 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

2782 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

2783 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

2784 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

2785 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

2786 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

2787 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

2790 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

2791 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

2792 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

2793 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

2794 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

2795 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

2796 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

2799 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

2800 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

2801 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

2802 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

2803 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

2804 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

2805 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

2808 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

2809 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

2810 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

2811 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

2812 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

2813 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

2814 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2817 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2818 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2819 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2820 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2823 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2824 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2825 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2826 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2827 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2828 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2829 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2832 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2833 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2834 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2835 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2836 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2837 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2838 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2841 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2842 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2843 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2844 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2845 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2846 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2847 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2850 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2851 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2852 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2853 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2854 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2855 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2856 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2858 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2860 
	#AFIO_MAPR2_TIM15_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2861 
	#AFIO_MAPR2_TIM16_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2862 
	#AFIO_MAPR2_TIM17_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2863 
	#AFIO_MAPR2_CEC_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2864 
	#AFIO_MAPR2_TIM1_DMA_REMAP
 ((
uöt32_t
)0x00000010Ë

	)

2867 #ifde‡
STM32F10X_HD_VL


2868 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2869 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2870 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2871 
	#AFIO_MAPR2_TIM67_DAC_DMA_REMAP
 ((
uöt32_t
)0x00000800Ë

	)

2872 
	#AFIO_MAPR2_TIM12_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2873 
	#AFIO_MAPR2_MISC_REMAP
 ((
uöt32_t
)0x00002000Ë

	)

2876 #ifde‡
STM32F10X_XL


2878 
	#AFIO_MAPR2_TIM9_REMAP
 ((
uöt32_t
)0x00000020Ë

	)

2879 
	#AFIO_MAPR2_TIM10_REMAP
 ((
uöt32_t
)0x00000040Ë

	)

2880 
	#AFIO_MAPR2_TIM11_REMAP
 ((
uöt32_t
)0x00000080Ë

	)

2881 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2882 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2883 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2893 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2894 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2895 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2896 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2899 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2902 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2905 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2906 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2907 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2916 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2917 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2918 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2919 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2920 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2921 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2922 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2923 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2924 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2925 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2926 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2927 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2928 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2929 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2930 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2931 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2932 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2933 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2934 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2935 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2936 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2937 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2938 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2939 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2940 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2941 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2942 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2943 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2944 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2945 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2946 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2947 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2948 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2951 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2952 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2953 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2954 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2955 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2956 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2957 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2958 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2959 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2960 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2961 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2962 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2963 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2964 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2965 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2966 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2967 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2968 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2969 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2970 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2971 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2972 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2973 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2974 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2975 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2976 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2977 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2978 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2979 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2980 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2981 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2982 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2983 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2986 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2987 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2988 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2989 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2990 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2991 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2992 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2993 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2994 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2995 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2996 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2997 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2998 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2999 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

3000 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

3001 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

3002 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

3003 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

3004 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

3005 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

3006 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

3007 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

3008 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

3009 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

3010 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

3011 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

3012 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

3013 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

3014 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

3015 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

3016 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

3017 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

3018 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

3021 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

3022 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

3023 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

3024 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

3025 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

3026 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

3027 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

3028 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

3029 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

3030 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

3031 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

3032 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

3033 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

3034 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

3035 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

3036 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

3037 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

3038 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

3039 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

3040 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

3041 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

3042 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

3043 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

3044 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

3045 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

3046 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

3047 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

3048 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

3049 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

3050 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

3051 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

3052 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

3053 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

3056 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

3057 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

3058 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

3059 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

3060 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

3061 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

3062 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

3063 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

3064 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

3065 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

3066 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

3067 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

3068 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

3069 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

3070 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

3071 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

3072 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

3073 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

3074 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

3075 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

3076 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

3077 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

3078 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

3079 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

3080 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

3081 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

3082 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

3083 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

3084 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

3085 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

3086 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

3087 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

3088 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

3091 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

3092 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

3093 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

3094 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

3097 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

3098 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

3099 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

3100 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

3103 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

3104 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

3105 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

3106 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

3109 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

3110 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

3111 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

3112 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

3115 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

3116 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

3117 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

3118 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

3121 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

3122 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

3123 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

3124 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

3127 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

3128 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

3129 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

3130 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

3133 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

3134 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

3135 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

3136 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

3139 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

3140 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

3141 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

3142 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

3143 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

3146 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

3147 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

3148 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

3149 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

3150 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

3151 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

3152 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

3153 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

3154 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

3155 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

3158 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

3159 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

3162 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

3163 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

3164 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

3166 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

3167 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

3168 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

3169 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

3172 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

3173 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

3174 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

3175 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

3176 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

3177 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

3178 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

3179 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

3181 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

3182 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

3185 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

3186 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

3187 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

3190 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

3191 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

3192 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

3193 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

3194 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

3195 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

3198 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

3199 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

3200 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

3201 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

3204 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

3205 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

3206 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

3207 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

3208 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

3209 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

3210 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

3211 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

3212 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

3213 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

3214 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

3215 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

3216 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

3217 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

3221 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

3222 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

3223 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

3224 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

3225 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

3227 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

3228 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

3229 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

3230 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

3231 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

3232 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

3234 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

3235 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

3236 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

3237 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

3238 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

3239 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

3242 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

3243 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

3244 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

3247 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

3248 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

3249 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

3250 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

3251 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

3254 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3257 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3260 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

3269 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3270 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3271 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3272 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3273 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3274 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3275 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3276 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3277 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3278 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3279 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3280 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3281 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3282 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3283 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3284 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3285 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3286 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3287 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3288 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3291 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3292 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3293 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3294 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3295 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3296 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3297 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3298 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3299 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3300 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3301 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3302 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3303 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3304 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3305 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3306 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3307 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3308 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3309 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3310 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3313 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3314 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3315 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3316 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3317 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3318 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3319 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3320 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3321 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3322 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3323 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3324 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3325 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3326 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3327 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3328 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3329 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3330 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3331 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3332 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3335 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3336 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3337 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3338 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3339 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3340 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3341 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3342 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3343 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3344 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3345 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3346 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3347 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3348 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3349 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3350 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3351 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3352 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3353 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3354 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3357 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3358 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3359 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3360 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3361 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3362 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3363 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3364 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3365 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3366 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3367 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3368 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3369 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3370 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3371 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3372 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3373 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3374 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3375 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3376 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3379 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3380 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3381 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3382 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3383 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3384 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3385 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3386 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3387 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3388 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3389 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3390 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3391 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3392 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3393 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3394 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3395 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3396 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3397 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3398 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3407 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

3408 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3409 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3410 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3411 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

3412 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3413 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3414 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3415 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

3416 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3417 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3418 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3419 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

3420 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3421 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3422 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3423 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

3424 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3425 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3426 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3427 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

3428 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3429 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3430 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3431 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

3432 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3433 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3434 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3437 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

3438 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3439 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3440 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3441 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

3442 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3443 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3444 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3445 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

3446 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3447 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3448 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3449 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

3450 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3451 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3452 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3453 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

3454 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3455 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3456 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3457 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

3458 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3459 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3460 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3461 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

3462 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3463 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3464 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3467 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

3468 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3469 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3470 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3471 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3472 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3473 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

3474 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

3476 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3477 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3478 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3480 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3481 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3482 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3484 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

3485 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3486 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3488 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3491 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

3492 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3493 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3494 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3495 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

3496 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3497 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

3498 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

3500 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3501 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3502 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3504 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3505 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3506 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3508 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

3509 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3510 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3512 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3515 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

3516 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3517 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3518 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3519 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

3520 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3521 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

3522 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

3524 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3525 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3526 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3528 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3529 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3530 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3532 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

3533 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3534 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3536 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3539 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

3540 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3541 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3542 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3543 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

3544 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3545 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

3546 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

3548 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3549 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3550 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3552 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3553 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3554 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3556 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

3557 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3558 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3560 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3563 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

3564 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3565 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3566 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3567 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

3568 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3569 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

3570 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

3572 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3573 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3574 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3576 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3577 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3578 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3580 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

3581 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3582 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3584 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3587 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

3588 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3589 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3590 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3591 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

3592 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3593 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

3594 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

3596 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3597 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3598 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3600 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3601 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3602 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3604 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

3605 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3606 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3608 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3611 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

3612 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3613 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3614 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3615 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

3616 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3617 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

3618 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

3620 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

3621 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3622 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3624 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3625 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3626 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3628 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

3629 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3630 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3632 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3635 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

3638 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

3641 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

3644 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

3647 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

3650 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

3653 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

3656 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3659 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3662 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3666 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3669 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3672 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3676 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3679 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3682 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3685 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3689 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3692 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3695 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3698 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3707 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

3708 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

3709 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

3710 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

3711 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

3714 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

3715 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

3716 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

3717 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

3718 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

3719 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

3721 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

3722 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

3723 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

3724 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

3725 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

3726 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

3727 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

3728 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

3730 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

3731 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

3732 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

3733 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

3735 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

3736 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

3737 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

3738 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

3739 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

3741 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

3742 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

3746 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

3747 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

3748 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

3749 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

3750 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

3751 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

3753 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

3754 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

3755 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

3756 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

3758 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

3760 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

3761 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

3762 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

3763 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

3765 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

3766 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

3767 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

3768 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

3771 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

3772 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

3773 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

3774 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

3776 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

3777 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

3778 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

3779 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

3781 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

3782 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

3783 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

3784 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

3786 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

3787 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

3788 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

3789 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

3791 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

3792 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

3793 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

3794 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

3796 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

3797 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

3798 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

3799 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

3801 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

3802 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

3803 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

3804 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

3806 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

3807 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

3808 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

3809 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

3812 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

3813 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

3814 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

3815 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

3817 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

3818 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

3819 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

3820 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

3822 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

3823 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

3824 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

3825 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

3827 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

3828 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

3829 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

3830 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

3832 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

3833 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

3834 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

3835 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

3837 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

3838 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

3839 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

3840 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

3842 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

3843 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

3844 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

3845 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

3847 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

3848 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3849 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3850 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3852 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3853 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3854 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3855 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3857 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3858 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3859 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3860 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3863 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3866 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3869 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3872 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3875 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3878 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3881 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3882 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3883 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3884 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3885 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3886 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3888 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3889 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3890 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3891 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3892 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3893 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3895 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3896 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3897 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3898 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3899 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3900 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3902 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3903 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3904 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3905 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3906 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3907 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3909 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3910 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3911 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3912 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3913 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3916 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3917 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3918 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3919 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3920 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3921 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3923 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3924 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3925 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3926 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3927 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3928 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3930 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3931 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3932 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3933 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3934 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3935 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3937 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3938 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3939 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3940 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3941 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3942 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3944 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3945 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3946 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3947 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3948 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3949 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3951 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3952 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3953 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3954 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3955 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3956 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3959 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3960 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3961 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3962 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3963 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3964 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3966 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3967 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3968 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3969 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3970 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3971 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3973 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3974 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3975 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3976 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3977 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3978 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3980 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3981 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3982 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3983 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3984 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3985 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3987 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3988 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3989 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3990 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3991 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3992 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3994 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3995 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3996 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3997 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3998 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3999 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

4002 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

4003 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

4004 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

4005 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

4006 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

4007 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

4009 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

4010 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

4011 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

4012 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

4013 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

4014 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

4016 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

4017 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

4018 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

4019 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

4020 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

4021 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

4023 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

4024 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

4025 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

4026 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

4027 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

4028 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

4030 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

4031 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

4032 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

4035 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4038 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4041 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4044 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4047 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

4048 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

4057 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

4058 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

4059 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

4061 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

4062 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

4063 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

4064 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

4066 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

4067 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

4068 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

4070 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

4071 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

4072 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

4073 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

4074 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

4076 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

4077 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

4078 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

4079 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

4081 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

4082 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

4083 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

4084 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

4086 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

4087 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

4088 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

4090 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

4091 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

4092 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

4093 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

4094 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

4096 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

4099 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

4100 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

4103 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

4106 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4109 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

4112 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

4115 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4118 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

4121 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

4122 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

4125 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

4126 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

4129 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

4130 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

4133 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

4136 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

4139 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

4140 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

4148 
	#CEC_CFGR_PE
 ((
uöt16_t
)0x0001Ë

	)

4149 
	#CEC_CFGR_IE
 ((
uöt16_t
)0x0002Ë

	)

4150 
	#CEC_CFGR_BTEM
 ((
uöt16_t
)0x0004Ë

	)

4151 
	#CEC_CFGR_BPEM
 ((
uöt16_t
)0x0008Ë

	)

4154 
	#CEC_OAR_OA
 ((
uöt16_t
)0x000FË

	)

4155 
	#CEC_OAR_OA_0
 ((
uöt16_t
)0x0001Ë

	)

4156 
	#CEC_OAR_OA_1
 ((
uöt16_t
)0x0002Ë

	)

4157 
	#CEC_OAR_OA_2
 ((
uöt16_t
)0x0004Ë

	)

4158 
	#CEC_OAR_OA_3
 ((
uöt16_t
)0x0008Ë

	)

4161 
	#CEC_PRES_PRES
 ((
uöt16_t
)0x3FFFË

	)

4164 
	#CEC_ESR_BTE
 ((
uöt16_t
)0x0001Ë

	)

4165 
	#CEC_ESR_BPE
 ((
uöt16_t
)0x0002Ë

	)

4166 
	#CEC_ESR_RBTFE
 ((
uöt16_t
)0x0004Ë

	)

4167 
	#CEC_ESR_SBE
 ((
uöt16_t
)0x0008Ë

	)

4168 
	#CEC_ESR_ACKE
 ((
uöt16_t
)0x0010Ë

	)

4169 
	#CEC_ESR_LINE
 ((
uöt16_t
)0x0020Ë

	)

4170 
	#CEC_ESR_TBTFE
 ((
uöt16_t
)0x0040Ë

	)

4173 
	#CEC_CSR_TSOM
 ((
uöt16_t
)0x0001Ë

	)

4174 
	#CEC_CSR_TEOM
 ((
uöt16_t
)0x0002Ë

	)

4175 
	#CEC_CSR_TERR
 ((
uöt16_t
)0x0004Ë

	)

4176 
	#CEC_CSR_TBTRF
 ((
uöt16_t
)0x0008Ë

	)

4177 
	#CEC_CSR_RSOM
 ((
uöt16_t
)0x0010Ë

	)

4178 
	#CEC_CSR_REOM
 ((
uöt16_t
)0x0020Ë

	)

4179 
	#CEC_CSR_RERR
 ((
uöt16_t
)0x0040Ë

	)

4180 
	#CEC_CSR_RBTF
 ((
uöt16_t
)0x0080Ë

	)

4183 
	#CEC_TXD_TXD
 ((
uöt16_t
)0x00FFË

	)

4186 
	#CEC_RXD_RXD
 ((
uöt16_t
)0x00FFË

	)

4195 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

4196 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

4197 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

4198 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

4199 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

4201 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

4202 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

4203 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

4205 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

4207 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

4208 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

4209 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

4212 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

4213 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

4214 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

4216 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

4217 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

4218 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

4219 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

4221 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

4222 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

4223 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

4224 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

4225 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

4226 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

4227 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

4228 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

4231 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

4232 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

4233 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

4234 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

4236 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

4237 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

4238 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

4239 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

4241 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

4243 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

4244 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

4245 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

4246 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

4247 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

4249 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

4250 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

4251 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

4253 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

4254 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

4257 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

4258 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

4259 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

4260 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

4261 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

4262 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

4263 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

4264 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

4265 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

4266 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

4267 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

4268 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

4269 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

4270 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

4271 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

4274 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

4275 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

4276 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

4277 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

4278 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

4279 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

4280 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

4281 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

4282 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

4283 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

4284 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

4285 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

4288 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

4289 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

4290 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

4291 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

4292 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

4293 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

4294 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

4295 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

4298 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

4299 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

4300 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

4302 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

4303 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

4305 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

4306 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

4307 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

4308 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

4310 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

4312 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

4313 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

4314 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

4316 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

4317 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

4319 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

4320 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

4321 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

4322 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

4324 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

4328 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

4329 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4330 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4332 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

4333 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

4334 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

4335 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

4336 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

4338 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

4339 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4340 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4342 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

4343 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

4344 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

4345 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

4346 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

4349 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

4350 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

4351 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

4353 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

4354 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

4356 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

4357 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

4358 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

4359 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

4361 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

4363 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

4364 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

4365 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

4367 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

4368 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

4370 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

4371 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

4372 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

4373 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

4375 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

4379 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

4380 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4381 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4383 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

4384 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

4385 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

4386 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

4387 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

4389 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

4390 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4391 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4393 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

4394 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

4395 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

4396 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

4397 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

4400 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

4401 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

4402 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

4403 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

4404 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

4405 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

4406 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

4407 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

4408 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

4409 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

4410 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

4411 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

4412 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

4413 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

4414 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

4417 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

4420 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

4423 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

4426 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

4429 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

4432 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

4435 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

4438 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

4441 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

4442 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

4443 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

4444 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

4445 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

4446 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

4447 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

4448 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

4449 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

4451 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

4452 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

4453 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

4455 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

4456 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

4457 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

4458 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

4459 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

4460 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

4463 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

4464 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

4465 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

4466 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

4467 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

4468 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

4470 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

4471 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

4472 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

4473 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

4474 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

4475 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

4478 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

4487 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

4488 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

4489 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

4492 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

4493 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

4494 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

4495 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

4496 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

4497 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

4500 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

4503 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

4506 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

4509 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

4512 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4515 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4518 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4521 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4530 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4533 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4534 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4535 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4536 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4539 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4542 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4543 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4552 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

4553 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

4554 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

4555 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

4556 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

4557 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

4558 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

4559 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

4561 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

4564 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

4565 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

4566 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

4567 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

4568 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

4569 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

4570 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

4571 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

4573 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

4574 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

4575 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

4577 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

4580 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

4589 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4590 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4592 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4593 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4594 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4596 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4597 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4598 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4600 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4601 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4602 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4603 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4604 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4605 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4606 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4607 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4608 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4609 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4612 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4613 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4615 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4616 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4617 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4619 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4620 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4621 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4623 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4624 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4625 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4626 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4627 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4628 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4629 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4630 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4631 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4632 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4635 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4636 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4638 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4639 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4640 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4642 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4643 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4644 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4646 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4647 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4648 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4649 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4650 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4651 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4652 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4653 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4654 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4655 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4658 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4659 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4661 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4662 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4663 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4665 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4666 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4667 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4669 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4670 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4671 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4672 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4673 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4674 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4675 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4676 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4677 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4678 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4681 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4682 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4683 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4684 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4685 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4687 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4688 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4689 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4690 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4691 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4693 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4694 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4695 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4696 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4697 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4699 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4700 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4701 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4702 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4703 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4705 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4706 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4707 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4708 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4709 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4711 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4712 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4713 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4714 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4715 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4717 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4718 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4719 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4722 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4723 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4724 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4725 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4726 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4728 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4729 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4730 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4731 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4732 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4734 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4735 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4736 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4737 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4738 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4740 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4741 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4742 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4743 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4744 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4746 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4747 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4748 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4749 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4750 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4752 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4753 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4754 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4755 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4756 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4758 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4759 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4760 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4763 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4764 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4765 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4766 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4767 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4769 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4770 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4771 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4772 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4773 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4775 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4776 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4777 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4778 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4779 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4781 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4782 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4783 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4784 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4785 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4787 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4788 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4789 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4790 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4791 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4793 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4794 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4795 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4796 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4797 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4799 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4800 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4801 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4804 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4805 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4806 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4807 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4808 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4810 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4811 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4812 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4813 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4814 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4816 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4817 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4818 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4819 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4820 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4822 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4823 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4824 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4825 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4826 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4828 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4829 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4830 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4831 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4832 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4834 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4835 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4836 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4837 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4838 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4840 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4841 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4842 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4845 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4846 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4847 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4848 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4849 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4851 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4852 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4853 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4854 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4855 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4857 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4858 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4859 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4860 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4861 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4863 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4864 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4865 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4866 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4867 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4869 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4870 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4871 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4872 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4873 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4875 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4876 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4877 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4880 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4881 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4882 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4883 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4884 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4886 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4887 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4888 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4889 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4890 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4892 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4893 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4894 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4895 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4896 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4898 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4899 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4900 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4901 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4902 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4904 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4905 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4906 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4907 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4908 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4910 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4911 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4912 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4915 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4916 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4917 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4918 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4919 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4921 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4922 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4923 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4924 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4925 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4927 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4928 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4929 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4930 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4931 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4933 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4934 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4935 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4936 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4937 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4939 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4940 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4941 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4942 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4943 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4945 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4946 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4947 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4950 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4951 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4952 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4953 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4954 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4956 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4957 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4958 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4959 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4960 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4962 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4963 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4964 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4965 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4966 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4968 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4969 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4970 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4971 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4972 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4974 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4975 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4976 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4977 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4978 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4980 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4981 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4982 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4985 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4986 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4987 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4989 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4990 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4991 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4993 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4995 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4996 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4997 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4998 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4999 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5001 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5002 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5003 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5004 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5005 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5007 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5008 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5009 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5010 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5013 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5014 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5015 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5017 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5018 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5019 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5021 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5023 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5024 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5025 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5026 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5027 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5029 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5030 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5031 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5032 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5033 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5035 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5036 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5037 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5038 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5041 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5042 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5043 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5045 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5046 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5047 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5049 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5051 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5052 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5053 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5054 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5055 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5057 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5058 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5059 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5060 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5061 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5063 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5064 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5065 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5066 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5069 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5070 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5071 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5072 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5073 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5074 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5075 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5078 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5079 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5080 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5081 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5082 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5083 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5084 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5087 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5088 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5089 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5090 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5091 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5092 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5093 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5096 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5097 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5098 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5099 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5100 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5101 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5102 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5103 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5104 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5106 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5107 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5108 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5109 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5110 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5111 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5112 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5113 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5114 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5116 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5117 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5118 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5119 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5120 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5121 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5122 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5123 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5124 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5126 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5127 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5128 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5129 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5130 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5131 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5132 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5133 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5134 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5137 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5138 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5139 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5140 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5141 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5142 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5143 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5144 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5145 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5147 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5148 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5149 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5150 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5151 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5152 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5153 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5154 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5155 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5157 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5158 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5159 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5160 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5161 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5162 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5163 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5164 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5165 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5167 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5168 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5169 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5170 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5171 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5172 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5173 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5174 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5175 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5178 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5179 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5180 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5181 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5182 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5183 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5184 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5185 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5186 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5188 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5189 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5190 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5191 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5192 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5193 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5194 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5195 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5196 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5198 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5199 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5200 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5201 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5202 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5203 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5204 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5205 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5206 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5208 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5209 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5210 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5211 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5212 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5213 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5214 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5215 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5216 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5219 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5220 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5221 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5222 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5223 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5224 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5225 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5226 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5227 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5229 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5230 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5231 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5232 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5233 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5234 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5235 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5236 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5237 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5239 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5240 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5241 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5242 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5243 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5244 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5245 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5246 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5247 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5249 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5250 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5251 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5252 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5253 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5254 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5255 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5256 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5257 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5260 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5261 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5262 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5263 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5264 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5265 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5266 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5267 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5268 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5270 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5271 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5272 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5273 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5274 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5275 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5276 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5277 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5278 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5280 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5281 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5282 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5283 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5284 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5285 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5286 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5287 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5288 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5290 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5291 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5292 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5293 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5294 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5295 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5296 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5297 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5298 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5301 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5302 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5303 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5304 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5305 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5306 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5307 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5308 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5309 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5311 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5312 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5313 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5314 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5315 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5316 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5317 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5318 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5319 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5321 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5322 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5323 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5324 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5325 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5326 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5327 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5328 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5329 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5331 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5332 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5333 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5334 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5335 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5336 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5337 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5338 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5339 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5342 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5343 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5344 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5345 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5346 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5347 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5348 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5349 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5350 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5352 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5353 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5354 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5355 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5356 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5357 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5358 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5359 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5360 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5362 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5363 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5364 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5365 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5366 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5367 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5368 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5369 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5370 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5372 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5373 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5374 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5375 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5376 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5377 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5378 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5379 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5380 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5383 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5386 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5395 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

5396 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

5397 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

5400 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

5401 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

5402 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

5403 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

5405 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

5406 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

5407 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

5409 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

5410 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

5413 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

5416 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

5418 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

5419 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

5420 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

5422 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

5423 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

5424 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

5425 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

5426 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

5427 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

5428 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

5431 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

5434 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

5437 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

5440 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5443 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5446 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

5449 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

5452 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

5455 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

5456 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

5457 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

5458 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

5460 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

5461 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

5462 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

5463 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

5464 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

5466 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

5467 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

5468 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

5469 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

5472 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

5475 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

5476 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

5477 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

5478 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

5479 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

5480 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

5481 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

5482 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

5483 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

5484 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

5485 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

5486 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

5487 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

5488 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

5489 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

5490 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

5491 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

5492 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

5493 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

5494 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

5495 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

5496 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

5497 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

5498 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

5501 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

5502 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

5503 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

5504 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

5505 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

5506 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

5507 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

5508 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

5509 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

5510 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

5511 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

5512 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

5513 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

5516 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

5517 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

5518 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

5519 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

5520 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

5521 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

5522 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

5523 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

5524 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

5525 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

5526 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

5527 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

5528 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

5529 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

5530 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

5531 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

5532 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

5533 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

5534 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

5535 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

5536 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

5537 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

5538 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

5539 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

5542 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

5545 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5555 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

5557 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5558 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5559 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5561 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5562 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5563 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5565 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5566 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5567 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5569 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5571 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5572 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5573 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5575 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5576 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5579 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

5581 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5582 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5583 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5585 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5586 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5587 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5589 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5590 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5591 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5593 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5595 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5596 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5597 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5599 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5600 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5603 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

5605 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5606 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5607 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5609 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5610 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5611 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5613 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5614 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5615 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5617 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5619 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5620 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5621 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5623 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5624 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5627 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

5629 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5630 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5631 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5633 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5634 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5635 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5637 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5638 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5639 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5641 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5643 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5644 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5645 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5647 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5648 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5651 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

5653 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5654 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5655 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5657 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5658 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5659 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5661 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5662 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5663 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5665 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5667 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5668 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5669 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5671 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5672 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5675 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

5677 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5678 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5679 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5681 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5682 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5683 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5685 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5686 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5687 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5689 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5691 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5692 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5693 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5695 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5696 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5699 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

5701 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5702 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5703 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5705 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5706 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5707 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5709 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5710 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5711 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5713 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5715 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5716 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5717 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5719 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5720 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5723 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

5725 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5726 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5727 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5729 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5730 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5731 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5733 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5734 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5735 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5737 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5739 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5740 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5741 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5743 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5744 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5748 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

5749 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

5750 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

5751 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

5752 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

5753 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

5754 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

5755 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

5756 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

5757 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

5758 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

5759 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

5760 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

5763 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

5764 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

5765 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

5766 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

5767 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

5768 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

5769 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

5770 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

5771 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

5772 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

5775 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

5776 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

5777 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

5778 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

5779 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

5782 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

5783 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

5784 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

5785 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

5786 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

5787 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

5788 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

5789 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

5791 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

5794 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

5798 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

5801 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

5804 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

5807 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

5810 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

5813 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

5816 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

5819 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

5824 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

5827 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

5830 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

5833 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

5836 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

5839 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

5842 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

5845 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

5850 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5853 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5856 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5859 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5862 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5865 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5868 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

5871 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

5874 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5877 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5880 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5883 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5886 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5889 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5892 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5895 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5900 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

5903 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5906 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5909 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5912 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5915 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5918 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5921 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5926 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5928 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5929 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5930 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5931 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5932 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5933 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5935 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5938 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5940 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5941 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5942 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5943 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5944 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5945 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5947 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5950 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5952 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5953 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5954 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5955 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5956 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5957 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5959 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5962 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5964 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5965 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5966 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5967 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5968 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5969 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5971 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5974 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5976 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5977 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5978 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5979 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5980 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5981 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5983 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5986 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5988 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5989 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5990 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5991 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5992 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5993 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5995 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5998 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

6000 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

6001 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

6002 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

6003 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

6004 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

6005 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

6007 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

6010 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

6012 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

6013 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

6014 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

6015 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

6016 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

6017 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

6019 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

6024 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6026 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6027 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6028 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6029 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6030 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6031 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6033 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6036 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6038 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6039 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6040 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6041 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6042 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6043 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6045 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6048 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6050 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6051 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6052 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6053 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6054 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6055 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6057 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6060 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6062 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6063 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6064 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6065 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6066 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6067 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6069 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6072 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6074 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6075 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6076 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6077 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6078 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6079 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6081 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6084 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6086 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6087 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6088 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6089 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6090 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6091 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6093 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6096 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6098 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6099 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6100 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6101 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6102 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6103 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6105 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6108 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6110 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6111 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6112 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6113 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6114 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6115 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6117 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6120 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6122 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6123 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6124 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6125 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6126 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6127 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6129 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6132 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6134 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6135 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6136 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6137 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6138 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6139 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6141 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6144 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6146 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6147 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6148 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6149 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6150 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6151 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6153 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6156 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6158 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6159 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6160 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6161 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6162 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6163 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6165 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6168 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6170 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6171 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6172 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6173 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6174 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6175 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6177 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6180 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6182 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6183 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6184 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6185 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6186 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6187 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6189 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6192 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6194 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6195 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6196 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6197 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6198 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6199 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6201 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6204 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6206 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6207 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6208 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6209 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6210 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6211 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6213 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6223 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

6224 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

6225 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

6226 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

6227 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

6228 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

6229 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

6230 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

6231 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

6234 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

6235 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

6236 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

6237 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

6238 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

6239 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

6240 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

6241 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

6242 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

6245 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

6246 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

6247 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

6248 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

6249 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

6250 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

6251 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

6252 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

6253 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

6254 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

6255 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

6256 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

6257 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

6258 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

6259 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

6260 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

6262 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

6263 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

6264 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

6265 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

6267 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

6268 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

6269 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

6270 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

6273 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

6274 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

6275 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

6276 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

6279 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

6280 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

6281 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

6282 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

6285 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

6286 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

6287 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

6288 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

6289 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

6290 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

6291 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

6292 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

6293 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

6294 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

6295 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

6296 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

6297 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

6298 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

6301 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

6302 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

6303 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

6305 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

6306 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

6307 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

6308 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

6310 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

6311 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

6314 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

6315 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

6316 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

6317 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

6318 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

6319 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

6323 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6324 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6325 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6326 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6327 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6330 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6331 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6332 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6335 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6336 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6337 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6338 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6341 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6342 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6343 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6344 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6347 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6348 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6349 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6350 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6351 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6354 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6355 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6356 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6359 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6360 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6361 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6362 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6365 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6366 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6367 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6368 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6371 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6372 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6373 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6374 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6375 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6378 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6379 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6380 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6383 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6384 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6385 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6386 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6389 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6390 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6391 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6392 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6395 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6396 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6397 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6398 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6401 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6402 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6403 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6406 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6407 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6408 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6409 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6412 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6413 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6414 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6415 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6418 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6419 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6420 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6421 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6424 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6425 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6426 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6429 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6430 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6431 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6432 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6435 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6436 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6437 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6438 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6442 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

6445 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

6446 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

6447 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

6448 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

6449 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

6450 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

6451 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

6452 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

6453 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

6454 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

6455 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

6456 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

6457 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

6458 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

6459 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

6462 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

6463 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

6464 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

6465 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

6466 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

6467 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

6468 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

6469 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

6470 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

6471 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

6472 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

6473 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

6474 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

6475 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

6476 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

6479 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

6480 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

6481 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

6482 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

6483 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

6484 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

6485 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

6486 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

6487 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

6488 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

6489 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

6490 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

6491 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

6492 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

6493 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

6496 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

6497 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

6498 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

6499 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

6500 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

6501 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

6502 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

6503 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

6504 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

6505 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

6506 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

6507 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

6508 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

6509 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

6510 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

6513 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6514 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6515 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6516 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6517 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6518 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6519 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6520 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6521 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6522 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6523 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6524 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6525 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6526 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6527 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6528 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6529 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6530 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6531 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6532 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6533 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6534 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6535 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6536 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6537 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6538 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6539 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6540 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6541 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6542 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6543 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6544 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6547 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6548 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6549 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6550 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6551 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6552 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6553 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6554 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6555 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6556 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6557 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6558 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6559 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6560 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6561 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6562 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6563 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6564 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6565 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6566 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6567 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6568 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6569 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6570 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6571 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6572 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6573 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6574 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6575 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6576 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6577 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6578 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6581 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6582 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6583 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6584 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6585 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6586 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6587 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6588 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6589 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6590 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6591 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6592 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6593 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6594 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6595 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6596 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6597 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6598 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6599 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6600 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6601 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6602 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6603 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6604 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6605 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6606 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6607 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6608 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6609 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6610 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6611 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6612 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6615 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6616 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6617 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6618 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6619 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6620 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6621 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6622 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6623 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6624 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6625 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6626 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6627 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6628 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6629 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6630 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6631 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6632 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6633 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6634 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6635 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6636 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6637 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6638 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6639 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6640 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6641 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6642 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6643 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6644 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6645 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6646 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6649 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6650 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6651 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6652 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6653 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6654 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6655 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6656 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6657 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6658 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6659 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6660 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6661 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6662 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6663 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6664 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6665 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6666 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6667 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6668 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6669 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6670 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6671 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6672 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6673 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6674 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6675 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6676 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6677 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6678 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6679 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6680 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6683 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6684 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6685 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6686 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6687 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6688 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6689 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6690 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6691 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6692 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6693 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6694 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6695 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6696 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6697 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6698 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6699 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6700 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6701 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6702 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6703 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6704 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6705 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6706 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6707 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6708 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6709 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6710 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6711 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6712 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6713 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6714 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6717 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6718 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6719 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6720 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6721 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6722 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6723 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6724 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6725 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6726 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6727 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6728 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6729 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6730 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6731 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6732 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6733 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6734 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6735 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6736 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6737 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6738 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6739 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6740 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6741 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6742 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6743 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6744 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6745 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6746 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6747 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6748 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6751 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6752 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6753 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6754 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6755 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6756 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6757 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6758 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6759 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6760 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6761 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6762 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6763 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6764 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6765 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6766 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6767 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6768 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6769 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6770 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6771 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6772 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6773 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6774 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6775 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6776 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6777 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6778 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6779 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6780 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6781 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6782 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6785 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6786 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6787 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6788 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6789 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6790 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6791 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6792 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6793 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6794 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6795 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6796 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6797 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6798 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6799 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6800 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6801 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6802 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6803 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6804 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6805 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6806 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6807 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6808 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6809 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6810 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6811 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6812 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6813 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6814 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6815 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6816 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6819 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6820 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6821 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6822 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6823 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6824 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6825 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6826 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6827 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6828 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6829 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6830 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6831 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6832 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6833 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6834 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6835 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6836 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6837 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6838 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6839 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6840 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6841 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6842 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6843 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6844 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6845 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6846 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6847 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6848 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6849 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6850 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6853 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6854 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6855 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6856 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6857 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6858 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6859 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6860 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6861 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6862 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6863 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6864 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6865 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6866 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6867 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6868 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6869 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6870 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6871 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6872 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6873 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6874 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6875 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6876 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6877 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6878 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6879 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6880 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6881 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6882 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6883 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6884 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6887 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6888 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6889 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6890 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6891 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6892 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6893 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6894 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6895 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6896 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6897 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6898 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6899 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6900 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6901 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6902 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6903 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6904 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6905 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6906 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6907 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6908 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6909 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6910 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6911 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6912 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6913 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6914 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6915 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6916 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6917 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6918 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6921 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6922 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6923 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6924 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6925 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6926 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6927 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6928 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6929 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6930 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6931 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6932 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6933 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6934 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6935 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6936 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6937 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6938 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6939 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6940 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6941 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6942 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6943 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6944 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6945 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6946 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6947 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6948 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6949 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6950 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6951 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6952 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6955 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6956 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6957 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6958 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6959 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6960 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6961 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6962 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6963 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6964 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6965 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6966 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6967 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6968 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6969 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6970 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6971 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6972 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6973 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6974 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6975 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6976 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6977 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6978 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6979 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6980 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6981 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6982 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6983 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6984 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6985 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6986 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6989 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6990 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6991 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6992 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6993 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6994 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6995 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6996 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6997 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6998 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6999 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7000 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7001 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7002 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7003 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7004 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7005 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7006 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7007 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7008 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7009 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7010 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7011 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7012 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7013 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7014 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7015 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7016 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7017 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7018 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7019 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7020 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7023 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7024 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7025 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7026 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7027 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7028 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7029 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7030 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7031 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7032 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7033 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7034 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7035 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7036 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7037 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7038 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7039 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7040 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7041 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7042 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7043 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7044 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7045 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7046 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7047 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7048 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7049 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7050 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7051 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7052 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7053 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7054 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7057 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7058 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7059 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7060 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7061 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7062 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7063 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7064 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7065 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7066 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7067 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7068 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7069 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7070 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7071 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7072 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7073 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7074 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7075 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7076 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7077 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7078 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7079 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7080 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7081 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7082 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7083 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7084 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7085 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7086 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7087 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7088 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7091 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7092 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7093 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7094 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7095 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7096 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7097 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7098 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7099 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7100 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7101 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7102 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7103 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7104 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7105 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7106 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7107 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7108 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7109 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7110 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7111 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7112 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7113 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7114 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7115 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7116 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7117 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7118 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7119 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7120 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7121 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7122 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7125 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7126 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7127 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7128 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7129 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7130 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7131 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7132 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7133 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7134 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7135 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7136 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7137 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7138 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7139 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7140 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7141 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7142 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7143 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7144 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7145 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7146 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7147 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7148 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7149 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7150 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7151 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7152 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7153 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7154 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7155 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7156 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7159 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7160 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7161 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7162 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7163 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7164 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7165 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7166 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7167 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7168 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7169 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7170 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7171 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7172 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7173 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7174 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7175 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7176 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7177 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7178 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7179 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7180 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7181 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7182 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7183 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7184 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7185 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7186 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7187 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7188 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7189 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7190 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7193 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7194 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7195 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7196 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7197 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7198 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7199 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7200 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7201 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7202 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7203 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7204 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7205 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7206 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7207 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7208 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7209 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7210 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7211 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7212 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7213 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7214 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7215 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7216 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7217 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7218 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7219 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7220 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7221 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7222 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7223 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7224 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7227 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7228 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7229 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7230 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7231 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7232 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7233 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7234 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7235 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7236 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7237 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7238 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7239 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7240 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7241 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7242 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7243 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7244 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7245 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7246 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7247 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7248 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7249 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7250 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7251 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7252 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7253 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7254 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7255 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7256 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7257 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7258 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7261 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7262 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7263 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7264 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7265 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7266 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7267 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7268 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7269 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7270 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7271 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7272 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7273 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7274 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7275 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7276 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7277 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7278 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7279 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7280 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7281 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7282 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7283 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7284 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7285 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7286 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7287 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7288 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7289 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7290 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7291 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7292 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7295 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7296 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7297 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7298 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7299 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7300 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7301 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7302 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7303 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7304 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7305 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7306 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7307 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7308 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7309 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7310 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7311 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7312 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7313 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7314 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7315 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7316 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7317 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7318 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7319 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7320 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7321 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7322 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7323 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7324 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7325 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7326 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7329 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7330 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7331 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7332 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7333 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7334 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7335 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7336 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7337 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7338 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7339 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7340 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7341 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7342 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7343 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7344 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7345 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7346 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7347 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7348 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7349 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7350 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7351 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7352 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7353 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7354 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7355 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7356 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7357 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7358 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7359 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7360 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7363 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7364 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7365 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7366 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7367 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7368 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7369 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7370 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7371 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7372 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7373 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7374 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7375 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7376 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7377 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7378 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7379 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7380 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7381 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7382 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7383 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7384 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7385 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7386 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7387 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7388 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7389 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7390 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7391 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7392 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7393 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7394 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7397 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7398 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7399 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7400 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7401 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7402 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7403 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7404 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7405 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7406 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7407 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7408 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7409 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7410 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7411 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7412 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7413 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7414 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7415 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7416 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7417 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7418 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7419 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7420 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7421 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7422 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7423 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7424 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7425 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7426 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7427 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7428 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7431 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7432 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7433 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7434 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7435 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7436 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7437 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7438 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7439 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7440 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7441 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7442 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7443 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7444 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7445 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7446 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7447 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7448 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7449 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7450 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7451 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7452 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7453 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7454 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7455 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7456 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7457 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7458 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7459 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7460 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7461 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7462 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7471 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7472 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7473 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7475 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7476 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7477 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7478 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7480 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7481 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7482 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7483 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7484 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7485 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7486 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7487 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7488 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7489 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7492 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7493 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7494 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7495 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7496 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7497 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7500 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7501 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7502 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7503 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7504 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7505 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7506 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7507 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7510 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7513 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7516 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7519 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7522 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7524 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7525 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7526 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7528 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7530 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7531 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7532 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7534 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7536 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7537 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7538 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7540 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7541 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7544 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7545 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7546 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7555 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

7556 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

7557 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

7558 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

7559 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

7560 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

7561 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

7562 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

7563 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

7564 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

7565 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

7566 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

7567 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

7568 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

7571 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

7572 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

7573 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

7574 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

7575 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

7576 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

7577 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

7579 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

7580 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

7581 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

7582 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

7583 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

7586 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

7587 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

7589 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

7590 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

7591 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

7592 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

7593 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

7594 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

7595 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

7596 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

7597 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

7598 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

7600 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

7603 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

7604 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

7607 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

7610 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

7611 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

7612 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

7613 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

7614 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

7615 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

7616 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

7617 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

7618 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

7619 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

7620 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

7621 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

7622 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

7623 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

7626 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

7627 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

7628 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

7629 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

7630 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

7631 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

7632 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

7633 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

7636 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

7637 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

7638 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

7641 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

7650 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7651 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7652 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7653 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7654 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7655 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7656 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7657 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7658 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7659 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7662 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7665 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7666 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7669 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7670 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7671 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7672 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7673 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7674 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7675 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7676 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7677 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7678 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7679 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7680 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7681 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7682 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7683 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

7686 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7687 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7688 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7689 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7690 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7691 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7692 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7694 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7695 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7696 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7698 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7701 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7702 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7703 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7704 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7705 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7706 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7707 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7708 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7709 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7710 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7711 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7712 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

7715 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7716 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7717 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7718 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7719 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7720 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7721 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7722 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7723 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7725 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7734 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

7736 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

7737 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

7738 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

7739 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

7740 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

7741 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

7742 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

7743 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

7744 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

7745 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

7746 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

7747 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

7748 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

7749 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

7750 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

7751 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

7752 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

7755 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

7756 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

7757 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

7758 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

7760 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

7761 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

7762 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

7764 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

7765 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

7766 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

7767 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

7768 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

7769 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

7770 
	#DBGMCU_CR_DBG_CAN1_STOP
 ((
uöt32_t
)0x00004000Ë

	)

7771 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

7772 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

7773 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00020000Ë

	)

7774 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00040000Ë

	)

7775 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00080000Ë

	)

7776 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00100000Ë

	)

7777 
	#DBGMCU_CR_DBG_CAN2_STOP
 ((
uöt32_t
)0x00200000Ë

	)

7778 
	#DBGMCU_CR_DBG_TIM15_STOP
 ((
uöt32_t
)0x00400000Ë

	)

7779 
	#DBGMCU_CR_DBG_TIM16_STOP
 ((
uöt32_t
)0x00800000Ë

	)

7780 
	#DBGMCU_CR_DBG_TIM17_STOP
 ((
uöt32_t
)0x01000000Ë

	)

7781 
	#DBGMCU_CR_DBG_TIM12_STOP
 ((
uöt32_t
)0x02000000Ë

	)

7782 
	#DBGMCU_CR_DBG_TIM13_STOP
 ((
uöt32_t
)0x04000000Ë

	)

7783 
	#DBGMCU_CR_DBG_TIM14_STOP
 ((
uöt32_t
)0x08000000Ë

	)

7784 
	#DBGMCU_CR_DBG_TIM9_STOP
 ((
uöt32_t
)0x10000000Ë

	)

7785 
	#DBGMCU_CR_DBG_TIM10_STOP
 ((
uöt32_t
)0x20000000Ë

	)

7786 
	#DBGMCU_CR_DBG_TIM11_STOP
 ((
uöt32_t
)0x40000000Ë

	)

7795 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

7796 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

7797 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

7798 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

7800 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

7801 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

7802 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

7805 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7808 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7811 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

7812 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

7813 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

7814 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

7817 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

7818 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

7819 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

7820 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

7821 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

7822 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

7823 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

7824 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

7825 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

7826 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

7829 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7832 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

7833 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

7835 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

7836 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

7837 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

7838 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

7839 
	#FLASH_OBR_BFB2
 ((
uöt16_t
)0x0020Ë

	)

7842 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7847 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

7848 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

7851 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

7852 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

7855 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

7856 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

7859 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

7860 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

7863 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

7864 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

7867 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

7868 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

7871 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

7872 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

7875 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

7876 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

7878 #ifde‡
STM32F10X_CL


7883 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7884 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7885 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7886 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7887 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7888 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7889 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7890 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7891 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7892 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7893 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7894 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7895 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7896 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7897 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7898 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7899 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7900 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7901 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7902 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7904 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7905 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7906 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7907 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7908 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7909 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7910 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7913 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7914 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7915 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7916 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7917 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7918 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7919 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7920 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7921 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7922 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7923 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7924 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7925 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7926 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7929 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7932 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7935 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7936 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7937 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7938 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7939 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7940 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7941 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7942 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7945 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7948 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7949 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7950 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7951 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7952 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7953 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7954 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7955 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7956 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7957 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7958 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7961 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7962 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7965 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7979 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7980 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7981 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7982 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7983 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7984 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7985 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7988 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7989 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7990 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7991 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7992 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7995 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7996 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7999 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

8002 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8005 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8006 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8007 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8008 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8009 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8010 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8011 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8012 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8013 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8014 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

8017 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8020 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8021 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8022 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8023 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8024 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8025 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8026 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8027 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8028 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8029 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

8032 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8035 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8036 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8037 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8038 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8039 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8040 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8041 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8042 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8043 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8044 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

8047 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8054 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

8055 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

8056 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

8057 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

8060 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

8061 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

8062 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

8065 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

8066 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

8067 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

8070 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

8071 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

8072 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

8075 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

8076 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

8077 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

8080 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8083 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8086 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8089 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8092 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8095 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8102 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

8103 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

8104 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

8105 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

8106 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

8107 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

8110 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

8113 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8116 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8117 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8120 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8123 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8124 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8127 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8130 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8133 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8140 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8141 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8142 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8143 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8144 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8145 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8146 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8147 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8148 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8149 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8150 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8151 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8152 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8153 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8154 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8155 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8156 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8157 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8158 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8159 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8160 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8161 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8162 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8163 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8164 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

8165 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

8166 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

8167 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

8168 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

8169 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

8170 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

8171 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

8172 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

8173 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

8174 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

8175 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

8176 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

8177 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

8180 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8183 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8186 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8189 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8192 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

8193 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

8194 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

8195 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

8197 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

8198 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

8199 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

8200 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

8201 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8202 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

8203 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

8204 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

8205 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

8206 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

8207 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

8208 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8209 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

8210 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

8211 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

8212 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

8213 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

8214 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

8215 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

8216 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

8217 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

8218 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

8219 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

8220 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

8221 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

8222 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

8223 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

8224 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

8225 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

8226 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

8227 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

8228 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

8231 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

8232 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

8233 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

8234 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

8235 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

8236 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

8237 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8238 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

8239 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

8240 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

8241 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

8242 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

8243 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

8244 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

8245 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

8246 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

8247 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

8248 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

8249 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8250 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

8251 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

8252 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

8253 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

8254 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

8257 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

8258 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

8259 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

8260 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

8261 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

8262 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

8263 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

8264 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

8265 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

8266 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

8267 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

8268 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

8269 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

8270 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

8271 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

8274 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

8275 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

8276 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

8277 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

8280 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8283 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8286 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8289 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8300 #ifde‡
USE_STDPERIPH_DRIVER


8301 
	~"°m32f10x_c⁄f.h
"

8308 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

8310 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

8312 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

8314 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

8316 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

8318 
	#READ_REG
(
REG
Ë((REG))

	)

8320 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

8326 #ifde‡
__˝lu•lus


	@USER/stm32f10x_conf.h

23 #i‚de‡
__STM32F10x_CONF_H


24 
	#__STM32F10x_CONF_H


	)

28 
	~"°m32f10x_adc.h
"

29 
	~"°m32f10x_bkp.h
"

30 
	~"°m32f10x_ˇn.h
"

31 
	~"°m32f10x_˚c.h
"

32 
	~"°m32f10x_¸c.h
"

33 
	~"°m32f10x_dac.h
"

34 
	~"°m32f10x_dbgmcu.h
"

35 
	~"°m32f10x_dma.h
"

36 
	~"°m32f10x_exti.h
"

37 
	~"°m32f10x_Êash.h
"

38 
	~"°m32f10x_fsmc.h
"

39 
	~"°m32f10x_gpio.h
"

40 
	~"°m32f10x_i2c.h
"

41 
	~"°m32f10x_iwdg.h
"

42 
	~"°m32f10x_pwr.h
"

43 
	~"°m32f10x_rcc.h
"

44 
	~"°m32f10x_πc.h
"

45 
	~"°m32f10x_sdio.h
"

46 
	~"°m32f10x_•i.h
"

47 
	~"°m32f10x_tim.h
"

48 
	~"°m32f10x_ußπ.h
"

49 
	~"°m32f10x_wwdg.h
"

50 
	~"misc.h
"

59 #ifde‡ 
USE_FULL_ASSERT


68 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

70 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

72 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@USER/stm32f10x_it.c

25 
	~"°m32f10x_ô.h
"

29 
	$NMI_H™dÀr
()

31 
	}
}

33 
	$H¨dFau…_H™dÀr
()

39 
	}
}

41 
	$MemM™age_H™dÀr
()

47 
	}
}

50 
	$BusFau…_H™dÀr
()

56 
	}
}

58 
	$UßgeFau…_H™dÀr
()

64 
	}
}

66 
	$SVC_H™dÀr
()

68 
	}
}

70 
	$DebugM⁄_H™dÀr
()

72 
	}
}

74 
	$PídSV_H™dÀr
()

76 
	}
}

78 
	$SysTick_H™dÀr
()

80 
	}
}

	@USER/stm32f10x_it.h

23 #i‚de‡
__STM32F10x_IT_H


24 
	#__STM32F10x_IT_H


	)

27 
	~"°m32f10x.h
"

34 
NMI_H™dÀr
();

35 
H¨dFau…_H™dÀr
();

36 
MemM™age_H™dÀr
();

37 
BusFau…_H™dÀr
();

38 
UßgeFau…_H™dÀr
();

39 
SVC_H™dÀr
();

40 
DebugM⁄_H™dÀr
();

41 
PídSV_H™dÀr
();

42 
SysTick_H™dÀr
();

	@USER/system_stm32f10x.c

65 
	~"°m32f10x.h
"

106 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| (deföed 
STM32F10X_MD_VL
Ë|| (deföed 
STM32F10X_HD_VL
)

108 
	#SYSCLK_FREQ_24MHz
 24000000

	)

115 
	#SYSCLK_FREQ_72MHz
 72000000

	)

121 #i‡
deföed
 (
STM32F10X_HD
Ë|| (deföed 
STM32F10X_XL
Ë|| (deföed 
STM32F10X_HD_VL
)

128 
	#VECT_TAB_OFFSET
 0x0

	)

151 #ifde‡
SYSCLK_FREQ_HSE


152 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_HSE
;

153 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


154 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_24MHz
;

155 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


156 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_36MHz
;

157 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


158 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_48MHz
;

159 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


160 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_56MHz
;

161 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


162 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_72MHz
;

164 
uöt32_t
 
	gSy°emC‹eClock
 = 
HSI_VALUE
;

167 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

176 
SëSysClock
();

178 #ifde‡
SYSCLK_FREQ_HSE


179 
SëSysClockToHSE
();

180 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


181 
SëSysClockTo24
();

182 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


183 
SëSysClockTo36
();

184 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


185 
SëSysClockTo48
();

186 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


187 
SëSysClockTo56
();

188 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


189 
SëSysClockTo72
();

192 #ifde‡
DATA_IN_ExtSRAM


193 
Sy°emInô_ExtMemCé
();

212 
	$Sy°emInô
 ()

216 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

219 #i‚de‡
STM32F10X_CL


220 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

222 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

226 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

229 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

232 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

234 #ifde‡
STM32F10X_CL


236 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

239 
RCC
->
CIR
 = 0x00FF0000;

242 
RCC
->
CFGR2
 = 0x00000000;

243 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| (
deföed
 
STM32F10X_HD_VL
)

245 
RCC
->
CIR
 = 0x009F0000;

248 
RCC
->
CFGR2
 = 0x00000000;

251 
RCC
->
CIR
 = 0x009F0000;

254 #i‡
	`deföed
 (
STM32F10X_HD
Ë|| (
deföed
 
STM32F10X_XL
Ë|| (deföed 
STM32F10X_HD_VL
)

255 #ifde‡
DATA_IN_ExtSRAM


256 
	`Sy°emInô_ExtMemCé
();

262 
	`SëSysClock
();

264 #ifde‡
VECT_TAB_SRAM


265 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

267 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

269 
	}
}

306 
	$Sy°emC‹eClockUpd©e
 ()

308 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0;

310 #ifde‡ 
STM32F10X_CL


311 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

314 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| (
deföed
 
STM32F10X_HD_VL
)

315 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

319 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

321 
tmp
)

324 
Sy°emC‹eClock
 = 
HSI_VALUE
;

327 
Sy°emC‹eClock
 = 
HSE_VALUE
;

332 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

333 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

335 #i‚de‡
STM32F10X_CL


336 
∂lmuŒ
 = (Öllmull >> 18) + 2;

338 i‡(
∂lsour˚
 == 0x00)

341 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

345 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| (
deföed
 
STM32F10X_HD_VL
)

346 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

348 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

351 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë!(
uöt32_t
)
RESET
)

353 
Sy°emC‹eClock
 = (
HSE_VALUE
 >> 1Ë* 
∂lmuŒ
;

357 
Sy°emC‹eClock
 = 
HSE_VALUE
 * 
∂lmuŒ
;

362 
∂lmuŒ
 =Öllmull >> 18;

364 i‡(
∂lmuŒ
 != 0x0D)

366 
∂lmuŒ
 += 2;

370 
∂lmuŒ
 = 13 / 2;

373 i‡(
∂lsour˚
 == 0x00)

376 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

382 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

383 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

385 i‡(
¥ediv1sour˚
 == 0)

388 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

394 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4) + 1;

395 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8 ) + 2;

396 
Sy°emC‹eClock
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

403 
Sy°emC‹eClock
 = 
HSI_VALUE
;

409 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

411 
Sy°emC‹eClock
 >>
tmp
;

412 
	}
}

419 
	$SëSysClock
()

421 #ifde‡
SYSCLK_FREQ_HSE


422 
	`SëSysClockToHSE
();

423 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


424 
	`SëSysClockTo24
();

425 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


426 
	`SëSysClockTo36
();

427 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


428 
	`SëSysClockTo48
();

429 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


430 
	`SëSysClockTo56
();

431 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


432 
	`SëSysClockTo72
();

437 
	}
}

445 #ifde‡
DATA_IN_ExtSRAM


455 
	$Sy°emInô_ExtMemCé
()

461 
RCC
->
AHBENR
 = 0x00000114;

464 
RCC
->
APB2ENR
 = 0x000001E0;

472 
GPIOD
->
CRL
 = 0x44BB44BB;

473 
GPIOD
->
CRH
 = 0xBBBBBBBB;

475 
GPIOE
->
CRL
 = 0xB44444BB;

476 
GPIOE
->
CRH
 = 0xBBBBBBBB;

478 
GPIOF
->
CRL
 = 0x44BBBBBB;

479 
GPIOF
->
CRH
 = 0xBBBB4444;

481 
GPIOG
->
CRL
 = 0x44BBBBBB;

482 
GPIOG
->
CRH
 = 0x44444B44;

487 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

488 
FSMC_B™k1
->
BTCR
[5] = 0x00000200;

489 
	}
}

492 #ifde‡
SYSCLK_FREQ_HSE


500 
	$SëSysClockToHSE
()

502 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

506 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

511 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

512 
SèπUpCou¡î
++;

513 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

515 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

517 
HSESètus
 = (
uöt32_t
)0x01;

521 
HSESètus
 = (
uöt32_t
)0x00;

524 i‡(
HSESètus
 =(
uöt32_t
)0x01)

527 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL
 && !deföed 
STM32F10X_HD_VL


529 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

532 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

534 #i‚de‡
STM32F10X_CL


535 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

537 i‡(
HSE_VALUE
 <= 24000000)

539 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

543 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

549 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

552 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

555 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

558 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

559 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_HSE
;

562 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x04)

570 
	}
}

571 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


579 
	$SëSysClockTo24
()

581 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

585 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

590 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

591 
SèπUpCou¡î
++;

592 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

594 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

596 
HSESètus
 = (
uöt32_t
)0x01;

600 
HSESètus
 = (
uöt32_t
)0x00;

603 i‡(
HSESètus
 =(
uöt32_t
)0x01)

605 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL
 && !deföed 
STM32F10X_HD_VL


607 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

610 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

611 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

615 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

618 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

621 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

623 #ifde‡
STM32F10X_CL


626 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

627 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

628 
RCC_CFGR_PLLMULL6
);

632 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

633 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

634 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

635 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

638 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

640 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

643 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

645 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

646 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_PREDIV1
 | 
RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 | 
RCC_CFGR_PLLMULL6
);

649 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

650 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL6
);

654 
RCC
->
CR
 |
RCC_CR_PLLON
;

657 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

662 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

663 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

666 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

674 
	}
}

675 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


683 
	$SëSysClockTo36
()

685 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

689 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

694 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

695 
SèπUpCou¡î
++;

696 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

698 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

700 
HSESètus
 = (
uöt32_t
)0x01;

704 
HSESètus
 = (
uöt32_t
)0x00;

707 i‡(
HSESètus
 =(
uöt32_t
)0x01)

710 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

713 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

714 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

717 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

720 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

723 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

725 #ifde‡
STM32F10X_CL


729 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

730 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

731 
RCC_CFGR_PLLMULL9
);

736 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

737 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

738 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

739 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

742 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

744 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

750 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

751 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL9
);

755 
RCC
->
CR
 |
RCC_CR_PLLON
;

758 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

763 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

764 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

767 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

775 
	}
}

776 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


784 
	$SëSysClockTo48
()

786 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

790 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

795 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

796 
SèπUpCou¡î
++;

797 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

799 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

801 
HSESètus
 = (
uöt32_t
)0x01;

805 
HSESètus
 = (
uöt32_t
)0x00;

808 i‡(
HSESètus
 =(
uöt32_t
)0x01)

811 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

814 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

815 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

818 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

821 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

824 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

826 #ifde‡
STM32F10X_CL


831 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

832 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

833 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

834 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

837 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

839 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

845 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

846 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

847 
RCC_CFGR_PLLMULL6
);

850 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

851 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL6
);

855 
RCC
->
CR
 |
RCC_CR_PLLON
;

858 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

863 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

864 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

867 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

875 
	}
}

877 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


885 
	$SëSysClockTo56
()

887 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

891 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

896 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

897 
SèπUpCou¡î
++;

898 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

900 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

902 
HSESètus
 = (
uöt32_t
)0x01;

906 
HSESètus
 = (
uöt32_t
)0x00;

909 i‡(
HSESètus
 =(
uöt32_t
)0x01)

912 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

915 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

916 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

919 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

922 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

925 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

927 #ifde‡
STM32F10X_CL


932 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

933 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

934 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

935 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

938 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

940 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

946 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

947 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

948 
RCC_CFGR_PLLMULL7
);

951 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

952 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL7
);

957 
RCC
->
CR
 |
RCC_CR_PLLON
;

960 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

965 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

966 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

969 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

977 
	}
}

979 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


987 
	$SëSysClockTo72
()

989 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

993 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

998 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

999 
SèπUpCou¡î
++;

1000 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

1002 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

1004 
HSESètus
 = (
uöt32_t
)0x01;

1008 
HSESètus
 = (
uöt32_t
)0x00;

1011 i‡(
HSESètus
 =(
uöt32_t
)0x01)

1014 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

1017 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

1018 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

1022 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

1025 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

1028 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

1030 #ifde‡
STM32F10X_CL


1035 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

1036 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

1037 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

1038 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

1041 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

1043 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

1049 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

1050 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

1051 
RCC_CFGR_PLLMULL9
);

1054 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 |

1055 
RCC_CFGR_PLLMULL
));

1056 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL6
);

1060 
RCC
->
CR
 |
RCC_CR_PLLON
;

1063 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

1068 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

1069 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

1072 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

1080 
	}
}

	@USER/system_stm32f10x.h

33 #i‚de‡
__SYSTEM_STM32F10X_H


34 
	#__SYSTEM_STM32F10X_H


	)

36 #ifde‡
__˝lu•lus


53 
uöt32_t
 
Sy°emC‹eClock
;

79 
Sy°emInô
();

80 
Sy°emC‹eClockUpd©e
();

85 #ifde‡
__˝lu•lus


	@
1
.
0
121
3975
BSP/bsp.c
BSP/bsp.h
CORE/core_cm3.c
CORE/core_cm3.h
STM32F10x_FWLib/inc/misc.h
STM32F10x_FWLib/inc/stm32f10x_adc.h
STM32F10x_FWLib/inc/stm32f10x_bkp.h
STM32F10x_FWLib/inc/stm32f10x_can.h
STM32F10x_FWLib/inc/stm32f10x_cec.h
STM32F10x_FWLib/inc/stm32f10x_crc.h
STM32F10x_FWLib/inc/stm32f10x_dac.h
STM32F10x_FWLib/inc/stm32f10x_dbgmcu.h
STM32F10x_FWLib/inc/stm32f10x_dma.h
STM32F10x_FWLib/inc/stm32f10x_exti.h
STM32F10x_FWLib/inc/stm32f10x_flash.h
STM32F10x_FWLib/inc/stm32f10x_fsmc.h
STM32F10x_FWLib/inc/stm32f10x_gpio.h
STM32F10x_FWLib/inc/stm32f10x_i2c.h
STM32F10x_FWLib/inc/stm32f10x_iwdg.h
STM32F10x_FWLib/inc/stm32f10x_pwr.h
STM32F10x_FWLib/inc/stm32f10x_rcc.h
STM32F10x_FWLib/inc/stm32f10x_rtc.h
STM32F10x_FWLib/inc/stm32f10x_sdio.h
STM32F10x_FWLib/inc/stm32f10x_spi.h
STM32F10x_FWLib/inc/stm32f10x_tim.h
STM32F10x_FWLib/inc/stm32f10x_usart.h
STM32F10x_FWLib/inc/stm32f10x_wwdg.h
STM32F10x_FWLib/src/misc.c
STM32F10x_FWLib/src/stm32f10x_adc.c
STM32F10x_FWLib/src/stm32f10x_bkp.c
STM32F10x_FWLib/src/stm32f10x_can.c
STM32F10x_FWLib/src/stm32f10x_cec.c
STM32F10x_FWLib/src/stm32f10x_crc.c
STM32F10x_FWLib/src/stm32f10x_dac.c
STM32F10x_FWLib/src/stm32f10x_dbgmcu.c
STM32F10x_FWLib/src/stm32f10x_dma.c
STM32F10x_FWLib/src/stm32f10x_exti.c
STM32F10x_FWLib/src/stm32f10x_flash.c
STM32F10x_FWLib/src/stm32f10x_fsmc.c
STM32F10x_FWLib/src/stm32f10x_gpio.c
STM32F10x_FWLib/src/stm32f10x_i2c.c
STM32F10x_FWLib/src/stm32f10x_iwdg.c
STM32F10x_FWLib/src/stm32f10x_pwr.c
STM32F10x_FWLib/src/stm32f10x_rcc.c
STM32F10x_FWLib/src/stm32f10x_rtc.c
STM32F10x_FWLib/src/stm32f10x_sdio.c
STM32F10x_FWLib/src/stm32f10x_spi.c
STM32F10x_FWLib/src/stm32f10x_tim.c
STM32F10x_FWLib/src/stm32f10x_usart.c
STM32F10x_FWLib/src/stm32f10x_wwdg.c
SYSTEM/delay/delay.c
SYSTEM/delay/delay.h
SYSTEM/sys/sys.c
SYSTEM/sys/sys.h
SYSTEM/usart/usart.c
SYSTEM/usart/usart.h
UCOSIII-Task/led_task.c
UCOSIII-Task/led_task.h
UCOSIII-Task/start_task.c
UCOSIII-Task/start_task.h
UCOSIII/UCOS_BSP/uc_bsp.c
UCOSIII/UCOS_BSP/uc_bsp.h
UCOSIII/uC-CPU/ARM-Cortex-M3/GNU/cpu.h
UCOSIII/uC-CPU/ARM-Cortex-M3/GNU/cpu_c.c
UCOSIII/uC-CPU/ARM-Cortex-M3/IAR/cpu.h
UCOSIII/uC-CPU/ARM-Cortex-M3/IAR/cpu_c.c
UCOSIII/uC-CPU/ARM-Cortex-M3/RealView/cpu.h
UCOSIII/uC-CPU/ARM-Cortex-M3/RealView/cpu_c.c
UCOSIII/uC-CPU/cpu_core.c
UCOSIII/uC-CPU/cpu_core.h
UCOSIII/uC-CPU/cpu_def.h
UCOSIII/uC-LIB/lib_ascii.c
UCOSIII/uC-LIB/lib_ascii.h
UCOSIII/uC-LIB/lib_def.h
UCOSIII/uC-LIB/lib_math.c
UCOSIII/uC-LIB/lib_math.h
UCOSIII/uC-LIB/lib_mem.c
UCOSIII/uC-LIB/lib_mem.h
UCOSIII/uC-LIB/lib_str.c
UCOSIII/uC-LIB/lib_str.h
UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/GNU/os_cpu.h
UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/GNU/os_cpu_c.c
UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/IAR/os_cpu.h
UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/IAR/os_cpu_c.c
UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/RealView/os_cpu.h
UCOSIII/uCOS-III/Ports/ARM-Cortex-M3/Generic/RealView/os_cpu_c.c
UCOSIII/uCOS-III/Source/os.h
UCOSIII/uCOS-III/Source/os_cfg_app.c
UCOSIII/uCOS-III/Source/os_core.c
UCOSIII/uCOS-III/Source/os_dbg.c
UCOSIII/uCOS-III/Source/os_flag.c
UCOSIII/uCOS-III/Source/os_int.c
UCOSIII/uCOS-III/Source/os_mem.c
UCOSIII/uCOS-III/Source/os_msg.c
UCOSIII/uCOS-III/Source/os_mutex.c
UCOSIII/uCOS-III/Source/os_pend_multi.c
UCOSIII/uCOS-III/Source/os_prio.c
UCOSIII/uCOS-III/Source/os_q.c
UCOSIII/uCOS-III/Source/os_sem.c
UCOSIII/uCOS-III/Source/os_stat.c
UCOSIII/uCOS-III/Source/os_task.c
UCOSIII/uCOS-III/Source/os_tick.c
UCOSIII/uCOS-III/Source/os_time.c
UCOSIII/uCOS-III/Source/os_tmr.c
UCOSIII/uCOS-III/Source/os_type.h
UCOSIII/uCOS-III/Source/os_var.c
UCOSIII/uCOS_CONFIG/app_cfg.h
UCOSIII/uCOS_CONFIG/cpu_cfg.h
UCOSIII/uCOS_CONFIG/includes.h
UCOSIII/uCOS_CONFIG/lib_cfg.h
UCOSIII/uCOS_CONFIG/os_app_hooks.c
UCOSIII/uCOS_CONFIG/os_app_hooks.h
UCOSIII/uCOS_CONFIG/os_cfg.h
UCOSIII/uCOS_CONFIG/os_cfg_app.h
USER/main.c
USER/stm32f10x.h
USER/stm32f10x_conf.h
USER/stm32f10x_it.c
USER/stm32f10x_it.h
USER/system_stm32f10x.c
USER/system_stm32f10x.h
